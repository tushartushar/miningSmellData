Implementation smell,Namespace,Class,File,Method,Description
Long Method,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,Login,The method has 148 lines of code.
Long Method,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,Update,The method has 269 lines of code.
Long Method,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The method has 102 lines of code.
Long Method,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The method has 103 lines of code.
Long Method,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The method has 150 lines of code.
Long Method,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The method has 159 lines of code.
Long Method,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The method has 113 lines of code.
Long Method,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The method has 110 lines of code.
Long Method,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The method has 213 lines of code.
Long Method,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The method has 231 lines of code.
Long Method,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The method has 108 lines of code.
Long Method,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The method has 111 lines of code.
Long Method,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The method has 207 lines of code.
Long Method,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The method has 213 lines of code.
Complex Method,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,Login,Cyclomatic complexity of the method is 13
Complex Method,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,Update,Cyclomatic complexity of the method is 239
Complex Method,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,AuthQrcode,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,Cyclomatic complexity of the method is 53
Complex Method,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,Cyclomatic complexity of the method is 37
Complex Method,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,Cyclomatic complexity of the method is 37
Complex Method,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,Cyclomatic complexity of the method is 81
Complex Method,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,Cyclomatic complexity of the method is 20
Complex Method,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,Cyclomatic complexity of the method is 31
Complex Method,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,ContactReportResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,Geolocation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,Cyclomatic complexity of the method is 41
Complex Method,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,Cyclomatic complexity of the method is 55
Complex Method,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,Cyclomatic complexity of the method is 45
Complex Method,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,Cyclomatic complexity of the method is 45
Complex Method,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,Cyclomatic complexity of the method is 117
Complex Method,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,Cyclomatic complexity of the method is 29
Complex Method,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,Cyclomatic complexity of the method is 31
Complex Method,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,Cyclomatic complexity of the method is 31
Complex Method,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,Cyclomatic complexity of the method is 57
Complex Method,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,LineSharp.Datatypes,ProximityMatchCandidateResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,RegisterWithSnsIdResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,Cyclomatic complexity of the method is 105
Complex Method,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,Cyclomatic complexity of the method is 29
Complex Method,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,SnsFriendModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,Cyclomatic complexity of the method is 39
Complex Method,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,LineSharp.Datatypes,TMessageBoxWrapUpResponse,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,UserAuthStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,Cyclomatic complexity of the method is 21
Long Statement,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,VerifyPin,The length of the statement  "	Debug.Print ("[PinVerification] Retrieved response from server. Reading datastream." + "(Content-Length: " + webResponse.ContentLength + ")"); " is 142.
Long Statement,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,VerifyPin,The length of the statement  "	if (pin_verified.Result != null && !String.IsNullOrEmpty (pin_verified.Result.Verifier) && !String.IsNullOrEmpty (pin_verified.Result.AuthPhase) && pin_verified.Result.AuthPhase.Equals ("QRCODE_VERIFIED")) { " is 207.
Long Statement,LineSharp.Net,LineTransport,F:\newReposMay17\Banandana_LineSharp\LINE\Net\LineTransport.cs,Flush,The length of the statement  "		Debug.Print ("[LineTransport] Attempting to flush with byte length of " + data.Length + "' accesskey of " + AccessKey + "' X-LS of " + _lsnumber + " and URL of " + TargetUrl); " is 175.
Complex Conditional,LineSharp,LineClient,F:\newReposMay17\Banandana_LineSharp\LINE\LineClient.cs,VerifyPin,The conditional expression  "pin_verified.Result != null && !String.IsNullOrEmpty (pin_verified.Result.Verifier) && !String.IsNullOrEmpty (pin_verified.Result.AuthPhase) && pin_verified.Result.AuthPhase.Equals ("QRCODE_VERIFIED")"  is complex.
Magic Number,LineSharp,OperationHandler,F:\newReposMay17\Banandana_LineSharp\LINE\OperationHandler.cs,Listen,The following statement contains a magic number: while (true) {  	Debug.Print ("[OpHandler] Fetching operations with oprev=" + oprev);  	byte[] fetch_operations_response = connection.CallApi (URL.P' Serial.Serialize ("send_fetchOperations"' new object[] {  		oprev'  		50  	}));  	List<Operation> fetch = (List<Operation>)Serial.Deserialize ("recv_fetchOperations"' fetch_operations_response);  	//List<Operation> fetch = service.fetchOperations(oprev' 50);  	Debug.Print ("[OpHandler] Retrieved operation list of " + fetch.Count);  	for (int i = 0; i < fetch.Count; i++) {  		if (fetch [i].Type != OpType.END_OF_OPERATION) {  			oprev = fetch [i].Revision;  			//Register the operation recieved to the LineClient.  			if (_client != null) {  				Debug.Print ("[OpHandler] Dispatching operations.");  				_client.RegisterOperation (fetch [i]);  			} else  				Debug.Print ("[OpHandler] Client is null' cannot dispatch operation.");  		}  	}  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < hexString.Length; i += 2) {  	string hexVal = hexString.Substring (i' 2);  	int val = Convert.ToInt32 (hexVal' 16);  	bytes.Add (BitConverter.GetBytes (val) [0]);  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < hexString.Length; i += 2) {  	string hexVal = hexString.Substring (i' 2);  	int val = Convert.ToInt32 (hexVal' 16);  	bytes.Add (BitConverter.GetBytes (val) [0]);  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: for (int i = 0; i < hexString.Length; i += 2) {  	string hexVal = hexString.Substring (i' 2);  	int val = Convert.ToInt32 (hexVal' 16);  	bytes.Add (BitConverter.GetBytes (val) [0]);  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: i += 2
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: for (int i = 0; i < ExponentByteCount; i++) {  	if (exponent.Substring (i * 2' 2) == "01") {  		exp [i] = 1;  	} else  		exp [i] = 0;  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: for (int i = 0; i < ExponentByteCount; i++) {  	if (exponent.Substring (i * 2' 2) == "01") {  		exp [i] = 1;  	} else  		exp [i] = 0;  }  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: if (exponent.Substring (i * 2' 2) == "01") {  	exp [i] = 1;  } else  	exp [i] = 0;  
Magic Number,LineSharp.Functions,Bytes,F:\newReposMay17\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: if (exponent.Substring (i * 2' 2) == "01") {  	exp [i] = 1;  } else  	exp [i] = 0;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Index = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			ForceUpdate = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			PictureUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Index = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		ForceUpdate = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		PictureUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (__isset.forceUpdate) {  	field.Name = "forceUpdate";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (ForceUpdate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (Text != null && __isset.text) {  	field.Name = "text";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Text);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (PictureUrl != null && __isset.pictureUrl) {  	field.Name = "pictureUrl";  	field.Type = TType.String;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PictureUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: if (ThumbnailUrl != null && __isset.thumbnailUrl) {  	field.Name = "thumbnailUrl";  	field.Type = TType.String;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ThumbnailUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Announcement,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,LineSharp.Datatypes,AuthQrcode,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Qrcode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,AuthQrcode,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Qrcode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,AuthQrcode,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Write,The following statement contains a magic number: if (Verifier != null && __isset.verifier) {  	field.Name = "verifier";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Verifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,AuthQrcode,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			FreeCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			PayedCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			TotalCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			FreeCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			PayedCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			TotalCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			FreeCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			PayedCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			TotalCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		FreeCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		PayedCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		TotalCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		FreeCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		PayedCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		TotalCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		FreeCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		PayedCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		TotalCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: if (__isset.payedCoinBalance) {  	field.Name = "payedCoinBalance";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (PayedCoinBalance);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: if (__isset.totalCoinBalance) {  	field.Name = "totalCoinBalance";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (TotalCoinBalance);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: if (__isset.rewardCoinBalance) {  	field.Name = "rewardCoinBalance";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (RewardCoinBalance);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Coin,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			PayDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			CoinBalance = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			Refund = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			PaySeq = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			CurrencySign = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Payload = new CoinPayLoad ();  			Payload.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		PayDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		CoinBalance = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		Refund = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		PaySeq = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		CurrencySign = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Payload = new CoinPayLoad ();  		Payload.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (__isset.coinBalance) {  	field.Name = "coinBalance";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (CoinBalance);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (__isset.coin) {  	field.Name = "coin";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Coin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (Price != null && __isset.price) {  	field.Name = "price";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Price);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (__isset.refund) {  	field.Name = "refund";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Refund);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (PaySeq != null && __isset.paySeq) {  	field.Name = "paySeq";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PaySeq);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (CurrencySign != null && __isset.currencySign) {  	field.Name = "currencySign";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CurrencySign);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (DisplayPrice != null && __isset.displayPrice) {  	field.Name = "displayPrice";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayPrice);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (Payload != null && __isset.payload) {  	field.Name = "payload";  	field.Type = TType.Struct;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	Payload.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: if (ChannelId != null && __isset.channelId) {  	field.Name = "channelId";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ChannelId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistory,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Start = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Eddt = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Start = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Eddt = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Start = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Eddt = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Start = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Eddt = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Start = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Eddt = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Start = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Eddt = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Start = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Eddt = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Start = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Eddt = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: if (__isset.size) {  	field.Name = "size";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Size);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: if (Language != null && __isset.language) {  	field.Name = "language";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Language);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: if (Eddt != null && __isset.eddt) {  	field.Name = "eddt";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Eddt);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: if (__isset.appStoreCode) {  	field.Name = "appStoreCode";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)AppStoreCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Historys = new List<CoinHistory> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					CoinHistory _elem2 = new CoinHistory ();  					_elem2 = new CoinHistory ();  					_elem2.Read (iprot);  					Historys.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Balance = new Coin ();  			Balance.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Historys = new List<CoinHistory> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					CoinHistory _elem2 = new CoinHistory ();  					_elem2 = new CoinHistory ();  					_elem2.Read (iprot);  					Historys.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Balance = new Coin ();  			Balance.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Historys = new List<CoinHistory> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				CoinHistory _elem2 = new CoinHistory ();  				_elem2 = new CoinHistory ();  				_elem2.Read (iprot);  				Historys.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Balance = new Coin ();  		Balance.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Historys = new List<CoinHistory> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				CoinHistory _elem2 = new CoinHistory ();  				_elem2 = new CoinHistory ();  				_elem2.Read (iprot);  				Historys.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Balance = new Coin ();  		Balance.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: if (Balance != null && __isset.balance) {  	field.Name = "balance";  	field.Type = TType.Struct;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	Balance.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: if (__isset.hasNext) {  	field.Name = "hasNext";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (HasNext);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinHistoryResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			PayCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (PayloadType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			PayCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (PayloadType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			PayCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (PayloadType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			RewardCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		PayCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (PayloadType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		PayCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (PayloadType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		PayCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (PayloadType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		RewardCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: if (__isset.freeCoin) {  	field.Name = "freeCoin";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (FreeCoin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: if (__isset.type) {  	field.Name = "type";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Type);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: if (__isset.rewardCoin) {  	field.Name = "rewardCoin";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (RewardCoin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPayLoad,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ItemId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Coin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			FreeCoin = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			DisplayPrice = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Desc = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ItemId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Coin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		FreeCoin = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		DisplayPrice = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Desc = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (__isset.coin) {  	field.Name = "coin";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Coin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (__isset.freeCoin) {  	field.Name = "freeCoin";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (FreeCoin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (Price != null && __isset.price) {  	field.Name = "price";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Price);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (DisplayPrice != null && __isset.displayPrice) {  	field.Name = "displayPrice";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayPrice);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: if (Desc != null && __isset.desc) {  	field.Name = "desc";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Desc);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinProductItem,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Country = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			PgCode = (PaymentPgType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			RedirectUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Country = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		PgCode = (PaymentPgType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		RedirectUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (Country != null && __isset.country) {  	field.Name = "country";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Country);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (Price != null && __isset.price) {  	field.Name = "price";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Price);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (__isset.appStoreCode) {  	field.Name = "appStoreCode";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)AppStoreCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (Language != null && __isset.language) {  	field.Name = "language";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Language);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (__isset.pgCode) {  	field.Name = "pgCode";  	field.Type = TType.I32;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)PgCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: if (RedirectUrl != null && __isset.redirectUrl) {  	field.Name = "redirectUrl";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RedirectUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: if (__isset.modifiedTime) {  	field.Name = "modifiedTime";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ModifiedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: if (__isset.status) {  	field.Name = "status";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Status);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: if (__isset.settings) {  	field.Name = "settings";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Settings);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: if (DisplayNameOverridden != null && __isset.displayNameOverridden) {  	field.Name = "displayNameOverridden";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayNameOverridden);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,CompactContact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			Type = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Status = (ContactStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			Relation = (ContactRelation)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.String) {  			DisplayNameOverridden = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I64) {  			FavoriteTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			CapableVoiceCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			CapableVideoCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			CapableMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.Bool) {  			CapableBuddy = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 35:  		if (field.Type == TType.I32) {  			Attributes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 36:  		if (field.Type == TType.I64) {  			Settings = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 37:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		Type = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Status = (ContactStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		Relation = (ContactRelation)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.String) {  		DisplayNameOverridden = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I64) {  		FavoriteTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		CapableVoiceCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		CapableVideoCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		CapableMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.Bool) {  		CapableBuddy = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 35:  	if (field.Type == TType.I32) {  		Attributes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 36:  	if (field.Type == TType.I64) {  		Settings = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 37:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.type) {  	field.Name = "type";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Type);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.status) {  	field.Name = "status";  	field.Type = TType.I32;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Status);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.relation) {  	field.Name = "relation";  	field.Type = TType.I32;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Relation);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (DisplayName != null && __isset.displayName) {  	field.Name = "displayName";  	field.Type = TType.String;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (PhoneticName != null && __isset.phoneticName) {  	field.Name = "phoneticName";  	field.Type = TType.String;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PhoneticName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (PictureStatus != null && __isset.pictureStatus) {  	field.Name = "pictureStatus";  	field.Type = TType.String;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PictureStatus);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (ThumbnailUrl != null && __isset.thumbnailUrl) {  	field.Name = "thumbnailUrl";  	field.Type = TType.String;  	field.ID = 25;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ThumbnailUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 25;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (StatusMessage != null && __isset.statusMessage) {  	field.Name = "statusMessage";  	field.Type = TType.String;  	field.ID = 26;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (StatusMessage);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 26;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (DisplayNameOverridden != null && __isset.displayNameOverridden) {  	field.Name = "displayNameOverridden";  	field.Type = TType.String;  	field.ID = 27;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayNameOverridden);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 27;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.favoriteTime) {  	field.Name = "favoriteTime";  	field.Type = TType.I64;  	field.ID = 28;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (FavoriteTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 28;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.capableVoiceCall) {  	field.Name = "capableVoiceCall";  	field.Type = TType.Bool;  	field.ID = 31;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (CapableVoiceCall);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 31;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.capableVideoCall) {  	field.Name = "capableVideoCall";  	field.Type = TType.Bool;  	field.ID = 32;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (CapableVideoCall);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 32;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.capableMyhome) {  	field.Name = "capableMyhome";  	field.Type = TType.Bool;  	field.ID = 33;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (CapableMyhome);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 33;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.capableBuddy) {  	field.Name = "capableBuddy";  	field.Type = TType.Bool;  	field.ID = 34;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (CapableBuddy);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 34;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.attributes) {  	field.Name = "attributes";  	field.Type = TType.I32;  	field.ID = 35;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Attributes);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 35;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (__isset.settings) {  	field.Name = "settings";  	field.Type = TType.I64;  	field.ID = 36;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Settings);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 36;  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: if (PicturePath != null && __isset.picturePath) {  	field.Name = "picturePath";  	field.Type = TType.String;  	field.ID = 37;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PicturePath);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Contact,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 37;  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (ModificationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				Phones = new List<string> ();  				TList _list4 = iprot.ReadListBegin ();  				for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  					string _elem6 = null;  					_elem6 = iprot.ReadString ();  					Phones.Add (_elem6);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				Emails = new List<string> ();  				TList _list7 = iprot.ReadListBegin ();  				for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  					string _elem9 = null;  					_elem9 = iprot.ReadString ();  					Emails.Add (_elem9);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Userids = new List<string> ();  				TList _list10 = iprot.ReadListBegin ();  				for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  					string _elem12 = null;  					_elem12 = iprot.ReadString ();  					Userids.Add (_elem12);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (ModificationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				Phones = new List<string> ();  				TList _list4 = iprot.ReadListBegin ();  				for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  					string _elem6 = null;  					_elem6 = iprot.ReadString ();  					Phones.Add (_elem6);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				Emails = new List<string> ();  				TList _list7 = iprot.ReadListBegin ();  				for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  					string _elem9 = null;  					_elem9 = iprot.ReadString ();  					Emails.Add (_elem9);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Userids = new List<string> ();  				TList _list10 = iprot.ReadListBegin ();  				for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  					string _elem12 = null;  					_elem12 = iprot.ReadString ();  					Userids.Add (_elem12);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (ModificationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				Phones = new List<string> ();  				TList _list4 = iprot.ReadListBegin ();  				for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  					string _elem6 = null;  					_elem6 = iprot.ReadString ();  					Phones.Add (_elem6);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				Emails = new List<string> ();  				TList _list7 = iprot.ReadListBegin ();  				for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  					string _elem9 = null;  					_elem9 = iprot.ReadString ();  					Emails.Add (_elem9);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Userids = new List<string> ();  				TList _list10 = iprot.ReadListBegin ();  				for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  					string _elem12 = null;  					_elem12 = iprot.ReadString ();  					Userids.Add (_elem12);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (ModificationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				Phones = new List<string> ();  				TList _list4 = iprot.ReadListBegin ();  				for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  					string _elem6 = null;  					_elem6 = iprot.ReadString ();  					Phones.Add (_elem6);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				Emails = new List<string> ();  				TList _list7 = iprot.ReadListBegin ();  				for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  					string _elem9 = null;  					_elem9 = iprot.ReadString ();  					Emails.Add (_elem9);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Userids = new List<string> ();  				TList _list10 = iprot.ReadListBegin ();  				for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  					string _elem12 = null;  					_elem12 = iprot.ReadString ();  					Userids.Add (_elem12);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (ModificationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			Phones = new List<string> ();  			TList _list4 = iprot.ReadListBegin ();  			for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  				string _elem6 = null;  				_elem6 = iprot.ReadString ();  				Phones.Add (_elem6);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			Emails = new List<string> ();  			TList _list7 = iprot.ReadListBegin ();  			for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  				string _elem9 = null;  				_elem9 = iprot.ReadString ();  				Emails.Add (_elem9);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Userids = new List<string> ();  			TList _list10 = iprot.ReadListBegin ();  			for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  				string _elem12 = null;  				_elem12 = iprot.ReadString ();  				Userids.Add (_elem12);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (ModificationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			Phones = new List<string> ();  			TList _list4 = iprot.ReadListBegin ();  			for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  				string _elem6 = null;  				_elem6 = iprot.ReadString ();  				Phones.Add (_elem6);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			Emails = new List<string> ();  			TList _list7 = iprot.ReadListBegin ();  			for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  				string _elem9 = null;  				_elem9 = iprot.ReadString ();  				Emails.Add (_elem9);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Userids = new List<string> ();  			TList _list10 = iprot.ReadListBegin ();  			for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  				string _elem12 = null;  				_elem12 = iprot.ReadString ();  				Userids.Add (_elem12);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (ModificationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			Phones = new List<string> ();  			TList _list4 = iprot.ReadListBegin ();  			for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  				string _elem6 = null;  				_elem6 = iprot.ReadString ();  				Phones.Add (_elem6);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			Emails = new List<string> ();  			TList _list7 = iprot.ReadListBegin ();  			for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  				string _elem9 = null;  				_elem9 = iprot.ReadString ();  				Emails.Add (_elem9);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Userids = new List<string> ();  			TList _list10 = iprot.ReadListBegin ();  			for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  				string _elem12 = null;  				_elem12 = iprot.ReadString ();  				Userids.Add (_elem12);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (ModificationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			Phones = new List<string> ();  			TList _list4 = iprot.ReadListBegin ();  			for (int _i5 = 0; _i5 < _list4.Count; ++_i5) {  				string _elem6 = null;  				_elem6 = iprot.ReadString ();  				Phones.Add (_elem6);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			Emails = new List<string> ();  			TList _list7 = iprot.ReadListBegin ();  			for (int _i8 = 0; _i8 < _list7.Count; ++_i8) {  				string _elem9 = null;  				_elem9 = iprot.ReadString ();  				Emails.Add (_elem9);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Userids = new List<string> ();  			TList _list10 = iprot.ReadListBegin ();  			for (int _i11 = 0; _i11 < _list10.Count; ++_i11) {  				string _elem12 = null;  				_elem12 = iprot.ReadString ();  				Userids.Add (_elem12);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: if (Luid != null && __isset.luid) {  	field.Name = "luid";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Luid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: if (Phones != null && __isset.phones) {  	field.Name = "phones";  	field.Type = TType.List;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' Phones.Count));  		foreach (string _iter13 in Phones) {  			oprot.WriteString (_iter13);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: if (Emails != null && __isset.emails) {  	field.Name = "emails";  	field.Type = TType.List;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' Emails.Count));  		foreach (string _iter14 in Emails) {  			oprot.WriteString (_iter14);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: if (Userids != null && __isset.userids) {  	field.Name = "userids";  	field.Type = TType.List;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' Userids.Count));  		foreach (string _iter15 in Userids) {  			oprot.WriteString (_iter15);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ContactType = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ContactKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ContactType = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ContactKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Luid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ContactType = (ContactType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			ContactKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ContactType = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ContactKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ContactType = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ContactKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Luid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ContactType = (ContactType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		ContactKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: if (Luid != null && __isset.luid) {  	field.Name = "luid";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Luid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: if (__isset.contactType) {  	field.Name = "contactType";  	field.Type = TType.I32;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ContactType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: if (ContactKey != null && __isset.contactKey) {  	field.Name = "contactKey";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ContactKey);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Exists = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Exists = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Exists = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Exists = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: if (__isset.exists) {  	field.Name = "exists";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Exists);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: if (Contact != null && __isset.contact) {  	field.Name = "contact";  	field.Type = TType.Struct;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	Contact.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReport,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,ContactReportResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Exists = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReportResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Exists = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ContactReportResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Write,The following statement contains a magic number: if (__isset.exists) {  	field.Name = "exists";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Exists);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ContactReportResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DeviceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SystemVersion = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Model = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			CarrierCode = (CarrierCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			CarrierName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DeviceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SystemVersion = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Model = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		CarrierCode = (CarrierCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		CarrierName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (SystemName != null && __isset.systemName) {  	field.Name = "systemName";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SystemName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (SystemVersion != null && __isset.systemVersion) {  	field.Name = "systemVersion";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SystemVersion);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (Model != null && __isset.model) {  	field.Name = "model";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Model);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (__isset.carrierCode) {  	field.Name = "carrierCode";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)CarrierCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (CarrierName != null && __isset.carrierName) {  	field.Name = "carrierName";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CarrierName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: if (__isset.applicationType) {  	field.Name = "applicationType";  	field.Type = TType.I32;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ApplicationType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,DeviceInfo,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			UsePasswordSet = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Password = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IgnoreDuplication = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			UsePasswordSet = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Password = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IgnoreDuplication = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			UsePasswordSet = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Password = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IgnoreDuplication = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		UsePasswordSet = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Password = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IgnoreDuplication = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		UsePasswordSet = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Password = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IgnoreDuplication = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		UsePasswordSet = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Password = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IgnoreDuplication = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: if (Email != null && __isset.email) {  	field.Name = "email";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Email);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: if (Password != null && __isset.password) {  	field.Name = "password";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Password);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: if (__isset.ignoreDuplication) {  	field.Name = "ignoreDuplication";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IgnoreDuplication);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			TargetEmail = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			TargetEmail = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		TargetEmail = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		TargetEmail = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: if (Verifier != null && __isset.verifier) {  	field.Name = "verifier";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Verifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: if (TargetEmail != null && __isset.targetEmail) {  	field.Name = "targetEmail";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (TargetEmail);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Geolocation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Geolocation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Geolocation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Write,The following statement contains a magic number: if (__isset.latitude) {  	field.Name = "latitude";  	field.Type = TType.Double;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Latitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Geolocation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.List) {  			{  				Members = new List<Contact> ();  				TList _list16 = iprot.ReadListBegin ();  				for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  					Contact _elem18 = new Contact ();  					_elem18 = new Contact ();  					_elem18.Read (iprot);  					Members.Add (_elem18);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Struct) {  			Creator = new Contact ();  			Creator.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.List) {  			{  				Invitee = new List<Contact> ();  				TList _list19 = iprot.ReadListBegin ();  				for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  					Contact _elem21 = new Contact ();  					_elem21 = new Contact ();  					_elem21.Read (iprot);  					Invitee.Add (_elem21);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.List) {  		{  			Members = new List<Contact> ();  			TList _list16 = iprot.ReadListBegin ();  			for (int _i17 = 0; _i17 < _list16.Count; ++_i17) {  				Contact _elem18 = new Contact ();  				_elem18 = new Contact ();  				_elem18.Read (iprot);  				Members.Add (_elem18);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Struct) {  		Creator = new Contact ();  		Creator.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.List) {  		{  			Invitee = new List<Contact> ();  			TList _list19 = iprot.ReadListBegin ();  			for (int _i20 = 0; _i20 < _list19.Count; ++_i20) {  				Contact _elem21 = new Contact ();  				_elem21 = new Contact ();  				_elem21.Read (iprot);  				Invitee.Add (_elem21);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (PictureStatus != null && __isset.pictureStatus) {  	field.Name = "pictureStatus";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PictureStatus);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (Members != null && __isset.members) {  	field.Name = "members";  	field.Type = TType.List;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Members.Count));  		foreach (Contact _iter22 in Members) {  			_iter22.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (Creator != null && __isset.creator) {  	field.Name = "creator";  	field.Type = TType.Struct;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	Creator.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (Invitee != null && __isset.invitee) {  	field.Name = "invitee";  	field.Type = TType.List;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Invitee.Count));  		foreach (Contact _iter23 in Invitee) {  			_iter23.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: if (__isset.notificationDisabled) {  	field.Name = "notificationDisabled";  	field.Type = TType.Bool;  	field.ID = 31;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationDisabled);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Group,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 31;  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Provider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Identifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Password = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Provider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Identifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Password = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Provider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Identifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Password = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Provider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Identifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Password = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: if (Identifier != null && __isset.identifier) {  	field.Name = "identifier";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Identifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: if (Password != null && __isset.password) {  	field.Name = "password";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Password);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,IdentityCredential,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Address = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Address = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Address = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Address = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Address = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Address = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Address = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Address = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: if (Address != null && __isset.address) {  	field.Name = "address";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Address);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: if (__isset.latitude) {  	field.Name = "latitude";  	field.Type = TType.Double;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Latitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: if (__isset.longitude) {  	field.Name = "longitude";  	field.Type = TType.Double;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Longitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: if (Phone != null && __isset.phone) {  	field.Name = "phone";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Phone);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Location,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			AuthToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Certificate = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PinCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Type = (LoginResultType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			AuthToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Certificate = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PinCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Type = (LoginResultType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			AuthToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Certificate = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PinCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Type = (LoginResultType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			AuthToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Certificate = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Verifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PinCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			Type = (LoginResultType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		AuthToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Certificate = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PinCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Type = (LoginResultType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		AuthToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Certificate = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PinCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Type = (LoginResultType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		AuthToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Certificate = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PinCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Type = (LoginResultType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		AuthToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Certificate = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Verifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PinCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		Type = (LoginResultType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: if (Certificate != null && __isset.certificate) {  	field.Name = "certificate";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Certificate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: if (Verifier != null && __isset.verifier) {  	field.Name = "verifier";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Verifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: if (PinCode != null && __isset.pinCode) {  	field.Name = "pinCode";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PinCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: if (__isset.type) {  	field.Name = "type";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Type);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			TokenKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			AccessLocation = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			TokenKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			AccessLocation = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			TokenKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			AccessLocation = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			TokenKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			ApplicationType = (ApplicationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			SystemName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			AccessLocation = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		TokenKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		AccessLocation = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		TokenKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		AccessLocation = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		TokenKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		AccessLocation = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		TokenKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		ApplicationType = (ApplicationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		SystemName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		AccessLocation = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: if (__isset.expirationTime) {  	field.Name = "expirationTime";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ExpirationTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: if (__isset.applicationType) {  	field.Name = "applicationType";  	field.Type = TType.I32;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ApplicationType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: if (SystemName != null && __isset.systemName) {  	field.Name = "systemName";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SystemName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: if (AccessLocation != null && __isset.accessLocation) {  	field.Name = "accessLocation";  	field.Type = TType.String;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (AccessLocation);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,LoginSession,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			From = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			To = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			ToType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			DeliveredTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Text = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Location = new Location ();  			Location.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			HasContent = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			ContentType = (ContentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			ContentPreview = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Map) {  			{  				ContentMetadata = new Dictionary<string' string> ();  				TMap _map24 = iprot.ReadMapBegin ();  				for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  					string _key26;  					string _val27;  					_key26 = iprot.ReadString ();  					_val27 = iprot.ReadString ();  					ContentMetadata [_key26] = _val27;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		From = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		To = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		ToType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		DeliveredTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Text = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Location = new Location ();  		Location.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		HasContent = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		ContentType = (ContentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		ContentPreview = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Map) {  		{  			ContentMetadata = new Dictionary<string' string> ();  			TMap _map24 = iprot.ReadMapBegin ();  			for (int _i25 = 0; _i25 < _map24.Count; ++_i25) {  				string _key26;  				string _val27;  				_key26 = iprot.ReadString ();  				_val27 = iprot.ReadString ();  				ContentMetadata [_key26] = _val27;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (To != null && __isset.to) {  	field.Name = "to";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (To);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (__isset.toType) {  	field.Name = "toType";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ToType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (Id != null && __isset.id) {  	field.Name = "id";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Id);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (__isset.deliveredTime) {  	field.Name = "deliveredTime";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (DeliveredTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (Text != null && __isset.text) {  	field.Name = "text";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Text);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (Location != null && __isset.location) {  	field.Name = "location";  	field.Type = TType.Struct;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	Location.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (__isset.hasContent) {  	field.Name = "hasContent";  	field.Type = TType.Bool;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (HasContent);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (__isset.contentType) {  	field.Name = "contentType";  	field.Type = TType.I32;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ContentType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (ContentPreview != null && __isset.contentPreview) {  	field.Name = "contentPreview";  	field.Type = TType.String;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteBinary (ContentPreview);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: if (ContentMetadata != null && __isset.contentMetadata) {  	field.Name = "contentMetadata";  	field.Type = TType.Map;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.String' ContentMetadata.Count));  		foreach (string _iter28 in ContentMetadata.Keys) {  			oprot.WriteString (_iter28);  			oprot.WriteString (ContentMetadata [_iter28]);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Message,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Revision = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Type = (OpType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			ReqSeq = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Checksum = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Status = (OpStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Param1 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Param2 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Param3 = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Struct) {  			Message = new Message ();  			Message.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Revision = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Type = (OpType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		ReqSeq = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Checksum = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Status = (OpStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Param1 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Param2 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Param3 = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Struct) {  		Message = new Message ();  		Message.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (__isset.type) {  	field.Name = "type";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Type);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (__isset.reqSeq) {  	field.Name = "reqSeq";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ReqSeq);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (Checksum != null && __isset.checksum) {  	field.Name = "checksum";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Checksum);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (__isset.status) {  	field.Name = "status";  	field.Type = TType.I32;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Status);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (Param1 != null && __isset.param1) {  	field.Name = "param1";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Param1);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (Param2 != null && __isset.param2) {  	field.Name = "param2";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Param2);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (Param3 != null && __isset.param3) {  	field.Name = "param3";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Param3);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: if (Message != null && __isset.message) {  	field.Name = "message";  	field.Type = TType.Struct;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	Message.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Operation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ReceiverMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Language = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Location = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			AppStoreCode = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			MessageText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MessageTemplate = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ReceiverMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Language = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Location = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		AppStoreCode = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		MessageText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MessageTemplate = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (ProductId != null && __isset.productId) {  	field.Name = "productId";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ProductId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (Language != null && __isset.language) {  	field.Name = "language";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Language);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (Location != null && __isset.location) {  	field.Name = "location";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Location);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (Price != null && __isset.price) {  	field.Name = "price";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Price);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (__isset.appStoreCode) {  	field.Name = "appStoreCode";  	field.Type = TType.I32;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)AppStoreCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (MessageText != null && __isset.messageText) {  	field.Name = "messageText";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (MessageText);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (__isset.messageTemplate) {  	field.Name = "messageTemplate";  	field.Type = TType.I32;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (MessageTemplate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: if (__isset.packageId) {  	field.Name = "packageId";  	field.Type = TType.I64;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PackageId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			OrderId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ConfirmUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Map) {  			{  				Extras = new Dictionary<string' string> ();  				TMap _map29 = iprot.ReadMapBegin ();  				for (int _i30 = 0; _i30 < _map29.Count; ++_i30) {  					string _key31;  					string _val32;  					_key31 = iprot.ReadString ();  					_val32 = iprot.ReadString ();  					Extras [_key31] = _val32;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			OrderId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ConfirmUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Map) {  			{  				Extras = new Dictionary<string' string> ();  				TMap _map29 = iprot.ReadMapBegin ();  				for (int _i30 = 0; _i30 < _map29.Count; ++_i30) {  					string _key31;  					string _val32;  					_key31 = iprot.ReadString ();  					_val32 = iprot.ReadString ();  					Extras [_key31] = _val32;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		OrderId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ConfirmUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Map) {  		{  			Extras = new Dictionary<string' string> ();  			TMap _map29 = iprot.ReadMapBegin ();  			for (int _i30 = 0; _i30 < _map29.Count; ++_i30) {  				string _key31;  				string _val32;  				_key31 = iprot.ReadString ();  				_val32 = iprot.ReadString ();  				Extras [_key31] = _val32;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		OrderId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ConfirmUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Map) {  		{  			Extras = new Dictionary<string' string> ();  			TMap _map29 = iprot.ReadMapBegin ();  			for (int _i30 = 0; _i30 < _map29.Count; ++_i30) {  				string _key31;  				string _val32;  				_key31 = iprot.ReadString ();  				_val32 = iprot.ReadString ();  				Extras [_key31] = _val32;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: if (ConfirmUrl != null && __isset.confirmUrl) {  	field.Name = "confirmUrl";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ConfirmUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: if (Extras != null && __isset.extras) {  	field.Name = "extras";  	field.Type = TType.Map;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.String' Extras.Count));  		foreach (string _iter33 in Extras.Keys) {  			oprot.WriteString (_iter33);  			oprot.WriteString (Extras [_iter33]);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,PaymentReservationResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AuthorName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			ValidDays = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			SaleType = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Copyright = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			DescriptionText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			ShopOrderId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			FromMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			ToMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I32) {  			PriceTier = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			Price = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			CurrencySymbol = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			PaymentType = (PaymentType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			CreateDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			OwnFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			EventType = (ProductEventType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			UrlSchema = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			DownloadUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			BuddyMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.I64) {  			PublishSince = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.Bool) {  			NewFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.Bool) {  			MissionFlag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AuthorName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		ValidDays = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		SaleType = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Copyright = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		DescriptionText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		ShopOrderId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		FromMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		ToMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I32) {  		PriceTier = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		Price = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		CurrencySymbol = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		PaymentType = (PaymentType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		CreateDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		OwnFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		EventType = (ProductEventType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		UrlSchema = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		DownloadUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		BuddyMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.I64) {  		PublishSince = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.Bool) {  		NewFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.Bool) {  		MissionFlag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.packageId) {  	field.Name = "packageId";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PackageId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.version) {  	field.Name = "version";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Version);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (AuthorName != null && __isset.authorName) {  	field.Name = "authorName";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (AuthorName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.onSale) {  	field.Name = "onSale";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (OnSale);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.validDays) {  	field.Name = "validDays";  	field.Type = TType.I32;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ValidDays);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.saleType) {  	field.Name = "saleType";  	field.Type = TType.I32;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (SaleType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (Copyright != null && __isset.copyright) {  	field.Name = "copyright";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Copyright);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (DescriptionText != null && __isset.descriptionText) {  	field.Name = "descriptionText";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DescriptionText);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.shopOrderId) {  	field.Name = "shopOrderId";  	field.Type = TType.I64;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ShopOrderId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (FromMid != null && __isset.fromMid) {  	field.Name = "fromMid";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (FromMid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (ToMid != null && __isset.toMid) {  	field.Name = "toMid";  	field.Type = TType.String;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ToMid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.validUntil) {  	field.Name = "validUntil";  	field.Type = TType.I64;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ValidUntil);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.priceTier) {  	field.Name = "priceTier";  	field.Type = TType.I32;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (PriceTier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (Price != null && __isset.price) {  	field.Name = "price";  	field.Type = TType.String;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Price);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (CurrencySymbol != null && __isset.currencySymbol) {  	field.Name = "currencySymbol";  	field.Type = TType.String;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CurrencySymbol);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.paymentType) {  	field.Name = "paymentType";  	field.Type = TType.I32;  	field.ID = 19;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)PaymentType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 19;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.createDate) {  	field.Name = "createDate";  	field.Type = TType.I64;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreateDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.ownFlag) {  	field.Name = "ownFlag";  	field.Type = TType.Bool;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (OwnFlag);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.eventType) {  	field.Name = "eventType";  	field.Type = TType.I32;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)EventType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (UrlSchema != null && __isset.urlSchema) {  	field.Name = "urlSchema";  	field.Type = TType.String;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (UrlSchema);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (DownloadUrl != null && __isset.downloadUrl) {  	field.Name = "downloadUrl";  	field.Type = TType.String;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DownloadUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (BuddyMid != null && __isset.buddyMid) {  	field.Name = "buddyMid";  	field.Type = TType.String;  	field.ID = 25;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BuddyMid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 25;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.publishSince) {  	field.Name = "publishSince";  	field.Type = TType.I64;  	field.ID = 26;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PublishSince);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 26;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.newFlag) {  	field.Name = "newFlag";  	field.Type = TType.Bool;  	field.ID = 27;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NewFlag);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 27;  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: if (__isset.missionFlag) {  	field.Name = "missionFlag";  	field.Type = TType.Bool;  	field.ID = 28;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (MissionFlag);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Product,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 28;  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			BannerSequence = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			BannerTargetPath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				ProductList_ = new List<Product> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					Product _elem36 = new Product ();  					_elem36 = new Product ();  					_elem36.Read (iprot);  					ProductList_.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			BannerLang = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			BannerSequence = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			BannerTargetPath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				ProductList_ = new List<Product> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					Product _elem36 = new Product ();  					_elem36 = new Product ();  					_elem36.Read (iprot);  					ProductList_.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			BannerLang = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			BannerSequence = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			BannerTargetPath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				ProductList_ = new List<Product> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					Product _elem36 = new Product ();  					_elem36 = new Product ();  					_elem36.Read (iprot);  					ProductList_.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			BannerLang = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			BannerSequence = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			BannerTargetPath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				ProductList_ = new List<Product> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					Product _elem36 = new Product ();  					_elem36 = new Product ();  					_elem36.Read (iprot);  					ProductList_.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			BannerLang = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			BannerSequence = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			BannerTargetPath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				ProductList_ = new List<Product> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					Product _elem36 = new Product ();  					_elem36 = new Product ();  					_elem36.Read (iprot);  					ProductList_.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			BannerLang = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		BannerSequence = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		BannerTargetPath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			ProductList_ = new List<Product> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				Product _elem36 = new Product ();  				_elem36 = new Product ();  				_elem36.Read (iprot);  				ProductList_.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		BannerLang = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		BannerSequence = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		BannerTargetPath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			ProductList_ = new List<Product> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				Product _elem36 = new Product ();  				_elem36 = new Product ();  				_elem36.Read (iprot);  				ProductList_.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		BannerLang = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		BannerSequence = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		BannerTargetPath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			ProductList_ = new List<Product> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				Product _elem36 = new Product ();  				_elem36 = new Product ();  				_elem36.Read (iprot);  				ProductList_.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		BannerLang = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		BannerSequence = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		BannerTargetPath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			ProductList_ = new List<Product> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				Product _elem36 = new Product ();  				_elem36 = new Product ();  				_elem36.Read (iprot);  				ProductList_.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		BannerLang = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		BannerSequence = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		BannerTargetType = (ProductBannerLinkType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		BannerTargetPath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			ProductList_ = new List<Product> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				Product _elem36 = new Product ();  				_elem36 = new Product ();  				_elem36.Read (iprot);  				ProductList_.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		BannerLang = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: if (__isset.bannerSequence) {  	field.Name = "bannerSequence";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (BannerSequence);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: if (__isset.bannerTargetType) {  	field.Name = "bannerTargetType";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)BannerTargetType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: if (BannerTargetPath != null && __isset.bannerTargetPath) {  	field.Name = "bannerTargetPath";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BannerTargetPath);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: if (ProductList_ != null && __isset.productList_) {  	field.Name = "productList_";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' ProductList_.Count));  		foreach (Product _iter37 in ProductList_) {  			_iter37.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: if (BannerLang != null && __isset.bannerLang) {  	field.Name = "bannerLang";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BannerLang);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ProductId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			PackageId = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Version = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			OnSale = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			ValidUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ProductId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		PackageId = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Version = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		OnSale = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		ValidUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: if (__isset.packageId) {  	field.Name = "packageId";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PackageId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: if (__isset.version) {  	field.Name = "version";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Version);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: if (__isset.onSale) {  	field.Name = "onSale";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (OnSale);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: if (__isset.validUntil) {  	field.Name = "validUntil";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ValidUntil);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimple,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ReinvokeHour = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			LastVersionSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ProductList = new List<ProductSimple> ();  				TList _list38 = iprot.ReadListBegin ();  				for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  					ProductSimple _elem40 = new ProductSimple ();  					_elem40 = new ProductSimple ();  					_elem40.Read (iprot);  					ProductList.Add (_elem40);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			RecentNewReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			RecentEventReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ReinvokeHour = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			LastVersionSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ProductList = new List<ProductSimple> ();  				TList _list38 = iprot.ReadListBegin ();  				for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  					ProductSimple _elem40 = new ProductSimple ();  					_elem40 = new ProductSimple ();  					_elem40.Read (iprot);  					ProductList.Add (_elem40);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			RecentNewReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			RecentEventReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ReinvokeHour = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			LastVersionSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ProductList = new List<ProductSimple> ();  				TList _list38 = iprot.ReadListBegin ();  				for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  					ProductSimple _elem40 = new ProductSimple ();  					_elem40 = new ProductSimple ();  					_elem40.Read (iprot);  					ProductList.Add (_elem40);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			RecentNewReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			RecentEventReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ReinvokeHour = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			LastVersionSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ProductList = new List<ProductSimple> ();  				TList _list38 = iprot.ReadListBegin ();  				for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  					ProductSimple _elem40 = new ProductSimple ();  					_elem40 = new ProductSimple ();  					_elem40.Read (iprot);  					ProductList.Add (_elem40);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			RecentNewReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			RecentEventReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			HasNext = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ReinvokeHour = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			LastVersionSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ProductList = new List<ProductSimple> ();  				TList _list38 = iprot.ReadListBegin ();  				for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  					ProductSimple _elem40 = new ProductSimple ();  					_elem40 = new ProductSimple ();  					_elem40.Read (iprot);  					ProductList.Add (_elem40);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			RecentNewReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			RecentEventReleaseDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ReinvokeHour = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		LastVersionSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ProductList = new List<ProductSimple> ();  			TList _list38 = iprot.ReadListBegin ();  			for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  				ProductSimple _elem40 = new ProductSimple ();  				_elem40 = new ProductSimple ();  				_elem40.Read (iprot);  				ProductList.Add (_elem40);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		RecentNewReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		RecentEventReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ReinvokeHour = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		LastVersionSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ProductList = new List<ProductSimple> ();  			TList _list38 = iprot.ReadListBegin ();  			for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  				ProductSimple _elem40 = new ProductSimple ();  				_elem40 = new ProductSimple ();  				_elem40.Read (iprot);  				ProductList.Add (_elem40);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		RecentNewReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		RecentEventReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ReinvokeHour = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		LastVersionSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ProductList = new List<ProductSimple> ();  			TList _list38 = iprot.ReadListBegin ();  			for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  				ProductSimple _elem40 = new ProductSimple ();  				_elem40 = new ProductSimple ();  				_elem40.Read (iprot);  				ProductList.Add (_elem40);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		RecentNewReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		RecentEventReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ReinvokeHour = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		LastVersionSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ProductList = new List<ProductSimple> ();  			TList _list38 = iprot.ReadListBegin ();  			for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  				ProductSimple _elem40 = new ProductSimple ();  				_elem40 = new ProductSimple ();  				_elem40.Read (iprot);  				ProductList.Add (_elem40);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		RecentNewReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		RecentEventReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		HasNext = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ReinvokeHour = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		LastVersionSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ProductList = new List<ProductSimple> ();  			TList _list38 = iprot.ReadListBegin ();  			for (int _i39 = 0; _i39 < _list38.Count; ++_i39) {  				ProductSimple _elem40 = new ProductSimple ();  				_elem40 = new ProductSimple ();  				_elem40.Read (iprot);  				ProductList.Add (_elem40);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		RecentNewReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		RecentEventReleaseDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: if (__isset.reinvokeHour) {  	field.Name = "reinvokeHour";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ReinvokeHour);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: if (__isset.lastVersionSeq) {  	field.Name = "lastVersionSeq";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastVersionSeq);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: if (ProductList != null && __isset.productList) {  	field.Name = "productList";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' ProductList.Count));  		foreach (ProductSimple _iter41 in ProductList) {  			_iter41.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: if (__isset.recentNewReleaseDate) {  	field.Name = "recentNewReleaseDate";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (RecentNewReleaseDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: if (__isset.recentEventReleaseDate) {  	field.Name = "recentEventReleaseDate";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (RecentEventReleaseDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProductSimpleList,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Userid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			Phone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RegionCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			DisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PhoneticName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			PictureStatus = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			ThumbnailUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			StatusMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			AllowSearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			AllowSearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.String) {  			PicturePath = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Userid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		Phone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RegionCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		DisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PhoneticName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		PictureStatus = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		ThumbnailUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		StatusMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		AllowSearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		AllowSearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.String) {  		PicturePath = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (Userid != null && __isset.userid) {  	field.Name = "userid";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Userid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (Phone != null && __isset.phone) {  	field.Name = "phone";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Phone);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (Email != null && __isset.email) {  	field.Name = "email";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Email);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (RegionCode != null && __isset.regionCode) {  	field.Name = "regionCode";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RegionCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (DisplayName != null && __isset.displayName) {  	field.Name = "displayName";  	field.Type = TType.String;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (DisplayName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (PhoneticName != null && __isset.phoneticName) {  	field.Name = "phoneticName";  	field.Type = TType.String;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PhoneticName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (PictureStatus != null && __isset.pictureStatus) {  	field.Name = "pictureStatus";  	field.Type = TType.String;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PictureStatus);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (ThumbnailUrl != null && __isset.thumbnailUrl) {  	field.Name = "thumbnailUrl";  	field.Type = TType.String;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ThumbnailUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (StatusMessage != null && __isset.statusMessage) {  	field.Name = "statusMessage";  	field.Type = TType.String;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (StatusMessage);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (__isset.allowSearchByUserid) {  	field.Name = "allowSearchByUserid";  	field.Type = TType.Bool;  	field.ID = 31;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (AllowSearchByUserid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 31;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (__isset.allowSearchByEmail) {  	field.Name = "allowSearchByEmail";  	field.Type = TType.Bool;  	field.ID = 32;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (AllowSearchByEmail);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 32;  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: if (PicturePath != null && __isset.picturePath) {  	field.Name = "picturePath";  	field.Type = TType.String;  	field.ID = 33;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PicturePath);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Profile,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 33;  
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Users = new List<Contact> ();  				TList _list42 = iprot.ReadListBegin ();  				for (int _i43 = 0; _i43 < _list42.Count; ++_i43) {  					Contact _elem44 = new Contact ();  					_elem44 = new Contact ();  					_elem44.Read (iprot);  					Users.Add (_elem44);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Buddies = new List<Contact> ();  				TList _list45 = iprot.ReadListBegin ();  				for (int _i46 = 0; _i46 < _list45.Count; ++_i46) {  					Contact _elem47 = new Contact ();  					_elem47 = new Contact ();  					_elem47.Read (iprot);  					Buddies.Add (_elem47);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Users = new List<Contact> ();  			TList _list42 = iprot.ReadListBegin ();  			for (int _i43 = 0; _i43 < _list42.Count; ++_i43) {  				Contact _elem44 = new Contact ();  				_elem44 = new Contact ();  				_elem44.Read (iprot);  				Users.Add (_elem44);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Buddies = new List<Contact> ();  			TList _list45 = iprot.ReadListBegin ();  			for (int _i46 = 0; _i46 < _list45.Count; ++_i46) {  				Contact _elem47 = new Contact ();  				_elem47 = new Contact ();  				_elem47.Read (iprot);  				Buddies.Add (_elem47);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Write,The following statement contains a magic number: if (Buddies != null && __isset.buddies) {  	field.Name = "buddies";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Buddies.Count));  		foreach (Contact _iter49 in Buddies) {  			_iter49.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			AuthToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			UserCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		AuthToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		UserCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Write,The following statement contains a magic number: if (__isset.userCreated) {  	field.Name = "userCreated";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (UserCreated);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list50 = iprot.ReadListBegin ();  				for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  					Contact _elem52 = new Contact ();  					_elem52 = new Contact ();  					_elem52.Read (iprot);  					Contacts.Add (_elem52);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list50 = iprot.ReadListBegin ();  				for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  					Contact _elem52 = new Contact ();  					_elem52 = new Contact ();  					_elem52.Read (iprot);  					Contacts.Add (_elem52);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Mid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			CreatedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list50 = iprot.ReadListBegin ();  				for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  					Contact _elem52 = new Contact ();  					_elem52 = new Contact ();  					_elem52.Read (iprot);  					Contacts.Add (_elem52);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			NotificationDisabled = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list50 = iprot.ReadListBegin ();  			for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  				Contact _elem52 = new Contact ();  				_elem52 = new Contact ();  				_elem52.Read (iprot);  				Contacts.Add (_elem52);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list50 = iprot.ReadListBegin ();  			for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  				Contact _elem52 = new Contact ();  				_elem52 = new Contact ();  				_elem52.Read (iprot);  				Contacts.Add (_elem52);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Mid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		CreatedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list50 = iprot.ReadListBegin ();  			for (int _i51 = 0; _i51 < _list50.Count; ++_i51) {  				Contact _elem52 = new Contact ();  				_elem52 = new Contact ();  				_elem52.Read (iprot);  				Contacts.Add (_elem52);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		NotificationDisabled = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: if (__isset.createdTime) {  	field.Name = "createdTime";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (CreatedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: if (Contacts != null && __isset.contacts) {  	field.Name = "contacts";  	field.Type = TType.List;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Contacts.Count));  		foreach (Contact _iter53 in Contacts) {  			_iter53.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: if (__isset.notificationDisabled) {  	field.Name = "notificationDisabled";  	field.Type = TType.Bool;  	field.ID = 31;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationDisabled);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Room,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 31;  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Keynm = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Nvalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Evalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			SessionKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Keynm = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Nvalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Evalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			SessionKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Keynm = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Nvalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Evalue = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			SessionKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Keynm = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Nvalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Evalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		SessionKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Keynm = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Nvalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Evalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		SessionKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Keynm = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Nvalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Evalue = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		SessionKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: if (Nvalue != null && __isset.nvalue) {  	field.Name = "nvalue";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Nvalue);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: if (Evalue != null && __isset.evalue) {  	field.Name = "evalue";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Evalue);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: if (SessionKey != null && __isset.sessionKey) {  	field.Name = "sessionKey";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SessionKey);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,RSAKey,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 10:  		if (field.Type == TType.Bool) {  			NotificationEnable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			NotificationMuteExpiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NotificationNewMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NotificationGroupInvitation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NotificationShowMessage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NotificationIncomingCall = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			NotificationSoundMessage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.String) {  			NotificationSoundGroup = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NotificationDisabledWithSub = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			PrivacySyncContacts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			PrivacySearchByPhoneNumber = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			PrivacySearchByUserid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Bool) {  			PrivacySearchByEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.Bool) {  			PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.Bool) {  			PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Bool) {  			PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			ContactMyTicket = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 40:  		if (field.Type == TType.I32) {  			IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 41:  		if (field.Type == TType.String) {  			IdentityIdentifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 42:  		if (field.Type == TType.Map) {  			{  				SnsAccounts = new Dictionary<SnsIdType' string> ();  				TMap _map54 = iprot.ReadMapBegin ();  				for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  					SnsIdType _key56;  					string _val57;  					_key56 = (SnsIdType)iprot.ReadI32 ();  					_val57 = iprot.ReadString ();  					SnsAccounts [_key56] = _val57;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 43:  		if (field.Type == TType.Bool) {  			PhoneRegistration = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 44:  		if (field.Type == TType.I32) {  			EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 50:  		if (field.Type == TType.String) {  			PreferenceLocale = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 60:  		if (field.Type == TType.Map) {  			{  				CustomModes = new Dictionary<CustomMode' string> ();  				TMap _map58 = iprot.ReadMapBegin ();  				for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  					CustomMode _key60;  					string _val61;  					_key60 = (CustomMode)iprot.ReadI32 ();  					_val61 = iprot.ReadString ();  					CustomModes [_key60] = _val61;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 10:  	if (field.Type == TType.Bool) {  		NotificationEnable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		NotificationMuteExpiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NotificationNewMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NotificationGroupInvitation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NotificationShowMessage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NotificationIncomingCall = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		NotificationSoundMessage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.String) {  		NotificationSoundGroup = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NotificationDisabledWithSub = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		PrivacySyncContacts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		PrivacySearchByPhoneNumber = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		PrivacySearchByUserid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Bool) {  		PrivacySearchByEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.Bool) {  		PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.Bool) {  		PrivacyProfileImagePostToMyhome = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Bool) {  		PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		ContactMyTicket = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 40:  	if (field.Type == TType.I32) {  		IdentityProvider = (IdentityProvider)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 41:  	if (field.Type == TType.String) {  		IdentityIdentifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 42:  	if (field.Type == TType.Map) {  		{  			SnsAccounts = new Dictionary<SnsIdType' string> ();  			TMap _map54 = iprot.ReadMapBegin ();  			for (int _i55 = 0; _i55 < _map54.Count; ++_i55) {  				SnsIdType _key56;  				string _val57;  				_key56 = (SnsIdType)iprot.ReadI32 ();  				_val57 = iprot.ReadString ();  				SnsAccounts [_key56] = _val57;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 43:  	if (field.Type == TType.Bool) {  		PhoneRegistration = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 44:  	if (field.Type == TType.I32) {  		EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 50:  	if (field.Type == TType.String) {  		PreferenceLocale = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 60:  	if (field.Type == TType.Map) {  		{  			CustomModes = new Dictionary<CustomMode' string> ();  			TMap _map58 = iprot.ReadMapBegin ();  			for (int _i59 = 0; _i59 < _map58.Count; ++_i59) {  				CustomMode _key60;  				string _val61;  				_key60 = (CustomMode)iprot.ReadI32 ();  				_val61 = iprot.ReadString ();  				CustomModes [_key60] = _val61;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationEnable) {  	field.Name = "notificationEnable";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationEnable);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationMuteExpiration) {  	field.Name = "notificationMuteExpiration";  	field.Type = TType.I64;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (NotificationMuteExpiration);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationNewMessage) {  	field.Name = "notificationNewMessage";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationNewMessage);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationGroupInvitation) {  	field.Name = "notificationGroupInvitation";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationGroupInvitation);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationShowMessage) {  	field.Name = "notificationShowMessage";  	field.Type = TType.Bool;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationShowMessage);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationIncomingCall) {  	field.Name = "notificationIncomingCall";  	field.Type = TType.Bool;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationIncomingCall);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (NotificationSoundMessage != null && __isset.notificationSoundMessage) {  	field.Name = "notificationSoundMessage";  	field.Type = TType.String;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotificationSoundMessage);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (NotificationSoundGroup != null && __isset.notificationSoundGroup) {  	field.Name = "notificationSoundGroup";  	field.Type = TType.String;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotificationSoundGroup);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.notificationDisabledWithSub) {  	field.Name = "notificationDisabledWithSub";  	field.Type = TType.Bool;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotificationDisabledWithSub);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacySyncContacts) {  	field.Name = "privacySyncContacts";  	field.Type = TType.Bool;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacySyncContacts);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacySearchByPhoneNumber) {  	field.Name = "privacySearchByPhoneNumber";  	field.Type = TType.Bool;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacySearchByPhoneNumber);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacySearchByUserid) {  	field.Name = "privacySearchByUserid";  	field.Type = TType.Bool;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacySearchByUserid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacySearchByEmail) {  	field.Name = "privacySearchByEmail";  	field.Type = TType.Bool;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacySearchByEmail);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacyAllowSecondaryDeviceLogin) {  	field.Name = "privacyAllowSecondaryDeviceLogin";  	field.Type = TType.Bool;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacyAllowSecondaryDeviceLogin);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacyProfileImagePostToMyhome) {  	field.Name = "privacyProfileImagePostToMyhome";  	field.Type = TType.Bool;  	field.ID = 25;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacyProfileImagePostToMyhome);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 25;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.privacyReceiveMessagesFromNotFriend) {  	field.Name = "privacyReceiveMessagesFromNotFriend";  	field.Type = TType.Bool;  	field.ID = 26;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PrivacyReceiveMessagesFromNotFriend);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 26;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (ContactMyTicket != null && __isset.contactMyTicket) {  	field.Name = "contactMyTicket";  	field.Type = TType.String;  	field.ID = 30;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ContactMyTicket);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 30;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.identityProvider) {  	field.Name = "identityProvider";  	field.Type = TType.I32;  	field.ID = 40;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)IdentityProvider);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 40;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (IdentityIdentifier != null && __isset.identityIdentifier) {  	field.Name = "identityIdentifier";  	field.Type = TType.String;  	field.ID = 41;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (IdentityIdentifier);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 41;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (SnsAccounts != null && __isset.snsAccounts) {  	field.Name = "snsAccounts";  	field.Type = TType.Map;  	field.ID = 42;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.I32' TType.String' SnsAccounts.Count));  		foreach (SnsIdType _iter62 in SnsAccounts.Keys) {  			oprot.WriteI32 ((int)_iter62);  			oprot.WriteString (SnsAccounts [_iter62]);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 42;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.phoneRegistration) {  	field.Name = "phoneRegistration";  	field.Type = TType.Bool;  	field.ID = 43;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PhoneRegistration);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 43;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (__isset.emailConfirmationStatus) {  	field.Name = "emailConfirmationStatus";  	field.Type = TType.I32;  	field.ID = 44;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)EmailConfirmationStatus);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 44;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (PreferenceLocale != null && __isset.preferenceLocale) {  	field.Name = "preferenceLocale";  	field.Type = TType.String;  	field.ID = 50;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PreferenceLocale);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 50;  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: if (CustomModes != null && __isset.customModes) {  	field.Name = "customModes";  	field.Type = TType.Map;  	field.ID = 60;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.I32' TType.String' CustomModes.Count));  		foreach (CustomMode _iter63 in CustomModes.Keys) {  			oprot.WriteI32 ((int)_iter63);  			oprot.WriteString (CustomModes [_iter63]);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Settings,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 60;  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SnsUserId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SnsUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			SnsIdType = (SnsIdType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SnsUserId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			SnsUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			SnsIdType = (SnsIdType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SnsUserId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SnsUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		SnsIdType = (SnsIdType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SnsUserId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		SnsUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		SnsIdType = (SnsIdType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: if (SnsUserName != null && __isset.snsUserName) {  	field.Name = "snsUserName";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SnsUserName);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: if (__isset.snsIdType) {  	field.Name = "snsIdType";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)SnsIdType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriend,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			SnsIdType = (SnsIdType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SnsUserId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			Contact = new Contact ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			SnsIdType = (SnsIdType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SnsUserId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		SnsIdType = (SnsIdType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SnsUserId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		Contact = new Contact ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		SnsIdType = (SnsIdType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SnsUserId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: if (__isset.snsIdType) {  	field.Name = "snsIdType";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)SnsIdType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: if (SnsUserId != null && __isset.snsUserId) {  	field.Name = "snsUserId";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SnsUserId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,SnsFriendModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (ModificationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			SnsFriend = new SnsFriend ();  			SnsFriend.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (ModificationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		SnsFriend = new SnsFriend ();  		SnsFriend.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsFriendModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Write,The following statement contains a magic number: if (SnsFriend != null && __isset.snsFriend) {  	field.Name = "snsFriend";  	field.Type = TType.Struct;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	SnsFriend.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsFriendModification,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			UserExisting = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			PhoneNumberRegistered = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			SameDevice = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			UserExisting = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			PhoneNumberRegistered = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			SameDevice = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		UserExisting = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		PhoneNumberRegistered = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		SameDevice = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		UserExisting = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		PhoneNumberRegistered = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		SameDevice = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: if (__isset.phoneNumberRegistered) {  	field.Name = "phoneNumberRegistered";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PhoneNumberRegistered);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: if (__isset.sameDevice) {  	field.Name = "sameDevice";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (SameDevice);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Endpoint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			EndpointSsl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			UpdateUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			C2dmAccount = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			NniServer = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Endpoint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			EndpointSsl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			UpdateUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			C2dmAccount = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			NniServer = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Endpoint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			EndpointSsl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			UpdateUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			C2dmAccount = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			NniServer = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Endpoint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			EndpointSsl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			UpdateUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			C2dmAccount = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			NniServer = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Endpoint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		EndpointSsl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		UpdateUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		C2dmAccount = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		NniServer = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Endpoint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		EndpointSsl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		UpdateUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		C2dmAccount = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		NniServer = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Endpoint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		EndpointSsl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		UpdateUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		C2dmAccount = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		NniServer = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Endpoint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		EndpointSsl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		UpdateUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		C2dmAccount = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		NniServer = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: if (EndpointSsl != null && __isset.endpointSsl) {  	field.Name = "endpointSsl";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (EndpointSsl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: if (UpdateUrl != null && __isset.updateUrl) {  	field.Name = "updateUrl";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (UpdateUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: if (C2dmAccount != null && __isset.c2dmAccount) {  	field.Name = "c2dmAccount";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (C2dmAccount);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: if (NniServer != null && __isset.nniServer) {  	field.Name = "nniServer";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NniServer);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,SystemConfiguration,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Code = (ErrorCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Reason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Map) {  			{  				ParameterMap = new Dictionary<string' string> ();  				TMap _map64 = iprot.ReadMapBegin ();  				for (int _i65 = 0; _i65 < _map64.Count; ++_i65) {  					string _key66;  					string _val67;  					_key66 = iprot.ReadString ();  					_val67 = iprot.ReadString ();  					ParameterMap [_key66] = _val67;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Code = (ErrorCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Reason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Map) {  			{  				ParameterMap = new Dictionary<string' string> ();  				TMap _map64 = iprot.ReadMapBegin ();  				for (int _i65 = 0; _i65 < _map64.Count; ++_i65) {  					string _key66;  					string _val67;  					_key66 = iprot.ReadString ();  					_val67 = iprot.ReadString ();  					ParameterMap [_key66] = _val67;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Code = (ErrorCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Reason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Map) {  		{  			ParameterMap = new Dictionary<string' string> ();  			TMap _map64 = iprot.ReadMapBegin ();  			for (int _i65 = 0; _i65 < _map64.Count; ++_i65) {  				string _key66;  				string _val67;  				_key66 = iprot.ReadString ();  				_val67 = iprot.ReadString ();  				ParameterMap [_key66] = _val67;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Code = (ErrorCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Reason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Map) {  		{  			ParameterMap = new Dictionary<string' string> ();  			TMap _map64 = iprot.ReadMapBegin ();  			for (int _i65 = 0; _i65 < _map64.Count; ++_i65) {  				string _key66;  				string _val67;  				_key66 = iprot.ReadString ();  				_val67 = iprot.ReadString ();  				ParameterMap [_key66] = _val67;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: if (Reason != null && __isset.reason) {  	field.Name = "reason";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Reason);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: if (ParameterMap != null && __isset.parameterMap) {  	field.Name = "parameterMap";  	field.Type = TType.Map;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.String' ParameterMap.Count));  		foreach (string _iter68 in ParameterMap.Keys) {  			oprot.WriteString (_iter68);  			oprot.WriteString (ParameterMap [_iter68]);  		}  		oprot.WriteMapEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TalkException,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			MaxUseCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ExpirationTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			MaxUseCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		MaxUseCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ExpirationTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		MaxUseCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: if (__isset.expirationTime) {  	field.Name = "expirationTime";  	field.Type = TType.I64;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ExpirationTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: if (__isset.maxUseCount) {  	field.Name = "maxUseCount";  	field.Type = TType.I32;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (MaxUseCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,Ticket,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Id = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ChannelId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I64) {  			LastSeq = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			UnreadCount = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			LastModifiedTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			Status = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I32) {  			MidType = (MIDType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				LastMessages = new List<Message> ();  				TList _list69 = iprot.ReadListBegin ();  				for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  					Message _elem71 = new Message ();  					_elem71 = new Message ();  					_elem71.Read (iprot);  					LastMessages.Add (_elem71);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Id = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ChannelId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I64) {  		LastSeq = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		UnreadCount = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		LastModifiedTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		Status = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I32) {  		MidType = (MIDType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			LastMessages = new List<Message> ();  			TList _list69 = iprot.ReadListBegin ();  			for (int _i70 = 0; _i70 < _list69.Count; ++_i70) {  				Message _elem71 = new Message ();  				_elem71 = new Message ();  				_elem71.Read (iprot);  				LastMessages.Add (_elem71);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (ChannelId != null && __isset.channelId) {  	field.Name = "channelId";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ChannelId);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (__isset.lastSeq) {  	field.Name = "lastSeq";  	field.Type = TType.I64;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastSeq);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (__isset.unreadCount) {  	field.Name = "unreadCount";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (UnreadCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (__isset.lastModifiedTime) {  	field.Name = "lastModifiedTime";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastModifiedTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (__isset.status) {  	field.Name = "status";  	field.Type = TType.I32;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Status);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (__isset.midType) {  	field.Name = "midType";  	field.Type = TType.I32;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)MidType);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: if (LastMessages != null && __isset.lastMessages) {  	field.Name = "lastMessages";  	field.Type = TType.List;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' LastMessages.Count));  		foreach (Message _iter72 in LastMessages) {  			_iter72.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBox,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			MessageBox = new TMessageBox ();  			MessageBox.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list73 = iprot.ReadListBegin ();  				for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  					Contact _elem75 = new Contact ();  					_elem75 = new Contact ();  					_elem75.Read (iprot);  					Contacts.Add (_elem75);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PictureRevision = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			MessageBox = new TMessageBox ();  			MessageBox.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list73 = iprot.ReadListBegin ();  				for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  					Contact _elem75 = new Contact ();  					_elem75 = new Contact ();  					_elem75.Read (iprot);  					Contacts.Add (_elem75);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PictureRevision = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Struct) {  			MessageBox = new TMessageBox ();  			MessageBox.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Contacts = new List<Contact> ();  				TList _list73 = iprot.ReadListBegin ();  				for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  					Contact _elem75 = new Contact ();  					_elem75 = new Contact ();  					_elem75.Read (iprot);  					Contacts.Add (_elem75);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PictureRevision = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		MessageBox = new TMessageBox ();  		MessageBox.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list73 = iprot.ReadListBegin ();  			for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  				Contact _elem75 = new Contact ();  				_elem75 = new Contact ();  				_elem75.Read (iprot);  				Contacts.Add (_elem75);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PictureRevision = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		MessageBox = new TMessageBox ();  		MessageBox.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list73 = iprot.ReadListBegin ();  			for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  				Contact _elem75 = new Contact ();  				_elem75 = new Contact ();  				_elem75.Read (iprot);  				Contacts.Add (_elem75);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PictureRevision = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Struct) {  		MessageBox = new TMessageBox ();  		MessageBox.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Contacts = new List<Contact> ();  			TList _list73 = iprot.ReadListBegin ();  			for (int _i74 = 0; _i74 < _list73.Count; ++_i74) {  				Contact _elem75 = new Contact ();  				_elem75 = new Contact ();  				_elem75.Read (iprot);  				Contacts.Add (_elem75);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PictureRevision = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: if (Contacts != null && __isset.contacts) {  	field.Name = "contacts";  	field.Type = TType.List;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Contacts.Count));  		foreach (Contact _iter76 in Contacts) {  			_iter76.Write (oprot);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: if (PictureRevision != null && __isset.pictureRevision) {  	field.Name = "pictureRevision";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PictureRevision);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				MessageBoxWrapUpList = new List<TMessageBoxWrapUp> ();  				TList _list77 = iprot.ReadListBegin ();  				for (int _i78 = 0; _i78 < _list77.Count; ++_i78) {  					TMessageBoxWrapUp _elem79 = new TMessageBoxWrapUp ();  					_elem79 = new TMessageBoxWrapUp ();  					_elem79.Read (iprot);  					MessageBoxWrapUpList.Add (_elem79);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			MessageBoxWrapUpList = new List<TMessageBoxWrapUp> ();  			TList _list77 = iprot.ReadListBegin ();  			for (int _i78 = 0; _i78 < _list77.Count; ++_i78) {  				TMessageBoxWrapUp _elem79 = new TMessageBoxWrapUp ();  				_elem79 = new TMessageBoxWrapUp ();  				_elem79.Read (iprot);  				MessageBoxWrapUpList.Add (_elem79);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Write,The following statement contains a magic number: if (__isset.totalSize) {  	field.Name = "totalSize";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (TotalSize);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,UserAuthStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			PhoneNumberRegistered = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				RegisteredSnsIdTypes = new List<SnsIdType> ();  				TList _list81 = iprot.ReadListBegin ();  				for (int _i82 = 0; _i82 < _list81.Count; ++_i82) {  					SnsIdType _elem83 = (SnsIdType)0;  					_elem83 = (SnsIdType)iprot.ReadI32 ();  					RegisteredSnsIdTypes.Add (_elem83);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,UserAuthStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		PhoneNumberRegistered = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			RegisteredSnsIdTypes = new List<SnsIdType> ();  			TList _list81 = iprot.ReadListBegin ();  			for (int _i82 = 0; _i82 < _list81.Count; ++_i82) {  				SnsIdType _elem83 = (SnsIdType)0;  				_elem83 = (SnsIdType)iprot.ReadI32 ();  				RegisteredSnsIdTypes.Add (_elem83);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,UserAuthStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Write,The following statement contains a magic number: if (RegisteredSnsIdTypes != null && __isset.registeredSnsIdTypes) {  	field.Name = "registeredSnsIdTypes";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.I32' RegisteredSnsIdTypes.Count));  		foreach (SnsIdType _iter84 in RegisteredSnsIdTypes) {  			oprot.WriteI32 ((int)_iter84);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,UserAuthStatus,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SessionId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Method = (VerificationMethod)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Callback = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NormalizedPhone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			CountryCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NationalSignificantNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				AvailableVerificationMethods = new List<VerificationMethod> ();  				TList _list85 = iprot.ReadListBegin ();  				for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  					VerificationMethod _elem87 = (VerificationMethod)0;  					_elem87 = (VerificationMethod)iprot.ReadI32 ();  					AvailableVerificationMethods.Add (_elem87);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SessionId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Method = (VerificationMethod)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Callback = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NormalizedPhone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		CountryCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NationalSignificantNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			AvailableVerificationMethods = new List<VerificationMethod> ();  			TList _list85 = iprot.ReadListBegin ();  			for (int _i86 = 0; _i86 < _list85.Count; ++_i86) {  				VerificationMethod _elem87 = (VerificationMethod)0;  				_elem87 = (VerificationMethod)iprot.ReadI32 ();  				AvailableVerificationMethods.Add (_elem87);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (__isset.method) {  	field.Name = "method";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Method);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (Callback != null && __isset.callback) {  	field.Name = "callback";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Callback);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (NormalizedPhone != null && __isset.normalizedPhone) {  	field.Name = "normalizedPhone";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NormalizedPhone);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (CountryCode != null && __isset.countryCode) {  	field.Name = "countryCode";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CountryCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (NationalSignificantNumber != null && __isset.nationalSignificantNumber) {  	field.Name = "nationalSignificantNumber";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NationalSignificantNumber);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: if (AvailableVerificationMethods != null && __isset.availableVerificationMethods) {  	field.Name = "availableVerificationMethods";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.I32' AvailableVerificationMethods.Count));  		foreach (VerificationMethod _iter88 in AvailableVerificationMethods) {  			oprot.WriteI32 ((int)_iter88);  		}  		oprot.WriteListEnd ();  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,VerificationSessionData,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (WapInvitationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			InviteeEmail = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			InviterMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RoomMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (WapInvitationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			InviteeEmail = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			InviterMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RoomMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Type = (WapInvitationType)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			InviteeEmail = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			InviterMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			RoomMid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (WapInvitationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		InviteeEmail = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		InviterMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RoomMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (WapInvitationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		InviteeEmail = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		InviterMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RoomMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Type = (WapInvitationType)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		InviteeEmail = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		InviterMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		RoomMid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: if (InviteeEmail != null && __isset.inviteeEmail) {  	field.Name = "inviteeEmail";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (InviteeEmail);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: if (InviterMid != null && __isset.inviterMid) {  	field.Name = "inviterMid";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (InviterMid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: if (RoomMid != null && __isset.roomMid) {  	field.Name = "roomMid";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RoomMid);  	oprot.WriteFieldEnd ();  }  
Magic Number,LineSharp.Datatypes,WapInvitation,F:\newReposMay17\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 12;  
