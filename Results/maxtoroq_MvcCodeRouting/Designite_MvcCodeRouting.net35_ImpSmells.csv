Implementation smell,Namespace,Class,File,Method,Description
Long Method,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The method has 109 lines of code.
Complex Method,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,RenderMapRouteCSharp,Cyclomatic complexity of the method is 11
Complex Method,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,RenderMapRouteVB,Cyclomatic complexity of the method is 11
Complex Method,MvcCodeRouting,CodeRouteExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ICodeRoute.cs,GetRouteContext,Cyclomatic complexity of the method is 10
Complex Method,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,GroupActions,Cyclomatic complexity of the method is 10
Complex Method,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,Cyclomatic complexity of the method is 17
Complex Method,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,Cyclomatic complexity of the method is 9
Complex Method,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckDefaultActions,Cyclomatic complexity of the method is 9
Long Parameter List,MvcCodeRouting,CodeRouteExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ICodeRoute.cs,DoGetVirtualPath,The method has 5 parameters. Parameters: route' values' requestRouteValues' requestRouteDataTokens' getVirtualPath
Long Parameter List,MvcCodeRouting.Web.Mvc,ViewEngineWrapper,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\ViewEngineWrapper.cs,FindView,The method has 5 parameters. Parameters: controllerContext' viewName' masterName' useCache' partial
Long Parameter List,MvcCodeRouting.Web.Routing,CodeRoute,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\CodeRoute.cs,CodeRoute,The method has 5 parameters. Parameters: url' defaults' constraints' dataTokens' routeHandler
Long Parameter List,MvcCodeRouting.Web.Routing,ParameterBindingRouteConstraint,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\ParameterBindingRouteConstraint.cs,TryParse,The method has 6 parameters. Parameters: httpContext' parameterName' rawValue' attemptedValue' culture' result
Long Parameter List,MvcCodeRouting.Web.Routing,RegexRouteConstraint,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\RegexRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,MvcCodeRouting.Web.Routing,SetRouteConstraint,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\SetRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,MvcCodeRouting.Web.Routing,TypeAwareRouteConstraint,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\TypeAwareRouteConstraint.cs,TryParse,The method has 6 parameters. Parameters: httpContext' parameterName' rawValue' attemptedValue' culture' result
Long Parameter List,MvcCodeRouting.Web.Routing,TypeAwareRouteConstraint,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\TypeAwareRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CreateRouteParameter,The method has 5 parameters. Parameters: name' type' routeAttr' isOptional' isCatchAll
Long Parameter List,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,RouteParameter,The method has 6 parameters. Parameters: name' parameterType' constraint' isOptional' isCatchAll' binder
Long Identifier,MvcCodeRouting.Web.Mvc,MvcCodeRoutingProvider,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\MvcCodeRoutingProvider.cs,,The length of the parameter _ActionOverloadDisambiguationAttributeType is 42.
Long Identifier,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckOverloads,The length of the parameter overloadsWithDifferentParameters is 32.
Long Identifier,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,,The length of the parameter _BaseRouteAndNamespaceSegments is 30.
Long Identifier,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,,The length of the parameter _CustomRouteHasControllerToken is 30.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,RenderRouteCSharp,The length of the statement  "            writer.Write("<span class='comment'>// route: \"{0}\"' handler: {1}</span>"' route.Url' handlerType.AssemblyQualifiedName); " is 123.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToCSharpString,The length of the statement  "               stringVal = String.Concat("<span class='keyword'>new</span> "' TypeReferenceCSharp(type)' "("' ValueToCSharpString(regexConstraint.OriginalPattern' constraint: true)' ")"); " is 172.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToCSharpString,The length of the statement  "                  stringVal = String.Concat("<span class='keyword'>new</span> "' TypeReferenceCSharp(type)' "("' ValueToCSharpString(paramBindingConstraint.Binder' constraint: true)' ")"); " is 170.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToCSharpString,The length of the statement  "                     stringVal = String.Concat("<span class='keyword'>new</span> "' TypeReferenceCSharp(type)' "("' String.Join("' "' setConstraint.GetValues().Select(s => ValueToCSharpString(s)))' ")"); " is 182.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,RenderRouteVB,The length of the statement  "            writer.Write("<span class='comment'>' route: \"{0}\"' handler: {1}</span>"' route.Url' handlerType.AssemblyQualifiedName); " is 122.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToVBString,The length of the statement  "               stringVal = String.Concat("<span class='keyword'>New</span> "' TypeReferenceVB(type)' "("' ValueToVBString(regexConstraint.OriginalPattern' constraint: true)' ")"); " is 164.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToVBString,The length of the statement  "                  stringVal = String.Concat("<span class='keyword'>New</span> "' TypeReferenceVB(type)' "("' ValueToVBString(paramBindingConstraint.Binder' constraint: true)' ")"); " is 162.
Long Statement,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ValueToVBString,The length of the statement  "                     stringVal = String.Concat("<span class='keyword'>New</span> "' TypeReferenceVB(type)' "("' String.Join("' "' setConstraint.GetValues().Select(s => ValueToVBString(s)))' ")"); " is 174.
Long Statement,MvcCodeRouting,FromRouteAttribute,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\FromRouteAttribute.cs,ParamBind,The length of the statement  "         return paramBinder.TryBind(Convert.ToString(rawValue' CultureInfo.InvariantCulture)' CultureInfo.InvariantCulture' out result); " is 127.
Long Statement,MvcCodeRouting,FromRouteAttribute,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\FromRouteAttribute.cs,GetModelBinder,The length of the statement  "               throw new InvalidOperationException("An error occurred when trying to create the IModelBinder '{0}'. Make sure that the binder has a public parameterless constructor.".FormatInvariant(fromRouteAttr.BinderType.FullName)' ex); " is 224.
Long Statement,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The length of the statement  "            controllerMapping.Add(name' actions.First(a => ControllerInfo.NameEquals(a.Controller.Name' name)).Controller.ControllerSegment); " is 129.
Long Statement,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The length of the statement  "            routeSettings.Constraints.Add("controller"' first.Controller.Provider.CreateSetRouteConstraint(controllerMapping.Values.ToArray())); " is 132.
Long Statement,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The length of the statement  "            routeSettings.Constraints.Add("action"' first.Controller.Provider.CreateSetRouteConstraint(actionMapping.Values.Where(s => !String.IsNullOrEmpty(s)).ToArray())); " is 161.
Long Statement,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The length of the statement  "         foreach (var param in first.Controller.RouteProperties.Concat(parameters).Where(p => p.Constraint != null || p.Binder != null)) { " is 129.
Long Statement,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The length of the statement  "         routeSettings.DataTokens[DataTokenKeys.ViewsLocation] = String.Join("/"' first.Controller.CodeRoutingContext.Where(s => !s.Contains('{'))); " is 139.
Long Statement,MvcCodeRouting.Web.Mvc,MvcRouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\MvcRouteFactory.cs,CreateRoute,The length of the statement  "         return new CodeRoute(routeSettings.RouteTemplate' new RouteValueDictionary(routeSettings.Defaults)' new RouteValueDictionary(routeSettings.Constraints)' new RouteValueDictionary(routeSettings.DataTokens)' new MvcRouteHandler()) { " is 229.
Long Statement,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,GetFileResources,The length of the statement  "                && String.Equals(String.Join("."' resourceParts.Take(baseNameParts.Length))' this.baseResourceName' StringComparison.Ordinal) " is 125.
Long Statement,MvcCodeRouting.Web.Hosting,EmbeddedViewsVirtualPathProvider,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\EmbeddedViewsVirtualPathProvider.cs,RegisterAssembly,The length of the statement  "         string basePath = String.Join("/"' new[] { "Views"' registerSettings.ViewsLocation }.Where(s => !String.IsNullOrEmpty(s))); " is 123.
Long Statement,MvcCodeRouting.Web.Routing,CodeRoute,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Routing\CodeRoute.cs,GetVirtualPath,The length of the statement  "         return this.DoGetVirtualPath(values' requestRouteData.Values' requestRouteData.DataTokens' () => base.GetVirtualPath(requestContext' values)); " is 142.
Long Statement,MvcCodeRouting.Controllers,ActionInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ActionInfo.cs,CreateRouteParameter,The length of the statement  "         return actionParam.Action.Controller.CreateRouteParameter(actionParam.Name' actionParam.Type' routeAttr' actionParam.IsOptional' isCatchAll); " is 141.
Long Statement,MvcCodeRouting.Controllers,ActionInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ActionInfo.cs,CheckCatchAllParamIsLast,The length of the statement  "                     String.Concat(this.DeclaringType.FullName' "."' this.MethodName' "("' String.Join("' "' this.Parameters.Select(p => p.Type.Name))' ")") " is 135.
Long Statement,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckOverloads,The length of the statement  "                     String.Join("' "' first.Select(a => String.Concat(a.DeclaringType.FullName' "."' a.MethodName' "("' String.Join("' "' a.Parameters.Select(p => p.Type.Name))' ")"))) " is 164.
Long Statement,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckCustomRoutes,The length of the statement  "                  String.Join("' "' first.Select(a => String.Concat(a.DeclaringType.FullName' "."' a.MethodName' "("' String.Join("' "' a.Parameters.Select(p => p.Type.Name))' ")"))) " is 164.
Long Statement,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckDefaultActions,The length of the statement  "                     "{0} can only be used once per declaring type: {1}.".FormatInvariant(attrType.FullName' byDeclaringType.First(g => g.Count() > 1).Key.FullName) " is 143.
Long Statement,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,CheckDefaultActions,The length of the statement  "                              String.Concat(defaultAction.DeclaringType.FullName' "."' defaultAction.MethodName' "("' String.Join("' "' defaultAction.Parameters.Select(p => p.Type.Name))' ")") " is 162.
Long Statement,MvcCodeRouting.ParameterBinding.Binders,DecimalParameterBinder,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ParameterBinding\Binders\DecimalParameterBinder.cs,TryBind,The length of the statement  "         if (!Decimal.TryParse(value' NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint' provider' out parsedResult) " is 120.
Long Statement,MvcCodeRouting.ParameterBinding,ParameterBinder,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ParameterBinding\ParameterBinder.cs,CreateInstance,The length of the statement  "            throw new InvalidOperationException("An error occurred when trying to create the ParameterBinder '{0}'. Make sure that the binder has a public parameterless constructor.".FormatInvariant(binderType.FullName)' ex); " is 213.
Empty Catch Block,MvcCodeRouting.Web.Mvc,MvcControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\Controllers\MvcControllerInfo.cs,MvcControllerInfo,The method has an empty catch block.
Empty Catch Block,MvcCodeRouting.Web.Mvc,MvcControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\Controllers\MvcControllerInfo.cs,Create,The method has an empty catch block.
Empty Catch Block,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The method has an empty catch block.
Empty Catch Block,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The method has an empty catch block.
Empty Catch Block,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The method has an empty catch block.
Magic Number,MvcCodeRouting,RouteDebugHandler,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\RouteDebugHandler.cs,ProcessRequest,The following statement contains a magic number: if (!request.IsLocal) {              response.StatusCode = 404;              response.End();              return;           }
Magic Number,MvcCodeRouting,CodeRouteExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ICodeRoute.cs,GetRouteContext,The following statement contains a magic number: if (theController[0] == '~') {                routeContextSegments.Clear();                if (theController.Length > 1                 && theController[1] == '~') {                   theController.Remove(0' 2);                } else {                   string baseRoute = requestRouteDataTokens[DataTokenKeys.BaseRoute] as string;                   if (!String.IsNullOrEmpty(baseRoute)) {                    routeContextSegments.AddRange(baseRoute.Split('/'));                 }                   theController.Remove(0' 1);              }             } else if (theController[0] == '+') {                string currentController = (string)requestRouteValues["controller"];              routeContextSegments.Add(currentController);                theController.Remove(0' 1);             } else if (theController[0] == '.'              && theController.Length > 1              && theController[1] == '.') {                if (routeContextSegments.Count == 0) {                 return null;              }                routeContextSegments.RemoveAt(routeContextSegments.Count - 1);              theController.Remove(0' 2);                if (theController.Length == 0) {                   object namespacesObj;                 string[] namespaces;                   if (requestRouteDataTokens.TryGetValue(DataTokenKeys.Namespaces' out namespacesObj)                    && (namespaces = namespacesObj as string[]) != null                    && namespaces.Length == 1) {                                        string[] namespaceSegments = namespaces[0].Split('.');                    string nsLast = namespaceSegments[namespaceSegments.Length - 1];                    string currentController = (string)requestRouteValues["controller"];                      string parentController = nsLast;                      if (ControllerInfo.NameEquals(nsLast' currentController)                       && namespaceSegments.Length > 1) {                         parentController = namespaceSegments                          .Skip(namespaceSegments.Length - 2)                          .Take(1)                          .First();                    }                      theController.Append(parentController);                 }              }           }
Magic Number,MvcCodeRouting,CodeRouteExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ICodeRoute.cs,GetRouteContext,The following statement contains a magic number: if (theController[0] == '~') {                routeContextSegments.Clear();                if (theController.Length > 1                 && theController[1] == '~') {                   theController.Remove(0' 2);                } else {                   string baseRoute = requestRouteDataTokens[DataTokenKeys.BaseRoute] as string;                   if (!String.IsNullOrEmpty(baseRoute)) {                    routeContextSegments.AddRange(baseRoute.Split('/'));                 }                   theController.Remove(0' 1);              }             } else if (theController[0] == '+') {                string currentController = (string)requestRouteValues["controller"];              routeContextSegments.Add(currentController);                theController.Remove(0' 1);             } else if (theController[0] == '.'              && theController.Length > 1              && theController[1] == '.') {                if (routeContextSegments.Count == 0) {                 return null;              }                routeContextSegments.RemoveAt(routeContextSegments.Count - 1);              theController.Remove(0' 2);                if (theController.Length == 0) {                   object namespacesObj;                 string[] namespaces;                   if (requestRouteDataTokens.TryGetValue(DataTokenKeys.Namespaces' out namespacesObj)                    && (namespaces = namespacesObj as string[]) != null                    && namespaces.Length == 1) {                                        string[] namespaceSegments = namespaces[0].Split('.');                    string nsLast = namespaceSegments[namespaceSegments.Length - 1];                    string currentController = (string)requestRouteValues["controller"];                      string parentController = nsLast;                      if (ControllerInfo.NameEquals(nsLast' currentController)                       && namespaceSegments.Length > 1) {                         parentController = namespaceSegments                          .Skip(namespaceSegments.Length - 2)                          .Take(1)                          .First();                    }                      theController.Append(parentController);                 }              }           }
Magic Number,MvcCodeRouting,CodeRouteExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ICodeRoute.cs,GetRouteContext,The following statement contains a magic number: if (theController[0] == '~') {                routeContextSegments.Clear();                if (theController.Length > 1                 && theController[1] == '~') {                   theController.Remove(0' 2);                } else {                   string baseRoute = requestRouteDataTokens[DataTokenKeys.BaseRoute] as string;                   if (!String.IsNullOrEmpty(baseRoute)) {                    routeContextSegments.AddRange(baseRoute.Split('/'));                 }                   theController.Remove(0' 1);              }             } else if (theController[0] == '+') {                string currentController = (string)requestRouteValues["controller"];              routeContextSegments.Add(currentController);                theController.Remove(0' 1);             } else if (theController[0] == '.'              && theController.Length > 1              && theController[1] == '.') {                if (routeContextSegments.Count == 0) {                 return null;              }                routeContextSegments.RemoveAt(routeContextSegments.Count - 1);              theController.Remove(0' 2);                if (theController.Length == 0) {                   object namespacesObj;                 string[] namespaces;                   if (requestRouteDataTokens.TryGetValue(DataTokenKeys.Namespaces' out namespacesObj)                    && (namespaces = namespacesObj as string[]) != null                    && namespaces.Length == 1) {                                        string[] namespaceSegments = namespaces[0].Split('.');                    string nsLast = namespaceSegments[namespaceSegments.Length - 1];                    string currentController = (string)requestRouteValues["controller"];                      string parentController = nsLast;                      if (ControllerInfo.NameEquals(nsLast' currentController)                       && namespaceSegments.Length > 1) {                         parentController = namespaceSegments                          .Skip(namespaceSegments.Length - 2)                          .Take(1)                          .First();                    }                      theController.Append(parentController);                 }              }           }
Magic Number,MvcCodeRouting,RouteFactory,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\RouteFactory.cs,CreateRouteSettings,The following statement contains a magic number: if (actionCustomRoute != null) {                if (first.CustomRouteIsAbsolute) {                   actionCustomRoute = actionCustomRoute.Substring(2);                   segments.Clear();                   if (baseRoute != null) {                    segments.AddRange(baseRoute.Split('/'));                 }              }                segments.Add(actionCustomRoute);             } else {              segments.Add(!includeActionToken ? first.ActionSegment : "{action}");              segments.AddRange(first.RouteParameters.Select(r => r.RouteSegment));           }
Magic Number,MvcCodeRouting.Web.Mvc,MvcExtensions,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web.Mvc\MvcExtensions.cs,BindRouteProperties,The following statement contains a magic number: if (!modelState.IsValid) {                ModelError error = modelState.First(m => m.Value.Errors.Count > 0).Value.Errors.First();                             int statusCode = 404;              string message = "Not Found";                if (error.Exception != null) {                 throw new HttpException(statusCode' message' error.Exception);              }                throw new HttpException(statusCode' message);           }
Magic Number,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,AssemblyResources,The following statement contains a magic number: this.resourceNames =              (from n in assembly.GetManifestResourceNames()               where n.StartsWith(this.baseResourceName + "."' StringComparison.Ordinal)                  && n.Split('.').Length >= 4               select n).ToArray();
Magic Number,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The following statement contains a magic number: if (this.HasResources) {                string relativeVirtualPath = VirtualPathUtility.ToAppRelative(virtualPath).Remove(0' 2);              List<string> relativeVirtualPathParts = relativeVirtualPath.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries)                 .ToList();                const int minLocalizedFileParts = 3; // {name}.{culture}.{extension}              List<string> fileParts;              string cultureName;              CultureInfo culture = null;                if (isFile                 && (fileParts = relativeVirtualPathParts.Last().Split('.').ToList()).Count >= minLocalizedFileParts                 && (cultureName = Enumerable.Reverse(fileParts).Skip(1).First()).Length > 0) {                   try {                    culture = new CultureInfo(cultureName);                 } catch (ArgumentException) { }                   if (culture != null) {                                        fileParts.RemoveAt(fileParts.Count - 2);                    relativeVirtualPathParts[relativeVirtualPathParts.Count - 1] = String.Join("."' fileParts);                 }              }                for (int i = 0; i < resourceNames.Length; i++) {                   resourceName = resourceNames[i];                 string resourcePath = ResourceNameToRelativeVirtualPath(resourceName);                 string[] resourcePathParts = resourcePath.Split('/');                   bool resourcePathLengthOK = (isFile) ?                    resourcePathParts.Length == relativeVirtualPathParts.Count                    : resourcePathParts.Length > relativeVirtualPathParts.Count;                   if (resourcePathLengthOK) {                      string resourcePath2 = (isFile) ?                       resourcePath                       : String.Join("/"' resourcePathParts.Take(resourcePathParts.Length - 1));                      if (String.Equals(String.Join("/"' relativeVirtualPathParts)' resourcePath2' VirtualPathComparison.Comparison)) {                         if (isFile                          && culture != null) {                            try {                             satelliteAssembly = this.assembly.GetSatelliteAssembly(culture);                               if (satelliteAssembly.GetManifestResourceNames().Contains(resourceName))                                return true;                            } catch (FileNotFoundException) {                          } catch (FileLoadException) { }                         } else {                          satelliteAssembly = null;                          return true;                       }                    }                 }              }           }
Magic Number,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The following statement contains a magic number: if (this.HasResources) {                string relativeVirtualPath = VirtualPathUtility.ToAppRelative(virtualPath).Remove(0' 2);              List<string> relativeVirtualPathParts = relativeVirtualPath.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries)                 .ToList();                const int minLocalizedFileParts = 3; // {name}.{culture}.{extension}              List<string> fileParts;              string cultureName;              CultureInfo culture = null;                if (isFile                 && (fileParts = relativeVirtualPathParts.Last().Split('.').ToList()).Count >= minLocalizedFileParts                 && (cultureName = Enumerable.Reverse(fileParts).Skip(1).First()).Length > 0) {                   try {                    culture = new CultureInfo(cultureName);                 } catch (ArgumentException) { }                   if (culture != null) {                                        fileParts.RemoveAt(fileParts.Count - 2);                    relativeVirtualPathParts[relativeVirtualPathParts.Count - 1] = String.Join("."' fileParts);                 }              }                for (int i = 0; i < resourceNames.Length; i++) {                   resourceName = resourceNames[i];                 string resourcePath = ResourceNameToRelativeVirtualPath(resourceName);                 string[] resourcePathParts = resourcePath.Split('/');                   bool resourcePathLengthOK = (isFile) ?                    resourcePathParts.Length == relativeVirtualPathParts.Count                    : resourcePathParts.Length > relativeVirtualPathParts.Count;                   if (resourcePathLengthOK) {                      string resourcePath2 = (isFile) ?                       resourcePath                       : String.Join("/"' resourcePathParts.Take(resourcePathParts.Length - 1));                      if (String.Equals(String.Join("/"' relativeVirtualPathParts)' resourcePath2' VirtualPathComparison.Comparison)) {                         if (isFile                          && culture != null) {                            try {                             satelliteAssembly = this.assembly.GetSatelliteAssembly(culture);                               if (satelliteAssembly.GetManifestResourceNames().Contains(resourceName))                                return true;                            } catch (FileNotFoundException) {                          } catch (FileLoadException) { }                         } else {                          satelliteAssembly = null;                          return true;                       }                    }                 }              }           }
Magic Number,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,ResourceExists,The following statement contains a magic number: if (this.HasResources) {                string relativeVirtualPath = VirtualPathUtility.ToAppRelative(virtualPath).Remove(0' 2);              List<string> relativeVirtualPathParts = relativeVirtualPath.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries)                 .ToList();                const int minLocalizedFileParts = 3; // {name}.{culture}.{extension}              List<string> fileParts;              string cultureName;              CultureInfo culture = null;                if (isFile                 && (fileParts = relativeVirtualPathParts.Last().Split('.').ToList()).Count >= minLocalizedFileParts                 && (cultureName = Enumerable.Reverse(fileParts).Skip(1).First()).Length > 0) {                   try {                    culture = new CultureInfo(cultureName);                 } catch (ArgumentException) { }                   if (culture != null) {                                        fileParts.RemoveAt(fileParts.Count - 2);                    relativeVirtualPathParts[relativeVirtualPathParts.Count - 1] = String.Join("."' fileParts);                 }              }                for (int i = 0; i < resourceNames.Length; i++) {                   resourceName = resourceNames[i];                 string resourcePath = ResourceNameToRelativeVirtualPath(resourceName);                 string[] resourcePathParts = resourcePath.Split('/');                   bool resourcePathLengthOK = (isFile) ?                    resourcePathParts.Length == relativeVirtualPathParts.Count                    : resourcePathParts.Length > relativeVirtualPathParts.Count;                   if (resourcePathLengthOK) {                      string resourcePath2 = (isFile) ?                       resourcePath                       : String.Join("/"' resourcePathParts.Take(resourcePathParts.Length - 1));                      if (String.Equals(String.Join("/"' relativeVirtualPathParts)' resourcePath2' VirtualPathComparison.Comparison)) {                         if (isFile                          && culture != null) {                            try {                             satelliteAssembly = this.assembly.GetSatelliteAssembly(culture);                               if (satelliteAssembly.GetManifestResourceNames().Contains(resourceName))                                return true;                            } catch (FileNotFoundException) {                          } catch (FileLoadException) { }                         } else {                          satelliteAssembly = null;                          return true;                       }                    }                 }              }           }
Magic Number,MvcCodeRouting.Web.Hosting,AssemblyResources,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting.Web\Hosting\AssemblyResources.cs,GetFileResources,The following statement contains a magic number: return              (from resourceName in resourceNames               let resourceParts = resourceName.Split('.')               where resourceParts.Length == baseNameParts.Length + 2                  && String.Equals(String.Join("."' resourceParts.Take(baseNameParts.Length))' this.baseResourceName' StringComparison.Ordinal)               select resourceName).ToArray();
Magic Number,MvcCodeRouting.Controllers,ControllerInfo,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\ControllerInfo.cs,BuildUrl,The following statement contains a magic number: if (custRoute != null) {                if (this.CustomRouteIsAbsolute) {                   segments.Clear();                   if (this.Register.BaseRoute != null) {                    segments.AddRange(this.Register.BaseRoute.Split('/'));                 }                   custRoute = custRoute.Substring(2);              }                segments.AddRange(custRoute.Split('/'));             } else {                if (!this.IsRootController) {                 segments.Add(template ? "{controller}" : this.ControllerSegment);              }                segments.AddRange(this.RouteProperties.Select(p => p.RouteSegment));           }
Magic Number,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 17;                hash = hash * 23 + this.Name.GetHashCode();              hash = hash * 23 + this.IsOptional.GetHashCode();              hash = hash * 23 + ((this.Constraint != null) ? this.Constraint.GetHashCode() : 0);              hash = hash * 23 + ((this.Binder != null) ? this.Binder.GetHashCode() : 0);                return hash;           }
Magic Number,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 17;                hash = hash * 23 + this.Name.GetHashCode();              hash = hash * 23 + this.IsOptional.GetHashCode();              hash = hash * 23 + ((this.Constraint != null) ? this.Constraint.GetHashCode() : 0);              hash = hash * 23 + ((this.Binder != null) ? this.Binder.GetHashCode() : 0);                return hash;           }
Magic Number,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 17;                hash = hash * 23 + this.Name.GetHashCode();              hash = hash * 23 + this.IsOptional.GetHashCode();              hash = hash * 23 + ((this.Constraint != null) ? this.Constraint.GetHashCode() : 0);              hash = hash * 23 + ((this.Binder != null) ? this.Binder.GetHashCode() : 0);                return hash;           }
Magic Number,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 17;                hash = hash * 23 + this.Name.GetHashCode();              hash = hash * 23 + this.IsOptional.GetHashCode();              hash = hash * 23 + ((this.Constraint != null) ? this.Constraint.GetHashCode() : 0);              hash = hash * 23 + ((this.Binder != null) ? this.Binder.GetHashCode() : 0);                return hash;           }
Magic Number,MvcCodeRouting.Controllers,RouteParameter,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameter.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 17;                hash = hash * 23 + this.Name.GetHashCode();              hash = hash * 23 + this.IsOptional.GetHashCode();              hash = hash * 23 + ((this.Constraint != null) ? this.Constraint.GetHashCode() : 0);              hash = hash * 23 + ((this.Binder != null) ? this.Binder.GetHashCode() : 0);                return hash;           }
Magic Number,MvcCodeRouting.Controllers,RouteParameterCollection,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\Controllers\RouteParameterCollection.cs,GetHashCode,The following statement contains a magic number: unchecked {                int hash = 1;                foreach (var item in this) {                 hash = 31 * hash + (item == null ? 0 : item.GetHashCode());              }                return hash;           }
Magic Number,MvcCodeRouting.ParameterBinding.Binders,GuidParameterBinder,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ParameterBinding\Binders\GuidParameterBinder.cs,TryBind,The following statement contains a magic number: if (value.Length < 36              || value.Length > 38) {                            return false;           }
Magic Number,MvcCodeRouting.ParameterBinding.Binders,GuidParameterBinder,C:\repos\maxtoroq_MvcCodeRouting\src\MvcCodeRouting\ParameterBinding\Binders\GuidParameterBinder.cs,TryBind,The following statement contains a magic number: if (value.Length < 36              || value.Length > 38) {                            return false;           }
