Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Akka.Cluster.Sharding.Tests,AsyncWriteProxyEx,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,ReplayMessagesAsync,The method has 6 parameters. Parameters: context' persistenceId' fromSequenceNr' toSequenceNr' max' recoveryCallback
Long Parameter List,Akka.Cluster.Sharding.Tests,FuturesEx,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,AskEx,The method has 5 parameters. Parameters: self' messageFactory' provider' timeout' cancellationToken
Long Statement,Akka.Cluster.Sharding.Tests,AsyncWriteProxyEx,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,ReplayMessagesAsync,The length of the statement  "            var mediator = context.ActorOf(Props.Create(() => new ReplayMediator(recoveryCallback' replayCompletionPromise' Timeout)).WithDeploy(Deploy.Local)); " is 148.
Long Statement,Akka.Cluster.Sharding.Tests,ReplayMediator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,Receive,The length of the statement  "                    var timeoutException = new AsyncReplayTimeoutException($"Replay timed out after {_replayTimeout.TotalSeconds}s of inactivity"); " is 127.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_setup_shared_journal,The length of the statement  "                Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)); " is 124.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The length of the statement  "                Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)); " is 124.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The length of the statement  "                Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)); " is 124.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,Join,The length of the statement  "                        Cluster.State.Members.Should().Contain(i => i.UniqueAddress == Cluster.SelfUniqueAddress && i.Status == MemberStatus.Up); " is 121.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_specs,The length of the statement  "            Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards(); " is 140.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards,The length of the statement  "                        sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref); " is 132.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_in_new_cluster,The length of the statement  "                        sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref); " is 132.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_setup_shared_journal,The length of the statement  "                Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)); " is 124.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The length of the statement  "                    (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue(); " is 147.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The length of the statement  "                    Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true)))); " is 123.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The length of the statement  "                        ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance)); " is 127.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The length of the statement  "                    ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received"); " is 127.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The length of the statement  "                        probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around"); " is 131.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The length of the statement  "                        probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around"); " is 135.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The length of the statement  "                    ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received"); " is 127.
Long Statement,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The length of the statement  "                        probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around"); " is 132.
Magic Number,Akka.Cluster.Sharding.Tests,FuturesEx,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,AskEx,The following statement contains a magic number: var ctrList = new List<CancellationTokenRegistration>(2);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_use_specified_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      _allocator.Value.Tell(new UseRegion(_region.Value));                      ExpectMsg<UseRegionAck>();                      _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                    _region.Value.Tell(2);                  ExpectMsg(2);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "2" / "2");                  }' _config.First);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.First) / "system" / "sharding" / "Entity" / "2" / "2");                  }' _config.Second);                  EnterBarrier("second-started");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_config.Second) / "system" / "sharding" / "Entity").Tell(new Identify(null));                      var secondRegion = ExpectMsg<ActorIdentity>().Subject;                      _allocator.Value.Tell(new UseRegion(secondRegion));                      ExpectMsg<UseRegionAck>();                  }' _config.First);                  EnterBarrier("second-active");                    _region.Value.Tell(3);                  ExpectMsg(3);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "3" / "3");                  }' _config.Second);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "3" / "3");                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_use_specified_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      _allocator.Value.Tell(new UseRegion(_region.Value));                      ExpectMsg<UseRegionAck>();                      _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                    _region.Value.Tell(2);                  ExpectMsg(2);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "2" / "2");                  }' _config.First);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.First) / "system" / "sharding" / "Entity" / "2" / "2");                  }' _config.Second);                  EnterBarrier("second-started");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_config.Second) / "system" / "sharding" / "Entity").Tell(new Identify(null));                      var secondRegion = ExpectMsg<ActorIdentity>().Subject;                      _allocator.Value.Tell(new UseRegion(secondRegion));                      ExpectMsg<UseRegionAck>();                  }' _config.First);                  EnterBarrier("second-active");                    _region.Value.Tell(3);                  ExpectMsg(3);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "3" / "3");                  }' _config.Second);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "3" / "3");                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_use_specified_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      _allocator.Value.Tell(new UseRegion(_region.Value));                      ExpectMsg<UseRegionAck>();                      _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                    _region.Value.Tell(2);                  ExpectMsg(2);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "2" / "2");                  }' _config.First);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.First) / "system" / "sharding" / "Entity" / "2" / "2");                  }' _config.Second);                  EnterBarrier("second-started");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_config.Second) / "system" / "sharding" / "Entity").Tell(new Identify(null));                      var secondRegion = ExpectMsg<ActorIdentity>().Subject;                      _allocator.Value.Tell(new UseRegion(secondRegion));                      ExpectMsg<UseRegionAck>();                  }' _config.First);                  EnterBarrier("second-active");                    _region.Value.Tell(3);                  ExpectMsg(3);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "3" / "3");                  }' _config.Second);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "3" / "3");                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_use_specified_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      _allocator.Value.Tell(new UseRegion(_region.Value));                      ExpectMsg<UseRegionAck>();                      _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                    _region.Value.Tell(2);                  ExpectMsg(2);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "2" / "2");                  }' _config.First);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.First) / "system" / "sharding" / "Entity" / "2" / "2");                  }' _config.Second);                  EnterBarrier("second-started");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_config.Second) / "system" / "sharding" / "Entity").Tell(new Identify(null));                      var secondRegion = ExpectMsg<ActorIdentity>().Subject;                      _allocator.Value.Tell(new UseRegion(secondRegion));                      ExpectMsg<UseRegionAck>();                  }' _config.First);                  EnterBarrier("second-active");                    _region.Value.Tell(3);                  ExpectMsg(3);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "3" / "3");                  }' _config.Second);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "3" / "3");                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_use_specified_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      _allocator.Value.Tell(new UseRegion(_region.Value));                      ExpectMsg<UseRegionAck>();                      _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                    _region.Value.Tell(2);                  ExpectMsg(2);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "2" / "2");                  }' _config.First);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.First) / "system" / "sharding" / "Entity" / "2" / "2");                  }' _config.Second);                  EnterBarrier("second-started");                    RunOn(() =>                  {                      Sys.ActorSelection(Node(_config.Second) / "system" / "sharding" / "Entity").Tell(new Identify(null));                      var secondRegion = ExpectMsg<ActorIdentity>().Subject;                      _allocator.Value.Tell(new UseRegion(secondRegion));                      ExpectMsg<UseRegionAck>();                  }' _config.First);                  EnterBarrier("second-active");                    _region.Value.Tell(3);                  ExpectMsg(3);                  RunOn(() =>                  {                      LastSender.Path.Should().Be(_region.Value.Path / "3" / "3");                  }' _config.Second);                    RunOn(() =>                  {                      LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "3" / "3");                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_rebalance_specified_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      _allocator.Value.Tell(new RebalanceShards(new string[] { "2" }.ToImmutableHashSet()));                      ExpectMsg<RebalanceShardsAck>();                        AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          _region.Value.Tell(2' p.Ref);                          p.ExpectMsg(2' TimeSpan.FromSeconds(2));                            p.LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "2" / "2");                      });                        _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_rebalance_specified_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      _allocator.Value.Tell(new RebalanceShards(new string[] { "2" }.ToImmutableHashSet()));                      ExpectMsg<RebalanceShardsAck>();                        AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          _region.Value.Tell(2' p.Ref);                          p.ExpectMsg(2' TimeSpan.FromSeconds(2));                            p.LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "2" / "2");                      });                        _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_rebalance_specified_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      _allocator.Value.Tell(new RebalanceShards(new string[] { "2" }.ToImmutableHashSet()));                      ExpectMsg<RebalanceShardsAck>();                        AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          _region.Value.Tell(2' p.Ref);                          p.ExpectMsg(2' TimeSpan.FromSeconds(2));                            p.LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "2" / "2");                      });                        _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingCustomShardAllocationSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Cluster_sharding_with_custom_allocation_strategy_should_rebalance_specified_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      _allocator.Value.Tell(new RebalanceShards(new string[] { "2" }.ToImmutableHashSet()));                      ExpectMsg<RebalanceShardsAck>();                        AwaitAssert(() =>                      {                          var p = CreateTestProbe();                          _region.Value.Tell(2' p.Ref);                          p.ExpectMsg(2' TimeSpan.FromSeconds(2));                            p.LastSender.Path.Should().Be(Node(_config.Second) / "system" / "sharding" / "Entity" / "2" / "2");                      });                        _region.Value.Tell(1);                      ExpectMsg(1);                      LastSender.Path.Should().Be(_region.Value.Path / "1" / "1");                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("21"' 3));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 1);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 2);                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                  }' _config.First);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingFailureSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingFailureSpec.cs,ClusterSharding_with_flaky_journal_network_should_recover_after_journal_network_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.Blackhole(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.Blackhole(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-backholded");                    RunOn(() =>                  {                      // try with a new shard' will not reply until journal is available again                      var region = _region.Value;                      region.Tell(new Add("40"' 4));                      var probe = CreateTestProbe();                      region.Tell(new Get("40")' probe.Ref);                      probe.ExpectNoMsg(TimeSpan.FromSeconds(1));                  }' _config.First);                  EnterBarrier("first-delayed");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          TestConductor.PassThrough(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                      else                      {                          TestConductor.PassThrough(_config.Controller' _config.First' ThrottleTransportAdapter.Direction.Both).Wait();                          TestConductor.PassThrough(_config.Controller' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                      }                  }' _config.Controller);                  EnterBarrier("journal-ok");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 3);                      var entity21 = LastSender;                      var shard2 = Sys.ActorSelection(entity21.Path.Parent);                          //Test the PersistentShardCoordinator allocating shards during a journal failure                      region.Tell(new Add("30"' 3));                        //Test the Shard starting entities and persisting during a journal failure                      region.Tell(new Add("11"' 1));                        //Test the Shard passivate works during a journal failure                      shard2.Tell(new Passivate(PoisonPill.Instance)' entity21);                        AwaitAssert(() =>                      {                          region.Tell(new Get("21"));                          ExpectMsg<Value>(v => v.Id == "21" && v.N == 0' hint: "Passivating did not reset Value down to 0");                      });                        region.Tell(new Add("21"' 1));                        region.Tell(new Get("21"));                      ExpectMsg<Value>(v => v.Id == "21" && v.N == 1);                        region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 3);                        region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 1);                        region.Tell(new Get("40"));                      ExpectMsg<Value>(v => v.Id == "40" && v.N == 4);                  }' _config.First);                  EnterBarrier("verified-first");                    RunOn(() =>                  {                      var region = _region.Value;                      region.Tell(new Add("10"' 1));                      region.Tell(new Add("20"' 2));                      region.Tell(new Add("30"' 3));                      region.Tell(new Add("11"' 4));                      region.Tell(new Get("10"));                      ExpectMsg<Value>(v => v.Id == "10" && v.N == 2);                      region.Tell(new Get("11"));                      ExpectMsg<Value>(v => v.Id == "11" && v.N == 5);                      region.Tell(new Get("20"));                      ExpectMsg<Value>(v => v.Id == "20" && v.N == 4);                      region.Tell(new Get("30"));                      ExpectMsg<Value>(v => v.Id == "30" && v.N == 6);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_join_cluster,The following statement contains a magic number: AwaitAssert(() =>              {                  Cluster.Get(Sys).SendCurrentClusterState(TestActor);                  ExpectMsg<ClusterEvent.CurrentClusterState>().Members.Count.Should().Be(3);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // trigger starting of 4 entities                          foreach (var n in Enumerable.Range(1' 4))                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // trigger starting of 4 entities                          foreach (var n in Enumerable.Range(1' 4))                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // trigger starting of 4 entities                          foreach (var n in Enumerable.Range(1' 4))                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(GetCurrentRegions.Instance' probe.Ref);                      var regions = probe.ExpectMsg<CurrentRegions>().Regions;                      regions.Count.Should().Be(2);                        foreach (var region in regions)                      {                          var path = new RootActorPath(region) / "system" / "sharding" / ShardTypeName;                          Sys.ActorSelection(path).Tell(GetShardRegionState.Instance' probe.Ref);                      }                        var states = probe.ReceiveWhile(null' m => (CurrentShardRegionState)m' regions.Count);                      var allEntityIds = states.SelectMany(i => i.Shards).SelectMany(j => j.EntityIds).ToImmutableHashSet();                      allEntityIds.Should().BeEquivalentTo(new string[] { "1"' "2"' "3"' "4" });                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStateSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(GetCurrentRegions.Instance' probe.Ref);                      var regions = probe.ExpectMsg<CurrentRegions>().Regions;                      regions.Count.Should().Be(2);                        foreach (var region in regions)                      {                          var path = new RootActorPath(region) / "system" / "sharding" / ShardTypeName;                          Sys.ActorSelection(path).Tell(GetShardRegionState.Instance' probe.Ref);                      }                        var states = probe.ReceiveWhile(null' m => (CurrentShardRegionState)m' regions.Count);                      var allEntityIds = states.SelectMany(i => i.Shards).SelectMany(j => j.EntityIds).ToImmutableHashSet();                      allEntityIds.Should().BeEquivalentTo(new string[] { "1"' "2"' "3"' "4" });                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      Cluster.Get(Sys).State.Members.Count(i => i.Status == MemberStatus.Up).Should().Be(4);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      Cluster.Get(Sys).State.Members.Count(i => i.Status == MemberStatus.Up).Should().Be(4);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_empty_state_when_no_sharded_actors_has_started,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var shardStats = probe.ExpectMsg<ClusterShardingStats>();                      shardStats.Regions.Count.Should().Be(3);                      shardStats.Regions.Values.Sum(i => i.Stats.Count).Should().Be(0);                      shardStats.Regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_empty_state_when_no_sharded_actors_has_started,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var shardStats = probe.ExpectMsg<ClusterShardingStats>();                      shardStats.Regions.Count.Should().Be(3);                      shardStats.Regions.Values.Sum(i => i.Stats.Count).Should().Be(0);                      shardStats.Regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_empty_state_when_no_sharded_actors_has_started,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var shardStats = probe.ExpectMsg<ClusterShardingStats>();                      shardStats.Regions.Count.Should().Be(3);                      shardStats.Regions.Values.Sum(i => i.Stats.Count).Should().Be(0);                      shardStats.Regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                              // trigger starting of 2 entities on first and second node                          // but leave third node without entities                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                              // trigger starting of 2 entities on first and second node                          // but leave third node without entities                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                              // trigger starting of 2 entities on first and second node                          // but leave third node without entities                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                              // trigger starting of 2 entities on first and second node                          // but leave third node without entities                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_trigger_sharded_actors,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                              // trigger starting of 2 entities on first and second node                          // but leave third node without entities                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                      regions.Count.Should().Be(3);                      regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                      regions.Count.Should().Be(3);                      regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                      regions.Count.Should().Be(3);                      regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_get_shard_state,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(10)))' probe.Ref);                      var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                      regions.Count.Should().Be(3);                      regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      regions.Keys.Should().OnlyContain(i => i.HasGlobalScope);                  });              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).State.Members.Count.Should().Be(3);                      });                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(30)' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).State.Members.Count.Should().Be(3);                      });                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // make sure we have the 4 entities still alive across the fewer nodes                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // make sure we have the 4 entities still alive across the fewer nodes                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // make sure we have the 4 entities still alive across the fewer nodes                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // make sure we have the 4 entities still alive across the fewer nodes                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          var pingProbe = CreateTestProbe();                          // make sure we have the 4 entities still alive across the fewer nodes                          foreach (var n in new int[] { 1' 2' 4' 6 })                          {                              _region.Value.Tell(new Ping(n)' pingProbe.Ref);                          }                          pingProbe.ReceiveWhile(null' m => (Pong)m' 4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(20)' () =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(20)))' probe.Ref);                          var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                          regions.Count.Should().Be(2);                          regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(20)' () =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(20)))' probe.Ref);                          var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                          regions.Count.Should().Be(2);                          regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(20)' () =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(20)))' probe.Ref);                          var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                          regions.Count.Should().Be(2);                          regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGetStatsSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStatsSpec.cs,Inspecting_cluster_sharding_state_should_return_stats_after_a_node_leaves,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(20)' () =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          _region.Value.Tell(new GetClusterShardingStats(Dilated(TimeSpan.FromSeconds(20)))' probe.Ref);                          var regions = probe.ExpectMsg<ClusterShardingStats>().Regions;                          regions.Count.Should().Be(2);                          regions.Values.SelectMany(i => i.Stats.Values).Sum().Should().Be(4);                      });                  });              }' _config.Controller);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,StartSharding,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_start_some_shards_in_both_regions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      var regionAddresses = Enumerable.Range(1' 100)                          .Select(n =>                          {                              _region.Value.Tell(n' probe.Ref);                              probe.ExpectMsg(n' TimeSpan.FromSeconds(1));                              return probe.LastSender.Path.Address;                          })                          .ToImmutableHashSet();                        regionAddresses.Count.Should().Be(2);                  });                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_start_some_shards_in_both_regions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      var regionAddresses = Enumerable.Range(1' 100)                          .Select(n =>                          {                              _region.Value.Tell(n' probe.Ref);                              probe.ExpectMsg(n' TimeSpan.FromSeconds(1));                              return probe.LastSender.Path.Address;                          })                          .ToImmutableHashSet();                        regionAddresses.Count.Should().Be(2);                  });                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_start_some_shards_in_both_regions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    AwaitAssert(() =>                  {                      var probe = CreateTestProbe();                      var regionAddresses = Enumerable.Range(1' 100)                          .Select(n =>                          {                              _region.Value.Tell(n' probe.Ref);                              probe.ExpectMsg(n' TimeSpan.FromSeconds(1));                              return probe.LastSender.Path.Address;                          })                          .ToImmutableHashSet();                        regionAddresses.Count.Should().Be(2);                  });                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_a_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      _region.Value.Tell(GracefulShutdown.Instance);                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          for (int i = 1; i <= 200; i++)                          {                              _region.Value.Tell(i' probe.Ref);                              probe.ExpectMsg(i' TimeSpan.FromSeconds(1));                              probe.LastSender.Path.Should().Be(_region.Value.Path / i.ToString() / i.ToString());                          }                      });                  }' _config.First);                  EnterBarrier("handoff-completed");                    RunOn(() =>                  {                      var region = _region.Value;                      Watch(region);                      ExpectTerminated(region);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_a_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      _region.Value.Tell(GracefulShutdown.Instance);                  }' _config.Second);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          for (int i = 1; i <= 200; i++)                          {                              _region.Value.Tell(i' probe.Ref);                              probe.ExpectMsg(i' TimeSpan.FromSeconds(1));                              probe.LastSender.Path.Should().Be(_region.Value.Path / i.ToString() / i.ToString());                          }                      });                  }' _config.First);                  EnterBarrier("handoff-completed");                    RunOn(() =>                  {                      var region = _region.Value;                      Watch(region);                      ExpectTerminated(region);                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_empty_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var allocationStrategy = new LeastShardAllocationStrategy(2' 1);                      var regionEmpty = ClusterSharding.Get(Sys).Start(                          typeName: "EntityEmpty"'                          entityProps: Props.Create<Entity>()'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: extractEntityId'                          extractShardId: extractShardId'                          allocationStrategy: allocationStrategy'                          handOffStopMessage: StopEntity.Instance);                        Watch(regionEmpty);                      regionEmpty.Tell(GracefulShutdown.Instance);                      ExpectTerminated(regionEmpty' TimeSpan.FromSeconds(5));                  }' _config.First);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_empty_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var allocationStrategy = new LeastShardAllocationStrategy(2' 1);                      var regionEmpty = ClusterSharding.Get(Sys).Start(                          typeName: "EntityEmpty"'                          entityProps: Props.Create<Entity>()'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: extractEntityId'                          extractShardId: extractShardId'                          allocationStrategy: allocationStrategy'                          handOffStopMessage: StopEntity.Instance);                        Watch(regionEmpty);                      regionEmpty.Tell(GracefulShutdown.Instance);                      ExpectTerminated(regionEmpty' TimeSpan.FromSeconds(5));                  }' _config.First);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingGracefulShutdownSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGracefulShutdownSpec.cs,ClusterSharding_should_gracefully_shutdown_empty_region,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var allocationStrategy = new LeastShardAllocationStrategy(2' 1);                      var regionEmpty = ClusterSharding.Get(Sys).Start(                          typeName: "EntityEmpty"'                          entityProps: Props.Create<Entity>()'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: extractEntityId'                          extractShardId: extractShardId'                          allocationStrategy: allocationStrategy'                          handOffStopMessage: StopEntity.Instance);                        Watch(regionEmpty);                      regionEmpty.Tell(GracefulShutdown.Instance);                      ExpectTerminated(regionEmpty' TimeSpan.FromSeconds(5));                  }' _config.First);              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,Join,The following statement contains a magic number: RunOn(() =>              {                  Cluster.Join(Node(to).Address);                  StartSharding();                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Should().Contain(i => i.UniqueAddress == Cluster.SelfUniqueAddress && i.Status == MemberStatus.Up);                      });                  });              }' from);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_setup_shared_journal,The following statement contains a magic number: var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_setup_shared_journal,The following statement contains a magic number: probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_join_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                  Join(_config.Fourth' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should_initialize_shards,The following statement contains a magic number: RunOn(() =>              {                  var shardLocations = Sys.ActorOf(Props.Create<ShardLocations>()' "shardLocations");                  var locations = Enumerable.Range(1' 10)                      .Select(n =>                      {                          var id = n.ToString();                          _region.Value.Tell(new Ping(id));                          return new KeyValuePair<string' IActorRef>(id' ExpectMsg<IActorRef>());                      })                      .ToImmutableDictionary(kv => kv.Key' kv => kv.Value);                    shardLocations.Tell(new Locations(locations));              }' _config.First);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should__recover_after_leaving_coordinator_node,The following statement contains a magic number: RunOn(() =>              {                  var region = _region.Value;                  Watch(region);                  ExpectTerminated(region' TimeSpan.FromSeconds(15));              }' _config.First);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardinLeavingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingLeavingSpec.cs,ClusterSharding_with_leaving_member_should__recover_after_leaving_coordinator_node,The following statement contains a magic number: RunOn(() =>              {                  Within(TimeSpan.FromSeconds(15)' () =>                  {                      AwaitAssert(() =>                      {                          var region = _region.Value;                          var probe = CreateTestProbe();                          foreach (var kv in originalLocations.LocationMap)                          {                              var id = kv.Key;                              var r = kv.Value;                              region.Tell(new Ping(id)' probe.Ref);                              if (r.Path.Address.Equals(firstAddress))                                  probe.ExpectMsg<IActorRef>(TimeSpan.FromSeconds(1)).Should().NotBe(r);                              else                                  probe.ExpectMsg(r' TimeSpan.FromSeconds(1)); // should not move                          }                      });                  });              }' _config.Second' _config.Third' _config.Fourth);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,StartSharding,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingMinMembersSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingMinMembersSpec.cs,Cluster_with_min_nr_of_members_using_sharding_should_use_all_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.First);                    Join(_config.Second' _config.First);                  RunOn(() =>                  {                      StartSharding();                  }' _config.Second);                    Join(_config.Third' _config.First);                  // wait with starting sharding on third                  Within(Remaining' () =>                  {                      AwaitAssert(() =>                      {                          Cluster.State.Members.Count.Should().Be(3);                          Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                      });                  });                  EnterBarrier("all-up");                    RunOn(() =>                  {                      _region.Value.Tell(1);                      // not allocated because third has not registered yet                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _config.First);                  EnterBarrier("verified");                    RunOn(() =>                  {                      StartSharding();                  }' _config.Third);                    RunOn(() =>                  {                      // the 1 was sent above                      ExpectMsg(1);                      _region.Value.Tell(2);                      ExpectMsg(2);                      _region.Value.Tell(3);                      ExpectMsg(3);                  }' _config.First);                  EnterBarrier("shards-allocated");                    _region.Value.Tell(new GetClusterShardingStats(Remaining));                    var stats = ExpectMsg<ClusterShardingStats>();                  var firstAddress = Node(_config.First).Address;                  var secondAddress = Node(_config.Second).Address;                  var thirdAddress = Node(_config.Third).Address;                    stats.Regions.Keys.Should().BeEquivalentTo(new Address[] { firstAddress' secondAddress' thirdAddress });                  stats.Regions[firstAddress].Stats.Values.Sum().Should().Be(1);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_up_first_cluster_and_sharding,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(3);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.First' _config.Second' _config.Third);                    RunOn(() =>                  {                      StartShardingWithExtractor1();                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-up");                    RunOn(() =>                  {                      // one entity for each shard id                      foreach (var n in Enumerable.Range(1' 10))                      {                          Region(Sys).Tell(n);                          ExpectMsg(n);                      }                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-entities-up");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_up_first_cluster_and_sharding,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(3);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.First' _config.Second' _config.Third);                    RunOn(() =>                  {                      StartShardingWithExtractor1();                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-up");                    RunOn(() =>                  {                      // one entity for each shard id                      foreach (var n in Enumerable.Range(1' 10))                      {                          Region(Sys).Tell(n);                          ExpectMsg(n);                      }                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-entities-up");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_up_first_cluster_and_sharding,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(3);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.First' _config.Second' _config.Third);                    RunOn(() =>                  {                      StartShardingWithExtractor1();                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-up");                    RunOn(() =>                  {                      // one entity for each shard id                      foreach (var n in Enumerable.Range(1' 10))                      {                          Region(Sys).Tell(n);                          ExpectMsg(n);                      }                  }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-entities-up");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_shutdown_sharding_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      TestConductor.Exit(_config.Second' 0).Wait();                      TestConductor.Exit(_config.Third' 0).Wait();                  }' _config.First);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(1);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.First);                });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // start it with a new shard id extractor' which will put the entities                  // on different shards                    RunOn(() =>                  {                      Watch(Region(Sys));                      Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(Region(Sys));                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                    }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-terminated");                    // no sharding nodes left of the original cluster' start a new nodes                  RunOn(() =>                  {                      var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Node(_config.First).Address);                      StartShardingWithExtractor2(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        CurrentShardRegionState stats = null;                      Within(TimeSpan.FromSeconds(10)' () =>                      {                          AwaitAssert(() =>                          {                              Region(sys2).Tell(GetShardRegionState.Instance);                              var reply = ExpectMsg<CurrentShardRegionState>();                              reply.Shards.Should().NotBeEmpty();                              stats = reply;                          });                      });                        foreach (var shardState in stats.Shards)                      {                          foreach (var entityId in shardState.EntityIds)                          {                              var calculatedShardId = extractShardId2(int.Parse(entityId));                              calculatedShardId.ShouldAllBeEquivalentTo(shardState.ShardId);                          }                      }                        EnterBarrier("verified");                      Shutdown(sys2);                  }' _config.Second' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("verified");                  }' _config.First);                    EnterBarrier("done");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // start it with a new shard id extractor' which will put the entities                  // on different shards                    RunOn(() =>                  {                      Watch(Region(Sys));                      Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(Region(Sys));                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                    }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-terminated");                    // no sharding nodes left of the original cluster' start a new nodes                  RunOn(() =>                  {                      var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Node(_config.First).Address);                      StartShardingWithExtractor2(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        CurrentShardRegionState stats = null;                      Within(TimeSpan.FromSeconds(10)' () =>                      {                          AwaitAssert(() =>                          {                              Region(sys2).Tell(GetShardRegionState.Instance);                              var reply = ExpectMsg<CurrentShardRegionState>();                              reply.Shards.Should().NotBeEmpty();                              stats = reply;                          });                      });                        foreach (var shardState in stats.Shards)                      {                          foreach (var entityId in shardState.EntityIds)                          {                              var calculatedShardId = extractShardId2(int.Parse(entityId));                              calculatedShardId.ShouldAllBeEquivalentTo(shardState.ShardId);                          }                      }                        EnterBarrier("verified");                      Shutdown(sys2);                  }' _config.Second' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("verified");                  }' _config.First);                    EnterBarrier("done");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // start it with a new shard id extractor' which will put the entities                  // on different shards                    RunOn(() =>                  {                      Watch(Region(Sys));                      Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(Region(Sys));                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                    }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-terminated");                    // no sharding nodes left of the original cluster' start a new nodes                  RunOn(() =>                  {                      var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Node(_config.First).Address);                      StartShardingWithExtractor2(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        CurrentShardRegionState stats = null;                      Within(TimeSpan.FromSeconds(10)' () =>                      {                          AwaitAssert(() =>                          {                              Region(sys2).Tell(GetShardRegionState.Instance);                              var reply = ExpectMsg<CurrentShardRegionState>();                              reply.Shards.Should().NotBeEmpty();                              stats = reply;                          });                      });                        foreach (var shardState in stats.Shards)                      {                          foreach (var entityId in shardState.EntityIds)                          {                              var calculatedShardId = extractShardId2(int.Parse(entityId));                              calculatedShardId.ShouldAllBeEquivalentTo(shardState.ShardId);                          }                      }                        EnterBarrier("verified");                      Shutdown(sys2);                  }' _config.Second' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("verified");                  }' _config.First);                    EnterBarrier("done");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesNewExtractorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesNewExtractorSpec.cs,Cluster_sharding_with_remember_entities_should_start_new_nodes_with_different_extractor_and_have_the_entities_running_on_the_right_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // start it with a new shard id extractor' which will put the entities                  // on different shards                    RunOn(() =>                  {                      Watch(Region(Sys));                      Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(Region(Sys));                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                    }' _config.Second' _config.Third);                  EnterBarrier("first-cluster-terminated");                    // no sharding nodes left of the original cluster' start a new nodes                  RunOn(() =>                  {                      var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Node(_config.First).Address);                      StartShardingWithExtractor2(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        CurrentShardRegionState stats = null;                      Within(TimeSpan.FromSeconds(10)' () =>                      {                          AwaitAssert(() =>                          {                              Region(sys2).Tell(GetShardRegionState.Instance);                              var reply = ExpectMsg<CurrentShardRegionState>();                              reply.Shards.Should().NotBeEmpty();                              stats = reply;                          });                      });                        foreach (var shardState in stats.Shards)                      {                          foreach (var entityId in shardState.EntityIds)                          {                              var calculatedShardId = extractShardId2(int.Parse(entityId));                              calculatedShardId.ShouldAllBeEquivalentTo(shardState.ShardId);                          }                      }                        EnterBarrier("verified");                      Shutdown(sys2);                  }' _config.Second' _config.Third);                    RunOn(() =>                  {                      EnterBarrier("verified");                  }' _config.First);                    EnterBarrier("done");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,StartSharding,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_when_coordinator_fail_over,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.Second' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                      _region.Value.Tell(1);                      ExpectMsg<Started>();                  }' _config.Second);                  EnterBarrier("second-started");                    Join(_config.Third' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                  }' _config.Third);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(2);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.Second' _config.Third);                  EnterBarrier("all-up");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          // Entity 1 in region of first node was started when there was only one node                          // and then the remembering state will be replicated to second node by the                          // gossip. So we must give that a chance to replicate before shutting down second.                          Thread.Sleep(5000);                      }                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.First);                    EnterBarrier("crash-second");                    RunOn(() =>                  {                      ExpectMsg<Started>(Remaining);                  }' _config.Third);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_when_coordinator_fail_over,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.Second' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                      _region.Value.Tell(1);                      ExpectMsg<Started>();                  }' _config.Second);                  EnterBarrier("second-started");                    Join(_config.Third' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                  }' _config.Third);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(2);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.Second' _config.Third);                  EnterBarrier("all-up");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          // Entity 1 in region of first node was started when there was only one node                          // and then the remembering state will be replicated to second node by the                          // gossip. So we must give that a chance to replicate before shutting down second.                          Thread.Sleep(5000);                      }                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.First);                    EnterBarrier("crash-second");                    RunOn(() =>                  {                      ExpectMsg<Started>(Remaining);                  }' _config.Third);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_when_coordinator_fail_over,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.Second' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                      _region.Value.Tell(1);                      ExpectMsg<Started>();                  }' _config.Second);                  EnterBarrier("second-started");                    Join(_config.Third' _config.Second);                  RunOn(() =>                  {                      StartSharding(Sys' TestActor);                  }' _config.Third);                    RunOn(() =>                  {                      Within(Remaining' () =>                      {                          AwaitAssert(() =>                          {                              Cluster.State.Members.Count.Should().Be(2);                              Cluster.State.Members.Should().OnlyContain(i => i.Status == MemberStatus.Up);                          });                      });                  }' _config.Second' _config.Third);                  EnterBarrier("all-up");                    RunOn(() =>                  {                      if (IsDDataMode)                      {                          // Entity 1 in region of first node was started when there was only one node                          // and then the remembering state will be replicated to second node by the                          // gossip. So we must give that a chance to replicate before shutting down second.                          Thread.Sleep(5000);                      }                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.First);                    EnterBarrier("crash-second");                    RunOn(() =>                  {                      ExpectMsg<Started>(Remaining);                  }' _config.Third);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_in_new_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      Watch(_region.Value);                        Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(_region.Value);                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                      // no nodes left of the original cluster' start a new cluster                        var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      StartSharding(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        Shutdown(sys2);                  }' _config.Third);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_in_new_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      Watch(_region.Value);                        Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(_region.Value);                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                      // no nodes left of the original cluster' start a new cluster                        var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      StartSharding(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        Shutdown(sys2);                  }' _config.Third);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingRememberEntitiesSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingRememberEntitiesSpec.cs,Cluster_sharding_with_remember_entities_should_start_remembered_entities_in_new_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      Watch(_region.Value);                        Cluster.Get(Sys).Leave(Cluster.Get(Sys).SelfAddress);                      ExpectTerminated(_region.Value);                      AwaitAssert(() =>                      {                          Cluster.Get(Sys).IsTerminated.Should().BeTrue();                      });                      // no nodes left of the original cluster' start a new cluster                        var sys2 = ActorSystem.Create(Sys.Name' Sys.Settings.Config);                      var probe2 = CreateTestProbe(sys2);                        if (!IsDDataMode)                      {                          // setup Persistence                          Persistence.Persistence.Instance.Apply(sys2);                          sys2.ActorSelection(Node(_config.First) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null)' probe2.Ref);                          var sharedStore = probe2.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                          sharedStore.Should().NotBeNull();                            MemoryJournalShared.SetStore(sharedStore' sys2);                      }                        Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      StartSharding(sys2' probe2.Ref);                      probe2.ExpectMsg<Started>(TimeSpan.FromSeconds(20));                        Shutdown(sys2);                  }' _config.Third);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,Counter,The following statement contains a magic number: Context.SetReceiveTimeout(TimeSpan.FromMinutes(2));
Magic Number,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PostStop,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterShardingSpec,The following statement contains a magic number: ReplicatorRef = Sys.ActorOf(Replicator.Props(ReplicatorSettings.Create(Sys)                  .WithGossipInterval(TimeSpan.FromSeconds(1))                  .WithMaxDeltaElements(10))' "replicator");
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = BackoffSupervisor.Props(                      CoordinatorProps(typeName' rebalanceEnabled' rememberEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1'                      -1).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = BackoffSupervisor.Props(                      CoordinatorProps(typeName' rebalanceEnabled' rememberEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1'                      -1).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,CreateCoordinator,The following statement contains a magic number: var singletonProps = BackoffSupervisor.Props(                      CoordinatorProps(typeName' rebalanceEnabled' rememberEnabled)'                      "coordinator"'                      TimeSpan.FromSeconds(5)'                      TimeSpan.FromSeconds(5)'                      0.1'                      -1).WithDeploy(Deploy.Local);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,CoordinatorProps,The following statement contains a magic number: var allocationStrategy = new LeastShardAllocationStrategy(2' 1);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,CreateRegion,The following statement contains a magic number: return Sys.ActorOf(Props.Create(() => new ShardRegion(                  typeName'                  entityId => QualifiedCounter.Props(typeName' entityId)'                  settings'                  "/user/" + typeName + "Coordinator/singleton/coordinator"'                  Counter.ExtractEntityId'                  Counter.ExtractShardId'                  PoisonPill.Instance'                  ReplicatorRef'                  3))'                  typeName + "Region");
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection(Node(_config.Controller) / "system" / "akka.persistence.journal.MemoryJournal").Tell(new Identify(null));                  var sharedStore = ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(10)).Subject;                  sharedStore.Should().NotBeNull();                    MemoryJournalShared.SetStore(sharedStore' Sys);              }' _config.First' _config.Second' _config.Third' _config.Fourth' _config.Fifth' _config.Sixth);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_setup_shared_journal,The following statement contains a magic number: RunOn(() =>              {                  //check persistence running                  var probe = CreateTestProbe();                  var journal = Persistence.Persistence.Instance.Get(Sys).JournalFor(null);                  journal.Tell(new Persistence.ReplayMessages(0' 0' long.MaxValue' Guid.NewGuid().ToString()' probe.Ref));                  probe.ExpectMsg<Persistence.RecoverySuccess>(TimeSpan.FromSeconds(10));              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_work_in_single_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(1));                        ExpectMsg(2);                      r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(m => m.Regions.Count == 1 && m.Regions.Contains(Cluster.SelfAddress));                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_work_in_single_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.First' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(1' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(1));                        ExpectMsg(2);                      r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(m => m.Regions.Count == 1 && m.Regions.Contains(Cluster.SelfAddress));                  }' _config.First);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_second_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(2' Counter.Decrement.Instance));                      r.Tell(new Counter.Get(2));                        ExpectMsg(2);                        r.Tell(new Counter.EntityEnvelope(11' Counter.Increment.Instance));                      r.Tell(new Counter.EntityEnvelope(12' Counter.Increment.Instance));                      r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                  }' _config.Second);                  EnterBarrier("second-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(Node(_config.Second) / "user" / $"{TestCounterShardingTypeName}Region" / "2" / "2");                        r.Tell(new Counter.Get(11));                      ExpectMsg(1);                      var path11 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "11" / "11").ToStringWithoutAddress());                      r.Tell(new Counter.Get(12));                      ExpectMsg(1);                      var path12 = LastSender.Path;                      LastSender.Path.ToStringWithoutAddress().Should().Be((r.Path / "0" / "12").ToStringWithoutAddress());                        //one has to be local' the other one remote                      (path11.Address.HasLocalScope && path12.Address.HasGlobalScope || path11.Address.HasGlobalScope && path12.Address.HasLocalScope).Should().BeTrue();                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(2));                      ExpectMsg(3);                      LastSender.Path.Should().Be(r.Path / "2" / "2");                        r.Tell(GetCurrentRegions.Instance);                      ExpectMsg<CurrentRegions>(x => x.Regions.SetEquals(new[] { Cluster.SelfAddress' Node(_config.First).Address }));                  }' _config.Second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_passivation_and_activation_of_entities,The following statement contains a magic number: RunOn(() =>              {                  var r = _region.Value;                  r.Tell(new Counter.Get(2));                  ExpectMsg(3);                  r.Tell(new Counter.EntityEnvelope(2' ReceiveTimeout.Instance));                  // let the Passivate-Stop roundtrip begin to trigger buffering of subsequent messages                  Thread.Sleep(200);                  r.Tell(new Counter.EntityEnvelope(2' Counter.Increment.Instance));                  r.Tell(new Counter.Get(2));                  ExpectMsg(4);              }' _config.Second);
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: TestCounterShardingTypeName'                          settings: settings'                          coordinatorPath: $"/user/{TestCounterShardingTypeName}Coordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId'                          replicator: Sys.DeadLetters'                          majorityMinCap: 0                          )' "regionProxy");                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _config.Second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: TestCounterShardingTypeName'                          settings: settings'                          coordinatorPath: $"/user/{TestCounterShardingTypeName}Coordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId'                          replicator: Sys.DeadLetters'                          majorityMinCap: 0                          )' "regionProxy");                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _config.Second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: TestCounterShardingTypeName'                          settings: settings'                          coordinatorPath: $"/user/{TestCounterShardingTypeName}Coordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId'                          replicator: Sys.DeadLetters'                          majorityMinCap: 0                          )' "regionProxy");                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _config.Second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_support_proxy_only_mode,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  RunOn(() =>                  {                      var cfg = ConfigurationFactory.ParseString(@"                          retry-interval = 1s                          buffer-size = 1000")                          .WithFallback(Sys.Settings.Config.GetConfig("akka.cluster.sharding"));                        var settings = ClusterShardingSettings.Create(cfg' Sys.Settings.Config.GetConfig("akka.cluster.singleton"));                      var proxy = Sys.ActorOf(ShardRegion.ProxyProps(                          typeName: TestCounterShardingTypeName'                          settings: settings'                          coordinatorPath: $"/user/{TestCounterShardingTypeName}Coordinator/singleton/coordinator"'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId'                          replicator: Sys.DeadLetters'                          majorityMinCap: 0                          )' "regionProxy");                        proxy.Tell(new Counter.Get(1));                      ExpectMsg(2);                      proxy.Tell(new Counter.Get(2));                      ExpectMsg(4);                  }' _config.Second);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              probe1.LastSender.Path.Should().Be(r.Path / "2" / "2");                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              probe2.LastSender.Path.Should().Be(r.Path / "0" / "12");                          });                      });                  }' _config.First);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              probe1.LastSender.Path.Should().Be(r.Path / "2" / "2");                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              probe2.LastSender.Path.Should().Be(r.Path / "0" / "12");                          });                      });                  }' _config.First);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              probe1.LastSender.Path.Should().Be(r.Path / "2" / "2");                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              probe2.LastSender.Path.Should().Be(r.Path / "0" / "12");                          });                      });                  }' _config.First);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_failover_shards_on_crashed_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(x => true)' new PredicateMatcher(x => true))));                  EnterBarrier("logs-muted");                    RunOn(() =>                  {                      TestConductor.Exit(_config.Second' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-second");                    RunOn(() =>                  {                      var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(2)' probe1.Ref);                              probe1.ExpectMsg(4);                              probe1.LastSender.Path.Should().Be(r.Path / "2" / "2");                          });                      });                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              var r = _region.Value;                              r.Tell(new Counter.Get(12)' probe2.Ref);                              probe2.ExpectMsg(1);                              probe2.LastSender.Path.Should().Be(r.Path / "0" / "12");                          });                      });                  }' _config.First);                  EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_use_third_and_fourth_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_config.Third' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 10; i++)                          r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                        r.Tell(new Counter.Get(3));                      ExpectMsg(10);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                  EnterBarrier("third-update");                    Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var r = _region.Value;                      for (int i = 0; i < 20; i++)                          r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                        r.Tell(new Counter.Get(4));                      ExpectMsg(20);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("fourth-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.EntityEnvelope(3' Counter.Increment.Instance));                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                        r.Tell(new Counter.EntityEnvelope(4' Counter.Increment.Instance));                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                  }' _config.First);                  EnterBarrier("first-update");                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(3));                      ExpectMsg(11);                      LastSender.Path.Should().Be(r.Path / "3" / "3");                  }' _config.Third);                    RunOn(() =>                  {                      var r = _region.Value;                      r.Tell(new Counter.Get(4));                      ExpectMsg(21);                      LastSender.Path.Should().Be(r.Path / "4" / "4");                  }' _config.Fourth);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_config.Fifth' _config.Fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_config.First' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              probe3.LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              probe4.LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                          });                      });                  }' _config.Fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_config.Fifth' _config.Fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_config.First' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              probe3.LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              probe4.LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                          });                      });                  }' _config.Fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_config.Fifth' _config.Fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_config.First' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              probe3.LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              probe4.LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                          });                      });                  }' _config.Fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_config.Fifth' _config.Fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_config.First' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              probe3.LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              probe4.LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                          });                      });                  }' _config.Fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_recover_coordinator_state_after_coordinator_crash,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Join(_config.Fifth' _config.Fourth);                  RunOn(() =>                  {                      TestConductor.Exit(_config.First' 0).Wait();                  }' _config.Controller);                  EnterBarrier("crash-first");                    RunOn(() =>                  {                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(3)' probe3.Ref);                              probe3.ExpectMsg(11);                              probe3.LastSender.Path.Should().Be(Node(_config.Third) / "user" / $"{TestCounterShardingTypeName}Region" / "3" / "3");                          });                      });                        var probe4 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Within(TimeSpan.FromSeconds(1)' () =>                          {                              _region.Value.Tell(new Counter.Get(4)' probe4.Ref);                              probe4.ExpectMsg(21);                              probe4.LastSender.Path.Should().Be(Node(_config.Fourth) / "user" / $"{TestCounterShardingTypeName}Region" / "4" / "4");                          });                      });                  }' _config.Fifth);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_rebalance_to_nodes_with_less_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  RunOn(() =>                  {                      for (int i = 1; i <= 10; i++)                      {                          var rebalancingRegion = _rebalancingRegion.Value;                          rebalancingRegion.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          rebalancingRegion.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("rebalancing-shards-allocated");                    Join(_config.Sixth' _config.Third);                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          Within(TimeSpan.FromSeconds(3)' () =>                          {                              var count = 0;                              for (int i = 1; i <= 10; i++)                              {                                  var rebalancingRegion = _rebalancingRegion.Value;                                  rebalancingRegion.Tell(new Counter.Get(i)' probe.Ref);                                  probe.ExpectMsg<int>();                                  if (probe.LastSender.Path.Equals(rebalancingRegion.Path / (i % 12).ToString() / i.ToString()))                                      count++;                              }                                count.Should().BeGreaterOrEqualTo(2);                          });                      });                  }' _config.Sixth);                  EnterBarrier("after-9");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: Counter.ShardingTypeName'                          entityPropsFactory: entityId => Counter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: AnotherCounter.ShardingTypeName'                          entityPropsFactory: entityId => AnotherCounter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-supervisor-start                      ClusterSharding.Get(Sys).Start(                        typeName: CounterSupervisor.ShardingTypeName'                        entityPropsFactory: entityId => CounterSupervisor.Props(entityId)'                        settings: ClusterShardingSettings.Create(Sys)'                        extractEntityId: Counter.ExtractEntityId'                        extractShardId: Counter.ExtractShardId);                  }' _config.Third' _config.Fourth' _config.Fifth' _config.Sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName);                      var entityId = 999;                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(1);                      //#counter-usage                        var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion(AnotherCounter.ShardingTypeName);                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(-1);                  }' _config.Fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.Get(i));                          ExpectMsg(1);                          LastSender.Path.Address.Should().NotBe(Cluster.SelfAddress);                      }                  }' _config.Sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: Counter.ShardingTypeName'                          entityPropsFactory: entityId => Counter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: AnotherCounter.ShardingTypeName'                          entityPropsFactory: entityId => AnotherCounter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-supervisor-start                      ClusterSharding.Get(Sys).Start(                        typeName: CounterSupervisor.ShardingTypeName'                        entityPropsFactory: entityId => CounterSupervisor.Props(entityId)'                        settings: ClusterShardingSettings.Create(Sys)'                        extractEntityId: Counter.ExtractEntityId'                        extractShardId: Counter.ExtractShardId);                  }' _config.Third' _config.Fourth' _config.Fifth' _config.Sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName);                      var entityId = 999;                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(1);                      //#counter-usage                        var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion(AnotherCounter.ShardingTypeName);                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(-1);                  }' _config.Fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.Get(i));                          ExpectMsg(1);                          LastSender.Path.Address.Should().NotBe(Cluster.SelfAddress);                      }                  }' _config.Sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: Counter.ShardingTypeName'                          entityPropsFactory: entityId => Counter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: AnotherCounter.ShardingTypeName'                          entityPropsFactory: entityId => AnotherCounter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-supervisor-start                      ClusterSharding.Get(Sys).Start(                        typeName: CounterSupervisor.ShardingTypeName'                        entityPropsFactory: entityId => CounterSupervisor.Props(entityId)'                        settings: ClusterShardingSettings.Create(Sys)'                        extractEntityId: Counter.ExtractEntityId'                        extractShardId: Counter.ExtractShardId);                  }' _config.Third' _config.Fourth' _config.Fifth' _config.Sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName);                      var entityId = 999;                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(1);                      //#counter-usage                        var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion(AnotherCounter.ShardingTypeName);                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(-1);                  }' _config.Fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.Get(i));                          ExpectMsg(1);                          LastSender.Path.Address.Should().NotBe(Cluster.SelfAddress);                      }                  }' _config.Sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_to_use_with_extensions,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: Counter.ShardingTypeName'                          entityPropsFactory: entityId => Counter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-start                      ClusterSharding.Get(Sys).Start(                          typeName: AnotherCounter.ShardingTypeName'                          entityPropsFactory: entityId => AnotherCounter.Props(entityId)'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        //#counter-supervisor-start                      ClusterSharding.Get(Sys).Start(                        typeName: CounterSupervisor.ShardingTypeName'                        entityPropsFactory: entityId => CounterSupervisor.Props(entityId)'                        settings: ClusterShardingSettings.Create(Sys)'                        extractEntityId: Counter.ExtractEntityId'                        extractShardId: Counter.ExtractShardId);                  }' _config.Third' _config.Fourth' _config.Fifth' _config.Sixth);                  EnterBarrier("extension-started");                    RunOn(() =>                  {                      //#counter-usage                      var counterRegion = ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName);                      var entityId = 999;                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(0);                        counterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Increment.Instance));                      counterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(1);                      //#counter-usage                        var anotherCounterRegion = ClusterSharding.Get(Sys).ShardRegion(AnotherCounter.ShardingTypeName);                      anotherCounterRegion.Tell(new Counter.EntityEnvelope(entityId' Counter.Decrement.Instance));                      anotherCounterRegion.Tell(new Counter.Get(entityId));                      ExpectMsg(-1);                  }' _config.Fifth);                  EnterBarrier("extension-used");                    // sixth is a frontend node' i.e. proxy only                  RunOn(() =>                  {                      for (int i = 1000; i <= 1010; i++)                      {                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                          ClusterSharding.Get(Sys).ShardRegion(Counter.ShardingTypeName).Tell(new Counter.Get(i));                          ExpectMsg(1);                          LastSender.Path.Address.Should().NotBe(Cluster.SelfAddress);                      }                  }' _config.Sixth);                  EnterBarrier("after-10");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ClusterSharding_should_be_easy_API_for_starting,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var counterRegionViaStart = ClusterSharding.Get(Sys).Start(                          typeName: "ApiTest"'                          entityPropsFactory: Counter.Props'                          settings: ClusterShardingSettings.Create(Sys)'                          extractEntityId: Counter.ExtractEntityId'                          extractShardId: Counter.ExtractShardId);                        var counterRegionViaGet = ClusterSharding.Get(Sys).ShardRegion("ApiTest");                        counterRegionViaStart.Should().Be(counterRegionViaGet);                  }' _config.First);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_recover_entities_upon_restart,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentEntitiesRegion.Value;                      var y = _anotherPersistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("persistent-start");                    RunOn(() =>                  {                      //Create an increment counter 1                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentEntitiesRegion.Value.Tell(new Counter.EntityEnvelope(1' new Counter.Get(1)));                      ExpectMsg(1);                        //Shut down the shard and confirm it's dead                      var shard = Sys.ActorSelection(LastSender.Path.Parent);                      var region = Sys.ActorSelection(LastSender.Path.Parent.Parent);                        //Stop the shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        //Get the path to where the shard now resides                      _persistentEntitiesRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(0);                        //Check that counter 1 is now alive again' even though we have                      // not sent a message to it via the ShardRegion                      var counter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      Within(TimeSpan.FromSeconds(5)' () =>                      {                          AwaitAssert(() =>                          {                              var probe2 = CreateTestProbe();                              counter1.Tell(new Identify(2)' probe2.Ref);                              probe2.ExpectMsg<ActorIdentity>(i => i.Subject != null' TimeSpan.FromSeconds(2));                          });                      });                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("after-shard-restart");                    RunOn(() =>                  {                      //Check a second region does not share the same persistent shards                        //Create a separate 13 counter                      _anotherPersistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _anotherPersistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        //Check that no counter "1" exists in this shard                      var secondCounter1 = Sys.ActorSelection(LastSender.Path.Parent / "1");                      secondCounter1.Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null' TimeSpan.FromSeconds(3));                  }' _config.Fourth);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_permanently_stop_entities_which_passivate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth' _config.Fifth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                        var counter1 = LastSender;                      var shard = Sys.ActorSelection(counter1.Path.Parent);                      var region = Sys.ActorSelection(counter1.Path.Parent.Parent);                        //create and increment counter 13                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(13' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(13));                      ExpectMsg(1);                        var counter13 = LastSender;                        counter13.Path.Parent.Should().Be(counter1.Path.Parent);                        //Send the shard the passivate message from the counter                      Watch(counter1);                      shard.Tell(new Passivate(Counter.Stop.Instance)' counter1);                        // watch for the Terminated message                      ExpectTerminated(counter1' TimeSpan.FromSeconds(5));                        var probe1 = CreateTestProbe();                      AwaitAssert(() =>                      {                          // check counter 1 is dead                          counter1.Tell(new Identify(1)' probe1.Ref);                          probe1.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(1) && i.Subject == null' TimeSpan.FromSeconds(1)' "Entity 1 was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        // stop shard cleanly                      region.Tell(new PersistentShardCoordinator.HandOff("1"));                      ExpectMsg<PersistentShardCoordinator.ShardStopped>(s => s.Shard == "1"' TimeSpan.FromSeconds(10)' "ShardStopped not received");                        var probe2 = CreateTestProbe();                      AwaitAssert(() =>                      {                          shard.Tell(new Identify(2)' probe2.Ref);                          probe2.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(2) && i.Subject == null' TimeSpan.FromSeconds(1)' "Shard was still around");                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                    }' _config.Third);                  EnterBarrier("shard-shutdonw-12");                    RunOn(() =>                  {                      // force shard backup                      _persistentRegion.Value.Tell(new Counter.Get(25));                      ExpectMsg(0);                        var shard = LastSender.Path.Parent;                        // check counter 1 is still dead                      Sys.ActorSelection(shard / "1").Tell(new Identify(3));                      ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(3) && i.Subject == null);                        // check counter 13 is alive again                      var probe3 = CreateTestProbe();                      AwaitAssert(() =>                      {                          Sys.ActorSelection(shard / "13").Tell(new Identify(4)' probe3.Ref);                          probe3.ExpectMsg<ActorIdentity>(i => i.MessageId.Equals(4) && i.Subject != null);                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Fourth);                  EnterBarrier("after-13");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_restart_entities_which_stop_without_passivation,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      var x = _persistentRegion.Value;                  }' _config.Third' _config.Fourth);                  EnterBarrier("cluster-started-12");                    RunOn(() =>                  {                      //create and increment counter 1                      _persistentRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _persistentRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        var counter1 = Sys.ActorSelection(LastSender.Path);                      counter1.Tell(Counter.Stop.Instance);                        var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                  }' _config.Third);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        LastSender.Path.Should().Be(Node(_config.Third) / "user" / "AutoMigrateRememberRegionTestRegion" / "1" / "1");                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _config.Fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection("user/AutoMigrateRememberRegionTestRegion/1/1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _config.Fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        LastSender.Path.Should().Be(Node(_config.Third) / "user" / "AutoMigrateRememberRegionTestRegion" / "1" / "1");                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _config.Fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection("user/AutoMigrateRememberRegionTestRegion/1/1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _config.Fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        LastSender.Path.Should().Be(Node(_config.Third) / "user" / "AutoMigrateRememberRegionTestRegion" / "1" / "1");                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _config.Fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection("user/AutoMigrateRememberRegionTestRegion/1/1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _config.Fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        LastSender.Path.Should().Be(Node(_config.Third) / "user" / "AutoMigrateRememberRegionTestRegion" / "1" / "1");                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _config.Fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection("user/AutoMigrateRememberRegionTestRegion/1/1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _config.Fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_be_migrated_to_new_regions_upon_region_failure,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  //Start only one region' and force an entity onto that region                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(1);                  }' _config.Third);                  EnterBarrier("shard1-region3");                    //Start another region and test it talks to node 3                  RunOn(() =>                  {                      _autoMigrateRegion.Value.Tell(new Counter.EntityEnvelope(1' Counter.Increment.Instance));                      _autoMigrateRegion.Value.Tell(new Counter.Get(1));                      ExpectMsg(2);                        LastSender.Path.Should().Be(Node(_config.Third) / "user" / "AutoMigrateRememberRegionTestRegion" / "1" / "1");                        // kill region 3                      Sys.ActorSelection(LastSender.Path.Parent.Parent).Tell(PoisonPill.Instance);                  }' _config.Fourth);                  EnterBarrier("region4-up");                    // Wait for migration to happen                  //Test the shard' thus counter was moved onto node 4 and started.                  RunOn(() =>                  {                      var counter1 = Sys.ActorSelection("user/AutoMigrateRememberRegionTestRegion/1/1");                      var probe = CreateTestProbe();                      AwaitAssert(() =>                      {                          counter1.Tell(new Identify(1)' probe.Ref);                          probe.ExpectMsg<ActorIdentity>(TimeSpan.FromSeconds(1)).Subject.Should().NotBeNull();                      }' TimeSpan.FromSeconds(5)' TimeSpan.FromMilliseconds(500));                        counter1.Tell(new Counter.Get(1));                      ExpectMsg(2);                  }' _config.Fourth);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Magic Number,Akka.Cluster.Sharding.Tests,ClusterShardingSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,PersistentClusterShards_should_ensure_rebalance_restarts_shards,The following statement contains a magic number: Within(TimeSpan.FromSeconds(50)' () =>              {                  RunOn(() =>                  {                      for (int i = 2; i <= 12; i++)                          _rebalancingPersistentRegion.Value.Tell(new Counter.EntityEnvelope(i' Counter.Increment.Instance));                        for (int i = 2; i <= 12; i++)                      {                          _rebalancingPersistentRegion.Value.Tell(new Counter.Get(i));                          ExpectMsg(1);                      }                  }' _config.Fourth);                  EnterBarrier("entities-started");                    RunOn(() =>                  {                      var r = _rebalancingPersistentRegion.Value;                  }' _config.Fifth);                  EnterBarrier("fifth-joined-shard");                    RunOn(() =>                  {                      AwaitAssert(() =>                      {                          var count = 0;                          for (int i = 2; i <= 12; i++)                          {                              var entity = Sys.ActorSelection(_rebalancingPersistentRegion.Value.Path / (i % 12).ToString() / i.ToString());                              entity.Tell(new Identify(i));                                var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;                              if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))                                  count++;                          }                            count.Should().BeGreaterOrEqualTo(2);                      });                  }' _config.Fifth);                  EnterBarrier("after-16");              });
Missing Default,Akka.Cluster.Sharding.Tests,ReplayMediator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\AsyncWriteProxyEx.cs,Receive,The following switch statement is missing a default case: switch (message)              {                  case ReplayedMessage rm:                      //rm.Persistent                      _replayCallback(rm.Persistent);                      return true;                  case RecoverySuccess _:                      _replayCompletionPromise.SetResult(new object());                      Context.Stop(Self);                      return true;                  case ReplayMessagesFailure failure:                      _replayCompletionPromise.SetException(failure.Cause);                      Context.Stop(Self);                      return true;                  case ReceiveTimeout _:                      var timeoutException = new AsyncReplayTimeoutException($"Replay timed out after {_replayTimeout.TotalSeconds}s of inactivity");                      _replayCompletionPromise.SetException(timeoutException);                      Context.Stop(Self);                      return true;              }
Missing Default,Akka.Cluster.Sharding.Tests,Entity,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case int id:                          Sender.Tell(id);                          return true;                  }
Missing Default,Akka.Cluster.Sharding.Tests,Allocator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingCustomShardAllocationSpec.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case UseRegion r:                          UseRegion = r.Region;                          Sender.Tell(UseRegionAck.Instance);                          return true;                      case AllocateReq _:                          if (UseRegion != null)                              Sender.Tell(UseRegion);                          return true;                      case RebalanceShards rs:                          Rebalance = rs.Shards;                          Sender.Tell(RebalanceShardsAck.Instance);                          return true;                      case RebalanceReq _:                          Sender.Tell(Rebalance);                          Rebalance = ImmutableHashSet<string>.Empty;                          return true;                  }
Missing Default,Akka.Cluster.Sharding.Tests,ShardedActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case Stop _:                          Context.Stop(Self);                          return true;                      case Ping p:                          Sender.Tell(Pong.Instance);                          return true;                  }
Missing Default,Akka.Cluster.Sharding.Tests,ShardedActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingGetStateSpec.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case Stop _:                          Context.Stop(Self);                          return true;                      case Ping p:                          Sender.Tell(Pong.Instance);                          return true;                  }
Missing Default,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ReceiveRecover,The following switch statement is missing a default case: switch (message)              {                  case CounterChanged cc:                      UpdateState(cc);                      return true;              }
Missing Default,Akka.Cluster.Sharding.Tests,Counter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Sharding.Tests.MultiNode\ClusterShardingSpec.cs,ReceiveCommand,The following switch statement is missing a default case: switch (message)              {                  case Increment _:                      Persist(new CounterChanged(1)' UpdateState);                      return true;                  case Decrement _:                      Persist(new CounterChanged(-1)' UpdateState);                      return true;                  case Get _:                      Sender.Tell(_count);                      return true;                  case ReceiveTimeout _:                      Context.Parent.Tell(new Passivate(Stop.Instance));                      return true;                  case Stop _:                      Context.Stop(Self);                      return true;              }
