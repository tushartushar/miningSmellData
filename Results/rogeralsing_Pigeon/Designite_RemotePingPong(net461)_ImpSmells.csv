Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The length of the statement  "            long throughput = elapsedMilliseconds == 0 ? -1 : (long)Math.Ceiling((double)totalMessagesReceived / elapsedMilliseconds * 1000); " is 129.
Long Statement,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The length of the statement  "            Console.WriteLine("{0'10}'{1'8}'{2'10}'{3'11}"' numberOfClients' totalMessagesReceived' throughput' sw.Elapsed.TotalMilliseconds.ToString("F2"' CultureInfo.InvariantCulture)); " is 175.
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Start,The following statement contains a magic number: const long repeat = 100000L;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Start,The following statement contains a magic number: Console.WriteLine("Actor Count:                       {0}"' processorCount * 2);
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Start,The following statement contains a magic number: Console.WriteLine("Messages sent/received per client: {0}  ({0:0e0})"' repeat*2);
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 5;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 10;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 15;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 20;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 25;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetClientSettings,The following statement contains a magic number: yield return 30;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,GetTotalMessagesReceived,The following statement contains a magic number: return numberOfClients * numberOfRepeats * 2;
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The following statement contains a magic number: var rsp = await canStart.Ask(new AllStartedActor.AllStarted()' TimeSpan.FromSeconds(10));
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The following statement contains a magic number: receivers.ForEach(c =>              {                  for (var i = 0; i < 50; i++) // prime the pump so EndpointWriters can take advantage of their batching model                      c.Tell("hit");              });
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The following statement contains a magic number: var termination = Task.WhenAll(new[] { system1.Terminate()' system2.Terminate() }).Wait(TimeSpan.FromSeconds(10));
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The following statement contains a magic number: long throughput = elapsedMilliseconds == 0 ? -1 : (long)Math.Ceiling((double)totalMessagesReceived / elapsedMilliseconds * 1000);
Magic Number,RemotePingPong,Program,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,Benchmark,The following statement contains a magic number: return (redCount <= 3' bestThroughput' redCount);
Magic Number,RemotePingPong,AllStartedActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,OnReceive,The following statement contains a magic number: switch (message)                  {                      case IActorRef a:                          _actors.Add(a);                          break;                      case AllStarted a:                          var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));                          var s = Sender;                          var count = _actors.Count;                          var c = _correlationId++;                          var t = Task.WhenAll(_actors.Select(                              x => x.Ask<ActorIdentity>(new Identify(c)' cts.Token)));                          t.ContinueWith(tr =>                          {                              return tr.Result.Length == count && tr.Result.All(x => x.MessageId.Equals(c));                          }' TaskContinuationOptions.OnlyOnRanToCompletion).PipeTo(s);                          break;                  }
Missing Default,RemotePingPong,AllStartedActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\benchmark\RemotePingPong\Program.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case IActorRef a:                          _actors.Add(a);                          break;                      case AllStarted a:                          var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));                          var s = Sender;                          var count = _actors.Count;                          var c = _correlationId++;                          var t = Task.WhenAll(_actors.Select(                              x => x.Ask<ActorIdentity>(new Identify(c)' cts.Token)));                          t.ContinueWith(tr =>                          {                              return tr.Result.Length == count && tr.Result.All(x => x.MessageId.Equals(c));                          }' TaskContinuationOptions.OnlyOnRanToCompletion).PipeTo(s);                          break;                  }
