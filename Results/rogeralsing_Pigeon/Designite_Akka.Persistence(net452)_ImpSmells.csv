Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The method has 125 lines of code.
Long Method,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,ReceiveSnapshotStore,The method has 140 lines of code.
Complex Method,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,Unhandled,Cyclomatic complexity of the method is 10
Complex Method,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,CommonProcessingStateBehavior,Cyclomatic complexity of the method is 12
Complex Method,Akka.Persistence.Fsm,PersistentFSMBase<TState;TData;TEvent>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSMBase.cs,ReceiveCommand,Cyclomatic complexity of the method is 12
Complex Method,Akka.Persistence.Journal,PersistencePluginProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\PersistencePluginProxy.cs,PreStart,Cyclomatic complexity of the method is 8
Complex Method,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,Cyclomatic complexity of the method is 22
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,GetHashCode,Cyclomatic complexity of the method is 8
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,Cyclomatic complexity of the method is 8
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,CalculateSize,Cyclomatic complexity of the method is 8
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,Cyclomatic complexity of the method is 10
Complex Method,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,Cyclomatic complexity of the method is 10
Complex Method,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,ReceiveSnapshotStore,Cyclomatic complexity of the method is 12
Long Parameter List,Akka.Persistence,ReplayMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,ReplayMessages,The method has 5 parameters. Parameters: fromSequenceNr' toSequenceNr' max' persistenceId' persistentActor
Long Parameter List,Akka.Persistence,IPersistentRepresentation,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,Update,The method has 5 parameters. Parameters: sequenceNr' persistenceId' isDeleted' sender' writerGuid
Long Parameter List,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,Persistent,The method has 7 parameters. Parameters: payload' sequenceNr' persistenceId' manifest' isDeleted' sender' writerGuid
Long Parameter List,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,Update,The method has 5 parameters. Parameters: sequenceNr' persistenceId' isDeleted' sender' writerGuid
Long Parameter List,Akka.Persistence.Fsm,State<TS;TD;TE>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,State,The method has 8 parameters. Parameters: stateName' stateData' timeout' stopReason' replies' domainEvents' afterTransitionDo' notifies
Long Parameter List,Akka.Persistence.Fsm,State<TS;TD;TE>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,Copy,The method has 8 parameters. Parameters: stateName' stateData' timeout' stopReason' replies' domainEvents' afterTransitionDo' notifies
Long Parameter List,Akka.Persistence.Journal,IAsyncRecovery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncRecovery.cs,ReplayMessagesAsync,The method has 6 parameters. Parameters: context' persistenceId' fromSequenceNr' toSequenceNr' max' recoveryCallback
Long Parameter List,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,ReplayMessagesAsync,The method has 6 parameters. Parameters: context' persistenceId' fromSequenceNr' toSequenceNr' max' recoveryCallback
Long Parameter List,Akka.Persistence.Journal,AsyncWriteProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteProxy.cs,ReplayMessagesAsync,The method has 6 parameters. Parameters: context' persistenceId' fromSequenceNr' toSequenceNr' max' recoveryCallback
Long Parameter List,Akka.Persistence.Journal,MemoryJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\MemoryJournal.cs,ReplayMessagesAsync,The method has 6 parameters. Parameters: context' persistenceId' fromSequenceNr' toSequenceNr' max' recoveryCallback
Long Parameter List,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,ReplayFilter,The method has 5 parameters. Parameters: persistentActor' mode' windowSize' maxOldWriters' debugEnabled
Long Parameter List,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Props,The method has 5 parameters. Parameters: persistentActor' mode' windowSize' maxOldWriters' debugEnabled
Long Identifier,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,,The length of the parameter _pendingStashingPersistInvocations is 34.
Long Identifier,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,,The length of the parameter _defaultInternalStashOverflowStrategy is 37.
Long Identifier,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,,The length of the parameter SnapshotStoreFallbackConfigPath is 31.
Long Identifier,Akka.Persistence,AtLeastOnceDeliverySettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,AtLeastOnceDeliverySettings,The length of the parameter warnAfterNumberOfUnconfirmedAttempts is 36.
Long Identifier,Akka.Persistence.Serialization.Proto.Msg,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,,The length of the parameter UnconfirmedDeliveriesFieldNumber is 32.
Long Identifier,Akka.Persistence.Serialization.Proto.Msg,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,,The length of the parameter _repeated_unconfirmedDeliveries_codec is 37.
Long Statement,Akka.Persistence,AtLeastOnceDeliveryActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDelivery.cs,Deliver,The length of the statement  "                    "and will handle the logic of fan-out and collecting individual confirmations' until it can signal confirmation back to this Actor."); " is 134.
Long Statement,Akka.Persistence,AtLeastOnceDeliveryReceiveActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliveryReceiveActor.cs,Deliver,The length of the statement  "                    "and will handle the logic of fan-out and collecting individual confirmations' until it can signal confirmation back to this Actor."); " is 134.
Long Statement,Akka.Persistence,AtLeastOnceDeliverySemantic,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,StartRedeliverTask,The length of the statement  "            _redeliverScheduleCancelable = _context.System.Scheduler.ScheduleTellRepeatedlyCancelable(delay' RedeliverInterval' _context.Self' " is 130.
Long Statement,Akka.Persistence,AtLeastOnceDeliverySemantic,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,Send,The length of the statement  "            _unconfirmed = _unconfirmed.SetItem(deliveryId' new Delivery(delivery.Destination' delivery.Message' timestamp' delivery.Attempt + 1)); " is 135.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,Persist,The length of the statement  "                throw new InvalidOperationException("Cannot persist during replay. Events can be persisted when receiving RecoveryCompleted or later."); " is 136.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,PersistAll,The length of the statement  "                throw new InvalidOperationException("Cannot persist during replay. Events can be persisted when receiving RecoveryCompleted or later."); " is 136.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,PersistAsync,The length of the statement  "                throw new InvalidOperationException("Cannot persist during replay. Events can be persisted when receiving RecoveryCompleted or later."); " is 136.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,PersistAllAsync,The length of the statement  "                throw new InvalidOperationException("Cannot persist during replay. Events can be persisted when receiving RecoveryCompleted or later."); " is 136.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,DeferAsync,The length of the statement  "                throw new InvalidOperationException("Cannot persist during replay. Events can be persisted when receiving RecoveryCompleted or later."); " is 136.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,OnRecoveryFailure,The length of the statement  "                Log.Error(reason' "Exception in ReceiveRecover when replaying event type [{0}] with sequence number [{1}] for persistenceId [{2}]"' " is 131.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,OnRecoveryFailure,The length of the statement  "                Log.Error(reason' "Persistence failure when replaying events for persistenceId [{0}]. Last known sequence number [{1}]"' PersistenceId' LastSequenceNr); " is 152.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,OnPersistRejected,The length of the statement  "            Log.Error(cause' "Rejected to persist event type [{0}] with sequence number [{1}] for persistenceId [{2}] due to [{3}]."' " is 121.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,Unhandled,The length of the statement  "                    Log.Warning("Failed to DeleteMessages ToSequenceNr [{0}] for PersistenceId [{1}] due to: [{2}: {3}]"' m.ToSequenceNr' PersistenceId' m.Cause' m.Cause.Message); " is 159.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,RecoveryStarted,The length of the statement  "            var timeoutCancelable = Context.System.Scheduler.ScheduleTellOnceCancelable(timeout' Self' new RecoveryTick(true)' Self); " is 121.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,Recovering,The length of the statement  "            var timeoutCancelable = Context.System.Scheduler.ScheduleTellRepeatedlyCancelable(timeout' timeout' Self' new RecoveryTick(false)' Self); " is 137.
Long Statement,Akka.Persistence,Eventsourced,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Eventsourced.cs,Recovering,The length of the statement  "                                            $"Recovery timed out' didn't get event within {timeout.TotalSeconds}s' highest sequence number seen {LastSequenceNr}.")); " is 121.
Long Statement,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,CreatePlugin,The length of the statement  "            object[] pluginActorArgs = pluginType.GetConstructor(new[] { typeof(Config) }) != null ? new object[] { pluginConfig } : null; " is 126.
Long Statement,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,WithPayload,The length of the statement  "            return new Persistent(payload' sequenceNr: SequenceNr' persistenceId: PersistenceId' manifest: Manifest' isDeleted: IsDeleted' sender: Sender' writerGuid: WriterGuid); " is 167.
Long Statement,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,WithManifest,The length of the statement  "                new Persistent(payload: Payload' sequenceNr: SequenceNr' persistenceId: PersistenceId' manifest: manifest' isDeleted: IsDeleted' sender: Sender' writerGuid: WriterGuid); " is 169.
Long Statement,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,Update,The length of the statement  "            return new Persistent(payload: Payload' sequenceNr: sequenceNr' persistenceId: persistenceId' manifest: Manifest' isDeleted: isDeleted' sender: sender' writerGuid: writerGuid); " is 176.
Long Statement,Akka.Persistence,ReceivePersistentActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\PersistentActor.cs,EnsureMayConfigureRecoverHandlers,The length of the statement  "                throw new InvalidOperationException("You may only call Recover-methods when constructing the actor and inside Become()."); " is 122.
Long Statement,Akka.Persistence,ReceivePersistentActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\PersistentActor.cs,EnsureMayConfigureCommandHandlers,The length of the statement  "                throw new InvalidOperationException("You may only call Command-methods when constructing the actor and inside Become()."); " is 122.
Long Statement,Akka.Persistence,PersistentView,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\PersistentView.cs,PreStart,The length of the statement  "                    .ScheduleTellRepeatedlyCancelable(AutoUpdateInterval' AutoUpdateInterval' Self' new ScheduledUpdate(AutoUpdateReplayMax)' Self); " is 128.
Long Statement,Akka.Persistence,RecoveryPermitter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\RecoveryPermitter.cs,ReturnRecoveryPermit,The length of the statement  "            Log.Debug("Drained pending recovery permit requests' max in progress was [{0}]' still [{1}] in progress"' _usedPermits + _maxPendingStats' _usedPermits); " is 153.
Long Statement,Akka.Persistence,SnapshotMetadata,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,Equals,The length of the statement  "            return string.Equals(PersistenceId' other.PersistenceId) && SequenceNr == other.SequenceNr && Timestamp.Equals(other.Timestamp); " is 128.
Long Statement,Akka.Persistence,DeleteSnapshots,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The length of the statement  "                return ((PersistenceId != null ? PersistenceId.GetHashCode() : 0) * 397) ^ (Criteria != null ? Criteria.GetHashCode() : 0); " is 123.
Long Statement,Akka.Persistence.Fsm,State<TS;TD;TE>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,ToString,The length of the statement  "                return $"State<TS' TD' TE><StateName: {StateName}' StateData: {StateData}' Timeout: {Timeout}' StopReason: {StopReason}' Notifies: {Notifies}>"; " is 144.
Long Statement,Akka.Persistence.Fsm,PersistentFSMBase<TState;TData;TEvent>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSMBase.cs,MakeTransition,The length of the statement  "                        _timeoutFuture = Context.System.Scheduler.ScheduleTellOnceCancelable(t' Context.Self' new FSMBase.TimeoutMarker(_generation)' Context.Self); " is 140.
Long Statement,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,HandleWriteMessages,The length of the statement  "                            throw new IllegalStateException($"AsyncWriteMessages return invalid number or results. Expected [{atomicWriteCount}]' but got [{t.Result.Count}]."); " is 148.
Long Statement,Akka.Persistence.Journal,AsyncWriteProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteProxy.cs,ReplayMessagesAsync,The length of the statement  "            var mediator = context.ActorOf(Props.Create(() => new ReplayMediator(recoveryCallback' replayCompletionPromise' Timeout)).WithDeploy(Deploy.Local)); " is 148.
Long Statement,Akka.Persistence.Journal,ReplayMediator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteProxy.cs,Receive,The length of the statement  "                var timeoutException = new AsyncReplayTimeoutException($"Replay timed out after {_replayTimeout.TotalSeconds}s of inactivity"); " is 127.
Long Statement,Akka.Persistence.Journal,EventAdapters,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\EventAdapters.cs,Create,The length of the statement  "                        throw new ArgumentException(string.Format("{0} was bound to undefined event-adapter: {1} (bindings: [{2}]' known adapters: [{3}])"' " is 131.
Long Statement,Akka.Persistence.Journal,EventAdapters,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\EventAdapters.cs,Instantiate,The length of the statement  "                throw new ArgumentException(string.Format("Couldn't create instance of [{0}] from provided qualified type name [{1}]' because it's not assignable from it"' " is 155.
Long Statement,Akka.Persistence.Journal,MemoryJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\MemoryJournal.cs,ReadHighestSequenceNrAsync,The length of the statement  "            return Task.FromResult(Math.Max(HighestSequenceNr(persistenceId)' _meta.TryGetValue(persistenceId' out long metaSeqNr) ? metaSeqNr : 0L)); " is 138.
Long Statement,Akka.Persistence.Journal,PersistencePluginProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\PersistencePluginProxy.cs,TimeoutException,The length of the statement  "                    $"Target {_pluginType.Qualifier} not initialized. Use `PersistencePluginProxy.SetTargetLocation` or set `target-{_pluginType.Qualifier}-address`."); " is 148.
Long Statement,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The length of the statement  "                                            the sequenceNr should be equal to or greater than already-processed event [sequenceNr={_sequenceNr}' writerUUID={_writerUuid}] from the same writer' for the same persistenceId [{r.Persistent.PersistenceId}]. " is 207.
Long Statement,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The length of the statement  "                                        There was already a newer writer whose last replayed event was [sequenceNr={_sequenceNr}' writerUUID={_writerUuid}] for the same persistenceId [{r.Persistent.PersistenceId}]. " is 174.
Long Statement,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The length of the statement  "                                        Perhaps' the old writer kept journaling messages after the new writer created' or duplicate PersistentId for different entities?"; " is 130.
Long Statement,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The length of the statement  "                                var errMsg = $@"Invalid replayed event [sequenceNr=${r.Persistent.SequenceNr}' writerUUID=${r.Persistent.WriterGuid}] from a new writer. " is 136.
Long Statement,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The length of the statement  "                                                An older writer already sent an event [sequenceNr=${msg.Persistent.SequenceNr}' writerUUID=${msg.Persistent.WriterGuid}] whose sequence number was equal or greater for the same persistenceId [${r.Persistent.PersistenceId}]. " is 223.
Long Statement,Akka.Persistence.Journal,WriteJournalBase,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\WriteJournal.cs,PreparePersistentBatch,The length of the statement  "                    .Select(p => AdaptToJournal(p.Update(p.SequenceNr' p.PersistenceId' p.IsDeleted' ActorRefs.NoSender' p.WriterGuid))).ToImmutableList())); " is 137.
Long Statement,Akka.Persistence.Serialization,PersistenceMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\PersistenceMessageSerializer.cs,ToBinary,The length of the statement  "                && obj.GetType().GetGenericTypeDefinition() == typeof(PersistentFSM.PersistentFSMSnapshot<>)) return GetPersistentFSMSnapshot(obj).ToByteArray(); " is 145.
Long Statement,Akka.Persistence.Serialization,PersistenceMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\PersistenceMessageSerializer.cs,GetPersistentMessage,The length of the statement  "            if (persistent.Sender != null) message.Sender = Akka.Serialization.Serialization.SerializedActorPath(persistent.Sender); " is 120.
Long Statement,Akka.Persistence.Serialization,PersistenceMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\PersistenceMessageSerializer.cs,FromBinary,The length of the statement  "            if (type == typeof(IPersistentRepresentation)) return GetPersistentRepresentation(PersistentMessage.Parser.ParseFrom(bytes)); " is 125.
Long Statement,Akka.Persistence.Serialization,PersistenceMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\PersistenceMessageSerializer.cs,FromBinary,The length of the statement  "                && type.GetGenericTypeDefinition() == typeof(PersistentFSM.PersistentFSMSnapshot<>)) return GetPersistentFSMSnapshot(type' bytes); " is 130.
Long Statement,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LoadAsync,The length of the statement  "            var metadata = GetSnapshotMetadata(persistenceId' criteria).Reverse().Take(_maxLoadAttempts).Reverse().ToImmutableArray(); " is 122.
Long Statement,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,GetSnapshotFileForWrite,The length of the statement  "            var filename = $"snapshot-{Uri.EscapeDataString(metadata.PersistenceId)}-{metadata.SequenceNr}-{metadata.Timestamp.Ticks}{extension}"; " is 134.
Long Statement,Akka.Persistence.Snapshot,MemorySnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\MemorySnapshotStore.cs,DeleteAsync,The length of the statement  "            bool Pred(SnapshotEntry x) => x.PersistenceId == metadata.PersistenceId && (metadata.SequenceNr <= 0 || metadata.SequenceNr == long.MaxValue || x.SequenceNr == metadata.SequenceNr) " is 180.
Long Statement,Akka.Persistence.Snapshot,MemorySnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\MemorySnapshotStore.cs,DeleteAsync,The length of the statement  "                                                                                    && (metadata.Timestamp == DateTime.MinValue || metadata.Timestamp == DateTime.MaxValue || x.Timestamp == metadata.Timestamp.Ticks); " is 131.
Long Statement,Akka.Persistence.Snapshot,MemorySnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\MemorySnapshotStore.cs,LoadAsync,The length of the statement  "            var snapshot = Snapshots.Where(filter).OrderByDescending(x => x.SequenceNr).Take(1).Select(x => ToSelectedSnapshot(x)).FirstOrDefault(); " is 136.
Long Statement,Akka.Persistence.Snapshot,MemorySnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\MemorySnapshotStore.cs,CreateRangeFilter,The length of the statement  "            (criteria.MaxTimeStamp == DateTime.MinValue || criteria.MaxTimeStamp == DateTime.MaxValue || x.Timestamp <= criteria.MaxTimeStamp.Ticks)); " is 138.
Long Statement,Akka.Persistence.Snapshot,MemorySnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\MemorySnapshotStore.cs,ToSelectedSnapshot,The length of the statement  "            return new SelectedSnapshot(new SnapshotMetadata(entry.PersistenceId' entry.SequenceNr' new DateTime(entry.Timestamp))' entry.Snapshot); " is 136.
Long Statement,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,ReceiveSnapshotStore,The length of the statement  "                    _breaker.WithCircuitBreaker(() => LoadAsync(loadSnapshot.PersistenceId' loadSnapshot.Criteria.Limit(loadSnapshot.ToSequenceNr))) " is 128.
Long Statement,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,ReceiveSnapshotStore,The length of the statement  "                var metadata = new SnapshotMetadata(saveSnapshot.Metadata.PersistenceId' saveSnapshot.Metadata.SequenceNr' DateTime.UtcNow); " is 124.
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence,PersistenceExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,PersistenceExtension,The constructor "PersistenceExtension" calls a virtual method "SystemActorOf".
Virtual Method Call from Constructor,Akka.Persistence,ViewSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,ViewSettings,The constructor "ViewSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Persistence,ViewSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,ViewSettings,The constructor "ViewSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence,ViewSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,ViewSettings,The constructor "ViewSettings" calls a virtual method "GetLong".
Virtual Method Call from Constructor,Akka.Persistence,AtLeastOnceDeliverySettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,AtLeastOnceDeliverySettings,The constructor "AtLeastOnceDeliverySettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence,AtLeastOnceDeliverySettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,AtLeastOnceDeliverySettings,The constructor "AtLeastOnceDeliverySettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence,AtLeastOnceDeliverySettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,AtLeastOnceDeliverySettings,The constructor "AtLeastOnceDeliverySettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence,AtLeastOnceDeliverySettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,AtLeastOnceDeliverySettings,The constructor "AtLeastOnceDeliverySettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence,InternalSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,InternalSettings,The constructor "InternalSettings" calls a virtual method "HasPath".
Virtual Method Call from Constructor,Akka.Persistence,InternalSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,InternalSettings,The constructor "InternalSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Persistence,InternalSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,InternalSettings,The constructor "InternalSettings" calls a virtual method "HasPath".
Virtual Method Call from Constructor,Akka.Persistence,InternalSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistence.cs,InternalSettings,The constructor "InternalSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Persistence.Fsm,SnapshotAfterExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,SnapshotAfterExtension,The constructor "SnapshotAfterExtension" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Fsm,SnapshotAfterExtension,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,SnapshotAfterExtension,The constructor "SnapshotAfterExtension" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Persistence.Journal,AsyncWriteJournal,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\AsyncWriteJournal.cs,AsyncWriteJournal,The constructor "AsyncWriteJournal" calls a virtual method "ActorOf".
Virtual Method Call from Constructor,Akka.Persistence.Journal,PersistencePluginProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\PersistencePluginProxy.cs,PersistencePluginProxy,The constructor "PersistencePluginProxy" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence.Journal,PersistencePluginProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\PersistencePluginProxy.cs,PersistencePluginProxy,The constructor "PersistencePluginProxy" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Journal,PersistencePluginProxy,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\PersistencePluginProxy.cs,PersistencePluginProxy,The constructor "PersistencePluginProxy" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LocalSnapshotStore,The constructor "LocalSnapshotStore" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LocalSnapshotStore,The constructor "LocalSnapshotStore" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LocalSnapshotStore,The constructor "LocalSnapshotStore" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LocalSnapshotStore,The constructor "LocalSnapshotStore" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,LocalSnapshotStore,The constructor "LocalSnapshotStore" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,SnapshotStore,The constructor "SnapshotStore" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,SnapshotStore,The constructor "SnapshotStore" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Persistence.Snapshot,SnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\SnapshotStore.cs,SnapshotStore,The constructor "SnapshotStore" calls a virtual method "GetTimeSpan".
Magic Number,Akka.Persistence,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (UnconfirmedDeliveries != null ? UnconfirmedDeliveries.GetHashCode() : 0);
Magic Number,Akka.Persistence,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Destination != null ? Destination.GetHashCode() : 0);
Magic Number,Akka.Persistence,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Persistence,AtLeastOnceDeliverySemantic,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,StartRedeliverTask,The following statement contains a magic number: var delay = new TimeSpan(RedeliverInterval.Ticks / 2);
Magic Number,Akka.Persistence,Delivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Message != null ? Message.GetHashCode() : 0);
Magic Number,Akka.Persistence,Delivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Timestamp.GetHashCode();
Magic Number,Akka.Persistence,Delivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\AtLeastOnceDeliverySemantic.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Attempt;
Magic Number,Akka.Persistence,DeleteMessagesFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Cause != null ? Cause.GetHashCode() : 0) * 397) ^ ToSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,DeleteMessagesTo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ToSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,DeleteMessagesTo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistentActor != null ? PersistentActor.GetHashCode() : 0);
Magic Number,Akka.Persistence,WriteMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistentActor != null ? PersistentActor.GetHashCode() : 0);
Magic Number,Akka.Persistence,WriteMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ActorInstanceId;
Magic Number,Akka.Persistence,WriteMessageSuccess,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Persistent != null ? Persistent.GetHashCode() : 0) * 397) ^ ActorInstanceId;
Magic Number,Akka.Persistence,WriteMessageRejected,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ActorInstanceId;
Magic Number,Akka.Persistence,WriteMessageRejected,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Persistent != null ? Persistent.GetHashCode() : 0);
Magic Number,Akka.Persistence,WriteMessageFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ActorInstanceId;
Magic Number,Akka.Persistence,WriteMessageFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Persistent != null ? Persistent.GetHashCode() : 0);
Magic Number,Akka.Persistence,LoopMessageSuccess,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Message != null ? Message.GetHashCode() : 0) * 397) ^ ActorInstanceId;
Magic Number,Akka.Persistence,ReplayMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ToSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,ReplayMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Max.GetHashCode();
Magic Number,Akka.Persistence,ReplayMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistenceId != null ? PersistenceId.GetHashCode() : 0);
Magic Number,Akka.Persistence,ReplayMessages,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\JournalProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistentActor != null ? PersistentActor.GetHashCode() : 0);
Magic Number,Akka.Persistence,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Sender != null ? Sender.GetHashCode() : 0);
Magic Number,Akka.Persistence,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Size;
Magic Number,Akka.Persistence,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistenceId != null ? PersistenceId.GetHashCode() : 0);
Magic Number,Akka.Persistence,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ LowestSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ HighestSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Manifest != null ? Manifest.GetHashCode() : 0);
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PersistenceId != null ? PersistenceId.GetHashCode() : 0);
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ SequenceNr.GetHashCode();
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IsDeleted.GetHashCode();
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Sender != null ? Sender.GetHashCode() : 0);
Magic Number,Akka.Persistence,Persistent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Persistent.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (WriterGuid != null ? WriterGuid.GetHashCode() : 0);
Magic Number,Akka.Persistence,SnapshotMetadata,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ SequenceNr.GetHashCode();
Magic Number,Akka.Persistence,SnapshotMetadata,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Timestamp.GetHashCode();
Magic Number,Akka.Persistence,SaveSnapshotFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Metadata != null ? Metadata.GetHashCode() : 0) * 397) ^ (Cause != null ? Cause.GetHashCode() : 0);
Magic Number,Akka.Persistence,DeleteSnapshotFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Metadata != null ? Metadata.GetHashCode() : 0) * 397) ^ (Cause != null ? Cause.GetHashCode() : 0);
Magic Number,Akka.Persistence,DeleteSnapshotsFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Criteria != null ? Criteria.GetHashCode() : 0) * 397) ^ (Cause != null ? Cause.GetHashCode() : 0);
Magic Number,Akka.Persistence,SnapshotOffer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Metadata != null ? Metadata.GetHashCode() : 0) * 397) ^ (Snapshot != null ? Snapshot.GetHashCode() : 0);
Magic Number,Akka.Persistence,SnapshotSelectionCriteria,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,Akka.Persistence,SnapshotSelectionCriteria,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + MaxSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,SnapshotSelectionCriteria,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + MaxTimeStamp.GetHashCode();
Magic Number,Akka.Persistence,SnapshotSelectionCriteria,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + MinSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,SnapshotSelectionCriteria,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + MinTimestamp.GetHashCode();
Magic Number,Akka.Persistence,SelectedSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Metadata != null ? Metadata.GetHashCode() : 0) * 397) ^ (Snapshot != null ? Snapshot.GetHashCode() : 0);
Magic Number,Akka.Persistence,LoadSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Criteria != null ? Criteria.GetHashCode() : 0);
Magic Number,Akka.Persistence,LoadSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ ToSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,LoadSnapshotResult,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Snapshot != null ? Snapshot.GetHashCode() : 0) * 397) ^ ToSequenceNr.GetHashCode();
Magic Number,Akka.Persistence,SaveSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((Metadata != null ? Metadata.GetHashCode() : 0) * 397) ^ (Snapshot != null ? Snapshot.GetHashCode() : 0);
Magic Number,Akka.Persistence,DeleteSnapshots,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\SnapshotProtocol.cs,GetHashCode,The following statement contains a magic number: return ((PersistenceId != null ? PersistenceId.GetHashCode() : 0) * 397) ^ (Criteria != null ? Criteria.GetHashCode() : 0);
Magic Number,Akka.Persistence.Fsm,PersistentFSMSnapshot<TD>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ EqualityComparer<TD>.Default.GetHashCode(Data);
Magic Number,Akka.Persistence.Fsm,PersistentFSMSnapshot<TD>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Fsm\PersistentFSM.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Timeout.GetHashCode();
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(32);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(90);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(98);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(106);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }            case 16: {              SequenceNr = input.ReadInt64();              break;            }            case 26: {              PersistenceId = input.ReadString();              break;            }            case 32: {              Deleted = input.ReadBool();              break;            }            case 90: {              Sender = input.ReadString();              break;            }            case 98: {              Manifest = input.ReadString();              break;            }            case 106: {              WriterGuid = input.ReadString();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadInt32();              break;            }            case 18: {              Payload = input.ReadBytes();              break;            }            case 26: {              PayloadManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadInt32();              break;            }            case 18: {              Payload = input.ReadBytes();              break;            }            case 26: {              PayloadManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentPayload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadInt32();              break;            }            case 18: {              Payload = input.ReadBytes();              break;            }            case 26: {              PayloadManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,AtomicWrite,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              payload_.AddEntriesFrom(input' _repeated_payload_codec);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              DeliveryId = input.ReadInt64();              break;            }            case 18: {              Destination = input.ReadString();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              DeliveryId = input.ReadInt64();              break;            }            case 18: {              Destination = input.ReadString();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,UnconfirmedDelivery,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              DeliveryId = input.ReadInt64();              break;            }            case 18: {              Destination = input.ReadString();              break;            }            case 26: {              if (payload_ == null) {                payload_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(payload_);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              CurrentDeliveryId = input.ReadInt64();              break;            }            case 18: {              unconfirmedDeliveries_.AddEntriesFrom(input' _repeated_unconfirmedDeliveries_codec);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,AtLeastOnceDeliverySnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              CurrentDeliveryId = input.ReadInt64();              break;            }            case 18: {              unconfirmedDeliveries_.AddEntriesFrom(input' _repeated_unconfirmedDeliveries_codec);              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentStateChangeEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentStateChangeEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentStateChangeEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              StateIdentifier = input.ReadString();              break;            }            case 16: {              TimeoutMillis = input.ReadInt64();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentStateChangeEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              StateIdentifier = input.ReadString();              break;            }            case 16: {              TimeoutMillis = input.ReadInt64();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              StateIdentifier = input.ReadString();              break;            }            case 18: {              if (data_ == null) {                data_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(data_);              break;            }            case 24: {              TimeoutMillis = input.ReadInt64();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              StateIdentifier = input.ReadString();              break;            }            case 18: {              if (data_ == null) {                data_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(data_);              break;            }            case 24: {              TimeoutMillis = input.ReadInt64();              break;            }          }
Magic Number,Akka.Persistence.Serialization.Proto.Msg,PersistentFSMSnapshot,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Serialization\Proto\Persistence.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              StateIdentifier = input.ReadString();              break;            }            case 18: {              if (data_ == null) {                data_ = new global::Akka.Persistence.Serialization.Proto.Msg.PersistentPayload();              }              input.ReadMessage(data_);              break;            }            case 24: {              TimeoutMillis = input.ReadInt64();              break;            }          }
Magic Number,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,ExtractSnapshotMetadata,The following statement contains a magic number: var seqNrString = match.Groups[2].Value;
Magic Number,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,ExtractSnapshotMetadata,The following statement contains a magic number: var timestampTicks = match.Groups[3].Value;
Magic Number,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,SnapshotSequenceNrFilenameFilter,The following statement contains a magic number: var seqNrString = match.Groups[2].Value;
Magic Number,Akka.Persistence.Snapshot,LocalSnapshotStore,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Snapshot\LocalSnapshotStore.cs,SnapshotSequenceNrFilenameFilter,The following statement contains a magic number: var timestampTicks = match.Groups[3].Value;
Missing Default,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The following switch statement is missing a default case: switch (Mode)                              {                                  case ReplayFilterMode.RepairByDiscardOld:                                      //discard                                      break;                                  case ReplayFilterMode.Fail:                                      throw new IllegalStateException(errMsg);                                  case ReplayFilterMode.Warn:                                      _buffer.AddLast(r);                                      break;                                  case ReplayFilterMode.Disabled:                                      throw new ArgumentException("Mode must not be Disabled");                              }
Missing Default,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The following switch statement is missing a default case: switch (Mode)                          {                              case ReplayFilterMode.RepairByDiscardOld:                                  //discard                                  break;                              case ReplayFilterMode.Fail:                                  throw new IllegalStateException(errMsg);                              case ReplayFilterMode.Warn:                                  _buffer.AddLast(r);                                  break;                              case ReplayFilterMode.Disabled:                                  throw new ArgumentException("Mode must not be Disabled");                          }
Missing Default,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,Receive,The following switch statement is missing a default case: switch (Mode)                                  {                                      case ReplayFilterMode.RepairByDiscardOld:                                          _buffer.Remove(node);                                          //discard                                          break;                                      case ReplayFilterMode.Fail:                                          throw new IllegalStateException(errMsg);                                      case ReplayFilterMode.Warn:                                          // keep                                          break;                                      case ReplayFilterMode.Disabled:                                          throw new ArgumentException("Mode must not be Disabled");                                  }
Missing Default,Akka.Persistence.Journal,ReplayFilter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Persistence\Journal\ReplayFilter.cs,LogIssue,The following switch statement is missing a default case: switch (Mode)              {                  case ReplayFilterMode.Warn:                  case ReplayFilterMode.RepairByDiscardOld:                      _log.Warning(errMsg);                      break;                  case ReplayFilterMode.Fail:                      _log.Error(errMsg);                      break;                  case ReplayFilterMode.Disabled:                      throw new ArgumentException("mode must not be Disabled");              }
