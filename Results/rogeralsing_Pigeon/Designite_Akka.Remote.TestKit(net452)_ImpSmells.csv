Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The method has 121 lines of code.
Long Method,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The method has 116 lines of code.
Long Method,Akka.Remote.TestKit,MsgEncoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgEncoder.cs,Encode,The method has 110 lines of code.
Long Method,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The method has 201 lines of code.
Complex Method,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,Cyclomatic complexity of the method is 28
Complex Method,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,Cyclomatic complexity of the method is 16
Complex Method,Akka.Remote.TestKit,MsgEncoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgEncoder.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,Cyclomatic complexity of the method is 11
Complex Method,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,Cyclomatic complexity of the method is 11
Complex Method,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Long Parameter List,Akka.Remote.TestKit,ConsoleLogger,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\ConsoleLogger.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,Akka.Remote.TestKit,PlayerHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,PlayerHandler,The method has 7 parameters. Parameters: server' reconnects' backoff' poolSize' fsm' log' scheduler
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "            StartWith(State.Idle' new Data(ImmutableHashSet.Create<Controller.NodeInfo>()' ""' ImmutableHashSet.Create<IActorRef>()' null)); " is 128.
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "                                throw new ClientLostException(@event.StateData.Copy(clients.Remove(client)' arrived:arrived.Where(x => x != client.FSM).ToImmutableHashSet())' disconnected.Name); " is 162.
Long Statement,Akka.Remote.TestKit,BarrierCoordinator,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,InitFSM,The length of the statement  "                if (state == State.Idle && nextState == State.Waiting) SetTimer("Timeout"' StateTimeout.Instance' NextStateData.Deadline.TimeLeft' false); " is 138.
Long Statement,Akka.Remote.TestKit,TestConductor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Conductor.cs,StartController,The length of the statement  "            var node = await _controller.Ask<IPEndPoint>(TestKit.Controller.GetSockAddr.Instance' Settings.QueryTimeout).ConfigureAwait(false); " is 131.
Long Statement,Akka.Remote.TestKit,ConductorHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Conductor.cs,ExceptionCaught,The length of the statement  "            _log.Warning("handled network error from {0}: {1} {2}"' channel.RemoteAddress' exception.Message' exception.StackTrace); " is 120.
Long Statement,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The length of the statement  "                        @event.StateData.Tell(new Failure(new Controller.ClientDisconnectedException("client disconnected in state " + StateName + ": " + _channel)));                    " is 142.
Long Statement,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The length of the statement  "                    _log.Warning("client {0}' sent not Hello in first message (instead {1})' disconnecting"' _channel.RemoteAddress' @event.FsmEvent); " is 130.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        if (!_nodes.TryGetValue(throttle.Target' out var target)) throw new IllegalActorStateException($"Throttle target {throttle.Target} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}"); " is 228.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        if (!_nodes.TryGetValue(throttle.Node' out var source)) throw new IllegalActorStateException($"Throttle source {throttle.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}"); " is 224.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        if (!_nodes.TryGetValue(disconnect.Target' out var target)) throw new IllegalActorStateException($"Disconnect target {disconnect.Target} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}"); " is 234.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        if (!_nodes.TryGetValue(disconnect.Node' out var source)) throw new IllegalActorStateException($"Disconnect source {disconnect.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}"); " is 230.
Long Statement,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The length of the statement  "                        if (!_nodes.TryGetValue(terminate.Node' out var node)) throw new IllegalActorStateException($"Terminate target {terminate.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}"); " is 225.
Long Statement,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,Equals,The length of the statement  "            return Equals(_node' other._node) && Equals(_target' other._target) && Equals(_direction' other._direction) && _rateMBit.Equals(other._rateMBit); " is 145.
Long Statement,Akka.Remote.TestKit,Terminate,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The length of the statement  "                return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_shutdownOrExit != null ? _shutdownOrExit.GetHashCode() : 0); " is 121.
Long Statement,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,The length of the statement  "                            return new EnterBarrier(w.Barrier.Name' w.Barrier.Timeout > 0 ? (TimeSpan?)TimeSpan.FromTicks(w.Barrier.Timeout) : null); " is 121.
Long Statement,Akka.Remote.TestKit,PlayerHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,FormatConnectionFailure,The length of the statement  "            sb.AppendLine($"Connection between [Local: {context.Channel.LocalAddress}] and [Remote: {context.Channel.RemoteAddress}] has failed."); " is 135.
Long Statement,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The length of the statement  "                {new LengthFieldPrepender(ByteOrder.LittleEndian' 4' 0' false)' new LengthFieldBasedFrameDecoder(ByteOrder.LittleEndian' 10000' 0' 4' 0' 4' true)}; " is 147.
Long Statement,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,Shutdown,The length of the statement  "                // LoggingFactory.GetLogger<RemoteConnection>().Warning("Failed to shutdown remote connection within {0}"' disconnectTimeout); " is 126.
Long Statement,Akka.Remote.TestKit.Proto,ProtobufEncoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\ProtobufEncoder.cs,Encode,The length of the statement  "            _logger.LogDebug("[{0} --> {1}] Encoding {2} into Protobuf"' context.Channel.LocalAddress' context.Channel.RemoteAddress' message); " is 131.
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Barrier != null ? Barrier.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Arrived != null ? Arrived.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Deadline != null ? Deadline.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Data,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((_channel != null ? _channel.GetHashCode() : 0) * 397)                           ^ (_runningOp != null ? _runningOp.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,DuplicateNodeException,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((BarrierData != null ? BarrierData.GetHashCode() : 0)*397) ^ (Node != null ? Node.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,WrongBarrierException,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (Client != null ? Client.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,WrongBarrierException,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (BarrierData != null ? BarrierData.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ClientLostException,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\BarrierCoordinator.cs,GetHashCode,The following statement contains a magic number: return ((BarrierData != null ? BarrierData.GetHashCode() : 0) * 397)                          ^ (Client != null ? Client.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ServerFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Conductor.cs,InitFSM,The following statement contains a magic number: When(State.Initial' @event =>              {                  var hello = @event.FsmEvent as Hello;                  if (hello != null)                  {                      _roleName = new RoleName(hello.Name);                      _controller.Tell(new Controller.NodeInfo(_roleName' hello.Address' Self));                      return GoTo(State.Ready);                  }                  if (@event.FsmEvent is INetworkOp)                  {                      _log.Warning("client {0}' sent not Hello in first message (instead {1})' disconnecting"' _channel.RemoteAddress' @event.FsmEvent);                      _channel.CloseAsync();                      return Stop();                  }                  if (@event.FsmEvent is IToClient)                  {                      _log.Warning("cannot send {0} in state Initial"' @event.FsmEvent);                      return Stay();                  }                  if (@event.FsmEvent is StateTimeout)                  {                      _log.Info("closing channel to {0} because of Hello timeout"' _channel.RemoteAddress);                      _channel.CloseAsync();                      return Stop();                  }                  return null;              }' TimeSpan.FromSeconds(10));
Magic Number,Akka.Remote.TestKit,NodeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (Addr != null ? Addr.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,NodeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (FSM != null ? FSM.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Hello,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ (_address != null ? _address.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ _timeout.GetHashCode();
Magic Number,Akka.Remote.TestKit,BarrierResult,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode() : 0) * 397) ^ _success.GetHashCode();
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_target != null ? _target.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _direction.GetHashCode();
Magic Number,Akka.Remote.TestKit,Throttle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _rateMBit.GetHashCode();
Magic Number,Akka.Remote.TestKit,ThrottleMsg,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _direction.GetHashCode();
Magic Number,Akka.Remote.TestKit,ThrottleMsg,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _rateMBit.GetHashCode();
Magic Number,Akka.Remote.TestKit,Disconnect,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_target != null ? _target.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,Disconnect,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _abort.GetHashCode();
Magic Number,Akka.Remote.TestKit,DisconnectMsg,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_target != null ? _target.GetHashCode() : 0) * 397) ^ _abort.GetHashCode();
Magic Number,Akka.Remote.TestKit,Terminate,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_shutdownOrExit != null ? _shutdownOrExit.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,AddressReply,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\DataTypes.cs,GetHashCode,The following statement contains a magic number: return ((_node != null ? _node.GetHashCode() : 0) * 397) ^ (_addr != null ? _addr.GetHashCode() : 0);
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: When(State.Connected' @event =>              {                  if (@event.FsmEvent is Disconnected)                  {                      _log.Info("disconnected from TestConductor");                      throw new ConnectionFailure("disconnect");                  }                  if(@event.FsmEvent is ToServer<Done> && @event.StateData.Channel != null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(Done.Instance);                      return Stay();                  }                  var toServer = @event.FsmEvent as IToServer;                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp == null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(toServer.Msg);                      string token = null;                      var enterBarrier = @event.FsmEvent as ToServer<EnterBarrier>;                      if (enterBarrier != null) token = enterBarrier.Msg.Name;                      else                      {                          var getAddress = @event.FsmEvent as ToServer<GetAddress>;                          if (getAddress != null) token = getAddress.Msg.Node.Name;                      }                      return Stay().Using(@event.StateData.Copy(runningOp: (token' Sender)));                  }                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp != null)                  {                      _log.Error("cannot write {0} while waiting for {1}"' toServer.Msg' @event.StateData.RunningOp);                      return Stay();                  }                  if (@event.FsmEvent is IClientOp && @event.StateData.Channel != null)                  {                      var barrierResult = @event.FsmEvent as BarrierResult;                      if (barrierResult != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              object response;                              if (barrierResult.Name != @event.StateData.RunningOp.Value.Item1)                              {                                  response =                                      new Failure(                                          new Exception("wrong barrier " + barrierResult + " received while waiting for " +                                                        @event.StateData.RunningOp.Value.Item1));                              }                              else if (!barrierResult.Success)                              {                                  response =                                      new Failure(                                          new Exception("barrier failed:" + @event.StateData.RunningOp.Value.Item1));                              }                              else                              {                                  response = barrierResult.Name;                              }                              @event.StateData.RunningOp.Value.Item2.Tell(response);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var addressReply = @event.FsmEvent as AddressReply;                      if (addressReply != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              @event.StateData.RunningOp.Value.Item2.Tell(addressReply.Addr);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var throttleMsg = @event.FsmEvent as ThrottleMsg;                      if (@event.FsmEvent is ThrottleMsg)                      {                          ThrottleMode mode;                          if (throttleMsg.RateMBit < 0.0f) mode = Unthrottled.Instance;                          else if (throttleMsg.RateMBit == 0.0f) mode = Blackhole.Instance;                          else mode = new Transport.TokenBucket(1000' throttleMsg.RateMBit*125000' 0' 0);                          var cmdTask =                              TestConductor.Get(Context.System)                                  .Transport.ManagementCommand(new SetThrottle(throttleMsg.Target' throttleMsg.Direction'                                      mode));                            var self = Self;                          cmdTask.ContinueWith(t =>                          {                              if (t.IsFaulted)                                  throw new ConfigurationException("Throttle was requested from the TestConductor' but no transport " +                                      "adapters available that support throttling. Specify 'testTransport(on=true)' in your MultiNodeConfig");                              self.Tell(new ToServer<Done>(Done.Instance));                          });                          return Stay();                      }                      if (@event.FsmEvent is DisconnectMsg)                          return Stay(); //FIXME is this the right EC for the future below?                      var terminateMsg = @event.FsmEvent as TerminateMsg;                      if (terminateMsg != null)                      {                          _log.Info("Received TerminateMsg - shutting down...");                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == false)                          {                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == true)                          {                              Context.System.AsInstanceOf<ActorSystemImpl>().Abort();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsRight)                          {                              Environment.Exit(terminateMsg.ShutdownOrExit.ToRight().Value);                              return Stay();                          }                      }                      if (@event.FsmEvent is Done) return Stay(); //FIXME what should happen?                  }                  return null;              });
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: When(State.Connected' @event =>              {                  if (@event.FsmEvent is Disconnected)                  {                      _log.Info("disconnected from TestConductor");                      throw new ConnectionFailure("disconnect");                  }                  if(@event.FsmEvent is ToServer<Done> && @event.StateData.Channel != null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(Done.Instance);                      return Stay();                  }                  var toServer = @event.FsmEvent as IToServer;                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp == null)                  {                      @event.StateData.Channel.WriteAndFlushAsync(toServer.Msg);                      string token = null;                      var enterBarrier = @event.FsmEvent as ToServer<EnterBarrier>;                      if (enterBarrier != null) token = enterBarrier.Msg.Name;                      else                      {                          var getAddress = @event.FsmEvent as ToServer<GetAddress>;                          if (getAddress != null) token = getAddress.Msg.Node.Name;                      }                      return Stay().Using(@event.StateData.Copy(runningOp: (token' Sender)));                  }                  if (toServer != null && @event.StateData.Channel != null &&                      @event.StateData.RunningOp != null)                  {                      _log.Error("cannot write {0} while waiting for {1}"' toServer.Msg' @event.StateData.RunningOp);                      return Stay();                  }                  if (@event.FsmEvent is IClientOp && @event.StateData.Channel != null)                  {                      var barrierResult = @event.FsmEvent as BarrierResult;                      if (barrierResult != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              object response;                              if (barrierResult.Name != @event.StateData.RunningOp.Value.Item1)                              {                                  response =                                      new Failure(                                          new Exception("wrong barrier " + barrierResult + " received while waiting for " +                                                        @event.StateData.RunningOp.Value.Item1));                              }                              else if (!barrierResult.Success)                              {                                  response =                                      new Failure(                                          new Exception("barrier failed:" + @event.StateData.RunningOp.Value.Item1));                              }                              else                              {                                  response = barrierResult.Name;                              }                              @event.StateData.RunningOp.Value.Item2.Tell(response);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var addressReply = @event.FsmEvent as AddressReply;                      if (addressReply != null)                      {                          if (@event.StateData.RunningOp == null)                          {                              _log.Warning("did not expect {0}"' @event.FsmEvent);                          }                          else                          {                              @event.StateData.RunningOp.Value.Item2.Tell(addressReply.Addr);                          }                          return Stay().Using(@event.StateData.Copy(runningOp: null));                      }                      var throttleMsg = @event.FsmEvent as ThrottleMsg;                      if (@event.FsmEvent is ThrottleMsg)                      {                          ThrottleMode mode;                          if (throttleMsg.RateMBit < 0.0f) mode = Unthrottled.Instance;                          else if (throttleMsg.RateMBit == 0.0f) mode = Blackhole.Instance;                          else mode = new Transport.TokenBucket(1000' throttleMsg.RateMBit*125000' 0' 0);                          var cmdTask =                              TestConductor.Get(Context.System)                                  .Transport.ManagementCommand(new SetThrottle(throttleMsg.Target' throttleMsg.Direction'                                      mode));                            var self = Self;                          cmdTask.ContinueWith(t =>                          {                              if (t.IsFaulted)                                  throw new ConfigurationException("Throttle was requested from the TestConductor' but no transport " +                                      "adapters available that support throttling. Specify 'testTransport(on=true)' in your MultiNodeConfig");                              self.Tell(new ToServer<Done>(Done.Instance));                          });                          return Stay();                      }                      if (@event.FsmEvent is DisconnectMsg)                          return Stay(); //FIXME is this the right EC for the future below?                      var terminateMsg = @event.FsmEvent as TerminateMsg;                      if (terminateMsg != null)                      {                          _log.Info("Received TerminateMsg - shutting down...");                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == false)                          {                              Context.System.Terminate();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsLeft && terminateMsg.ShutdownOrExit.ToLeft().Value == true)                          {                              Context.System.AsInstanceOf<ActorSystemImpl>().Abort();                              return Stay();                          }                          if (terminateMsg.ShutdownOrExit.IsRight)                          {                              Environment.Exit(terminateMsg.ShutdownOrExit.ToRight().Value);                              return Stay();                          }                      }                      if (@event.FsmEvent is Done) return Stay(); //FIXME what should happen?                  }                  return null;              });
Magic Number,Akka.Remote.TestKit,ClientFSM,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Player.cs,InitFSM,The following statement contains a magic number: OnTermination(e =>              {                  _log.Info("Terminating connection to multi-node test controller due to [{0}]"' e.Reason);                  if (e.StateData.Channel != null)                  {                      var disconnectTimeout = TimeSpan.FromSeconds(2); //todo: make into setting loaded from HOCON                      if (!e.StateData.Channel.CloseAsync().Wait(disconnectTimeout))                      {                          _log.Warning("Failed to disconnect from conductor within {0}"' disconnectTimeout);                      }                  }              });
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]                  {new LengthFieldPrepender(ByteOrder.LittleEndian' 4' 0' false)' new LengthFieldBasedFrameDecoder(ByteOrder.LittleEndian' 10000' 0' 4' 0' 4' true)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]                  {new LengthFieldPrepender(ByteOrder.LittleEndian' 4' 0' false)' new LengthFieldBasedFrameDecoder(ByteOrder.LittleEndian' 10000' 0' 4' 0' 4' true)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]                  {new LengthFieldPrepender(ByteOrder.LittleEndian' 4' 0' false)' new LengthFieldBasedFrameDecoder(ByteOrder.LittleEndian' 10000' 0' 4' 0' 4' true)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,ApplyChannelPipeline,The following statement contains a magic number: var encoders = new IChannelHandler[]                  {new LengthFieldPrepender(ByteOrder.LittleEndian' 4' 0' false)' new LengthFieldBasedFrameDecoder(ByteOrder.LittleEndian' 10000' 0' 4' 0' 4' true)};
Magic Number,Akka.Remote.TestKit,RemoteConnection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\RemoteConnection.cs,Shutdown,The following statement contains a magic number: var disconnectTimeout = TimeSpan.FromSeconds(2);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(42);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (hello_ == null) {                hello_ = new global::Akka.Remote.TestKit.Proto.Msg.Hello();              }              input.ReadMessage(hello_);              break;            }            case 18: {              if (barrier_ == null) {                barrier_ = new global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier();              }              input.ReadMessage(barrier_);              break;            }            case 26: {              if (failure_ == null) {                failure_ = new global::Akka.Remote.TestKit.Proto.Msg.InjectFailure();              }              input.ReadMessage(failure_);              break;            }            case 34: {              Done = input.ReadString();              break;            }            case 42: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.TestKit.Proto.Msg.AddressRequest();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (hello_ == null) {                hello_ = new global::Akka.Remote.TestKit.Proto.Msg.Hello();              }              input.ReadMessage(hello_);              break;            }            case 18: {              if (barrier_ == null) {                barrier_ = new global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier();              }              input.ReadMessage(barrier_);              break;            }            case 26: {              if (failure_ == null) {                failure_ = new global::Akka.Remote.TestKit.Proto.Msg.InjectFailure();              }              input.ReadMessage(failure_);              break;            }            case 34: {              Done = input.ReadString();              break;            }            case 42: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.TestKit.Proto.Msg.AddressRequest();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (hello_ == null) {                hello_ = new global::Akka.Remote.TestKit.Proto.Msg.Hello();              }              input.ReadMessage(hello_);              break;            }            case 18: {              if (barrier_ == null) {                barrier_ = new global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier();              }              input.ReadMessage(barrier_);              break;            }            case 26: {              if (failure_ == null) {                failure_ = new global::Akka.Remote.TestKit.Proto.Msg.InjectFailure();              }              input.ReadMessage(failure_);              break;            }            case 34: {              Done = input.ReadString();              break;            }            case 42: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.TestKit.Proto.Msg.AddressRequest();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (hello_ == null) {                hello_ = new global::Akka.Remote.TestKit.Proto.Msg.Hello();              }              input.ReadMessage(hello_);              break;            }            case 18: {              if (barrier_ == null) {                barrier_ = new global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier();              }              input.ReadMessage(barrier_);              break;            }            case 26: {              if (failure_ == null) {                failure_ = new global::Akka.Remote.TestKit.Proto.Msg.InjectFailure();              }              input.ReadMessage(failure_);              break;            }            case 34: {              Done = input.ReadString();              break;            }            case 42: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.TestKit.Proto.Msg.AddressRequest();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Wrapper,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (hello_ == null) {                hello_ = new global::Akka.Remote.TestKit.Proto.Msg.Hello();              }              input.ReadMessage(hello_);              break;            }            case 18: {              if (barrier_ == null) {                barrier_ = new global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier();              }              input.ReadMessage(barrier_);              break;            }            case 26: {              if (failure_ == null) {                failure_ = new global::Akka.Remote.TestKit.Proto.Msg.InjectFailure();              }              input.ReadMessage(failure_);              break;            }            case 34: {              Done = input.ReadString();              break;            }            case 42: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.TestKit.Proto.Msg.AddressRequest();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Hello,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Hello,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.TestKit.Proto.Msg,Hello,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Name = input.ReadString();              break;            }            case 18: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,Hello,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Name = input.ReadString();              break;            }            case 18: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              op_ = (global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier.Types.BarrierOp) input.ReadEnum();              break;            }            case 24: {              Timeout = input.ReadInt64();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              op_ = (global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier.Types.BarrierOp) input.ReadEnum();              break;            }            case 24: {              Timeout = input.ReadInt64();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,EnterBarrier,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              op_ = (global::Akka.Remote.TestKit.Proto.Msg.EnterBarrier.Types.BarrierOp) input.ReadEnum();              break;            }            case 24: {              Timeout = input.ReadInt64();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,AddressRequest,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.TestKit.Proto.Msg,AddressRequest,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.TestKit.Proto.Msg,AddressRequest,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Node = input.ReadString();              break;            }            case 18: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,AddressRequest,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Node = input.ReadString();              break;            }            case 18: {              if (addr_ == null) {                addr_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(addr_);              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(53);
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(56);
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 4;
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              failure_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.FailType) input.ReadEnum();              break;            }            case 16: {              direction_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.Direction) input.ReadEnum();              break;            }            case 26: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 53: {              RateMBit = input.ReadFloat();              break;            }            case 56: {              ExitValue = input.ReadInt32();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              failure_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.FailType) input.ReadEnum();              break;            }            case 16: {              direction_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.Direction) input.ReadEnum();              break;            }            case 26: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 53: {              RateMBit = input.ReadFloat();              break;            }            case 56: {              ExitValue = input.ReadInt32();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              failure_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.FailType) input.ReadEnum();              break;            }            case 16: {              direction_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.Direction) input.ReadEnum();              break;            }            case 26: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 53: {              RateMBit = input.ReadFloat();              break;            }            case 56: {              ExitValue = input.ReadInt32();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              failure_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.FailType) input.ReadEnum();              break;            }            case 16: {              direction_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.Direction) input.ReadEnum();              break;            }            case 26: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 53: {              RateMBit = input.ReadFloat();              break;            }            case 56: {              ExitValue = input.ReadInt32();              break;            }          }
Magic Number,Akka.Remote.TestKit.Proto.Msg,InjectFailure,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Proto\TestConductorProtocol.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              failure_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.FailType) input.ReadEnum();              break;            }            case 16: {              direction_ = (global::Akka.Remote.TestKit.Proto.Msg.InjectFailure.Types.Direction) input.ReadEnum();              break;            }            case 26: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 53: {              RateMBit = input.ReadFloat();              break;            }            case 56: {              ExitValue = input.ReadInt32();              break;            }          }
Missing Default,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case EnterBarrier _: _barrier.Forward(message); return;                      case FailBarrier _: _barrier.Forward(message); return;                      case GetAddress getAddress:                          var node = getAddress.Node;                          if (_nodes.TryGetValue(node' out var replyNodeInfo))                              Sender.Tell(new ToClient<AddressReply>(new AddressReply(node' replyNodeInfo.Addr)));                          else                          {                              _addrInterest = _addrInterest.SetItem(node'                                  (_addrInterest.TryGetValue(node' out var existing)                                      ? existing                                      : ImmutableHashSet.Create<IActorRef>()                                  ).Add(Sender));                          }                          return;                      case Done _: return; //FIXME what should happen?                  }
Missing Default,Akka.Remote.TestKit,Controller,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\Controller.cs,OnReceive,The following switch statement is missing a default case: switch (message)                  {                      case Throttle throttle:                      {                          if (!_nodes.TryGetValue(throttle.Target' out var target)) throw new IllegalActorStateException($"Throttle target {throttle.Target} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}");                          if (!_nodes.TryGetValue(throttle.Node' out var source)) throw new IllegalActorStateException($"Throttle source {throttle.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}");                                                    source.FSM.Forward(new ToClient<ThrottleMsg>(new ThrottleMsg(target.Addr' throttle.Direction' throttle.RateMBit)));                          return;                      }                      case Disconnect disconnect:                      {                          if (!_nodes.TryGetValue(disconnect.Target' out var target)) throw new IllegalActorStateException($"Disconnect target {disconnect.Target} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}");                          if (!_nodes.TryGetValue(disconnect.Node' out var source)) throw new IllegalActorStateException($"Disconnect source {disconnect.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}");                            source.FSM.Forward((new ToClient<DisconnectMsg>(new DisconnectMsg(target.Addr' disconnect.Abort))));                          return;                      }                      case Terminate terminate:                      {                          _barrier.Tell(new BarrierCoordinator.RemoveClient(terminate.Node));                            if (!_nodes.TryGetValue(terminate.Node' out var node)) throw new IllegalActorStateException($"Terminate target {terminate.Node} was not found among nodes registered in {nameof(Controller)}: {string.Join("' "' _nodes.Keys)}");                            node.FSM.Forward(new ToClient<TerminateMsg>(new TerminateMsg(terminate.ShutdownOrExit)));                          _nodes = _nodes.Remove(terminate.Node);                          return;                          }                      case Remove remove:                          _barrier.Tell(new BarrierCoordinator.RemoveClient(remove.Node));                          return;                  }
Missing Default,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,The following switch statement is missing a default case: switch (w.Barrier.Op)                      {                          case Proto.Msg.EnterBarrier.Types.BarrierOp.Succeeded: return new BarrierResult(w.Barrier.Name' true);                          case Proto.Msg.EnterBarrier.Types.BarrierOp.Failed: return new BarrierResult(w.Barrier.Name' false);                          case Proto.Msg.EnterBarrier.Types.BarrierOp.Fail: return new FailBarrier(w.Barrier.Name);                          case Proto.Msg.EnterBarrier.Types.BarrierOp.Enter:                              return new EnterBarrier(w.Barrier.Name' w.Barrier.Timeout > 0 ? (TimeSpan?)TimeSpan.FromTicks(w.Barrier.Timeout) : null);                      }
Missing Default,Akka.Remote.TestKit,MsgDecoder,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote.TestKit\MsgDecoder.cs,Decode,The following switch statement is missing a default case: switch (f.Failure)                      {                          case Proto.Msg.InjectFailure.Types.FailType.Throttle:                              return new ThrottleMsg(Proto2Address(f.Address)' Proto2Direction(f.Direction)' f.RateMBit);                          case Proto.Msg.InjectFailure.Types.FailType.Abort:                              return new DisconnectMsg(Proto2Address(f.Address)' true);                          case Proto.Msg.InjectFailure.Types.FailType.Disconnect:                              return new DisconnectMsg(Proto2Address(f.Address)' false);                          case Proto.Msg.InjectFailure.Types.FailType.Exit:                              return new TerminateMsg(new Right<bool' int>(f.ExitValue));                          case Proto.Msg.InjectFailure.Types.FailType.Shutdown:                              return new TerminateMsg(new Left<bool' int>(false));                          case Proto.Msg.InjectFailure.Types.FailType.ShutdownAbrupt:                              return new TerminateMsg(new Left<bool' int>(true));                      }
