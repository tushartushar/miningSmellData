Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The method has 206 lines of code.
Long Method,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The method has 319 lines of code.
Long Method,Akka.Remote.Transport,ThrottlerManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,Ready,The method has 120 lines of code.
Long Method,Akka.Remote.Transport,ThrottledAssociation,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,InitializeFSM,The method has 166 lines of code.
Complex Method,Akka.Remote,DefaultMessageDispatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Dispatch,Cyclomatic complexity of the method is 13
Complex Method,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Unhandled,Cyclomatic complexity of the method is 10
Complex Method,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,HandleInboundAssociation,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,ActorOf,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote,RemoteSystemDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSystemDaemon.cs,TellInternal,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,OnReceive,Cyclomatic complexity of the method is 10
Complex Method,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,ToBinary,Cyclomatic complexity of the method is 20
Complex Method,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,Manifest,Cyclomatic complexity of the method is 20
Complex Method,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,FromBinary,Cyclomatic complexity of the method is 20
Complex Method,Akka.Remote.Serialization,SystemMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\SystemMessageSerializer.cs,ToBinary,Cyclomatic complexity of the method is 12
Complex Method,Akka.Remote.Serialization,SystemMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\SystemMessageSerializer.cs,FromBinary,Cyclomatic complexity of the method is 11
Complex Method,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,GetHashCode,Cyclomatic complexity of the method is 12
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,Cyclomatic complexity of the method is 12
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,Cyclomatic complexity of the method is 12
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 13
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,GetHashCode,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,Akka.Remote.Transport,ThrottlerManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,Ready,Cyclomatic complexity of the method is 14
Long Parameter List,Akka.Remote,InvalidAssociation,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,InvalidAssociation,The method has 5 parameters. Parameters: message' localAddress' remoteAddress' cause' disassociateInfo
Long Parameter List,Akka.Remote,ReliableDeliverySupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,ReliableDeliverySupervisor,The method has 8 parameters. Parameters: handleOrActive' localAddress' remoteAddress' refuseUid' transport' settings' codec' receiveBuffers
Long Parameter List,Akka.Remote,ReliableDeliverySupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,ReliableDeliverySupervisorProps,The method has 9 parameters. Parameters: handleOrActive' localAddress' remoteAddress' refuseUid' transport' settings' codec' receiveBuffers' dispatcher
Long Parameter List,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,EndpointWriter,The method has 9 parameters. Parameters: handleOrActive' localAddress' remoteAddress' refuseUid' transport' settings' codec' receiveBuffers' reliableDeliverySupervisor
Long Parameter List,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,EndpointWriterProps,The method has 9 parameters. Parameters: handleOrActive' localAddress' remoteAddress' refuseUid' transport' settings' codec' receiveBuffers' reliableDeliverySupervisor
Long Parameter List,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,EndpointReader,The method has 10 parameters. Parameters: localAddress' remoteAddress' transport' settings' codec' msgDispatch' inbound' uid' receiveBuffers' reliableDeliverySupervisor
Long Parameter List,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,ReaderProps,The method has 10 parameters. Parameters: localAddress' remoteAddress' transport' settings' codec' dispatcher' inbound' uid' receiveBuffers' reliableDeliverySupervisor
Long Parameter List,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,CreateEndpoint,The method has 6 parameters. Parameters: remoteAddress' localAddress' transport' endpointSettings' writing' handleOption
Long Parameter List,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The method has 6 parameters. Parameters: threshold' maxSampleSize' minStdDeviation' acceptableHeartbeatPause' firstHeartbeatEstimate' clock
Long Parameter List,Akka.Remote,RemoteActorRef,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRef.cs,RemoteActorRef,The method has 6 parameters. Parameters: remote' localAddressToUse' path' parent' props' deploy
Long Parameter List,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,ActorOf,The method has 8 parameters. Parameters: system' props' supervisor' path' systemService' deploy' lookupDeploy' async
Long Parameter List,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,LocalActorOf,The method has 8 parameters. Parameters: system' props' supervisor' path' systemService' deploy' lookupDeploy' async
Long Parameter List,Akka.Remote,RemoteSystemDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSystemDaemon.cs,RemoteSystemDaemon,The method has 5 parameters. Parameters: system' path' parent' terminator' log
Long Parameter List,Akka.Remote,AssociationErrorEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemotingLifecycleEvent.cs,AssociationErrorEvent,The method has 5 parameters. Parameters: cause' localAddress' remoteAddress' inbound' level
Long Parameter List,Akka.Remote.Serialization,LruBoundedCache<TKey;TValue>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,Move,The method has 6 parameters. Parameters: position' k' h' value' elemEpoch' probeDistance
Long Parameter List,Akka.Remote.Transport,Message,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,Message,The method has 5 parameters. Parameters: recipient' recipientAddress' serializedMessage' senderOptional' seq
Long Parameter List,Akka.Remote.Transport,AkkaPduCodec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,ConstructMessage,The method has 6 parameters. Parameters: localAddress' recipient' serializedMessage' senderOption' seqOption' ackOption
Long Parameter List,Akka.Remote.Transport,AkkaPduProtobuffCodec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,ConstructMessage,The method has 6 parameters. Parameters: localAddress' recipient' serializedMessage' senderOption' seqOption' ackOption
Long Parameter List,Akka.Remote.Transport,AkkaProtocolHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,AkkaProtocolHandle,The method has 7 parameters. Parameters: originalLocalAddress' originalRemoteAddress' readHandlerCompletionSource' wrappedHandle' handshakeInfo' stateActor' codec
Long Parameter List,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,ProtocolStateActor,The method has 8 parameters. Parameters: handshakeInfo' remoteAddress' statusCompletionSource' transport' settings' codec' failureDetector' refuseUid
Long Parameter List,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,ProtocolStateActor,The method has 6 parameters. Parameters: handshakeInfo' wrappedHandle' associationEventListener' settings' codec' failureDetector
Long Parameter List,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,ProtocolStateActor,The method has 6 parameters. Parameters: initialData' localHandshakeInfo' settings' codec' failureDetector' refuseUid
Long Parameter List,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,OutboundProps,The method has 8 parameters. Parameters: handshakeInfo' remoteAddress' statusCompletionSource' transport' settings' codec' failureDetector' refuseUid
Long Parameter List,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InboundProps,The method has 6 parameters. Parameters: handshakeInfo' wrappedHandle' associationEventListener' settings' codec' failureDetector
Long Parameter List,Akka.Remote.Transport.DotNetty,CommonHandlers,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,Init,The method has 5 parameters. Parameters: channel' remoteSocketAddress' remoteAddress' msg' op
Long Parameter List,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,MapSocketToAddress,The method has 5 parameters. Parameters: socketAddress' schemeIdentifier' systemName' hostName' publicPort
Long Parameter List,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,DotNettyTransportSettings,The method has 25 parameters. Parameters: transportMode' enableSsl' connectTimeout' hostname' publicHostname' port' publicPort' serverSocketWorkerPoolSize' clientSocketWorkerPoolSize' maxFrameSize' ssl' dnsUseIpv6' tcpReuseAddr' tcpKeepAlive' tcpNoDelay' backlog' enforceIpFamily' receiveBufferSize' sendBufferSize' writeBufferHighWaterMark' writeBufferLowWaterMark' backwardsCompatibilityModeEnabled' logTransport' byteOrder' enableBufferPooling
Long Identifier,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,,The length of the parameter _serializationInformationCache is 30.
Long Identifier,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,,The length of the parameter _actorRefResolveThreadLocalCache is 32.
Long Identifier,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,Props,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Identifier,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,RemoteWatcher,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Identifier,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,,The length of the parameter _heartbeatExpectedResponseAfter is 31.
Long Identifier,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,,The length of the parameter _failureDetectorReaperCancelable is 32.
Long Identifier,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,ScatterGatherFirstCompletedPoolToProto,The length of the parameter scatterGatherFirstCompletedPool is 31.
Long Identifier,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,ScatterGatherFirstCompletedPoolFromProto,The length of the parameter scatterGatherFirstCompletedPool is 31.
Long Identifier,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,,The length of the parameter RemoteWatcherHearthbeatManifest is 31.
Long Identifier,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,,The length of the parameter RemoteWatcherHearthbeatRspManifest is 34.
Long Identifier,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,,The length of the parameter RouterConfigSerializerIdFieldNumber is 35.
Long Identifier,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,,The length of the parameter RouterConfigManifestFieldNumber is 31.
Long Identifier,Akka.Remote.Transport,FailureInjectorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\FailureInjectorTransportAdapter.cs,,The length of the parameter FailureInjectorSchemeIdentifier is 31.
Long Identifier,Akka.Remote.Transport.DotNetty,HeliosBackwardsCompatabilityLengthFramePrepender,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,HeliosBackwardsCompatabilityLengthFramePrepender,The length of the parameter lengthFieldIncludesLengthFieldLength is 36.
Long Identifier,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,DotNettyTransportSettings,The length of the parameter backwardsCompatibilityModeEnabled is 33.
Long Identifier,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,,The length of the parameter BackwardsCompatibilityModeEnabled is 33.
Long Statement,Akka.Remote,AckedSendBuffer<T>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AckedDelivery.cs,Buffer,The length of the statement  "            if (msg.Seq <= MaxSeq) throw new ArgumentException($"Sequence number must be monotonic. Received {msg.Seq} which is smaller than {MaxSeq}"' nameof(msg)); " is 153.
Long Statement,Akka.Remote,AckedReceiveBuffer<T>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AckedDelivery.cs,ExtractDeliverable,The length of the statement  "                        unchecked //in Java' there are no overflow / underflow exceptions so the value rolls over. We have to explicitly squelch those errors in .NET " is 141.
Long Statement,Akka.Remote,AckedReceiveBuffer<T>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AckedDelivery.cs,MergeFrom,The length of the statement  "            return Copy(mergedLastDelivered' SeqNo.Max(this.CumulativeAck' other.CumulativeAck)' Buf.Union(other.Buf).Where(x => x.Seq > mergedLastDelivered).ToImmutableSortedSet(Comparer)); " is 178.
Long Statement,Akka.Remote,ReliableDeliverySupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,SupervisorStrategy,The length of the statement  "                _log.Warning("Association with remote system {0} has failed; address is now gated for {1} ms. Reason is: [{2}]"' _remoteAddress' _settings.RetryGateClosedFor.TotalMilliseconds' ex); " is 181.
Long Statement,Akka.Remote,ReliableDeliverySupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,PostRestart,The length of the statement  "            throw new IllegalActorStateException("BUG: ReliableDeliverySupervisor has been attempted to be restarted. This must not happen."); " is 130.
Long Statement,Akka.Remote,ReliableDeliverySupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Receiving,The length of the statement  "                            new IllegalStateException($"Error encountered while processing system message acknowledgement buffer: {_resendBuffer} ack: {ack}"' ex)); " is 136.
Long Statement,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,PreStart,The length of the statement  "            _ackIdleTimerCancelable = Context.System.Scheduler.ScheduleTellRepeatedlyCancelable(ackIdleInterval' ackIdleInterval' Self' AckIdleCheckTimer.Instance' Self); " is 158.
Long Statement,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Initializing,The length of the statement  "                PublishAndThrow(new InvalidAssociation($"Association failed with {RemoteAddress}"' LocalAddress' RemoteAddress' failure.Cause)' LogLevel.WarningLevel); " is 151.
Long Statement,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,WriteSend,The length of the statement  "                        string.Format("Discarding oversized payload sent to {0}: max allowed size {1} bytes' actual size of encoded {2} was {3} bytes."' " is 128.
Long Statement,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,SendBufferedMessages,The length of the statement  "                               "adaptiveBackoff: {4}"' _maxWriteCount' _fullBackoffCount' _smallBackoffCount' _noBackoffCount' _adaptiveBackoffNanos / 1000); " is 126.
Long Statement,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,SendBufferedMessages,The length of the statement  "                        _log.Warning("[{0}] buffered messages in EndpointWriter for [{1}]. You should probably implement flow control to avoid flooding the remote connection."' size' RemoteAddress); " is 174.
Long Statement,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Merge,The length of the statement  "            if (current.Uid == oldState.Uid) return new EndpointManager.ResendState(_uid' oldState.Buffer.MergeFrom(current.Buffer)); " is 121.
Long Statement,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,HandleDisassociated,The length of the statement  "                                                   "to the remote system are possible until this system is restarted."' LocalAddress' RemoteAddress' disassociateInfo: DisassociateInfo.Quarantined); " is 146.
Long Statement,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,HandleDisassociated,The length of the statement  "                    throw new ShutDownAssociation($"The remote system terminated the association because it is shutting down. Shut down address: {RemoteAddress}"' LocalAddress' RemoteAddress); " is 172.
Long Statement,Akka.Remote,EndpointReader,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,DeliverAndAck,The length of the statement  "            deliverable.Deliverables.ForEach(msg => _msgDispatch.Dispatch(msg.Recipient' msg.RecipientAddress' msg.SerializedMessage' msg.SenderOptional)); " is 143.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,SupervisorStrategy,The length of the statement  "                            _log.Error(e.InnerException ?? e' "Association to [{0}] with UID [{1}] is irrecoverably failed. Quarantining address."' h.RemoteAddress' h.Uid); " is 144.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,SupervisorStrategy,The length of the statement  "                            _log.Warning("Association to [{0}] with unknown UID is irrecoverably failed. Address cannot be quarantined without knowing the UID' gating instead for {1} ms."' " is 160.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,SupervisorStrategy,The length of the statement  "                            _log.Warning("Tried to associate with unreachable remote address [{0}]. Address is now gated for {1} ms' all messages to this address will be delivered to dead letters. Reason: [{2}] {3}"' " is 188.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,SupervisorStrategy,The length of the statement  "                            _log.Debug("Remote system with address [{0}] has shut down. Address is now gated for {1}ms' all messages to this address will be delivered to dead letters."' " is 157.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                    "address cannot be quarantined without knowing the UID' gating instead for {1} ms."' quarantine.RemoteAddress' _settings.RetryGateClosedFor.TotalMilliseconds); " is 159.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                        _endpoints.MarkAsQuarantined(quarantine.RemoteAddress' quarantineUid.Value' Deadline.Now + _settings.QuarantineDuration); " is 121.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                        _endpoints.RegisterWritableEndpointRefuseUid(quarantine.RemoteAddress' quarantineUid.Value' Deadline.Now + _settings.QuarantineDuration); " is 137.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                else if (policy.Item1 is Quarantined && policy.Item2 != null && policy.Item1.AsInstanceOf<Quarantined>().Uid == policy.Item2.Value) " is 131.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                    _endpoints.MarkAsQuarantined(quarantine.RemoteAddress' policy.Item2.Value' Deadline.Now + _settings.QuarantineDuration); " is 120.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                else if (readPolicy.Item1?.Item1 != null && quarantine.Uid != null && readPolicy.Item1?.Item2 == quarantine.Uid) { Context.Stop(readPolicy.Item1.Value.Item1); } " is 160.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Accepting,The length of the statement  "                          }' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default)).Unwrap().PipeTo(sender); " is 121.
Long Statement,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,HandleInboundAssociation,The length of the statement  "                                _pendingReadHandoffs.GetOrElse(pWithUid.Endpoint' null)?.Disassociate("the existing writable association was replaced by a new incoming one"' _log); " is 148.
Long Statement,Akka.Remote,HeartbeatHistory,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,DropOldest,The length of the statement  "            return new HeartbeatHistory(history._maxSampleSize' history._intervals.Skip(1).ToList()' history._intervalSum - history._intervals.First()' history._squaredIntervalSum - Pow2(history._intervals.First())); " is 204.
Long Statement,Akka.Remote,RemoteActorRef,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRef.cs,HandleException,The length of the statement  "            Remote.System.EventStream.Publish(new Error(ex' Path.ToString()' GetType()' "swallowing exception during message send")); " is 121.
Long Statement,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,ActorOf,The length of the statement  "            var deployment = new List<Deploy>() { deploy' configDeploy }.Where(x => x != null).Aggregate(Deploy.None' (deploy1' deploy2) => deploy2.WithFallback(deploy1)); " is 159.
Long Statement,Akka.Remote,RemoteSystemDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSystemDaemon.cs,TellInternal,The length of the statement  "            //note: RemoteDaemon does not handle ActorSelection messages - those are handled directly by the RemoteActorRefProvider. " is 120.
Long Statement,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,Props,The length of the statement  "            return Actor.Props.Create(() => new RemoteWatcher(failureDetector' heartbeatInterval' unreachableReaperInterval' heartbeatExpectedResponseAfter)) " is 145.
Long Statement,Akka.Remote,RemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,ReWatch,The length of the statement  "                watchee.SendSystemMessage(new Watch(watchee' watcher)); // ➡➡➡ NEVER SEND THE SAME SYSTEM MESSAGE OBJECT TO TWO ACTORS ⬅⬅⬅ " is 122.
Long Statement,Akka.Remote,Stats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,ToString,The length of the statement  "                return $"Stats(watching={_watching}' watchingNodes={_watchingNodes}' watchingRefs=[{FormatWatchingRefs()}]' watchingAddresses=[{FormatWatchingAddresses()}])"; " is 158.
Long Statement,Akka.Remote,Remoting,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Remoting.cs,Shutdown,The length of the statement  "                            _log.Warning("Shutdown finished' but flushing might not have been successful and some messages might have been dropped. " + " is 123.
Long Statement,Akka.Remote,Remoting,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Remoting.cs,Quarantine,The length of the statement  "                throw new RemoteTransportException($"Attempted to quarantine address {address} with uid {uid} but Remoting is not running"); " is 124.
Long Statement,Akka.Remote.Serialization,DaemonMsgCreateSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\DaemonMsgCreateSerializer.cs,ToBinary,The length of the statement  "            throw new ArgumentException($"Can't serialize a non-DaemonMsgCreate message using DaemonMsgCreateSerializer [{obj.GetType()}]"); " is 128.
Long Statement,Akka.Remote.Serialization,DaemonMsgCreateSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\DaemonMsgCreateSerializer.cs,DeployFromProto,The length of the statement  "            if (protoDeploy.RouterConfigSerializerId > 0) // TODO: should be protoDeploy.RouterConfig != null. But it always not null " is 121.
Long Statement,Akka.Remote.Serialization,LruBoundedCache<TKey;TValue>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,ToString,The length of the statement  "                   $"epochs = [{string.Join("'"' _epochs)}]' distances = [{Enumerable.Range(0' _hashes.Length).Select(x => ProbeDistanceOf(x))}]'" + " is 129.
Long Statement,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,FromBinary,The length of the statement  "            throw new SerializationException($"Unimplemented deserialization of message with manifest [{manifest}] in [{nameof(MiscMessageSerializer)}]"); " is 142.
Long Statement,Akka.Remote.Serialization,MiscMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\MiscMessageSerializer.cs,RemoteRouterConfigFromProto,The length of the statement  "            return new RemoteRouterConfig(_payloadSupport.PayloadFrom(protoMessage.Local).AsInstanceOf<Pool>()' protoMessage.Nodes.Select(AddressFrom)); " is 140.
Long Statement,Akka.Remote.Serialization,PrimitiveSerializers,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\PrimitiveSerializers.cs,FromBinary,The length of the statement  "            throw new ArgumentException($"Unimplemented deserialization of message with manifest [{type.TypeQualifiedName()}] in [${nameof(PrimitiveSerializers)}]"); " is 153.
Long Statement,Akka.Remote.Serialization,ProtobufSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\ProtobufSerializer.cs,ToBinary,The length of the statement  "            throw new ArgumentException($"Can't serialize a non-protobuf message using protobuf [{obj.GetType().TypeQualifiedName()}]"); " is 124.
Long Statement,Akka.Remote.Serialization,ProtobufSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\ProtobufSerializer.cs,FromBinary,The length of the statement  "            if(msg == null) throw new ArgumentException($"Can't deserialize a non-protobuf message using protobuf [{type.TypeQualifiedName()}]"); " is 133.
Long Statement,Akka.Remote.Serialization,SystemMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\SystemMessageSerializer.cs,FromBinary,The length of the statement  "            throw new ArgumentException($"Unimplemented deserialization of message with manifest [{type.TypeQualifiedName()}] in [${nameof(SystemMessageSerializer)}]"); " is 156.
Long Statement,Akka.Remote.Transport,AkkaPduProtobuffCodec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,DecodeMessage,The length of the statement  "                ackOption = new Ack(new SeqNo((long)ackAndEnvelope.Ack.CumulativeAck)' ackAndEnvelope.Ack.Nacks.Select(x => new SeqNo((long)x))); " is 129.
Long Statement,Akka.Remote.Transport,AkkaPduProtobuffCodec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,ConstructMessage,The length of the statement  "            if (senderOption != null && senderOption.Path != null) { envelope.Sender = SerializeActorRef(localAddress' senderOption); } " is 123.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                                        _log.Debug("Sending disassociate to [{0}] because unexpected message of type [{1}] was received unassociated."' wrappedHandle' @event.FsmEvent.GetType()); " is 154.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                            _log.Debug("Sending disassociate to [{0}] because handshake timed out for outbound association after [{1}] ms."' oua.WrappedHandle' _settings.HandshakeTimeout.TotalMilliseconds); " is 178.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                            $"No response from remote for outbound association. Handshake timed out after [{_settings.HandshakeTimeout.TotalMilliseconds}] ms"))); " is 134.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                            _log.Debug("Sending disassociate to [{0}] because handshake timed out for inbound association after [{1}] ms."' iu.WrappedHandle' _settings.HandshakeTimeout.TotalMilliseconds); " is 176.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                            $"No response from remote for inbound association. Handshake timed out after [{_settings.HandshakeTimeout.TotalMilliseconds}] ms"))); " is 133.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The length of the statement  "                    d.Transport.Associate(d.RemoteAddress).ContinueWith(result => new HandleMsg(result.Result)' TaskContinuationOptions.ExecuteSynchronously).PipeTo(Self); " is 151.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,DisassociateException,The length of the statement  "                    return new AkkaProtocolException("The remote system has quarantined this system. No further associations to the remote systems are possible until this system is restarted."); " is 174.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,HandleTimers,The length of the statement  "                    _log.Debug("Sending disassociate to [{0}] because failure detector triggered in state [{1}]"' wrappedHandle' StateName); " is 120.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,HandleTimers,The length of the statement  "                return Stop(new Failure(new TimeoutReason($"No response from remote. Handshake timed out or transport failure detector triggered. (internal state was {StateName})"))); " is 167.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,NotifyInboundHandler,The length of the statement  "                    new AkkaProtocolHandle(_localAddress' handshakeInfo.Origin' readHandlerPromise' wrappedHandle' handshakeInfo' Self' _codec))); " is 126.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,OutboundProps,The length of the statement  "            return Props.Create(() => new ProtocolStateActor(handshakeInfo' remoteAddress' statusCompletionSource' transport' settings' codec' failureDetector' refuseUid)); " is 160.
Long Statement,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InboundProps,The length of the statement  "            return Props.Create(() => new ProtocolStateActor(handshakeInfo' wrappedHandle' associationEventListener' settings' codec' failureDetector)); " is 140.
Long Statement,Akka.Remote.Transport,FailureInjectorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\FailureInjectorTransportAdapter.cs,Notify,The length of the statement  "            if (ev is InboundAssociation && ShouldDropInbound(ev.AsInstanceOf<InboundAssociation>().Association.RemoteAddress' ev' "notify")) " is 129.
Long Statement,Akka.Remote.Transport,FailureInjectorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\FailureInjectorTransportAdapter.cs,InterceptInboundAssociation,The length of the statement  "            if (ev is InboundAssociation) return new InboundAssociation(new FailureInjectorHandle(ev.AsInstanceOf<InboundAssociation>().Association' this)); " is 144.
Long Statement,Akka.Remote.Transport,ThrottlerManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,Ready,The length of the statement  "                wrappedHandle.ReadHandlerSource.Task.ContinueWith(tr => new ListenerAndMode(tr.Result' inMode)' TaskContinuationOptions.ExecuteSynchronously) " is 141.
Long Statement,Akka.Remote.Transport,ThrottlerHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,Write,The length of the statement  "            //might want to consider making this consumer function strongly typed: http://blogs.msdn.com/b/wesdyer/archive/2007/02/02/anonymous-recursion-in-c.aspx " is 151.
Long Statement,Akka.Remote.Transport,AssociationHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\Transport.cs,Disassociate,The length of the statement  "                log.Debug("Association between local [{0}] and remote [{1}] was disassociated because {2}"' LocalAddress' RemoteAddress' reason); " is 129.
Long Statement,Akka.Remote.Transport,AssociationHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\Transport.cs,GetHashCode,The length of the statement  "                return ((LocalAddress != null ? LocalAddress.GetHashCode() : 0) * 397) ^ (RemoteAddress != null ? RemoteAddress.GetHashCode() : 0); " is 131.
Long Statement,Akka.Remote.Transport,AbstractTransportAdapterHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TransportAdapters.cs,Equals,The length of the statement  "            return Equals(OriginalLocalAddress' other.OriginalLocalAddress) && Equals(OriginalRemoteAddress' other.OriginalRemoteAddress) && Equals(WrappedHandle' other.WrappedHandle); " is 172.
Long Statement,Akka.Remote.Transport,ActorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TransportAdapters.cs,RegisterManager,The length of the statement  "            return System.ActorSelection("/system/transports").Ask<IActorRef>(new RegisterTransportActor(ManagerProps' ManagerName)); " is 121.
Long Statement,Akka.Remote.Transport,ActorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TransportAdapters.cs,Shutdown,The length of the statement  "            return Task.WhenAll(stopTask' transportStopTask).ContinueWith(x => x.IsCompleted && !(x.IsFaulted || x.IsCanceled)' TaskContinuationOptions.ExecuteSynchronously); " is 162.
Long Statement,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,ChannelRead,The length of the statement  "                _log.Debug("Channel {0} received a message ({1}) of type [{2}]"' ctx.Channel' message' message == null ? "NULL" : message.GetType().TypeQualifiedName()); " is 153.
Long Statement,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,WriteAsync,The length of the statement  "                _log.Debug("Channel {0} writing a message ({1}) of type [{2}]"' ctx.Channel' message' message == null ? "NULL" : message.GetType().TypeQualifiedName()); " is 152.
Long Statement,Akka.Remote.Transport.DotNetty,CommonHandlers,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ExceptionCaught,The length of the statement  "            Log.Error(exception' "Error caught channel [{0}->{1}](Id={2})"' context.Channel.LocalAddress' context.Channel.RemoteAddress' context.Channel.Id); " is 145.
Long Statement,Akka.Remote.Transport.DotNetty,CommonHandlers,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,Init,The length of the statement  "            var localAddress = DotNettyTransport.MapSocketToAddress((IPEndPoint)channel.LocalAddress' Transport.SchemeIdentifier' Transport.System.Name' Transport.Settings.Hostname); " is 170.
Long Statement,Akka.Remote.Transport.DotNetty,CommonHandlers,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,Init,The length of the statement  "                }' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.NotOnCanceled | TaskContinuationOptions.NotOnFaulted); " is 128.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,Shutdown,The length of the statement  "#pragma warning disable 4014 // shutting down the worker groups can take up to 10 seconds each. Let that happen asnychronously. " is 127.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ClientFactory,The length of the statement  "                .Option(ChannelOption.Allocator' Settings.EnableBufferPooling ? (IByteBufferAllocator)PooledByteBufferAllocator.Default : UnpooledByteBufferAllocator.Default) " is 158.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ClientFactory,The length of the statement  "            if (Settings.WriteBufferHighWaterMark.HasValue) client.Option(ChannelOption.WriteBufferHighWaterMark' Settings.WriteBufferHighWaterMark.Value); " is 143.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ClientFactory,The length of the statement  "            if (Settings.WriteBufferLowWaterMark.HasValue) client.Option(ChannelOption.WriteBufferLowWaterMark' Settings.WriteBufferLowWaterMark.Value); " is 140.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetInitialChannelPipeline,The length of the statement  "                pipeline.AddLast("FrameDecoder"' new LengthFieldBasedFrameDecoder(Settings.ByteOrder' (int)MaximumPayloadBytes' 0' 4' 0' 4' true)); " is 131.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetClientPipeline,The length of the statement  "                    ? new TlsHandler(stream => new SslStream(stream' true' (sender' cert' chain' errors) => true)' new ClientTlsSettings(host)) " is 123.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetServerPipeline,The length of the statement  "                var handler = new TcpServerHandler(this' Logging.GetLogger(System' typeof(TcpServerHandler))' AssociationListenerPromise.Task); " is 127.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ServerFactory,The length of the statement  "                .Option(ChannelOption.Allocator' Settings.EnableBufferPooling ? (IByteBufferAllocator)PooledByteBufferAllocator.Default : UnpooledByteBufferAllocator.Default) " is 158.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ServerFactory,The length of the statement  "            if (Settings.WriteBufferHighWaterMark.HasValue) server.Option(ChannelOption.WriteBufferHighWaterMark' Settings.WriteBufferHighWaterMark.Value); " is 143.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ServerFactory,The length of the statement  "            if (Settings.WriteBufferLowWaterMark.HasValue) server.Option(ChannelOption.WriteBufferLowWaterMark' Settings.WriteBufferLowWaterMark.Value); " is 140.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ResolveNameAsync,The length of the statement  "                throw new KeyNotFoundException($"Couldn't resolve IP endpoint from provided DNS name '{address}' with address family of '{addressFamily}'"); " is 140.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,MapSocketToAddress,The length of the statement  "                : new Address(schemeIdentifier' systemName' SafeMapHostName(hostName) ?? SafeMapIPv6(socketAddress.Address)' publicPort ?? socketAddress.Port); " is 143.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,ToEndpoint,The length of the statement  "            if (!address.Port.HasValue) throw new ArgumentNullException(nameof(address)' $"Address port must not be null: {address}"); " is 122.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The length of the statement  "            if (config == null) throw new ArgumentNullException(nameof(config)' "DotNetty HOCON config was not found (default path: `akka.remote.dot-netty`)"); " is 147.
Long Statement,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The length of the statement  "                default: throw new ArgumentException($"Unknown byte-order option [{byteOrderString}]. Supported options are: big-endian' little-endian."); " is 138.
Long Statement,Akka.Remote.Transport.DotNetty,SslSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The length of the statement  "            if (config == null) throw new ArgumentNullException(nameof(config)' "DotNetty SSL HOCON config was not found (default path: `akka.remote.dot-netty.Ssl`)"); " is 155.
Long Statement,Akka.Remote.Transport.DotNetty,SslSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,ParseStoreLocationName,The length of the statement  "                default: throw new ArgumentException($"Unrecognized flag in X509 certificate config [{str}]. Available flags: local-machine | current-user"); " is 141.
Long Statement,Akka.Remote.Transport.DotNetty,SslSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,ParseKeyStorageFlag,The length of the statement  "                default: throw new ArgumentException($"Unrecognized flag in X509 certificate config [{str}]. Available flags: default-key-set | exportable | machine-key-set | persist-key-set | user-key-set | user-protected"); " is 209.
Complex Conditional,Akka.Remote,DefaultMessageDispatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Dispatch,The conditional expression  "_settings.UntrustedMode                          && (!_settings.TrustedSelectionPaths.Contains(FormatActorPath(sel))                              || sel.Message is IPossiblyHarmful                              || !recipient.Equals(_provider.RootGuardian))"  is complex.
Complex Conditional,Akka.Remote,DefaultMessageDispatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,Dispatch,The conditional expression  "(recipient is IRemoteRef || recipient is RepointableActorRef) && !recipient.IsLocal &&                       !_settings.UntrustedMode"  is complex.
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,AkkaProtocolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AkkaProtocolSettings.cs,AkkaProtocolSettings,The constructor "AkkaProtocolSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,DeadlineFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\DeadlineFailureDetector.cs,DeadlineFailureDetector,The constructor "DeadlineFailureDetector" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,DeadlineFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\DeadlineFailureDetector.cs,DeadlineFailureDetector,The constructor "DeadlineFailureDetector" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The constructor "PhiAccrualFailureDetector" calls a virtual method "GetDouble".
Virtual Method Call from Constructor,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The constructor "PhiAccrualFailureDetector" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The constructor "PhiAccrualFailureDetector" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The constructor "PhiAccrualFailureDetector" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,PhiAccrualFailureDetector,The constructor "PhiAccrualFailureDetector" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteMetricsOn,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteMetricsExtension.cs,RemoteMetricsOn,The constructor "RemoteMetricsOn" calls a virtual method "GetByteSize".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetInt".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,RemoteSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,RemoteSettings,The constructor "RemoteSettings" calls a virtual method "GetTimeSpan".
Virtual Method Call from Constructor,Akka.Remote,TransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,TransportSettings,The constructor "TransportSettings" calls a virtual method "GetString".
Virtual Method Call from Constructor,Akka.Remote,TransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteSettings.cs,TransportSettings,The constructor "TransportSettings" calls a virtual method "GetStringList".
Virtual Method Call from Constructor,Akka.Remote,Remoting,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Remoting.cs,Remoting,The constructor "Remoting" calls a virtual method "SystemActorOf".
Virtual Method Call from Constructor,Akka.Remote.Transport,FailureInjectorTransportAdapter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\FailureInjectorTransportAdapter.cs,FailureInjectorTransportAdapter,The constructor "FailureInjectorTransportAdapter" calls a virtual method "GetBoolean".
Virtual Method Call from Constructor,Akka.Remote.Transport,TestTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TestTransport.cs,TestTransport,The constructor "TestTransport" calls a virtual method "GetByteSize".
Virtual Method Call from Constructor,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,DotNettyTransport,The constructor "DotNettyTransport" calls a virtual method "HasPath".
Virtual Method Call from Constructor,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,DotNettyTransport,The constructor "DotNettyTransport" calls a virtual method "GetConfig".
Virtual Method Call from Constructor,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,DotNettyTransport,The constructor "DotNettyTransport" calls a virtual method "WithFallback".
Empty Catch Block,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,Listen,The method has an empty catch block.
Magic Number,Akka.Remote,AckedReceiveBuffer<T>,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\AckedDelivery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CumulativeAck.GetHashCode();
Magic Number,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,PreStart,The following statement contains a magic number: var ackIdleInterval = new TimeSpan(Settings.SysMsgAckTimeout.Ticks / 2);
Magic Number,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,AdjustAdaptiveBackup,The following statement contains a magic number: _adaptiveBackoffNanos = Math.Min(Convert.ToInt64(_adaptiveBackoffNanos * 1.2)' MaxAdaptiveBackoffNanos);
Magic Number,Akka.Remote,EndpointWriter,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Endpoint.cs,SendBufferedMessages,The following statement contains a magic number: _log.Debug("Drained buffer with maxWriteCount: {0}' fullBackoffCount: {1}'" +                                 "smallBackoffCount: {2}' noBackoffCount: {3}'" +                                 "adaptiveBackoff: {4}"' _maxWriteCount' _fullBackoffCount' _smallBackoffCount' _noBackoffCount' _adaptiveBackoffNanos / 1000);
Magic Number,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,Receiving,The following statement contains a magic number: Receive<InboundAssociation>(                  ia => Context.System.Scheduler.ScheduleTellOnce(TimeSpan.FromMilliseconds(10)' Self' ia' Self));
Magic Number,Akka.Remote,Link,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,GetHashCode,The following statement contains a magic number: return (LocalAddress.GetHashCode() * 397) ^ RemoteAddress.GetHashCode();
Magic Number,Akka.Remote,ResendState,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,GetHashCode,The following statement contains a magic number: return (Uid * 397) ^ Buffer.GetHashCode();
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv4,The following statement contains a magic number: long address = (((m_Numbers[6] & 0x0000FF00u) >> 8) | ((m_Numbers[6] & 0x000000FFu) << 8)) |                             ((((m_Numbers[7] & 0x0000FF00u) >> 8) | ((m_Numbers[7] & 0x000000FFu) << 8)) << 16);
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv6,The following statement contains a magic number: byte[] ipv6Bytes = new byte[16] {                  0'0' 0'0' 0'0' 0'0' 0'0' 0xFF'0xFF'                  ipv4Bytes [0]' ipv4Bytes [1]' ipv4Bytes [2]' ipv4Bytes [3]              };
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv6,The following statement contains a magic number: byte[] ipv6Bytes = new byte[16] {                  0'0' 0'0' 0'0' 0'0' 0'0' 0xFF'0xFF'                  ipv4Bytes [0]' ipv4Bytes [1]' ipv4Bytes [2]' ipv4Bytes [3]              };
Magic Number,Akka.Remote,IpExtensions,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\IPExtensions.cs,MapToIPv6,The following statement contains a magic number: byte[] ipv6Bytes = new byte[16] {                  0'0' 0'0' 0'0' 0'0' 0'0' 0xFF'0xFF'                  ipv4Bytes [0]' ipv4Bytes [1]' ipv4Bytes [2]' ipv4Bytes [3]              };
Magic Number,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,Phi,The following statement contains a magic number: var e = Math.Exp(-y*(1.5976 + 0.070566*y*y));
Magic Number,Akka.Remote,PhiAccrualFailureDetector,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\PhiAccrualFailureDetector.cs,Phi,The following statement contains a magic number: var e = Math.Exp(-y*(1.5976 + 0.070566*y*y));
Magic Number,Akka.Remote,RemoteActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteActorRefProvider.cs,LookUpRemotes,The following statement contains a magic number: return LookUpRemotes(p.Drop(3));
Magic Number,Akka.Remote,RemoteMetricsOn,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteMetricsExtension.cs,LogPayloadBytes,The following statement contains a magic number: var newMax = Convert.ToInt64(payloadBytes*1.1);
Magic Number,Akka.Remote,Stats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Remote,Stats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _watching.GetHashCode();
Magic Number,Akka.Remote,Stats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\RemoteWatcher.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _watchingNodes.GetHashCode();
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfString,The following statement contains a magic number: var s0 = 391408L;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfString,The following statement contains a magic number: var s1 = 601258L;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfString,The following statement contains a magic number: x ^= x << 23;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfString,The following statement contains a magic number: y ^= (y >> 26);
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfString,The following statement contains a magic number: x ^= (x >> 17);
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfStringFast,The following statement contains a magic number: var s0 = 391408L;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfStringFast,The following statement contains a magic number: var s1 = 601258L;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfStringFast,The following statement contains a magic number: x ^= x << 23;
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfStringFast,The following statement contains a magic number: y ^= (y >> 26);
Magic Number,Akka.Remote.Serialization,FastHash,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\LruBoundedCache.cs,OfStringFast,The following statement contains a magic number: x ^= (x >> 17);
Magic Number,Akka.Remote.Serialization.Proto.Msg,SelectionEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,SelectionEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }            case 18: {              pattern_.AddEntriesFrom(input' _repeated_pattern_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,SelectionEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (payload_ == null) {                payload_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(payload_);              break;            }            case 18: {              pattern_.AddEntriesFrom(input' _repeated_pattern_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Selection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Selection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Selection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              type_ = (global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType) input.ReadEnum();              break;            }            case 18: {              Matcher = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Selection,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              type_ = (global::Akka.Remote.Serialization.Proto.Msg.Selection.Types.PatternType) input.ReadEnum();              break;            }            case 18: {              Matcher = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorRefData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorRefData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              System = input.ReadString();              break;            }            case 18: {              Hostname = input.ReadString();              break;            }            case 24: {              Port = input.ReadUInt32();              break;            }            case 34: {              Protocol = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              System = input.ReadString();              break;            }            case 18: {              Hostname = input.ReadString();              break;            }            case 24: {              Port = input.ReadUInt32();              break;            }            case 34: {              Protocol = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              System = input.ReadString();              break;            }            case 18: {              Hostname = input.ReadString();              break;            }            case 24: {              Port = input.ReadUInt32();              break;            }            case 34: {              Protocol = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AddressData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              System = input.ReadString();              break;            }            case 18: {              Hostname = input.ReadString();              break;            }            case 24: {              Port = input.ReadUInt32();              break;            }            case 34: {              Protocol = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Message = input.ReadBytes();              break;            }            case 16: {              SerializerId = input.ReadInt32();              break;            }            case 26: {              MessageManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Message = input.ReadBytes();              break;            }            case 16: {              SerializerId = input.ReadInt32();              break;            }            case 26: {              MessageManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Payload,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Message = input.ReadBytes();              break;            }            case 16: {              SerializerId = input.ReadInt32();              break;            }            case 26: {              MessageManifest = input.ReadBytes();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,Identify,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,Identify,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (messageId_ == null) {                messageId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(messageId_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorIdentity,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorIdentity,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorIdentity,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (correlationId_ == null) {                correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(correlationId_);              break;            }            case 18: {              Path = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ActorIdentity,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (correlationId_ == null) {                correlationId_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(correlationId_);              break;            }            case 18: {              Path = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteWatcherHeartbeatResponse,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteWatcherHeartbeatResponse,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              Uid = input.ReadUInt64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(42);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ExceptionData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\ContainerFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              TypeName = input.ReadString();              break;            }            case 18: {              Message = input.ReadString();              break;            }            case 26: {              StackTrace = input.ReadString();              break;            }            case 34: {              Source = input.ReadString();              break;            }            case 42: {              if (innerException_ == null) {                innerException_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(innerException_);              break;            }            case 50: {              customFields_.AddEntriesFrom(input' _map_customFields_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,CreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,CreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RecreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RecreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ResumeData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ResumeData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,SuperviseData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,SuperviseData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.Serialization.Proto.Msg,SuperviseData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (child_ == null) {                child_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(child_);              break;            }            case 16: {              Async = input.ReadBool();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,SuperviseData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (child_ == null) {                child_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(child_);              break;            }            case 16: {              Async = input.ReadBool();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,WatchData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,WatchData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,WatchData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (watchee_ == null) {                watchee_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(watchee_);              break;            }            case 18: {              if (watcher_ == null) {                watcher_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(watcher_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,WatchData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (watchee_ == null) {                watchee_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(watchee_);              break;            }            case 18: {              if (watcher_ == null) {                watcher_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(watcher_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (child_ == null) {                child_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(child_);              break;            }            case 18: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }            case 24: {              Uid = input.ReadUInt64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (child_ == null) {                child_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(child_);              break;            }            case 18: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }            case 24: {              Uid = input.ReadUInt64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,FailedData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (child_ == null) {                child_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(child_);              break;            }            case 18: {              if (cause_ == null) {                cause_ = new global::Akka.Remote.Serialization.Proto.Msg.ExceptionData();              }              input.ReadMessage(cause_);              break;            }            case 24: {              Uid = input.ReadUInt64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (actor_ == null) {                actor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(actor_);              break;            }            case 16: {              ExistenceConfirmed = input.ReadBool();              break;            }            case 24: {              AddressTerminated = input.ReadBool();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (actor_ == null) {                actor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(actor_);              break;            }            case 16: {              ExistenceConfirmed = input.ReadBool();              break;            }            case 24: {              AddressTerminated = input.ReadBool();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeathWatchNotificationData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\SystemMessageFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (actor_ == null) {                actor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(actor_);              break;            }            case 16: {              ExistenceConfirmed = input.ReadBool();              break;            }            case 24: {              AddressTerminated = input.ReadBool();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AckAndEnvelopeContainer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AckAndEnvelopeContainer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AckAndEnvelopeContainer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (ack_ == null) {                ack_ = new global::Akka.Remote.Serialization.Proto.Msg.AcknowledgementInfo();              }              input.ReadMessage(ack_);              break;            }            case 18: {              if (envelope_ == null) {                envelope_ = new global::Akka.Remote.Serialization.Proto.Msg.RemoteEnvelope();              }              input.ReadMessage(envelope_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AckAndEnvelopeContainer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (ack_ == null) {                ack_ = new global::Akka.Remote.Serialization.Proto.Msg.AcknowledgementInfo();              }              input.ReadMessage(ack_);              break;            }            case 18: {              if (envelope_ == null) {                envelope_ = new global::Akka.Remote.Serialization.Proto.Msg.RemoteEnvelope();              }              input.ReadMessage(envelope_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(41);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (recipient_ == null) {                recipient_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(recipient_);              break;            }            case 18: {              if (message_ == null) {                message_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(message_);              break;            }            case 34: {              if (sender_ == null) {                sender_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(sender_);              break;            }            case 41: {              Seq = input.ReadFixed64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (recipient_ == null) {                recipient_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(recipient_);              break;            }            case 18: {              if (message_ == null) {                message_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(message_);              break;            }            case 34: {              if (sender_ == null) {                sender_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(sender_);              break;            }            case 41: {              Seq = input.ReadFixed64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (recipient_ == null) {                recipient_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(recipient_);              break;            }            case 18: {              if (message_ == null) {                message_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(message_);              break;            }            case 34: {              if (sender_ == null) {                sender_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(sender_);              break;            }            case 41: {              Seq = input.ReadFixed64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (recipient_ == null) {                recipient_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(recipient_);              break;            }            case 18: {              if (message_ == null) {                message_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(message_);              break;            }            case 34: {              if (sender_ == null) {                sender_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(sender_);              break;            }            case 41: {              Seq = input.ReadFixed64();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AcknowledgementInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(9);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AcknowledgementInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,AcknowledgementInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 9: {              CumulativeAck = input.ReadFixed64();              break;            }            case 18:            case 17: {              nacks_.AddEntriesFrom(input' _repeated_nacks_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AcknowledgementInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 9: {              CumulativeAck = input.ReadFixed64();              break;            }            case 18:            case 17: {              nacks_.AddEntriesFrom(input' _repeated_nacks_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AcknowledgementInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 9: {              CumulativeAck = input.ReadFixed64();              break;            }            case 18:            case 17: {              nacks_.AddEntriesFrom(input' _repeated_nacks_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (props_ == null) {                props_ = new global::Akka.Remote.Serialization.Proto.Msg.PropsData();              }              input.ReadMessage(props_);              break;            }            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Path = input.ReadString();              break;            }            case 34: {              if (supervisor_ == null) {                supervisor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(supervisor_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (props_ == null) {                props_ = new global::Akka.Remote.Serialization.Proto.Msg.PropsData();              }              input.ReadMessage(props_);              break;            }            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Path = input.ReadString();              break;            }            case 34: {              if (supervisor_ == null) {                supervisor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(supervisor_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (props_ == null) {                props_ = new global::Akka.Remote.Serialization.Proto.Msg.PropsData();              }              input.ReadMessage(props_);              break;            }            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Path = input.ReadString();              break;            }            case 34: {              if (supervisor_ == null) {                supervisor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(supervisor_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DaemonMsgCreateData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (props_ == null) {                props_ = new global::Akka.Remote.Serialization.Proto.Msg.PropsData();              }              input.ReadMessage(props_);              break;            }            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Path = input.ReadString();              break;            }            case 34: {              if (supervisor_ == null) {                supervisor_ = new global::Akka.Remote.Serialization.Proto.Msg.ActorRefData();              }              input.ReadMessage(supervisor_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,PropsData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 18: {              if (deploy_ == null) {                deploy_ = new global::Akka.Remote.Serialization.Proto.Msg.DeployData();              }              input.ReadMessage(deploy_);              break;            }            case 26: {              Clazz = input.ReadString();              break;            }            case 34: {              args_.AddEntriesFrom(input' _repeated_args_codec);              break;            }            case 42: {              manifests_.AddEntriesFrom(input' _repeated_manifests_codec);              break;            }            case 50:            case 48: {              serializerIds_.AddEntriesFrom(input' _repeated_serializerIds_codec);              break;            }            case 58:            case 56: {              hasManifest_.AddEntriesFrom(input' _repeated_hasManifest_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(42);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(48);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(58);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(64);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(74);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(80);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(90);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DeployData,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Path = input.ReadString();              break;            }            case 18: {              Config = input.ReadBytes();              break;            }            case 26: {              RouterConfig = input.ReadBytes();              break;            }            case 34: {              Scope = input.ReadBytes();              break;            }            case 42: {              Dispatcher = input.ReadString();              break;            }            case 48: {              ScopeSerializerId = input.ReadInt32();              break;            }            case 58: {              ScopeManifest = input.ReadString();              break;            }            case 64: {              ConfigSerializerId = input.ReadInt32();              break;            }            case 74: {              ConfigManifest = input.ReadString();              break;            }            case 80: {              RouterConfigSerializerId = input.ReadInt32();              break;            }            case 90: {              RouterConfigManifest = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaProtocolMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaProtocolMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaProtocolMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Payload = input.ReadBytes();              break;            }            case 18: {              if (instruction_ == null) {                instruction_ = new global::Akka.Remote.Serialization.Proto.Msg.AkkaControlMessage();              }              input.ReadMessage(instruction_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaProtocolMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              Payload = input.ReadBytes();              break;            }            case 18: {              if (instruction_ == null) {                instruction_ = new global::Akka.Remote.Serialization.Proto.Msg.AkkaControlMessage();              }              input.ReadMessage(instruction_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaControlMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaControlMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaControlMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              commandType_ = (global::Akka.Remote.Serialization.Proto.Msg.CommandType) input.ReadEnum();              break;            }            case 18: {              if (handshakeInfo_ == null) {                handshakeInfo_ = new global::Akka.Remote.Serialization.Proto.Msg.AkkaHandshakeInfo();              }              input.ReadMessage(handshakeInfo_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaControlMessage,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              commandType_ = (global::Akka.Remote.Serialization.Proto.Msg.CommandType) input.ReadEnum();              break;            }            case 18: {              if (handshakeInfo_ == null) {                handshakeInfo_ = new global::Akka.Remote.Serialization.Proto.Msg.AkkaHandshakeInfo();              }              input.ReadMessage(handshakeInfo_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(17);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (origin_ == null) {                origin_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(origin_);              break;            }            case 17: {              Uid = input.ReadFixed64();              break;            }            case 26: {              Cookie = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (origin_ == null) {                origin_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(origin_);              break;            }            case 17: {              Uid = input.ReadFixed64();              break;            }            case 26: {              Cookie = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,AkkaHandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (origin_ == null) {                origin_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(origin_);              break;            }            case 17: {              Uid = input.ReadFixed64();              break;            }            case 26: {              Cookie = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteScope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteScope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (node_ == null) {                node_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(node_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(33);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(41);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(49);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(56);
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,CalculateSize,The following statement contains a magic number: size += 1 + 8;
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,DefaultResizer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              LowerBound = input.ReadUInt32();              break;            }            case 16: {              UpperBound = input.ReadUInt32();              break;            }            case 24: {              PressureThreshold = input.ReadUInt32();              break;            }            case 33: {              RampupRate = input.ReadDouble();              break;            }            case 41: {              BackoffThreshold = input.ReadDouble();              break;            }            case 49: {              BackoffRate = input.ReadDouble();              break;            }            case 56: {              MessagesPerResize = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,FromConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,FromConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,FromConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,FromConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              NrOfInstances = input.ReadUInt32();              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }            case 24: {              UsePoolDispatcher = input.ReadBool();              break;            }            case 34: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              NrOfInstances = input.ReadUInt32();              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }            case 24: {              UsePoolDispatcher = input.ReadBool();              break;            }            case 34: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              NrOfInstances = input.ReadUInt32();              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }            case 24: {              UsePoolDispatcher = input.ReadBool();              break;            }            case 34: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,GenericRoutingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              NrOfInstances = input.ReadUInt32();              break;            }            case 18: {              RouterDispatcher = input.ReadString();              break;            }            case 24: {              UsePoolDispatcher = input.ReadBool();              break;            }            case 34: {              if (resizer_ == null) {                resizer_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(resizer_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ScatterGatherPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ScatterGatherPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,ScatterGatherPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (generic_ == null) {                generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();              }              input.ReadMessage(generic_);              break;            }            case 18: {              if (within_ == null) {                within_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(within_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,ScatterGatherPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (generic_ == null) {                generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();              }              input.ReadMessage(generic_);              break;            }            case 18: {              if (within_ == null) {                within_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(within_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (generic_ == null) {                generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();              }              input.ReadMessage(generic_);              break;            }            case 18: {              if (within_ == null) {                within_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(within_);              break;            }            case 26: {              if (interval_ == null) {                interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(interval_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (generic_ == null) {                generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();              }              input.ReadMessage(generic_);              break;            }            case 18: {              if (within_ == null) {                within_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(within_);              break;            }            case 26: {              if (interval_ == null) {                interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(interval_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,TailChoppingPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (generic_ == null) {                generic_ = new global::Akka.Remote.Serialization.Proto.Msg.GenericRoutingPool();              }              input.ReadMessage(generic_);              break;            }            case 18: {              if (within_ == null) {                within_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(within_);              break;            }            case 26: {              if (interval_ == null) {                interval_ = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(interval_);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteRouterConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteRouterConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (local_ == null) {                local_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(local_);              break;            }            case 18: {              nodes_.AddEntriesFrom(input' _repeated_nodes_codec);              break;            }          }
Magic Number,Akka.Remote.Serialization.Proto.Msg,RemoteRouterConfig,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Serialization\Proto\WireFormats.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (local_ == null) {                local_ = new global::Akka.Remote.Serialization.Proto.Msg.Payload();              }              input.ReadMessage(local_);              break;            }            case 18: {              nodes_.AddEntriesFrom(input' _repeated_nodes_codec);              break;            }          }
Magic Number,Akka.Remote.Transport,HandshakeInfo,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,GetHashCode,The following statement contains a magic number: return ((Origin != null ? Origin.GetHashCode() : 0) * 397) ^ Uid.GetHashCode();
Magic Number,Akka.Remote.Transport,AkkaProtocolHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (HandshakeInfo != null ? HandshakeInfo.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport,AkkaProtocolHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (StateActor != null ? StateActor.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport,TestAssociationHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TestTransport.cs,Write,The following statement contains a magic number: result.Wait(TimeSpan.FromSeconds(3));
Magic Number,Akka.Remote.Transport,TokenBucket,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,TokensGenerated,The following statement contains a magic number: var tokensGenerated = milliSecondsSinceLastSend * _tokensPerSecond / 1000;
Magic Number,Akka.Remote.Transport,TokenBucket,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _tokensPerSecond.GetHashCode();
Magic Number,Akka.Remote.Transport,TokenBucket,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _nanoTimeOfLastSend.GetHashCode();
Magic Number,Akka.Remote.Transport,TokenBucket,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _availableTokens;
Magic Number,Akka.Remote.Transport,SetThrottle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)_direction;
Magic Number,Akka.Remote.Transport,SetThrottle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_mode != null ? _mode.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport,AssociationHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\Transport.cs,GetHashCode,The following statement contains a magic number: return ((LocalAddress != null ? LocalAddress.GetHashCode() : 0) * 397) ^ (RemoteAddress != null ? RemoteAddress.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport,AbstractTransportAdapterHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TransportAdapters.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (OriginalRemoteAddress != null ? OriginalRemoteAddress.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport,AbstractTransportAdapterHandle,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\TransportAdapters.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (WrappedHandle != null ? WrappedHandle.GetHashCode() : 0);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,Format,The following statement contains a magic number: var buf = new StringBuilder(                  chStr.Length + 1 + eventName.Length + 2 + arg1Str.Length + 2 + arg2Str.Length);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,Format,The following statement contains a magic number: var buf = new StringBuilder(                  chStr.Length + 1 + eventName.Length + 2 + arg1Str.Length + 2 + arg2Str.Length);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,FormatByteBuffer,The following statement contains a magic number: var buf = new StringBuilder(chStr.Length + 1 + eventName.Length + 4);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,FormatByteBufferHolder,The following statement contains a magic number: var buf = new StringBuilder(chStr.Length + 1 + eventName.Length + 2 + msgStr.Length + 4);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,FormatByteBufferHolder,The following statement contains a magic number: var buf = new StringBuilder(chStr.Length + 1 + eventName.Length + 2 + msgStr.Length + 4);
Magic Number,Akka.Remote.Transport.DotNetty,AkkaLoggingHandler,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\AkkaLoggingHandler.cs,FormatSimple,The following statement contains a magic number: var buf = new StringBuilder(chStr.Length + 1 + eventName.Length + 2 + msgStr.Length);
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetInitialChannelPipeline,The following statement contains a magic number: pipeline.AddLast("FrameDecoder"' new LengthFieldBasedFrameDecoder(Settings.ByteOrder' (int)MaximumPayloadBytes' 0' 4' 0' 4' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetInitialChannelPipeline,The following statement contains a magic number: pipeline.AddLast("FrameDecoder"' new LengthFieldBasedFrameDecoder(Settings.ByteOrder' (int)MaximumPayloadBytes' 0' 4' 0' 4' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransport,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransport.cs,SetInitialChannelPipeline,The following statement contains a magic number: pipeline.AddLast("FrameEncoder"' new HeliosBackwardsCompatabilityLengthFramePrepender(4' false));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,Create,The following statement contains a magic number: return new DotNettyTransportSettings(                  transportMode: transportMode == "tcp" ? TransportMode.Tcp : TransportMode.Udp'                  enableSsl: config.GetBoolean("enable-ssl"' false)'                  connectTimeout: config.GetTimeSpan("connection-timeout"' TimeSpan.FromSeconds(15))'                  hostname: host'                  publicHostname: !string.IsNullOrEmpty(publicHost) ? publicHost : host'                  port: config.GetInt("port"' 2552)'                  publicPort: publicPort > 0 ? publicPort : (int?)null'                  serverSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("server-socket-worker-pool"))'                  clientSocketWorkerPoolSize: ComputeWorkerPoolSize(config.GetConfig("client-socket-worker-pool"))'                  maxFrameSize: ToNullableInt(config.GetByteSize("maximum-frame-size")) ?? 128000'                  ssl: config.HasPath("ssl") ? SslSettings.Create(config.GetConfig("ssl")) : SslSettings.Empty'                  dnsUseIpv6: config.GetBoolean("dns-use-ipv6"' false)'                  tcpReuseAddr: ResolveTcpReuseAddrOption(config.GetString("tcp-reuse-addr"' "off-for-windows"))'                  tcpKeepAlive: config.GetBoolean("tcp-keepalive"' true)'                  tcpNoDelay: config.GetBoolean("tcp-nodelay"' true)'                  backlog: config.GetInt("backlog"' 4096)'                  enforceIpFamily: RuntimeDetector.IsMono || config.GetBoolean("enforce-ip-family"' false)'                  receiveBufferSize: ToNullableInt(config.GetByteSize("receive-buffer-size") ?? 256000)'                  sendBufferSize: ToNullableInt(config.GetByteSize("send-buffer-size") ?? 256000)'                  writeBufferHighWaterMark: ToNullableInt(config.GetByteSize("write-buffer-high-water-mark"))'                  writeBufferLowWaterMark: ToNullableInt(config.GetByteSize("write-buffer-low-water-mark"))'                  backwardsCompatibilityModeEnabled: config.GetBoolean("enable-backwards-compatibility"' false)'                  logTransport: config.HasPath("log-transport") && config.GetBoolean("log-transport")'                  byteOrder: order'                  enableBufferPooling: config.GetBoolean("enable-pooling"' true));
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,ComputeWorkerPoolSize,The following statement contains a magic number: return ThreadPoolConfig.ScaledPoolSize(2' 1.0' 2);
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,ComputeWorkerPoolSize,The following statement contains a magic number: return ThreadPoolConfig.ScaledPoolSize(2' 1.0' 2);
Magic Number,Akka.Remote.Transport.DotNetty,DotNettyTransportSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\DotNetty\DotNettyTransportSettings.cs,DotNettyTransportSettings,The following statement contains a magic number: maxFrameSize < 32000
Duplicate Code,Akka.Remote.Transport,ThrottlerManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\ThrottleTransportAdapter.cs,Ready,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 89)' (98' 118))
Missing Default,Akka.Remote,EndpointManager,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\EndpointManager.cs,HandleInboundAssociation,The following switch statement is missing a default case: switch (_endpoints.WritableEndpointWithPolicyFor(handle.RemoteAddress))                  {                      case Pass pass:                          pass.Endpoint.Tell(new ReliableDeliverySupervisor.Ungate());                          break;                  }
Missing Default,Akka.Remote.Transport,AkkaPduProtobuffCodec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaPduCodec.cs,DecodeControlPdu,The following switch statement is missing a default case: switch (controlPdu.CommandType)              {                  case CommandType.Associate:                      var handshakeInfo = controlPdu.HandshakeInfo;                      if (handshakeInfo != null) // HasHandshakeInfo                      {                          return new Associate(new HandshakeInfo(DecodeAddress(handshakeInfo.Origin)' (int)handshakeInfo.Uid));                      }                      break;                  case CommandType.Disassociate:                      return new Disassociate(DisassociateInfo.Unknown);                  case CommandType.DisassociateQuarantined:                      return new Disassociate(DisassociateInfo.Quarantined);                  case CommandType.DisassociateShuttingDown:                      return new Disassociate(DisassociateInfo.Shutdown);                  case CommandType.Heartbeat:                      return new Heartbeat();              }
Missing Default,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The following switch statement is missing a default case: switch (fsmEvent.StateData)                          {                              case OutboundUnassociated ou:                                  ou.StatusCompletionSource.SetException(f.Cause);                                  return Stop();                          }
Missing Default,Akka.Remote.Transport,ProtocolStateActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Remote\Transport\AkkaProtocolTransport.cs,InitializeFSM,The following switch statement is missing a default case: switch (fsmEvent.StateData)                          {                              case OutboundUnassociated ou:                                  /*                                   * Association has been established' but handshake is not yet complete.                                   * This actor' the outbound ProtocolStateActor' can now set itself as                                   * the read handler for the remainder of the handshake process.                                   */                                  var wrappedHandle = h.Handle;                                  var statusPromise = ou.StatusCompletionSource;                                  wrappedHandle.ReadHandlerSource.TrySetResult(new ActorHandleEventListener(Self));                                  if (SendAssociate(wrappedHandle' _localHandshakeInfo))                                  {                                      _failureDetector.HeartBeat();                                      InitHeartbeatTimer();                                      // wait for reply from the inbound side of the connection (WaitHandshake)                                      return                                          GoTo(AssociationState.WaitHandshake)                                              .Using(new OutboundUnderlyingAssociated(statusPromise' wrappedHandle));                                  }                                  else                                  {                                      // Underlying transport was busy -- Associate could not be sent                                      SetTimer("associate-retry"' new HandleMsg(wrappedHandle)'                                          RARP.For(Context.System).Provider                                              .RemoteSettings.BackoffPeriod' repeat: false);                                      return Stay();                                  }                          }
