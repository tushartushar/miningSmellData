Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReceiveGossip,The method has 147 lines of code.
Complex Method,Akka.Cluster,AutoDownBase,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\AutoDown.cs,OnReceive,Cyclomatic complexity of the method is 10
Complex Method,Akka.Cluster,ClusterDeployer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterActorRefProvider.cs,ParseConfig,Cyclomatic complexity of the method is 8
Complex Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Uninitialized,Cyclomatic complexity of the method is 8
Complex Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,TryingToJoin,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Initialized,Cyclomatic complexity of the method is 20
Complex Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Joining,Cyclomatic complexity of the method is 10
Complex Method,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReceiveGossip,Cyclomatic complexity of the method is 20
Complex Method,Akka.Cluster,ClusterDomainEventPublisher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,PublishDiff,Cyclomatic complexity of the method is 8
Complex Method,Akka.Cluster,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,HighestPriorityOf,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster,LeaderStatusMemberComparer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Akka.Cluster,Reachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Reachability.cs,Merge,Cyclomatic complexity of the method is 11
Complex Method,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,ToBinary,Cyclomatic complexity of the method is 14
Complex Method,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,Cyclomatic complexity of the method is 10
Long Parameter List,Akka.Cluster,GossipStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipStats,The method has 5 parameters. Parameters: receivedGossipCount' mergeCount' sameCount' newerCount' olderCount
Long Parameter List,Akka.Cluster,GossipStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Copy,The method has 5 parameters. Parameters: receivedGossipCount' mergeCount' sameCount' newerCount' olderCount
Long Parameter List,Akka.Cluster,CurrentClusterState,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,CurrentClusterState,The method has 5 parameters. Parameters: members' unreachable' seenBy' leader' roleLeaderMap
Long Parameter List,Akka.Cluster,CurrentClusterState,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,Copy,The method has 5 parameters. Parameters: members' unreachable' seenBy' leader' roleLeaderMap
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the parameter newlyDetectedUnreachableMembers is 31.
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,,The length of the parameter NumberOfGossipsBeforeShutdownWhenLeaderExits is 44.
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,,The length of the parameter MaxGossipsBeforeShuttingDownMyself is 34.
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,,The length of the parameter MaxTicksBeforeShuttingDownMyself is 32.
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,,The length of the parameter _failureDetectorReaperTaskCancellable is 37.
Long Identifier,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,,The length of the parameter _publishStatsTaskTaskCancellable is 32.
Long Identifier,Akka.Cluster,ClusterHeartbeatSenderState,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterHeartbeat.cs,MembershipChange,The length of the parameter adjustedOldReceiversNowUnreachable is 34.
Long Identifier,Akka.Cluster,ClusterRemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterRemoteWatcher.cs,Props,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Identifier,Akka.Cluster,ClusterRemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterRemoteWatcher.cs,ClusterRemoteWatcher,The length of the parameter heartbeatExpectedResponseAfter is 30.
Long Identifier,Akka.Cluster,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,,The length of the parameter ConvergenceSkipUnreachableWithMemberStatus is 42.
Long Identifier,Akka.Cluster,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,,The length of the parameter RemoveUnreachableWithMemberStatus is 33.
Long Identifier,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,ClusterRouterPoolSettingsFrom,The length of the parameter clusterRouterPoolSettingsProto is 30.
Long Identifier,Akka.Cluster.Serialization.Proto.Msg,GossipOverview,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,,The length of the parameter ObserverReachabilityFieldNumber is 31.
Long Identifier,Akka.Cluster.Serialization.Proto.Msg,GossipOverview,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,,The length of the parameter _repeated_observerReachability_codec is 36.
Long Identifier,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,,The length of the parameter SubjectReachabilityFieldNumber is 30.
Long Identifier,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,,The length of the parameter _repeated_subjectReachability_codec is 35.
Long Identifier,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,,The length of the parameter MaxInstancesPerNodeFieldNumber is 30.
Long Statement,Akka.Cluster,AutoDownBase,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\AutoDown.cs,ScheduleUnreachable,The length of the statement  "                var cancelable = Scheduler.ScheduleTellOnceCancelable(_autoDownUnreachableAfter' Self' new AutoDown.UnreachableTimeout(node)' Self); " is 132.
Long Statement,Akka.Cluster,Cluster,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Cluster.cs,GetClusterCoreRef,The length of the statement  "                return await _clusterDaemons.Ask<IActorRef>(InternalClusterAction.GetClusterCoreRef.Instance' timeout).ConfigureAwait(false); " is 125.
Long Statement,Akka.Cluster,Cluster,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Cluster.cs,Subscribe,The length of the statement  "                throw new ArgumentException($"Subscribe to `IClusterDomainEvent` or subclasses' was [{string.Join("' "' to.Select(c => c.Name))}]"' nameof(to)); " is 144.
Long Statement,Akka.Cluster,Cluster,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Cluster.cs,JoinSeedNodesAsync,The length of the statement  "                new ClusterJoinFailedException($"Node has not managed to join the cluster using provided seed node addresses: {string.Join("' "' seedNodes)}."))); " is 146.
Long Statement,Akka.Cluster,ClusterActorRefProvider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterActorRefProvider.cs,Init,The length of the statement  "            //Complete the usual RemoteActorRefProvider initializations - need access to transports and RemoteWatcher before clustering can work " is 132.
Long Statement,Akka.Cluster,ClusterDeployer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterActorRefProvider.cs,ParseConfig,The length of the statement  "                        throw new ArgumentException($"Cluster-aware router can only wrap Pool or Group' got [{deploy.RouterConfig.GetType()}]"); " is 120.
Long Statement,Akka.Cluster,ClusterCoreSupervisor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,CreateChildren,The length of the statement  "            _coreDaemon = Context.ActorOf(Props.Create(() => new ClusterCoreDaemon(_publisher)).WithDispatcher(Context.Props.Dispatcher)' "daemon"); " is 136.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,CleanupExitingConfirmed,The length of the statement  "                _exitingConfirmed = new HashSet<UniqueAddress>(_exitingConfirmed.Where(n => _latestGossip.Members.Any(m => m.UniqueAddress.Equals(n)))); " is 136.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,JoinSeedNodesWasUnsuccessful,The length of the statement  "            _log.Warning("Joining of seed-nodes [{0}] was unsuccessful after configured shutdown-after-unsuccessful-join-seed-nodes [{1}]. Running CoordinatedShutdown."' " is 157.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Initialized,The length of the statement  "                    _log.Debug("Cluster Node [{0}] - Received gossip from [{1}] which was {2}."' _cluster.SelfAddress' ge.From' receivedType); " is 122.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,JoinSeedNodes,The length of the statement  "                        _seedNodeProcess = Context.ActorOf(Props.Create(() => new FirstSeedNodeProcess(newSeedNodes)).WithDispatcher(_cluster.Settings.UseDispatcher)' "firstSeedNodeProcess-" + _seedNodeProcessCounter); " is 194.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,JoinSeedNodes,The length of the statement  "                        _seedNodeProcess = Context.ActorOf(Props.Create(() => new JoinSeedNodeProcess(newSeedNodes)).WithDispatcher(_cluster.Settings.UseDispatcher)' "joinSeedNodeProcess-" + _seedNodeProcessCounter); " is 192.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Joining,The length of the statement  "                        _cluster.LogInfo("Node [{0}] is JOINING itself (with roles [{1}]) and forming a new cluster"' node.Address' string.Join("'"' roles)); " is 133.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Welcome,The length of the statement  "            if (!_latestGossip.Members.IsEmpty) throw new InvalidOperationException("Welcome can only be done from an empty state"); " is 120.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Leaving,The length of the statement  "            if (_latestGossip.Members.Any(m => m.Address.Equals(address) && (m.Status == MemberStatus.Joining || m.Status == MemberStatus.WeaklyUp || m.Status == MemberStatus.Up))) " is 168.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Quarantined,The length of the statement  "                _log.Warning("Cluster Node [{0}] - Marking node as TERMINATED [{1}]' due to quarantine. Node roles [{2}]. It must still be marked as down before it's removed."' " is 160.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReceiveGossip,The length of the statement  "                _log.Debug(@"""Couldn't establish a causal relationship between ""remote"" gossip and ""local"" gossip - Remote[{0}] - Local[{1}] - merged them into [{2}]"""' " is 158.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,SendGossip,The length of the statement  "                    preferredGossipTarget = ImmutableList.CreateRange(localGossip.Members.Where(m => !localGossip.SeenByNode(m.UniqueAddress) && " is 124.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ShutdownSelfWhenDown,The length of the statement  "                if (_selfDownCounter >= MaxTicksBeforeShuttingDownMyself || downed.All(node => unreachable.Contains(node) || _latestGossip.SeenByNode(node))) " is 141.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the statement  "                        localOverview.Reachability.Status(SelfUniqueAddress' member.UniqueAddress) == Reachability.ReachabilityStatus.Unreachable || " is 124.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the statement  "                        localOverview.Reachability.Status(SelfUniqueAddress' member.UniqueAddress) == Reachability.ReachabilityStatus.Terminated || " is 123.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the statement  "                                _cluster.SelfAddress' nonExiting.Select(m => m.ToString()).Aggregate((a' b) => a + "' " + b)' string.Join("'"' _cluster.SelfRoles)); " is 132.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the statement  "                            _cluster.LogInfo("Cluster Node [{0}] - Marking exiting node(s) as UNREACHABLE [{1}]. This is expected and they will be removed."' " is 129.
Long Statement,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReapUnreachableMembers,The length of the statement  "                            _cluster.LogInfo("Marking node(s) as REACHABLE [{0}]. Node roles [{1}]"' newlyDetectedReachableMembers.Select(m => m.ToString()).Aggregate((a' b) => a + "' " + b)' string.Join("'"' _cluster.SelfRoles)); " is 202.
Long Statement,Akka.Cluster,ClusterEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,DiffReachable,The length of the statement  "                    .Where(node => newGossip.HasMember(node) && newGossip.Overview.Reachability.IsReachable(node) && !node.Equals(selfUniqueAddress)) " is 129.
Long Statement,Akka.Cluster,ClusterEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,DiffSeen,The length of the statement  "            if (!newConvergence.Equals(oldGossip.Convergence(selfUniqueAddress' EmptySet)) || !newSeenBy.SequenceEqual(oldGossip.SeenBy)) " is 125.
Long Statement,Akka.Cluster,ClusterHeartbeatSenderState,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterHeartbeat.cs,Copy,The length of the statement  "            return new ClusterHeartbeatSenderState(ring ?? Ring' oldReceiversNowUnreachable ?? OldReceiversNowUnreachable' failureDetector ?? FailureDetector); " is 147.
Long Statement,Akka.Cluster,HeartbeatNodeRing,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterHeartbeat.cs,Receivers,The length of the statement  "                Func<int' IEnumerator<UniqueAddress>' ImmutableSortedSet<UniqueAddress>' (int' ImmutableSortedSet<UniqueAddress>)> take = null; " is 127.
Long Statement,Akka.Cluster,HeartbeatNodeRing,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterHeartbeat.cs,Receivers,The length of the statement  "                var tuple = take(MonitoredByNumberOfNodes' NodeRing().From(sender).Skip(1).GetEnumerator()' ImmutableSortedSet<UniqueAddress>.Empty); " is 133.
Long Statement,Akka.Cluster,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,AssertInvariants,The length of the statement  "                throw new ArgumentException($"Nodes not part of cluster in reachability table' got {inreachability}"' nameof(_overview)); " is 121.
Long Statement,Akka.Cluster,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,AssertInvariants,The length of the statement  "                throw new ArgumentException($"Nodes not part of cluster have marked the Gossip as seen' got {seen}"' nameof(_overview)); " is 120.
Long Statement,Akka.Cluster,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,LeaderOf,The length of the statement  "                    .Where(m => m.Status != MemberStatus.Down && _overview.Reachability.IsReachable(m.UniqueAddress) || m.UniqueAddress == selfUniqueAddress)) " is 138.
Long Statement,Akka.Cluster,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,CompareTo,The length of the statement  "            throw new ArgumentException($"Cannot compare {nameof(Member)} to an instance of type '{obj?.GetType().FullName ?? "null"}'"); " is 125.
Long Statement,Akka.Cluster,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,ToString,The length of the statement  "            return $"Member(address = {Address}' Uid={UniqueAddress.Uid} status = {Status}' role=[{string.Join("'"' Roles)}]' upNumber={UpNumber})"; " is 136.
Long Statement,Akka.Cluster,UniqueAddress,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,CompareTo,The length of the statement  "            throw new ArgumentException($"Cannot compare {nameof(UniqueAddress)} with instance of type '{obj?.GetType().FullName ?? "null"}'."); " is 132.
Long Statement,Akka.Cluster,SplitBrainResolver,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,ResolveSplitBrainStrategy,The length of the statement  "                default: throw new ArgumentException($"`akka.cluster.split-brain-resolver.active-strategy` setting not recognized: [{activeStrategy}]. Available options are: static-quorum' keep-majority' keep-oldest' keep-referee."); " is 217.
Long Statement,Akka.Cluster,KeepOldest,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,Apply,The length of the statement  "                return DownIfAlone && context.Remaining.Count == 1 && context.Unreachable.Count > 0 // oldest is current node' and it's alone' but not the only node in the cluster " is 163.
Long Statement,Akka.Cluster,KeepReferee,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,Apply,The length of the statement  "            else if (context.Remaining.Count < DownAllIfLessThanNodes) return context.Remaining.Union(context.Unreachable); // referee is reachable but there are too few remaining nodes  " is 173.
Long Statement,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,HandleStabilityReached,The length of the statement  "                Log.Info("A network partition detected - unreachable nodes: [{0}]' remaining: [{1}]"' string.Join("' "' _unreachable.Select(m => m.Address))' string.Join("' "' _reachable.Select(m => m.Address))); " is 196.
Long Statement,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,HandleStabilityReached,The length of the statement  "                    Log.Info("A network partition has been detected. {0} decided to down following nodes: [{1}]"' _strategy' string.Join("' "' nodesToDown)); " is 137.
Long Statement,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,ResetStabilityTimeout,The length of the statement  "            _stabilityTask = Context.System.Scheduler.ScheduleTellOnceCancelable(_stabilityTimeout' Self' StabilityReached.Instance' ActorRefs.NoSender); " is 141.
Long Statement,Akka.Cluster,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,CompareOnlyTo,The length of the statement  "            return Compare(_versions.GetEnumerator()' that._versions.GetEnumerator()' order == Ordering.Concurrent ? Ordering.FullOrder : order); " is 133.
Long Statement,Akka.Cluster.Routing,ClusterRouterActor,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Routing\ClusterRoutingConfig.cs,OnReceive,The length of the statement  "                Nodes = ImmutableSortedSet.Create(Member.AddressOrdering' state.Members.Where(IsAvailable).Select(x => x.Address).ToArray()); " is 125.
Long Statement,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,ToBinary,The length of the statement  "                    throw new ArgumentException($"Can't serialize object of type [{obj.GetType()}] in [{nameof(ClusterMessageSerializer)}]"); " is 121.
Long Statement,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,GossipStatusFrom,The length of the statement  "            return new GossipStatus(UniqueAddressFrom(gossipStatusProto.From)' VectorClockFrom(gossipStatusProto.Version' gossipStatusProto.AllHashes)); " is 140.
Long Statement,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,ClusterRouterPoolFrom,The length of the statement  "            return new ClusterRouterPool(PoolFrom(clusterRouterPool.Pool)' ClusterRouterPoolSettingsFrom(clusterRouterPool.Settings)); " is 122.
Long Statement,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,PoolFrom,The length of the statement  "            return (Akka.Routing.Pool)system.Serialization.Deserialize(poolProto.Data.ToByteArray()' (int)poolProto.SerializerId' poolProto.Manifest); " is 138.
Long Statement,Akka.Cluster.Serialization,ClusterMessageSerializer,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\ClusterMessageSerializer.cs,GossipFrom,The length of the statement  "            var members = gossip.Members.Select((Func<Proto.Msg.Member' Member>)MemberFromProto).ToImmutableSortedSet(Member.Ordering); " is 123.
Complex Conditional,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Unhandled,The conditional expression  "message is InternalClusterAction.ITick                  || message is GossipEnvelope                  || message is GossipStatus                  || message is InternalClusterAction.ExitingConfirmed"  is complex.
Complex Conditional,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,Leaving,The conditional expression  "_latestGossip.Members.Any(m => m.Address.Equals(address) && (m.Status == MemberStatus.Joining || m.Status == MemberStatus.WeaklyUp || m.Status == MemberStatus.Up))"  is complex.
Complex Conditional,Akka.Cluster,ClusterEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,DiffLeader,The conditional expression  "(newLeader == null && oldGossip.Leader(selfUniqueAddress) == null)                  || newLeader != null && newLeader.Equals(oldGossip.Leader(selfUniqueAddress))"  is complex.
Complex Conditional,Akka.Cluster,CoordinatedShutdownLeave,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\CoordinatedShutdownLeave.cs,WaitingLeaveCompleted,The conditional expression  "s.Members.Any(m => m.UniqueAddress.Equals(_cluster.SelfUniqueAddress)                                         &&                                         (m.Status == MemberStatus.Leaving || m.Status == MemberStatus.Exiting ||                                          m.Status == MemberStatus.Down))"  is complex.
Magic Number,Akka.Cluster,Join,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GetHashCode,The following statement contains a magic number: return (_node.GetHashCode() * 397) ^ _roles.GetHashCode();
Magic Number,Akka.Cluster,Welcome,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GetHashCode,The following statement contains a magic number: return (_from.GetHashCode() * 397) ^ _gossip.GetHashCode();
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipTick,The following statement contains a magic number: _cluster.Scheduler.ScheduleTellOnce(new TimeSpan(_cluster.Settings.GossipInterval.Ticks / 3)' Self'                      InternalClusterAction.GossipSpeedupTick.Instance' ActorRefs.NoSender);
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipTick,The following statement contains a magic number: _cluster.Scheduler.ScheduleTellOnce(new TimeSpan(_cluster.Settings.GossipInterval.Ticks * 2 / 3)' Self'                      InternalClusterAction.GossipSpeedupTick.Instance' ActorRefs.NoSender);
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipTick,The following statement contains a magic number: _cluster.Scheduler.ScheduleTellOnce(new TimeSpan(_cluster.Settings.GossipInterval.Ticks * 2 / 3)' Self'                      InternalClusterAction.GossipSpeedupTick.Instance' ActorRefs.NoSender);
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,IsGossipSpeedupNeeded,The following statement contains a magic number: return _latestGossip.Overview.Seen.Count < _latestGossip.Members.Count / 2;
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,LeaderActions,The following statement contains a magic number: const int firstNotice = 20;
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,LeaderActions,The following statement contains a magic number: const int periodicNotice = 60;
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipTargetsForExitingMembers,The following statement contains a magic number: var t = membersSortedByAge.Take(2).ToArray();
Magic Number,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GossipTargetsForExitingMembers,The following statement contains a magic number: t = membersSortedByAge.Where(i => i.HasRole(role)).Take(2).ToArray();
Magic Number,Akka.Cluster,VectorClockStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,GetHashCode,The following statement contains a magic number: return (VersionSize * 397) ^ SeenLatest;
Magic Number,Akka.Cluster,ClusterEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,DiffMemberEvents,The following statement contains a magic number: var changedMembers = membersGroupedByAddress                  .Where(g => g.Count() == 2                  && (g.First().Status != g.Skip(1).First().Status                      || g.First().UpNumber != g.Skip(1).First().UpNumber))                  .Select(g => g.First());
Magic Number,Akka.Cluster,MemberStatusChange,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,MemberStatusChange,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _member.GetHashCode();
Magic Number,Akka.Cluster,MemberRemoved,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,MemberRemoved,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _previousStatus.GetHashCode();
Magic Number,Akka.Cluster,LeaderChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,LeaderChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (_leader == null ? 0 : _leader.GetHashCode());
Magic Number,Akka.Cluster,RoleLeaderChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,RoleLeaderChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _role.GetHashCode();
Magic Number,Akka.Cluster,RoleLeaderChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (_leader == null ? 0 : _leader.GetHashCode());
Magic Number,Akka.Cluster,ReachabilityEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,ReachabilityEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _member.GetHashCode();
Magic Number,Akka.Cluster,SeenChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,SeenChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _convergence.GetHashCode();
Magic Number,Akka.Cluster,SeenChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + t.GetHashCode();
Magic Number,Akka.Cluster,ReachabilityChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,ReachabilityChanged,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _reachability.GetHashCode();
Magic Number,Akka.Cluster,CurrentInternalStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Akka.Cluster,CurrentInternalStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _gossipStats.GetHashCode();
Magic Number,Akka.Cluster,CurrentInternalStats,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + _vclockStats.GetHashCode();
Magic Number,Akka.Cluster,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Gossip.cs,GetHashCode,The following statement contains a magic number: return (_from.GetHashCode() * 397) ^ _version.GetHashCode();
Magic Number,Akka.Cluster,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,PickNextTransition,The following statement contains a magic number: g.Count() == 2
Magic Number,Akka.Cluster,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Member.cs,PickHighestPriority,The following statement contains a magic number: g.Count() == 2
Magic Number,Akka.Cluster,Record,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Reachability.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Version.GetHashCode();
Magic Number,Akka.Cluster,Record,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Reachability.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Status.GetHashCode();
Magic Number,Akka.Cluster,Record,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Reachability.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Subject != null ? Subject.GetHashCode() : 0);
Magic Number,Akka.Cluster,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,GetHashCode,The following statement contains a magic number: var hashCode = 23;
Magic Number,Akka.Cluster,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 31 + c.Key.GetHashCode();
Magic Number,Akka.Cluster,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 31 + c.Value.GetHashCode();
Magic Number,Akka.Cluster,Node,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,Node,The following statement contains a magic number: _computedHashValue = 23;
Magic Number,Akka.Cluster,Node,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\VectorClock.cs,Node,The following statement contains a magic number: _computedHashValue *= _computedHashValue * 31 + c;
Magic Number,Akka.Cluster.Routing,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Routing\ClusterRoutingConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TotalInstances.GetHashCode();
Magic Number,Akka.Cluster.Routing,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Routing\ClusterRoutingConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ AllowLocalRoutees.GetHashCode();
Magic Number,Akka.Cluster.Routing,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Routing\ClusterRoutingConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (UseRole?.GetHashCode() ?? 0);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Join,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Join,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (node_ == null) {                node_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(node_);              break;            }            case 18: {              roles_.AddEntriesFrom(input' _repeated_roles_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Join,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (node_ == null) {                node_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(node_);              break;            }            case 18: {              roles_.AddEntriesFrom(input' _repeated_roles_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Welcome,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Welcome,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Welcome,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              if (gossip_ == null) {                gossip_ = new global::Akka.Cluster.Serialization.Proto.Msg.Gossip();              }              input.ReadMessage(gossip_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Welcome,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              if (gossip_ == null) {                gossip_ = new global::Akka.Cluster.Serialization.Proto.Msg.Gossip();              }              input.ReadMessage(gossip_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              if (to_ == null) {                to_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(to_);              break;            }            case 26: {              SerializedGossip = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              if (to_ == null) {                to_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(to_);              break;            }            case 26: {              SerializedGossip = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipEnvelope,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              if (to_ == null) {                to_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(to_);              break;            }            case 26: {              SerializedGossip = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 26: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 26: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipStatus,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (from_ == null) {                from_ = new global::Akka.Cluster.Serialization.Proto.Msg.UniqueAddress();              }              input.ReadMessage(from_);              break;            }            case 18: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 26: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(42);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(50);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Gossip,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              allAddresses_.AddEntriesFrom(input' _repeated_allAddresses_codec);              break;            }            case 18: {              allRoles_.AddEntriesFrom(input' _repeated_allRoles_codec);              break;            }            case 26: {              allHashes_.AddEntriesFrom(input' _repeated_allHashes_codec);              break;            }            case 34: {              members_.AddEntriesFrom(input' _repeated_members_codec);              break;            }            case 42: {              if (overview_ == null) {                overview_ = new global::Akka.Cluster.Serialization.Proto.Msg.GossipOverview();              }              input.ReadMessage(overview_);              break;            }            case 50: {              if (version_ == null) {                version_ = new global::Akka.Cluster.Serialization.Proto.Msg.VectorClock();              }              input.ReadMessage(version_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipOverview,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10:            case 8: {              seen_.AddEntriesFrom(input' _repeated_seen_codec);              break;            }            case 18: {              observerReachability_.AddEntriesFrom(input' _repeated_observerReachability_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipOverview,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10:            case 8: {              seen_.AddEntriesFrom(input' _repeated_seen_codec);              break;            }            case 18: {              observerReachability_.AddEntriesFrom(input' _repeated_observerReachability_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,GossipOverview,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10:            case 8: {              seen_.AddEntriesFrom(input' _repeated_seen_codec);              break;            }            case 18: {              observerReachability_.AddEntriesFrom(input' _repeated_observerReachability_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(32);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 18: {              subjectReachability_.AddEntriesFrom(input' _repeated_subjectReachability_codec);              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 18: {              subjectReachability_.AddEntriesFrom(input' _repeated_subjectReachability_codec);              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ObserverReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 18: {              subjectReachability_.AddEntriesFrom(input' _repeated_subjectReachability_codec);              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(32);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus) input.ReadEnum();              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus) input.ReadEnum();              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,SubjectReachability,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.SubjectReachability.Types.ReachabilityStatus) input.ReadEnum();              break;            }            case 32: {              Version = input.ReadInt64();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 16: {              UpNumber = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();              break;            }            case 34:            case 32: {              rolesIndexes_.AddEntriesFrom(input' _repeated_rolesIndexes_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 16: {              UpNumber = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();              break;            }            case 34:            case 32: {              rolesIndexes_.AddEntriesFrom(input' _repeated_rolesIndexes_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 16: {              UpNumber = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();              break;            }            case 34:            case 32: {              rolesIndexes_.AddEntriesFrom(input' _repeated_rolesIndexes_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 16: {              UpNumber = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();              break;            }            case 34:            case 32: {              rolesIndexes_.AddEntriesFrom(input' _repeated_rolesIndexes_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Member,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              AddressIndex = input.ReadInt32();              break;            }            case 16: {              UpNumber = input.ReadInt32();              break;            }            case 24: {              status_ = (global::Akka.Cluster.Serialization.Proto.Msg.Member.Types.MemberStatus) input.ReadEnum();              break;            }            case 34:            case 32: {              rolesIndexes_.AddEntriesFrom(input' _repeated_rolesIndexes_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              Timestamp = input.ReadInt64();              break;            }            case 18: {              versions_.AddEntriesFrom(input' _repeated_versions_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,VectorClock,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              Timestamp = input.ReadInt64();              break;            }            case 18: {              versions_.AddEntriesFrom(input' _repeated_versions_codec);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Version,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Version,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Version,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 8: {                  HashIndex = input.ReadInt32();                  break;                }                case 16: {                  Timestamp = input.ReadInt64();                  break;                }              }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Version,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {                default:                  input.SkipLastField();                  break;                case 8: {                  HashIndex = input.ReadInt32();                  break;                }                case 16: {                  Timestamp = input.ReadInt64();                  break;                }              }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,UniqueAddress,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,UniqueAddress,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,UniqueAddress,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 16: {              Uid = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,UniqueAddress,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (address_ == null) {                address_ = new global::Akka.Remote.Serialization.Proto.Msg.AddressData();              }              input.ReadMessage(address_);              break;            }            case 16: {              Uid = input.ReadUInt32();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (pool_ == null) {                pool_ = new global::Akka.Cluster.Serialization.Proto.Msg.Pool();              }              input.ReadMessage(pool_);              break;            }            case 18: {              if (settings_ == null) {                settings_ = new global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings();              }              input.ReadMessage(settings_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 10: {              if (pool_ == null) {                pool_ = new global::Akka.Cluster.Serialization.Proto.Msg.Pool();              }              input.ReadMessage(pool_);              break;            }            case 18: {              if (settings_ == null) {                settings_ = new global::Akka.Cluster.Serialization.Proto.Msg.ClusterRouterPoolSettings();              }              input.ReadMessage(settings_);              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadUInt32();              break;            }            case 18: {              Manifest = input.ReadString();              break;            }            case 26: {              Data = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadUInt32();              break;            }            case 18: {              Manifest = input.ReadString();              break;            }            case 26: {              Data = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,Pool,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              SerializerId = input.ReadUInt32();              break;            }            case 18: {              Manifest = input.ReadString();              break;            }            case 26: {              Data = input.ReadBytes();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(34);
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TotalInstances = input.ReadUInt32();              break;            }            case 16: {              MaxInstancesPerNode = input.ReadUInt32();              break;            }            case 24: {              AllowLocalRoutees = input.ReadBool();              break;            }            case 34: {              UseRole = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TotalInstances = input.ReadUInt32();              break;            }            case 16: {              MaxInstancesPerNode = input.ReadUInt32();              break;            }            case 24: {              AllowLocalRoutees = input.ReadBool();              break;            }            case 34: {              UseRole = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TotalInstances = input.ReadUInt32();              break;            }            case 16: {              MaxInstancesPerNode = input.ReadUInt32();              break;            }            case 24: {              AllowLocalRoutees = input.ReadBool();              break;            }            case 34: {              UseRole = input.ReadString();              break;            }          }
Magic Number,Akka.Cluster.Serialization.Proto.Msg,ClusterRouterPoolSettings,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\Serialization\Proto\ClusterMessages.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              input.SkipLastField();              break;            case 8: {              TotalInstances = input.ReadUInt32();              break;            }            case 16: {              MaxInstancesPerNode = input.ReadUInt32();              break;            }            case 24: {              AllowLocalRoutees = input.ReadBool();              break;            }            case 34: {              UseRole = input.ReadString();              break;            }          }
Missing Default,Akka.Cluster,AutoDownBase,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\AutoDown.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case ClusterEvent.CurrentClusterState state:                      _leader = state.Leader != null && state.Leader.Equals(SelfAddress);                      foreach (var m in state.Unreachable) UnreachableMember(m);                      return;                  case ClusterEvent.UnreachableMember unreachableMember:                      UnreachableMember(unreachableMember.Member);                      return;                  case ClusterEvent.ReachableMember reachableMember:                      Remove(reachableMember.Member.UniqueAddress);                      return;                  case ClusterEvent.MemberRemoved memberRemoved:                      Remove(memberRemoved.Member.UniqueAddress);                      return;                  case ClusterEvent.LeaderChanged leaderChanged:                      _leader = leaderChanged.Leader != null && leaderChanged.Leader.Equals(SelfAddress);                      if (_leader)                      {                          foreach(var node in _pendingUnreachable) Down(node.Address);                          _pendingUnreachable = ImmutableHashSet.Create<UniqueAddress>();                      }                      return;                  case AutoDown.UnreachableTimeout unreachableTimeout:                      if (_scheduledUnreachable.ContainsKey(unreachableTimeout.Node))                      {                          _scheduledUnreachable = _scheduledUnreachable.Remove(unreachableTimeout.Node);                          DownOrAddPending(unreachableTimeout.Node);                      }                      return;              }
Missing Default,Akka.Cluster,ClusterCoreDaemon,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterDaemon.cs,ReceiveGossip,The following switch statement is missing a default case: switch (gossipType)                  {                      case ReceiveGossipType.Merge:                          _gossipStats = _gossipStats.IncrementMergeCount();                          break;                      case ReceiveGossipType.Same:                          _gossipStats = _gossipStats.IncrementSameCount();                          break;                      case ReceiveGossipType.Newer:                          _gossipStats = _gossipStats.IncrementNewerCount();                          break;                      case ReceiveGossipType.Older:                          _gossipStats = _gossipStats.IncrementOlderCount();                          break;                  }
Missing Default,Akka.Cluster,ClusterEvent,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterEvent.cs,CollectMemberEvents,The following switch statement is missing a default case: switch (member.Status)                  {                      case MemberStatus.Joining:                          yield return new MemberJoined(member);                          break;                      case MemberStatus.WeaklyUp:                          yield return new MemberWeaklyUp(member);                          break;                      case MemberStatus.Up:                          yield return new MemberUp(member);                          break;                      case MemberStatus.Leaving:                          yield return new MemberLeft(member);                          break;                      case MemberStatus.Exiting:                          yield return new MemberExited(member);                          break;                      case MemberStatus.Down:                          yield return new MemberDowned(member);                          break;                  }
Missing Default,Akka.Cluster,ClusterRemoteWatcher,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\ClusterRemoteWatcher.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case ClusterEvent.CurrentClusterState state:                      _clusterNodes =                          state.Members.Select(m => m.Address).Where(a => a != _cluster.SelfAddress).ToImmutableHashSet();                      foreach (var node in _clusterNodes) TakeOverResponsibility(node);                      Unreachable.ExceptWith(_clusterNodes);                      return;                  case ClusterEvent.MemberUp up:                      MemberUp(up.Member);                      return;                  case ClusterEvent.MemberWeaklyUp weaklyUp:                      MemberUp(weaklyUp.Member);                      return;                  case ClusterEvent.MemberRemoved removed:                      MemberRemoved(removed.Member' removed.PreviousStatus);                      return;                  case ClusterEvent.IMemberEvent _:                      return; // not interesting              }
Missing Default,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,OnReceive,The following switch statement is missing a default case: switch (message)              {                  case ClusterEvent.CurrentClusterState state:                      ResetStabilityTimeout();                      _reachable = state.Members.Where(m => m.Status == MemberStatus.Up).ToImmutableSortedSet(Member.AgeOrdering);                      _unreachable = state.Unreachable.ToImmutableSortedSet(Member.AgeOrdering);                      return;                  case ClusterEvent.IMemberEvent memberEvent:                      ResetStabilityTimeout();                      switch (memberEvent)                      {                          case ClusterEvent.MemberUp up:                              _reachable = _reachable.Add(up.Member);                              break;                          case ClusterEvent.MemberRemoved removed:                              _reachable = _reachable.Remove(removed.Member);                              _unreachable = _unreachable.Remove(removed.Member);                              break;                      }                      return;                  case ClusterEvent.IReachabilityEvent reachabilityEvent:                      ResetStabilityTimeout();                      switch (reachabilityEvent)                      {                          case ClusterEvent.ReachableMember reachable:                              _reachable = _reachable.Add(reachable.Member);                              _unreachable = _unreachable.Remove(reachable.Member);                              break;                          case ClusterEvent.UnreachableMember unreachable:                              _reachable = _reachable.Remove(unreachable.Member);                              _unreachable = _unreachable.Add(unreachable.Member);                              break;                      }                      return;                  case StabilityReached _:                      HandleStabilityReached();                      return;              }
Missing Default,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,OnReceive,The following switch statement is missing a default case: switch (memberEvent)                      {                          case ClusterEvent.MemberUp up:                              _reachable = _reachable.Add(up.Member);                              break;                          case ClusterEvent.MemberRemoved removed:                              _reachable = _reachable.Remove(removed.Member);                              _unreachable = _unreachable.Remove(removed.Member);                              break;                      }
Missing Default,Akka.Cluster,SplitBrainDecider,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\core\Akka.Cluster\SplitBrainResolver.cs,OnReceive,The following switch statement is missing a default case: switch (reachabilityEvent)                      {                          case ClusterEvent.ReachableMember reachable:                              _reachable = _reachable.Add(reachable.Member);                              _unreachable = _unreachable.Remove(reachable.Member);                              break;                          case ClusterEvent.UnreachableMember unreachable:                              _reachable = _reachable.Remove(unreachable.Member);                              _unreachable = _unreachable.Add(unreachable.Member);                              break;                      }
