Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The method has 103 lines of code.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_communicate_to_any_node_in_cluster,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1"); " is 124.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_work_with_ask,The length of the statement  "                    var reply = c.Ask<ClusterClientSpecConfig.Reply>(new ClusterClient.Send("/user/testService"' "hello-request"' localAffinity: true)); " is 132.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_demonstrate_usage,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client"); " is 123.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_removal_of_a_receptionist,The length of the statement  "                    probe.FishForMessage(o => (o is ContactPointRemoved cp && cp.ContactPoint.Equals(unreachableContact))' TimeSpan.FromSeconds(10)' "removal"); " is 140.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2"); " is 124.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_partition,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3"); " is 124.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The length of the statement  "                    var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet(); " is 120.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4"); " is 126.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStartSpecConfig.cs,Start_Cluster,The length of the statement  "                        //here we explicitly do _not_ register the service with the cluster receptionist to force the clusterclient in buffer mode " is 122.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStartSpecConfig.cs,ClusterClient_can_start_with_zero_buffer,The length of the statement  "                        var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithBufferSize(0).WithInitialContacts(InitialContacts))' "client1"); " is 142.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_stop_if_reestablish_fails_for_too_long_time,The length of the statement  "                    var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1"); " is 124.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The length of the statement  "                Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false)); " is 140.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The length of the statement  "                Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false)); " is 140.
Long Statement,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_5_node_cluster,The length of the statement  "                    Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(s => true)' new PredicateMatcher(s => true)))); " is 123.
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientHandoverSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientHandoverSpec.cs,ClusterClient_must_startup_cluster_with_single_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Join(_config.First' _config.First);                  RunOn(() =>                  {                      var service = Sys.ActorOf(EchoActor.Props(this)' "testService");                      ClusterClientReceptionist.Get(Sys).RegisterService(service);                      AwaitMembersUp(1);                  }' _config.First);                  EnterBarrier("cluster-started");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientHandoverSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientHandoverSpec.cs,ClusterClient_must_bring_second_node_into_cluster,The following statement contains a magic number: RunOn(() =>              {                  var service = Sys.ActorOf(EchoActor.Props(this)' "testService");                  ClusterClientReceptionist.Get(Sys).RegisterService(service);                  AwaitMembersUp(2);              }' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientHandoverSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientHandoverSpec.cs,ClusterClient_must_re_establish_on_receptionist_shutdown,The following statement contains a magic number: RunOn(() =>              {                  // bugfix verification for https://github.com/akkadotnet/akka.net/issues/3840                  // need to make sure that no dead contacts are hanging around                  _clusterClient.Tell(GetContactPoints.Instance);                  var contacts = ExpectMsg<ContactPoints>().ContactPointsList;                  contacts.Count.Should().Be(2);                  contacts.Select(x => x.Address).Should().Contain(Node(_config.Second).Address);                    _clusterClient.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                  ExpectMsg<string>().Should().Be("hello");                                 }' _config.Client);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_startup_cluster,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                  Join(_config.Fourth' _config.First);                    RunOn(() =>                  {                      var service = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "testService");                      ClusterClientReceptionist.Get(Sys).RegisterService(service);                  }' _config.Fourth);                    RunOn(() =>                  {                      AwaitCount(1);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                    EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_communicate_to_any_node_in_cluster,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg<ClusterClientSpecConfig.Reply>().Msg.Should().Be("hello-ack");                      Sys.Stop(c);                  }' _config.Client);                    RunOn(() =>                  {                      ExpectMsg("hello");                  }' _config.Fourth);                    EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_work_with_ask,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(                          ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "ask-client");                      var reply = c.Ask<ClusterClientSpecConfig.Reply>(new ClusterClient.Send("/user/testService"' "hello-request"' localAffinity: true));                      reply.Wait(Remaining);                      reply.Result.Msg.Should().Be("hello-request-ack");                      Sys.Stop(c);                  }' _config.Client);                    RunOn(() =>                  {                      ExpectMsg("hello-request");                  }' _config.Fourth);                    EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_demonstrate_usage,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  //#server                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' host1);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' host2' host3);                  //#server                    RunOn(() =>                  {                      AwaitCount(4);                  }' host1' host2' host3' _config.Fourth);                  EnterBarrier("services-replicated");                    //#client                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _config.Client);                  //#client                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      received.ToImmutableHashSet().Should().BeEquivalentTo(ImmutableHashSet.Create("hello"' "hi"));                  }' _config.Client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_demonstrate_usage,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  //#server                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' host1);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' host2' host3);                  //#server                    RunOn(() =>                  {                      AwaitCount(4);                  }' host1' host2' host3' _config.Fourth);                  EnterBarrier("services-replicated");                    //#client                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _config.Client);                  //#client                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      received.ToImmutableHashSet().Should().BeEquivalentTo(ImmutableHashSet.Create("hello"' "hi"));                  }' _config.Client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_demonstrate_usage,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  //#server                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' host1);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' host2' host3);                  //#server                    RunOn(() =>                  {                      AwaitCount(4);                  }' host1' host2' host3' _config.Fourth);                  EnterBarrier("services-replicated");                    //#client                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _config.Client);                  //#client                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      received.ToImmutableHashSet().Should().BeEquivalentTo(ImmutableHashSet.Create("hello"' "hi"));                  }' _config.Client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_demonstrate_usage,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  //#server                  RunOn(() =>                  {                      var serviceA = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceA");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceA);                  }' host1);                    RunOn(() =>                  {                      var serviceB = Sys.ActorOf(Props.Create<ClusterClientSpecConfig.Service>()' "serviceB");                      ClusterClientReceptionist.Get(Sys).RegisterService(serviceB);                  }' host2' host3);                  //#server                    RunOn(() =>                  {                      AwaitCount(4);                  }' host1' host2' host3' _config.Fourth);                  EnterBarrier("services-replicated");                    //#client                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client");                      c.Tell(new ClusterClient.Send("/user/serviceA"' "hello"' localAffinity: true));                      c.Tell(new ClusterClient.SendToAll("/user/serviceB"' "hi"));                  }' _config.Client);                  //#client                    RunOn(() =>                  {                      // note that "hi" was sent to 2 "serviceB"                      var received = ReceiveN(3);                      received.ToImmutableHashSet().Should().BeEquivalentTo(ImmutableHashSet.Create("hello"' "hi"));                  }' _config.Client);                    // strange' barriers fail without this sleep                  Thread.Sleep(1000);                  EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_events,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorSelection("/user/client").ResolveOne(Dilated(1.Seconds())).Result;                      var l = Sys.ActorOf(                          Props.Create(() => new ClusterClientSpecConfig.TestClientListener(c))'                          "reporter-client-listener");                        var expectedContacts = ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth)                          .Select(_ => Node(_) / "system" / "receptionist");                        Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                      EnterBarrier("reporter-client-listener-tested");                    RunOn(() =>                  {                      // Only run this test on a node that knows about our client. It could be that no node knows                      // but there isn't a means of expressing that at least one of the nodes needs to pass the test.                      var r = ClusterClientReceptionist.Get(Sys).Underlying;                      r.Tell(GetClusterClients.Instance);                      var cps = ExpectMsg<ClusterClients>();                      if (cps.ClusterClientsList.Any(c => c.Path.Name.Equals("client")))                      {                          Log.Info("Testing that the receptionist has just one client");                          var l = Sys.ActorOf(                              Props.Create(() => new ClusterClientSpecConfig.TestReceptionistListener(r))'                              "reporter-receptionist-listener");                            var c = Sys                              .ActorSelection(Node(_config.Client) / "user" / "client")                              .ResolveOne(Dilated(2.Seconds())).Result;                            var expectedClients = ImmutableHashSet.Create(c);                          Within(10.Seconds()' () =>                          {                              AwaitAssert(() =>                              {                                  var probe = CreateTestProbe();                                  l.Tell(ClusterClientSpecConfig.TestReceptionistListener.GetLatestClusterClients.Instance' probe.Ref);                                    // "ask-client" might still be around' filter                                  probe.ExpectMsg<ClusterClientSpecConfig.TestReceptionistListener.LatestClusterClients>()                                      .ClusterClients.Should()                                      .Contain(expectedClients);                              });                          });                        }                    }' _config.First' _config.Second' _config.Third);                    EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_events,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorSelection("/user/client").ResolveOne(Dilated(1.Seconds())).Result;                      var l = Sys.ActorOf(                          Props.Create(() => new ClusterClientSpecConfig.TestClientListener(c))'                          "reporter-client-listener");                        var expectedContacts = ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth)                          .Select(_ => Node(_) / "system" / "receptionist");                        Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                      EnterBarrier("reporter-client-listener-tested");                    RunOn(() =>                  {                      // Only run this test on a node that knows about our client. It could be that no node knows                      // but there isn't a means of expressing that at least one of the nodes needs to pass the test.                      var r = ClusterClientReceptionist.Get(Sys).Underlying;                      r.Tell(GetClusterClients.Instance);                      var cps = ExpectMsg<ClusterClients>();                      if (cps.ClusterClientsList.Any(c => c.Path.Name.Equals("client")))                      {                          Log.Info("Testing that the receptionist has just one client");                          var l = Sys.ActorOf(                              Props.Create(() => new ClusterClientSpecConfig.TestReceptionistListener(r))'                              "reporter-receptionist-listener");                            var c = Sys                              .ActorSelection(Node(_config.Client) / "user" / "client")                              .ResolveOne(Dilated(2.Seconds())).Result;                            var expectedClients = ImmutableHashSet.Create(c);                          Within(10.Seconds()' () =>                          {                              AwaitAssert(() =>                              {                                  var probe = CreateTestProbe();                                  l.Tell(ClusterClientSpecConfig.TestReceptionistListener.GetLatestClusterClients.Instance' probe.Ref);                                    // "ask-client" might still be around' filter                                  probe.ExpectMsg<ClusterClientSpecConfig.TestReceptionistListener.LatestClusterClients>()                                      .ClusterClients.Should()                                      .Contain(expectedClients);                              });                          });                        }                    }' _config.First' _config.Second' _config.Third);                    EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_events,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorSelection("/user/client").ResolveOne(Dilated(1.Seconds())).Result;                      var l = Sys.ActorOf(                          Props.Create(() => new ClusterClientSpecConfig.TestClientListener(c))'                          "reporter-client-listener");                        var expectedContacts = ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth)                          .Select(_ => Node(_) / "system" / "receptionist");                        Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                      EnterBarrier("reporter-client-listener-tested");                    RunOn(() =>                  {                      // Only run this test on a node that knows about our client. It could be that no node knows                      // but there isn't a means of expressing that at least one of the nodes needs to pass the test.                      var r = ClusterClientReceptionist.Get(Sys).Underlying;                      r.Tell(GetClusterClients.Instance);                      var cps = ExpectMsg<ClusterClients>();                      if (cps.ClusterClientsList.Any(c => c.Path.Name.Equals("client")))                      {                          Log.Info("Testing that the receptionist has just one client");                          var l = Sys.ActorOf(                              Props.Create(() => new ClusterClientSpecConfig.TestReceptionistListener(r))'                              "reporter-receptionist-listener");                            var c = Sys                              .ActorSelection(Node(_config.Client) / "user" / "client")                              .ResolveOne(Dilated(2.Seconds())).Result;                            var expectedClients = ImmutableHashSet.Create(c);                          Within(10.Seconds()' () =>                          {                              AwaitAssert(() =>                              {                                  var probe = CreateTestProbe();                                  l.Tell(ClusterClientSpecConfig.TestReceptionistListener.GetLatestClusterClients.Instance' probe.Ref);                                    // "ask-client" might still be around' filter                                  probe.ExpectMsg<ClusterClientSpecConfig.TestReceptionistListener.LatestClusterClients>()                                      .ClusterClients.Should()                                      .Contain(expectedClients);                              });                          });                        }                    }' _config.First' _config.Second' _config.Third);                    EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_events,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorSelection("/user/client").ResolveOne(Dilated(1.Seconds())).Result;                      var l = Sys.ActorOf(                          Props.Create(() => new ClusterClientSpecConfig.TestClientListener(c))'                          "reporter-client-listener");                        var expectedContacts = ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth)                          .Select(_ => Node(_) / "system" / "receptionist");                        Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                      EnterBarrier("reporter-client-listener-tested");                    RunOn(() =>                  {                      // Only run this test on a node that knows about our client. It could be that no node knows                      // but there isn't a means of expressing that at least one of the nodes needs to pass the test.                      var r = ClusterClientReceptionist.Get(Sys).Underlying;                      r.Tell(GetClusterClients.Instance);                      var cps = ExpectMsg<ClusterClients>();                      if (cps.ClusterClientsList.Any(c => c.Path.Name.Equals("client")))                      {                          Log.Info("Testing that the receptionist has just one client");                          var l = Sys.ActorOf(                              Props.Create(() => new ClusterClientSpecConfig.TestReceptionistListener(r))'                              "reporter-receptionist-listener");                            var c = Sys                              .ActorSelection(Node(_config.Client) / "user" / "client")                              .ResolveOne(Dilated(2.Seconds())).Result;                            var expectedClients = ImmutableHashSet.Create(c);                          Within(10.Seconds()' () =>                          {                              AwaitAssert(() =>                              {                                  var probe = CreateTestProbe();                                  l.Tell(ClusterClientSpecConfig.TestReceptionistListener.GetLatestClusterClients.Instance' probe.Ref);                                    // "ask-client" might still be around' filter                                  probe.ExpectMsg<ClusterClientSpecConfig.TestReceptionistListener.LatestClusterClients>()                                      .ClusterClients.Should()                                      .Contain(expectedClients);                              });                          });                        }                    }' _config.First' _config.Second' _config.Third);                    EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_removal_of_a_receptionist,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var unreachableContact = Node(_config.Client) / "system" / "receptionist";                      var expectedRoles =                          ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth);                      var expectedContacts = expectedRoles.Select(x => Node(x) / "system" / "receptionist").ToImmutableHashSet();                        // We need to slow down things otherwise our receptionists can sometimes tell us                      // that our unreachableContact is unreachable before we get a chance to                      // subscribe to events.                      foreach (var role in expectedRoles)                      {                          TestConductor.Blackhole(_config.Client' role' ThrottleTransportAdapter.Direction.Both)                              .Wait();                      }                        var c = Sys.ActorOf(                          ClusterClient.Props(ClusterClientSettings.Create(Sys)                              .WithInitialContacts(expectedContacts.Add(unreachableContact)))' "client5");                        var probe = CreateTestProbe();                      c.Tell(SubscribeContactPoints.Instance' probe.Ref);                        foreach (var role in expectedRoles)                      {                          TestConductor.PassThrough(_config.Client' role' ThrottleTransportAdapter.Direction.Both)                              .Wait();                      }                        probe.FishForMessage(o => (o is ContactPointRemoved cp && cp.ContactPoint.Equals(unreachableContact))' TimeSpan.FromSeconds(10)' "removal");                  }' _config.Client);                    EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_report_removal_of_a_receptionist,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  RunOn(() =>                  {                      var unreachableContact = Node(_config.Client) / "system" / "receptionist";                      var expectedRoles =                          ImmutableHashSet.Create(_config.First' _config.Second' _config.Third' _config.Fourth);                      var expectedContacts = expectedRoles.Select(x => Node(x) / "system" / "receptionist").ToImmutableHashSet();                        // We need to slow down things otherwise our receptionists can sometimes tell us                      // that our unreachableContact is unreachable before we get a chance to                      // subscribe to events.                      foreach (var role in expectedRoles)                      {                          TestConductor.Blackhole(_config.Client' role' ThrottleTransportAdapter.Direction.Both)                              .Wait();                      }                        var c = Sys.ActorOf(                          ClusterClient.Props(ClusterClientSettings.Create(Sys)                              .WithInitialContacts(expectedContacts.Add(unreachableContact)))' "client5");                        var probe = CreateTestProbe();                      c.Tell(SubscribeContactPoints.Instance' probe.Ref);                        foreach (var role in expectedRoles)                      {                          TestConductor.PassThrough(_config.Client' role' ThrottleTransportAdapter.Direction.Both)                              .Wait();                      }                        probe.FishForMessage(o => (o is ContactPointRemoved cp && cp.ContactPoint.Equals(unreachableContact))' TimeSpan.FromSeconds(10)' "removal");                  }' _config.Client);                    EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames = _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - 3.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds()).Msg.Should().Be("hi again-ack");                          });                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("verified-3");                  ReceiveWhile(2.Seconds()' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("Unexpected message: " + msg);                  });                  EnterBarrier("verified-4");                    RunOn(() =>                  {                      // Locate the test listener from a previous test and see that it agrees                      // with what the client is telling it about what receptionists are alive                      var l = Sys.ActorSelection("/user/reporter-client-listener");                      var expectedContacts = _remainingServerRoleNames.Select(c => Node(c) / "system" / "receptionist");                      Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames = _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - 3.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds()).Msg.Should().Be("hi again-ack");                          });                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("verified-3");                  ReceiveWhile(2.Seconds()' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("Unexpected message: " + msg);                  });                  EnterBarrier("verified-4");                    RunOn(() =>                  {                      // Locate the test listener from a previous test and see that it agrees                      // with what the client is telling it about what receptionists are alive                      var l = Sys.ActorSelection("/user/reporter-client-listener");                      var expectedContacts = _remainingServerRoleNames.Select(c => Node(c) / "system" / "receptionist");                      Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames = _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - 3.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds()).Msg.Should().Be("hi again-ack");                          });                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("verified-3");                  ReceiveWhile(2.Seconds()' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("Unexpected message: " + msg);                  });                  EnterBarrier("verified-4");                    RunOn(() =>                  {                      // Locate the test listener from a previous test and see that it agrees                      // with what the client is telling it about what receptionists are alive                      var l = Sys.ActorSelection("/user/reporter-client-listener");                      var expectedContacts = _remainingServerRoleNames.Select(c => Node(c) / "system" / "receptionist");                      Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames = _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - 3.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds()).Msg.Should().Be("hi again-ack");                          });                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("verified-3");                  ReceiveWhile(2.Seconds()' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("Unexpected message: " + msg);                  });                  EnterBarrier("verified-4");                    RunOn(() =>                  {                      // Locate the test listener from a previous test and see that it agrees                      // with what the client is telling it about what receptionists are alive                      var l = Sys.ActorSelection("/user/reporter-client-listener");                      var expectedContacts = _remainingServerRoleNames.Select(c => Node(c) / "system" / "receptionist");                      Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_another_receptionist_when_server_is_shutdown,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var service2 = Sys.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(Sys).RegisterService(service2);                      AwaitCount(8);                  }' _config.First' _config.Second' _config.Third' _config.Fourth);                  EnterBarrier("service2-replicated");                    RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client2");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        TestConductor.Exit(receptionistRoleName' 0).Wait();                      _remainingServerRoleNames = _remainingServerRoleNames.Remove(receptionistRoleName);                        Within(Remaining - 3.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              c.Tell(new ClusterClient.Send("/user/service2"' "hi again"' localAffinity: true));                              ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds()).Msg.Should().Be("hi again-ack");                          });                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("verified-3");                  ReceiveWhile(2.Seconds()' msg =>                  {                      if (msg.Equals("hi again")) return msg;                      else throw new Exception("Unexpected message: " + msg);                  });                  EnterBarrier("verified-4");                    RunOn(() =>                  {                      // Locate the test listener from a previous test and see that it agrees                      // with what the client is telling it about what receptionists are alive                      var l = Sys.ActorSelection("/user/reporter-client-listener");                      var expectedContacts = _remainingServerRoleNames.Select(c => Node(c) / "system" / "receptionist");                      Within(10.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              var probe = CreateTestProbe();                              l.Tell(ClusterClientSpecConfig.TestClientListener.GetLatestContactPoints.Instance' probe.Ref);                              probe.ExpectMsg<ClusterClientSpecConfig.TestClientListener.LatestContactPoints>()                                  .ContactPoints.Should()                                  .BeEquivalentTo(expectedContacts);                          });                      });                  }' _config.Client);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_partition,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour2"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour2-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        // shutdown all but the one that the client is connected to                      _remainingServerRoleNames.Where(r => !r.Equals(receptionistRoleName)).ForEach(r =>                      {                          TestConductor.Exit(r' 0).Wait();                      });                      _remainingServerRoleNames = ImmutableHashSet.Create(receptionistRoleName);                        // network partition between client and server                      TestConductor.Blackhole(_config.Client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                      c.Tell(new ClusterClient.Send("/user/service2"' "ping"' localAffinity: true));                      // if we would use remote watch the failure detector would trigger and                      // connection quarantined                      ExpectNoMsg(5.Seconds());                        TestConductor.PassThrough(_config.Client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                        var expectedAddress = GetAddress(receptionistRoleName);                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          c.Tell(new ClusterClient.Send("/user/service2"' "bonjour3"' localAffinity: true)' probe.Ref);                          var reply2 = probe.ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds());                          reply2.Msg.Should().Be("bonjour3-ack");                          reply2.Node.Should().Be(expectedAddress);                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_partition,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client3");                      c.Tell(new ClusterClient.Send("/user/service2"' "bonjour2"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>();                      reply.Msg.Should().Be("bonjour2-ack");                        RoleName receptionistRoleName = GetRoleName(reply.Node);                      if (receptionistRoleName == null)                      {                          throw new Exception("Unexpected missing role name: " + reply.Node);                      }                        // shutdown all but the one that the client is connected to                      _remainingServerRoleNames.Where(r => !r.Equals(receptionistRoleName)).ForEach(r =>                      {                          TestConductor.Exit(r' 0).Wait();                      });                      _remainingServerRoleNames = ImmutableHashSet.Create(receptionistRoleName);                        // network partition between client and server                      TestConductor.Blackhole(_config.Client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                      c.Tell(new ClusterClient.Send("/user/service2"' "ping"' localAffinity: true));                      // if we would use remote watch the failure detector would trigger and                      // connection quarantined                      ExpectNoMsg(5.Seconds());                        TestConductor.PassThrough(_config.Client' receptionistRoleName' ThrottleTransportAdapter.Direction.Both).Wait();                        var expectedAddress = GetAddress(receptionistRoleName);                      AwaitAssert(() =>                      {                          var probe = CreateTestProbe();                          c.Tell(new ClusterClient.Send("/user/service2"' "bonjour3"' localAffinity: true)' probe.Ref);                          var reply2 = probe.ExpectMsg<ClusterClientSpecConfig.Reply>(1.Seconds());                          reply2.Msg.Should().Be("bonjour3-ack");                          reply2.Node.Should().Be(expectedAddress);                      });                      Sys.Stop(c);                  }' _config.Client);                    EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      _remainingServerRoleNames.Count.Should().Be(1);                      var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet();                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4");                        c.Tell(new ClusterClient.Send("/user/service2"' "bonjour4"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>(10.Seconds());                      reply.Msg.Should().Be("bonjour4-ack");                      reply.Node.Should().Be(remainingContacts.First().Address);                        var logSource = $"{Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress}/user/client4";                        EventFilter.Info(start: "Connected to"' source:logSource).ExpectOne(() =>                      {                          EventFilter.Info(start: "Lost contact"' source:logSource).ExpectOne(() =>                          {                              // shutdown server                              TestConductor.Shutdown(_remainingServerRoleNames.First()).Wait();                          });                      });                        c.Tell(new ClusterClient.Send("/user/service2"' "shutdown"' localAffinity: true));                      Thread.Sleep(2000); // to ensure that it is sent out before shutting down system                  }' _config.Client);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(20.Seconds());                      // start new system on same port                      var port = Cluster.Get(Sys).SelfAddress.Port;                      var sys2 = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory.ParseString($"akka.remote.dot-netty.tcp.port={port}").WithFallback(Sys.Settings.Config));                      Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      var service2 = sys2.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(sys2).RegisterService(service2);                      sys2.WhenTerminated.Wait(20.Seconds());                  }' _remainingServerRoleNames.ToArray());              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      _remainingServerRoleNames.Count.Should().Be(1);                      var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet();                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4");                        c.Tell(new ClusterClient.Send("/user/service2"' "bonjour4"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>(10.Seconds());                      reply.Msg.Should().Be("bonjour4-ack");                      reply.Node.Should().Be(remainingContacts.First().Address);                        var logSource = $"{Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress}/user/client4";                        EventFilter.Info(start: "Connected to"' source:logSource).ExpectOne(() =>                      {                          EventFilter.Info(start: "Lost contact"' source:logSource).ExpectOne(() =>                          {                              // shutdown server                              TestConductor.Shutdown(_remainingServerRoleNames.First()).Wait();                          });                      });                        c.Tell(new ClusterClient.Send("/user/service2"' "shutdown"' localAffinity: true));                      Thread.Sleep(2000); // to ensure that it is sent out before shutting down system                  }' _config.Client);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(20.Seconds());                      // start new system on same port                      var port = Cluster.Get(Sys).SelfAddress.Port;                      var sys2 = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory.ParseString($"akka.remote.dot-netty.tcp.port={port}").WithFallback(Sys.Settings.Config));                      Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      var service2 = sys2.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(sys2).RegisterService(service2);                      sys2.WhenTerminated.Wait(20.Seconds());                  }' _remainingServerRoleNames.ToArray());              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      _remainingServerRoleNames.Count.Should().Be(1);                      var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet();                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4");                        c.Tell(new ClusterClient.Send("/user/service2"' "bonjour4"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>(10.Seconds());                      reply.Msg.Should().Be("bonjour4-ack");                      reply.Node.Should().Be(remainingContacts.First().Address);                        var logSource = $"{Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress}/user/client4";                        EventFilter.Info(start: "Connected to"' source:logSource).ExpectOne(() =>                      {                          EventFilter.Info(start: "Lost contact"' source:logSource).ExpectOne(() =>                          {                              // shutdown server                              TestConductor.Shutdown(_remainingServerRoleNames.First()).Wait();                          });                      });                        c.Tell(new ClusterClient.Send("/user/service2"' "shutdown"' localAffinity: true));                      Thread.Sleep(2000); // to ensure that it is sent out before shutting down system                  }' _config.Client);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(20.Seconds());                      // start new system on same port                      var port = Cluster.Get(Sys).SelfAddress.Port;                      var sys2 = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory.ParseString($"akka.remote.dot-netty.tcp.port={port}").WithFallback(Sys.Settings.Config));                      Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      var service2 = sys2.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(sys2).RegisterService(service2);                      sys2.WhenTerminated.Wait(20.Seconds());                  }' _remainingServerRoleNames.ToArray());              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      _remainingServerRoleNames.Count.Should().Be(1);                      var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet();                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4");                        c.Tell(new ClusterClient.Send("/user/service2"' "bonjour4"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>(10.Seconds());                      reply.Msg.Should().Be("bonjour4-ack");                      reply.Node.Should().Be(remainingContacts.First().Address);                        var logSource = $"{Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress}/user/client4";                        EventFilter.Info(start: "Connected to"' source:logSource).ExpectOne(() =>                      {                          EventFilter.Info(start: "Lost contact"' source:logSource).ExpectOne(() =>                          {                              // shutdown server                              TestConductor.Shutdown(_remainingServerRoleNames.First()).Wait();                          });                      });                        c.Tell(new ClusterClient.Send("/user/service2"' "shutdown"' localAffinity: true));                      Thread.Sleep(2000); // to ensure that it is sent out before shutting down system                  }' _config.Client);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(20.Seconds());                      // start new system on same port                      var port = Cluster.Get(Sys).SelfAddress.Port;                      var sys2 = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory.ParseString($"akka.remote.dot-netty.tcp.port={port}").WithFallback(Sys.Settings.Config));                      Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      var service2 = sys2.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(sys2).RegisterService(service2);                      sys2.WhenTerminated.Wait(20.Seconds());                  }' _remainingServerRoleNames.ToArray());              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientSpec.cs,ClusterClient_must_reestablish_connection_to_receptionist_after_server_restart,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  RunOn(() =>                  {                      _remainingServerRoleNames.Count.Should().Be(1);                      var remainingContacts = _remainingServerRoleNames.Select(r => Node(r) / "system" / "receptionist").ToImmutableHashSet();                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(remainingContacts))' "client4");                        c.Tell(new ClusterClient.Send("/user/service2"' "bonjour4"' localAffinity: true));                      var reply = ExpectMsg<ClusterClientSpecConfig.Reply>(10.Seconds());                      reply.Msg.Should().Be("bonjour4-ack");                      reply.Node.Should().Be(remainingContacts.First().Address);                        var logSource = $"{Sys.AsInstanceOf<ExtendedActorSystem>().Provider.DefaultAddress}/user/client4";                        EventFilter.Info(start: "Connected to"' source:logSource).ExpectOne(() =>                      {                          EventFilter.Info(start: "Lost contact"' source:logSource).ExpectOne(() =>                          {                              // shutdown server                              TestConductor.Shutdown(_remainingServerRoleNames.First()).Wait();                          });                      });                        c.Tell(new ClusterClient.Send("/user/service2"' "shutdown"' localAffinity: true));                      Thread.Sleep(2000); // to ensure that it is sent out before shutting down system                  }' _config.Client);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(20.Seconds());                      // start new system on same port                      var port = Cluster.Get(Sys).SelfAddress.Port;                      var sys2 = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory.ParseString($"akka.remote.dot-netty.tcp.port={port}").WithFallback(Sys.Settings.Config));                      Cluster.Get(sys2).Join(Cluster.Get(sys2).SelfAddress);                      var service2 = sys2.ActorOf(Props.Create(() => new ClusterClientSpecConfig.TestService(TestActor))' "service2");                      ClusterClientReceptionist.Get(sys2).RegisterService(service2);                      sys2.WhenTerminated.Wait(20.Seconds());                  }' _remainingServerRoleNames.ToArray());              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStartSpecConfig.cs,Start_Cluster,The following statement contains a magic number: Within(30.Seconds()' () =>                  {                      AwaitClusterUp(_config.First' _config.Second);                                            //start our test service                      RunOn(() =>                      {                          var service = Sys.ActorOf(Props.Create(() => new ClusterClientStopSpecConfig.Service())' "testService");                            //here we explicitly do _not_ register the service with the cluster receptionist to force the clusterclient in buffer mode                          //ClusterClientReceptionist.Get(Sys).RegisterService(service);                      }' _config.First' _config.Second);                        EnterBarrier("receptionist-started");                  });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStartSpecConfig.cs,ClusterClient_can_start_with_zero_buffer,The following statement contains a magic number: Within(30.Seconds()' () =>                  {                      //start the cluster client                       RunOn(() =>                      {                          var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithBufferSize(0).WithInitialContacts(InitialContacts))' "client1");                          //check for the debug log message that the cluster client will output in case of an 0 buffersize                          EventFilter.Debug(start: "Receptionist not available and buffering is disabled' dropping message").ExpectOne(                              () =>                              {                                  c.Tell(new ClusterClient.Send("/user/testService"' "hello"));                              });                            //ExpectMsg<string>(3.Seconds()).Should().Be("hello");                                                                             ExpectTerminated(c' 10.Seconds());                      }' _config.Client);                        EnterBarrier("end-of-test");                  });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStartSpecConfig.cs,ClusterClient_can_start_with_zero_buffer,The following statement contains a magic number: Within(30.Seconds()' () =>                  {                      //start the cluster client                       RunOn(() =>                      {                          var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithBufferSize(0).WithInitialContacts(InitialContacts))' "client1");                          //check for the debug log message that the cluster client will output in case of an 0 buffersize                          EventFilter.Debug(start: "Receptionist not available and buffering is disabled' dropping message").ExpectOne(                              () =>                              {                                  c.Tell(new ClusterClient.Send("/user/testService"' "hello"));                              });                            //ExpectMsg<string>(3.Seconds()).Should().Be("hello");                                                                             ExpectTerminated(c' 10.Seconds());                      }' _config.Client);                        EnterBarrier("end-of-test");                  });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_startup_cluster,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                    RunOn(() =>                  {                      var service = Sys.ActorOf(Props.Create(() => new ClusterClientStopSpecConfig.Service())' "testService");                      ClusterClientReceptionist.Get(Sys).RegisterService(service);                  }' _config.First);                    RunOn(() =>                  {                      AwaitCount(1);                  }' _config.First' _config.Second);                    EnterBarrier("cluster-started");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_stop_if_reestablish_fails_for_too_long_time,The following statement contains a magic number: Within(20.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg<string>(3.Seconds()).Should().Be("hello");                      EnterBarrier("was-in-contact");                      Watch(c);                        // TODO: EventFilter should be after ExpectTerminated                      EventFilter.Warning(start: "Receptionist reconnect not successful within").ExpectOne(() => { });                      ExpectTerminated(c' 10.Seconds());                  }' _config.Client);                    RunOn(() =>                  {                      EnterBarrier("was-in-contact");                      Sys.Terminate().Wait(10.Seconds());                  }' _config.First' _config.Second);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_stop_if_reestablish_fails_for_too_long_time,The following statement contains a magic number: Within(20.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg<string>(3.Seconds()).Should().Be("hello");                      EnterBarrier("was-in-contact");                      Watch(c);                        // TODO: EventFilter should be after ExpectTerminated                      EventFilter.Warning(start: "Receptionist reconnect not successful within").ExpectOne(() => { });                      ExpectTerminated(c' 10.Seconds());                  }' _config.Client);                    RunOn(() =>                  {                      EnterBarrier("was-in-contact");                      Sys.Terminate().Wait(10.Seconds());                  }' _config.First' _config.Second);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_stop_if_reestablish_fails_for_too_long_time,The following statement contains a magic number: Within(20.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg<string>(3.Seconds()).Should().Be("hello");                      EnterBarrier("was-in-contact");                      Watch(c);                        // TODO: EventFilter should be after ExpectTerminated                      EventFilter.Warning(start: "Receptionist reconnect not successful within").ExpectOne(() => { });                      ExpectTerminated(c' 10.Seconds());                  }' _config.Client);                    RunOn(() =>                  {                      EnterBarrier("was-in-contact");                      Sys.Terminate().Wait(10.Seconds());                  }' _config.First' _config.Second);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Client,ClusterClientStopSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\ClusterClient\ClusterClientStopSpec.cs,ClusterClient_must_stop_if_reestablish_fails_for_too_long_time,The following statement contains a magic number: Within(20.Seconds()' () =>              {                  RunOn(() =>                  {                      var c = Sys.ActorOf(ClusterClient.Props(ClusterClientSettings.Create(Sys).WithInitialContacts(InitialContacts))' "client1");                      c.Tell(new ClusterClient.Send("/user/testService"' "hello"' localAffinity: true));                      ExpectMsg<string>(3.Seconds()).Should().Be("hello");                      EnterBarrier("was-in-contact");                      Watch(c);                        // TODO: EventFilter should be after ExpectTerminated                      EventFilter.Warning(start: "Receptionist reconnect not successful within").ExpectOne(() => { });                      ExpectTerminated(c' 10.Seconds());                  }' _config.Client);                    RunOn(() =>                  {                      EnterBarrier("was-in-contact");                      Sys.Terminate().Wait(10.Seconds());                  }' _config.First' _config.Second);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_startup_2_nodes_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  Join(_first' _first);                  Join(_second' _first);                  EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                        var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      LastSender.Should().Be(u2);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                        var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      LastSender.Should().Be(u2);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                        var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      LastSender.Should().Be(u2);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_added_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u1 = CreateChatUser("u1");                      Mediator.Tell(new Put(u1));                        var u2 = CreateChatUser("u2");                      Mediator.Tell(new Put(u2));                        AwaitCount(2);                        // send to actor at the same node                      u1.Tell(new Whisper("/user/u2"' "hello"));                      ExpectMsg("hello");                      LastSender.Should().Be(u2);                  }' _first);                    RunOn(() =>                  {                      var u3 = CreateChatUser("u3");                      Mediator.Tell(new Put(u3));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(3);                  }' _first' _second);                  EnterBarrier("3-registered");                    RunOn(() =>                  {                      var u4 = CreateChatUser("u4");                      Mediator.Tell(new Put(u4));                  }' _second);                    RunOn(() =>                  {                      AwaitCount(4);                  }' _first' _second);                  EnterBarrier("4-registered");                    RunOn(() =>                  {                      // send to an actor on another node                      ChatUser("u1").Tell(new Whisper("/user/u4"' "hi there"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi there");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-2");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_replicate_users_to_new_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_third' _first);                  RunOn(() =>                  {                      var u5 = CreateChatUser("u5");                      Mediator.Tell(new Put(u5));                  }' _third);                    AwaitCount(5);                  EnterBarrier("5-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Whisper("/user/u4"' "go"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("go");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_replicate_users_to_new_node,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  Join(_third' _first);                  RunOn(() =>                  {                      var u5 = CreateChatUser("u5");                      Mediator.Tell(new Put(u5));                  }' _third);                    AwaitCount(5);                  EnterBarrier("5-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Whisper("/user/u4"' "go"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("go");                      LastSender.Path.Name.Should().Be("u4");                  }' _second);                  EnterBarrier("after-3");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_removed_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u6 = CreateChatUser("u6");                      Mediator.Tell(new Put(u6));                  }' _first);                  AwaitCount(6);                  EnterBarrier("6-registered");                    RunOn(() =>                  {                      Mediator.Tell(new Remove("/user/u6"));                  }' _first);                  AwaitCount(5);                    EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_removed_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u6 = CreateChatUser("u6");                      Mediator.Tell(new Put(u6));                  }' _first);                  AwaitCount(6);                  EnterBarrier("6-registered");                    RunOn(() =>                  {                      Mediator.Tell(new Remove("/user/u6"));                  }' _first);                  AwaitCount(5);                    EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_keep_track_of_removed_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u6 = CreateChatUser("u6");                      Mediator.Tell(new Put(u6));                  }' _first);                  AwaitCount(6);                  EnterBarrier("6-registered");                    RunOn(() =>                  {                      Mediator.Tell(new Remove("/user/u6"));                  }' _first);                  AwaitCount(5);                    EnterBarrier("after-4");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_remove_terminated_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  RunOn(() =>                  {                      ChatUser("u3").Tell(PoisonPill.Instance);                  }' _second);                    AwaitCount(4);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_remove_terminated_users,The following statement contains a magic number: Within(TimeSpan.FromSeconds(5)' () =>              {                  RunOn(() =>                  {                      ChatUser("u3").Tell(PoisonPill.Instance);                  }' _second);                    AwaitCount(4);                  EnterBarrier("after-5");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u7");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u7");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u7 = CreateChatUser("u7");                      Mediator.Tell(new Put(u7));                  }' _first' _second);                  AwaitCount(6);                  EnterBarrier("7-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Talk("/user/u7"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u7");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                    EnterBarrier("after-6");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      names.All(x => x == "u8" || x == "u9").Should().BeTrue();                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      LastSender.Path.Name.Should().Be("u10");                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      names.All(x => x == "u8" || x == "u9").Should().BeTrue();                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      LastSender.Path.Name.Should().Be("u10");                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      names.All(x => x == "u8" || x == "u9").Should().BeTrue();                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      LastSender.Path.Name.Should().Be("u10");                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_publish_to_topic,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s8 = new Subscribe("topic1"' CreateChatUser("u8"));                      Mediator.Tell(s8);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s8));                      var s9 = new Subscribe("topic1"' CreateChatUser("u9"));                      Mediator.Tell(s9);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s9));                  }' _first);                    RunOn(() =>                  {                      var s10 = new Subscribe("topic1"' CreateChatUser("u10"));                      Mediator.Tell(s10);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s10));                  }' _second);                    // one topic on two nodes                  AwaitCount(8);                  EnterBarrier("topic1-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new Shout("topic1"' "hello all"));                  }' _third);                    RunOn(() =>                  {                      var names = ReceiveWhile(x => "hello all".Equals(x) ? LastSender.Path.Name : null' msgs: 2);                      names.All(x => x == "u8" || x == "u9").Should().BeTrue();                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hello all");                      LastSender.Path.Name.Should().Be("u10");                  }' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-7");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_demonstrate_usage_of_Publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber1");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber2");                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber3");                  }' _second);                    RunOn(() =>                  {                      var publisher = Sys.ActorOf(Props.Create<Publisher>()' "publisher");                      AwaitCount(10);                      // after a while the subscriptions are replicated                      publisher.Tell("hello");                  }' _third);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_demonstrate_usage_of_Publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber1");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber2");                      Sys.ActorOf(Props.Create<Subscriber>()' "subscriber3");                  }' _second);                    RunOn(() =>                  {                      var publisher = Sys.ActorOf(Props.Create<Publisher>()' "publisher");                      AwaitCount(10);                      // after a while the subscriptions are replicated                      publisher.Tell("hello");                  }' _third);                  EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_demonstrate_usage_of_Send,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Destination>()' "destination");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Destination>()' "destination");                  }' _second);                    RunOn(() =>                  {                      var sender = Sys.ActorOf(Props.Create<Sender>()' "sender");                      AwaitCount(12);                      // after a while the destinations are replicated                      sender.Tell("hello");                  }' _third);                    EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_demonstrate_usage_of_Send,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Destination>()' "destination");                  }' _first);                    RunOn(() =>                  {                      Sys.ActorOf(Props.Create<Destination>()' "destination");                  }' _second);                    RunOn(() =>                  {                      var sender = Sys.ActorOf(Props.Create<Sender>()' "sender");                      AwaitCount(12);                      // after a while the destinations are replicated                      sender.Tell("hello");                  }' _third);                    EnterBarrier("after-8");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(15);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u11");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(15);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u11");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_SendAll_to_all_other_nodes,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var u11 = CreateChatUser("u11");                      Mediator.Tell(new Put(u11));                  }' _first' _second' _third);                  AwaitCount(15);                  EnterBarrier("11-registered");                    RunOn(() =>                  {                      ChatUser("u5").Tell(new TalkToOthers("/user/u11"' "hi"));                  }' _third);                    RunOn(() =>                  {                      ExpectMsg("hi");                      LastSender.Path.Name.Should().Be("u11");                  }' _first' _second);                    RunOn(() =>                  {                      ExpectNoMsg(TimeSpan.FromSeconds(2));                  }' _third);                  EnterBarrier("after-11");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      var message = ExpectMsg<SubscribeAck>();                      message.Subscribe.Topic.Should().Be("topic2");                      message.Subscribe.Group.Should().Be("group1");                      message.Subscribe.Ref.Should().Be(u12);                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      var message1 = ExpectMsg<SubscribeAck>();                      message1.Subscribe.Topic.ShouldBe("topic2");                      message1.Subscribe.Group.ShouldBe("group2");                      message1.Subscribe.Ref.ShouldBe(u12);                        var u13 = CreateChatUser("u13");                      u13.Tell(new JoinGroup("topic2"' "group2"));                      var message2 = ExpectMsg<SubscribeAck>();                      message2.Subscribe.Topic.ShouldBe("topic2");                      message2.Subscribe.Group.ShouldBe("group2");                      message2.Subscribe.Ref.ShouldBe(u13);                  }' _second);                    AwaitCount(19);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic2"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      var message1 = ExpectMsg<UnsubscribeAck>();                      message1.Unsubscribe.Topic.ShouldBe("topic2");                      message1.Unsubscribe.Group.ShouldBe("group2");                      message1.Unsubscribe.Ref.ShouldBe(u12);                        var u13 = ChatUser("u13");                      u13.Tell(new ExitGroup("topic2"' "group2"));                      var message2 = ExpectMsg<UnsubscribeAck>();                      message2.Unsubscribe.Topic.ShouldBe("topic2");                      message2.Unsubscribe.Group.ShouldBe("group2");                      message2.Unsubscribe.Ref.ShouldBe(u13);                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      var message = ExpectMsg<SubscribeAck>();                      message.Subscribe.Topic.Should().Be("topic2");                      message.Subscribe.Group.Should().Be("group1");                      message.Subscribe.Ref.Should().Be(u12);                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      var message1 = ExpectMsg<SubscribeAck>();                      message1.Subscribe.Topic.ShouldBe("topic2");                      message1.Subscribe.Group.ShouldBe("group2");                      message1.Subscribe.Ref.ShouldBe(u12);                        var u13 = CreateChatUser("u13");                      u13.Tell(new JoinGroup("topic2"' "group2"));                      var message2 = ExpectMsg<SubscribeAck>();                      message2.Subscribe.Topic.ShouldBe("topic2");                      message2.Subscribe.Group.ShouldBe("group2");                      message2.Subscribe.Ref.ShouldBe(u13);                  }' _second);                    AwaitCount(19);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic2"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      var message1 = ExpectMsg<UnsubscribeAck>();                      message1.Unsubscribe.Topic.ShouldBe("topic2");                      message1.Unsubscribe.Group.ShouldBe("group2");                      message1.Unsubscribe.Ref.ShouldBe(u12);                        var u13 = ChatUser("u13");                      u13.Tell(new ExitGroup("topic2"' "group2"));                      var message2 = ExpectMsg<UnsubscribeAck>();                      message2.Unsubscribe.Topic.ShouldBe("topic2");                      message2.Unsubscribe.Group.ShouldBe("group2");                      message2.Unsubscribe.Ref.ShouldBe(u13);                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_send_one_message_to_each_group,The following statement contains a magic number: Within(TimeSpan.FromSeconds(20)' () =>              {                  RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group1"));                      var message = ExpectMsg<SubscribeAck>();                      message.Subscribe.Topic.Should().Be("topic2");                      message.Subscribe.Group.Should().Be("group1");                      message.Subscribe.Ref.Should().Be(u12);                  }' _first);                    RunOn(() =>                  {                      var u12 = CreateChatUser("u12");                      u12.Tell(new JoinGroup("topic2"' "group2"));                      var message1 = ExpectMsg<SubscribeAck>();                      message1.Subscribe.Topic.ShouldBe("topic2");                      message1.Subscribe.Group.ShouldBe("group2");                      message1.Subscribe.Ref.ShouldBe(u12);                        var u13 = CreateChatUser("u13");                      u13.Tell(new JoinGroup("topic2"' "group2"));                      var message2 = ExpectMsg<SubscribeAck>();                      message2.Subscribe.Topic.ShouldBe("topic2");                      message2.Subscribe.Group.ShouldBe("group2");                      message2.Subscribe.Ref.ShouldBe(u13);                  }' _second);                    AwaitCount(19);                  EnterBarrier("12-registered");                    RunOn(() =>                  {                      ChatUser("u12").Tell(new ShoutToGroup("topic2"' "hi"));                  }' _first);                    RunOn(() =>                  {                      ExpectMsg("hi");                      ExpectNoMsg(TimeSpan.FromSeconds(2));   // each group receive only one message                  }' _first' _second);                  EnterBarrier("12-published");                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group1"));                      ExpectMsg<UnsubscribeAck>(s => s.Unsubscribe.Topic == "topic2"                                                                             && s.Unsubscribe.Group == "group1"                                                                             && s.Unsubscribe.Ref.Equals(u12));                  }' _first);                    RunOn(() =>                  {                      var u12 = ChatUser("u12");                      u12.Tell(new ExitGroup("topic2"' "group2"));                      var message1 = ExpectMsg<UnsubscribeAck>();                      message1.Unsubscribe.Topic.ShouldBe("topic2");                      message1.Unsubscribe.Group.ShouldBe("group2");                      message1.Unsubscribe.Ref.ShouldBe(u12);                        var u13 = ChatUser("u13");                      u13.Tell(new ExitGroup("topic2"' "group2"));                      var message2 = ExpectMsg<UnsubscribeAck>();                      message2.Unsubscribe.Topic.ShouldBe("topic2");                      message2.Unsubscribe.Group.ShouldBe("group2");                      message2.Unsubscribe.Ref.ShouldBe(u13);                  }' _second);                  EnterBarrier("after-12");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  deltaBuckets.Length.ShouldBe(3);                  deltaBuckets.First(x => x.Owner == firstAddress).Content.Count.ShouldBe(10);                  deltaBuckets.First(x => x.Owner == secondAddress).Content.Count.ShouldBe(9);                  deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count.ShouldBe(2);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  deltaBuckets.Length.ShouldBe(3);                  deltaBuckets.First(x => x.Owner == firstAddress).Content.Count.ShouldBe(10);                  deltaBuckets.First(x => x.Owner == secondAddress).Content.Count.ShouldBe(9);                  deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count.ShouldBe(2);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  deltaBuckets.Length.ShouldBe(3);                  deltaBuckets.First(x => x.Owner == firstAddress).Content.Count.ShouldBe(10);                  deltaBuckets.First(x => x.Owner == secondAddress).Content.Count.ShouldBe(9);                  deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count.ShouldBe(2);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets = ExpectMsg<Delta>().Buckets;                  deltaBuckets.Length.ShouldBe(3);                  deltaBuckets.First(x => x.Owner == firstAddress).Content.Count.ShouldBe(10);                  deltaBuckets.First(x => x.Owner == secondAddress).Content.Count.ShouldBe(9);                  deltaBuckets.First(x => x.Owner == thirdAddress).Content.Count.ShouldBe(2);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: var many = 1010;
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: RunOn(() =>              {                  for (int i = 1; i <= many; i++)                  {                      Mediator.Tell(new Put(CreateChatUser("u" + (1000 + i))));                  }                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(new Dictionary<Address' long>()' isReplyToStatus: false));                  var deltaBuckets1 = ExpectMsg<Delta>().Buckets;                  deltaBuckets1.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets1.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets2 = ExpectMsg<Delta>().Buckets;                  deltaBuckets2.Sum(x => x.Content.Count).ShouldBe(500);                    Mediator.Tell(new Tools.PublishSubscribe.Internal.Status(deltaBuckets2.ToDictionary(b => b.Owner' b => b.Version)' isReplyToStatus: false));                  var deltaBuckets3 = ExpectMsg<Delta>().Buckets;                  deltaBuckets3.Sum(x => x.Content.Count).ShouldBe(10 + 9 + 2 + many - 500 - 500);              }' _first);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitCount(19 + many);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_transfer_delta_correctly,The following statement contains a magic number: Within(TimeSpan.FromSeconds(10)' () =>              {                  AwaitCount(19 + many);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_remove_entries_when_node_is_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Mediator.Tell(Count.Instance);                  var countBefore = ExpectMsg<int>();                    RunOn(() =>                  {                      TestConductor.Exit(_third' 0).Wait();                  }' _first);                  EnterBarrier("third-shutdown");                    // third had 2 entries u5 and u11' and those should be removed everywhere                  RunOn(() =>                  {                      AwaitCount(countBefore - 2);                  }' _first' _second);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_remove_entries_when_node_is_removed,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  Mediator.Tell(Count.Instance);                  var countBefore = ExpectMsg<int>();                    RunOn(() =>                  {                      TestConductor.Exit(_third' 0).Wait();                  }' _first);                  EnterBarrier("third-shutdown");                    // third had 2 entries u5 and u11' and those should be removed everywhere                  RunOn(() =>                  {                      AwaitCount(countBefore - 2);                  }' _first' _second);                  EnterBarrier("after-14");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_receive_proper_UnsubscribeAck_message,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var user = CreateChatUser("u111");                      var topic = "sample-topic-14";                      var s1 = new Subscribe(topic' user);                      Mediator.Tell(s1);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s1));                      var uns = new Unsubscribe(topic' user);                      Mediator.Tell(uns);                      ExpectMsg<UnsubscribeAck>(x => x.Unsubscribe.Equals(uns));                  }' _first);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_get_topics_after_simple_publish,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s1 = new Subscribe("topic_a1"' CreateChatUser("u14"));                      Mediator.Tell(s1);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s1));                        var s2 = new Subscribe("topic_a1"' CreateChatUser("u15"));                      Mediator.Tell(s2);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s2));                        var s3 = new Subscribe("topic_a2"' CreateChatUser("u16"));                      Mediator.Tell(s3);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s3));                    }' _first);                    RunOn(() =>                  {                      var s3 = new Subscribe("topic_a1"' CreateChatUser("u17"));                      Mediator.Tell(s3);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s3));                    }' _second);                  EnterBarrier("topics-registered");                    RunOn(() =>                  {                      Mediator.Tell(GetTopics.Instance);                      ExpectMsg<CurrentTopics>(                          x => x.Topics.Contains("topic_a1") && x.Topics.Contains("topic_a2"));                  }' _first);                    RunOn(() =>                  {                      // topics will eventually be replicated                      AwaitAssert(() =>                      {                          Mediator.Tell(GetTopics.Instance);                          var topics = ExpectMsg<CurrentTopics>().Topics;                            topics.Contains("topic_a1").ShouldBeTrue();                          topics.Contains("topic_a2").ShouldBeTrue();                      });                  }' _second);                  EnterBarrier("after-get-topics");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubMediatorSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubMediatorSpec.cs,DistributedPubSubMediator_must_remove_topic_subscribers_when_they_terminate,The following statement contains a magic number: Within(TimeSpan.FromSeconds(15)' () =>              {                  RunOn(() =>                  {                      var s1 = new Subscribe("topic_b1"' CreateChatUser("u18"));                      Mediator.Tell(s1);                      ExpectMsg<SubscribeAck>(x => x.Subscribe.Equals(s1));                        AwaitCountSubscribers(1' "topic_b1");                      ChatUser("u18").Tell(PoisonPill.Instance);                      AwaitCountSubscribers(0' "topic_b1");                  }' _first);                  EnterBarrier("after-15");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_startup_3_node_cluster,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  Join(_config.First' _config.First);                  Join(_config.Second' _config.First);                  Join(_config.Third' _config.First);                  EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.PublishSubscribe,DistributedPubSubRestartSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\PublishSubscribe\DistributedPubSubRestartSpec.cs,A_Cluster_with_DistributedPubSub_must_handle_restart_of_nodes_with_same_address,The following statement contains a magic number: Within(30.Seconds()' () =>              {                  Mediator.Tell(new Subscribe("topic1"' TestActor));                  ExpectMsg<SubscribeAck>();                  AwaitCount(3);                    RunOn(() =>                  {                      Mediator.Tell(new Publish("topic1"' "msg1"));                  }' _config.First);                  EnterBarrier("pub-msg1");                    ExpectMsg("msg1");                  EnterBarrier("got-msg1");                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.Second);                    RunOn(() =>                  {                      Mediator.Tell(DeltaCount.Instance);                      var oldDeltaCount = ExpectMsg<long>();                        var thirdAddress = Node(_config.Third).Address;                      TestConductor.Shutdown(_config.Third).Wait();                        Within(20.Seconds()' () =>                      {                          AwaitAssert(() =>                          {                              Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell(new Identify(null));                              ExpectMsg<ActorIdentity>(1.Seconds()).Subject.Should().NotBeNull();                          });                      });                        Sys.ActorSelection(new RootActorPath(thirdAddress) / "user" / "shutdown").Tell("shutdown");                        EnterBarrier("end");                        Mediator.Tell(DeltaCount.Instance);                      var deltaCount = ExpectMsg<long>();                      deltaCount.Should().Be(oldDeltaCount);                  }' _config.First);                    RunOn(() =>                  {                      Sys.WhenTerminated.Wait(10.Seconds());                      var newSystem = ActorSystem.Create(                          Sys.Name'                          ConfigurationFactory                              .ParseString($"akka.remote.dot-netty.tcp.port={Cluster.Get(Sys).SelfAddress.Port}")                              .WithFallback(Sys.Settings.Config));                        try                      {                          // don't join the old cluster                          Cluster.Get(newSystem).Join(Cluster.Get(newSystem).SelfAddress);                          var newMediator = DistributedPubSub.Get(newSystem).Mediator;                          var probe = CreateTestProbe(newSystem);                          newMediator.Tell(new Subscribe("topic2"' probe.Ref)' probe.Ref);                          probe.ExpectMsg<SubscribeAck>();                            // let them gossip' but Delta should not be exchanged                          probe.ExpectNoMsg(5.Seconds());                          newMediator.Tell(DeltaCount.Instance' probe.Ref);                          probe.ExpectMsg(0L);                            newSystem.ActorOf<DistributedPubSubRestartSpecConfig.Shutdown>("shutdown");                          newSystem.WhenTerminated.Wait(10.Seconds());                      }                      finally                      {                          newSystem.Terminate();                      }                  }' _config.Third);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    Join(_config.First' _config.First);                  AwaitMemberUp(memberProbe' _config.First);                  RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                  AwaitMemberUp(memberProbe' _config.Second' _config.First);                    Join(_config.Third' _config.First);                  AwaitMemberUp(memberProbe' _config.Third' _config.Second' _config.First);                    Join(_config.Fourth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Fifth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Sixth' _config.First);                  AwaitMemberUp(memberProbe' _config.Sixth' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    RunOn(() =>                  {                      Echo(_config.First).Tell("hello");                      ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address                          .Should()                          .Be(GetAddress(_config.First));                  }' _config.Controller);                    EnterBarrier("first-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    Join(_config.First' _config.First);                  AwaitMemberUp(memberProbe' _config.First);                  RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.First);                  EnterBarrier("first-started");                    Join(_config.Second' _config.First);                  AwaitMemberUp(memberProbe' _config.Second' _config.First);                    Join(_config.Third' _config.First);                  AwaitMemberUp(memberProbe' _config.Third' _config.Second' _config.First);                    Join(_config.Fourth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Fifth' _config.First);                  AwaitMemberUp(memberProbe' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    Join(_config.Sixth' _config.First);                  AwaitMemberUp(memberProbe' _config.Sixth' _config.Fifth' _config.Fourth' _config.Third' _config.Second' _config.First);                    RunOn(() =>                  {                      Echo(_config.First).Tell("hello");                      ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address                          .Should()                          .Be(GetAddress(_config.First));                  }' _config.Controller);                    EnterBarrier("first-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_take_over_when_three_oldest_nodes_crash_in_6_nodes_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(90)' () =>              {                    // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new WarningFilter()));                  EnterBarrier("logs-muted");                    Crash(_config.First' _config.Second' _config.Third);                  EnterBarrier("after-crash");                    RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.Fourth);                  EnterBarrier("fourth-active");                    RunOn(() =>                  {                      Echo(_config.Fourth).Tell("hello");                      var address = ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address;                      GetAddress(_config.Fourth).Should().Be(address);                  }' _config.Controller);                  EnterBarrier("fourth-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,ClusterSingletonManager_in_chaotic_cluster_should_take_over_when_three_oldest_nodes_crash_in_6_nodes_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(90)' () =>              {                    // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new WarningFilter()));                  EnterBarrier("logs-muted");                    Crash(_config.First' _config.Second' _config.Third);                  EnterBarrier("after-crash");                    RunOn(() =>                  {                      ExpectMsg<EchoStarted>();                  }' _config.Fourth);                  EnterBarrier("fourth-active");                    RunOn(() =>                  {                      Echo(_config.Fourth).Tell("hello");                      var address = ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3)).Path.Address;                      GetAddress(_config.Fourth).Should().Be(address);                  }' _config.Controller);                  EnterBarrier("fourth-verified");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,Crash,The following statement contains a magic number: RunOn(() =>              {                  foreach (var roleName in roles)                  {                      Log.Info("Shutdown [{0}]"' GetAddress(roleName));                      TestConductor.Exit(roleName' 0).Wait(TimeSpan.FromSeconds(10));                  }              }' _config.Controller);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>                  {                      memberProbe.ExpectMsg<ClusterEvent.MemberUp>(TimeSpan.FromSeconds(15)).Member.Address                          .Should()                          .Be(GetAddress(nodes.First()));                  }' nodes.Skip(1).ToArray());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerChaosSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerChaosSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>              {                  var roleNodes = nodes.Select(node => GetAddress(node));                    var addresses = memberProbe.ReceiveN(nodes.Length' TimeSpan.FromSeconds(15))                      .Where(x => x is ClusterEvent.MemberUp)                      .Select(x => (x as ClusterEvent.MemberUp).Member.Address);                    addresses.Except(roleNodes).Count().Should().Be(0);              }' nodes.First());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerDownedSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerDownedSpec.cs,ClusterSingletonManager_downing_must_startup_3_node,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerDownedSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerDownedSpec.cs,ClusterSingletonManager_downing_must_startup_3_node,The following statement contains a magic number: Within(15.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerDownedSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerDownedSpec.cs,ClusterSingletonManager_downing_must_stop_instance_when_member_is_downed,The following statement contains a magic number: RunOn(() =>              {                  TestConductor.Blackhole(_config.First' _config.Third' ThrottleTransportAdapter.Direction.Both).Wait();                  TestConductor.Blackhole(_config.Second' _config.Third' ThrottleTransportAdapter.Direction.Both).Wait();                    Within(15.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Unreachable.Count.Should().Be(1));                  });              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerDownedSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerDownedSpec.cs,ClusterSingletonManager_downing_must_stop_instance_when_member_is_downed,The following statement contains a magic number: RunOn(() =>              {                  // another blackhole so that second can't mark gossip as seen and thereby deferring shutdown of first                  TestConductor.Blackhole(_config.First' _config.Second' ThrottleTransportAdapter.Direction.Both).Wait();                  Cluster.Down(Node(_config.Second).Address);                  Cluster.Down(Cluster.SelfAddress);                  // singleton instance stopped' before failure detection of first-second                  ExpectMsg<ClusterSingletonManagerDownedSpecConfig.EchoStopped>(TimeSpan.FromSeconds(3));              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(5.Seconds()' () =>                  {                      ExpectMsg("preStart");                      _echoProxy.Value.Tell("hello");                      ExpectMsg<IActorRef>();                  });              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(2));                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(2));                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));                  });              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));                  });              }' _config.First' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(4));                  });              }' _config.First' _config.Second' _config.Third' _config.Fourth);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(4));                  });              }' _config.First' _config.Second' _config.Third' _config.Fourth);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(5));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(5));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Cluster.RegisterOnMemberRemoved(() => TestActor.Tell("MemberRemoved"));                  Cluster.Leave(Cluster.SelfAddress);                  ExpectMsg("stop"' 10.Seconds()); // from singleton manager' but will not stop immediately              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Cluster.RegisterOnMemberRemoved(() => TestActor.Tell("MemberRemoved"));                  Cluster.Leave(Cluster.SelfAddress);                  ExpectMsg("MemberRemoved"' 10.Seconds());               }' _config.Second' _config.Fourth);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Enumerable.Range(1' 3).ForEach(i =>                  {                      Thread.Sleep(1000);                      // singleton should not be started before old has been stopped                      Sys.ActorSelection("/user/echo/singleton").Tell(new Identify(i));                      ExpectMsg<ActorIdentity>(msg =>                      {                          // not started                          msg.MessageId.Should().Be(i);                          msg.Subject.ShouldBe(null);                      });                  });              }' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Enumerable.Range(1' 3).ForEach(i =>                  {                      Thread.Sleep(1000);                      // singleton should not be started before old has been stopped                      Sys.ActorSelection("/user/echo/singleton").Tell(new Identify(i));                      ExpectMsg<ActorIdentity>(msg =>                      {                          // not started                          msg.MessageId.Should().Be(i);                          msg.Subject.ShouldBe(null);                      });                  });              }' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection("/user/echo/singleton").Tell(PoisonPill.Instance);                  ExpectMsg("postStop");                   // CoordinatedShutdown makes sure that singleton actors are stopped before Cluster shutdown                  ExpectMsg("MemberRemoved"' 10.Seconds());                   ExpectTerminated(_echoProxy.Value' 10.Seconds());              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Sys.ActorSelection("/user/echo/singleton").Tell(PoisonPill.Instance);                  ExpectMsg("postStop");                   // CoordinatedShutdown makes sure that singleton actors are stopped before Cluster shutdown                  ExpectMsg("MemberRemoved"' 10.Seconds());                   ExpectTerminated(_echoProxy.Value' 10.Seconds());              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeave2Spec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeave2Spec.cs,Leaving_ClusterSingletonManager_with_two_nodes_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var p = CreateTestProbe();                  var firstAddress = Node(_config.First).Address;                  p.Within(15.Seconds()' () =>                  {                      p.AwaitAssert(() =>                      {                          _echoProxy.Value.Tell("hello2"' p.Ref);                          p.ExpectMsg<IActorRef>(1.Seconds()).Path.Address.Should().NotBe(firstAddress);                      });                  });                }' _config.Third' _config.Fifth);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(5.Seconds()' () =>                  {                      ExpectMsg("preStart");                      _echoProxy.Value.Tell("hello");                      ExpectMsg<IActorRef>();                  });              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(2));                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  Within(10.Seconds()' () =>                  {                      AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(2));                  });              }' _config.First' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: Within(10.Seconds()' () =>              {                  AwaitAssert(() => Cluster.State.Members.Count(m => m.Status == MemberStatus.Up).Should().Be(3));              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var t = TestActor;                  Cluster.RegisterOnMemberRemoved(() => t.Tell("MemberRemoved"));                  ExpectMsg("stop"' 10.Seconds());                  ExpectMsg("postStop");                  // CoordinatedShutdown makes sure that singleton actors are                  // stopped before Cluster shutdown                  ExpectMsg("MemberRemoved");              }' _config.First);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var p = CreateTestProbe();                  var firstAddress = Node(_config.First).Address;                  p.Within(15.Seconds()' () =>                  {                      p.AwaitAssert(() =>                      {                          _echoProxy.Value.Tell("hello2"' p.Ref);                          p.ExpectMsg<IActorRef>(1.Seconds()).Path.Address.Should().NotBe(firstAddress);                      });                  });              }' _config.Second' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var t = TestActor;                  Cluster.RegisterOnMemberRemoved(() => t.Tell("MemberRemoved"));                  Cluster.Leave(Node(_config.Second).Address);                  ExpectMsg("stop"' 15.Seconds());                  ExpectMsg("postStop");                  ExpectMsg("MemberRemoved");                  ExpectTerminated(_echoProxy.Value' TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var t = TestActor;                  Cluster.RegisterOnMemberRemoved(() => t.Tell("MemberRemoved"));                  Cluster.Leave(Node(_config.Second).Address);                  ExpectMsg("stop"' 15.Seconds());                  ExpectMsg("postStop");                  ExpectMsg("MemberRemoved");                  ExpectTerminated(_echoProxy.Value' TimeSpan.FromSeconds(10));              }' _config.Second);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var t = TestActor;                  Cluster.RegisterOnMemberRemoved(() => t.Tell("MemberRemoved"));                  Cluster.Leave(Node(_config.Third).Address);                  ExpectMsg("stop"' 10.Seconds());                  ExpectMsg("postStop");                  ExpectMsg("MemberRemoved");                  ExpectTerminated(_echoProxy.Value' TimeSpan.FromSeconds(10));              }' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerLeaveSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerLeaveSpec.cs,Leaving_ClusterSingletonManager_must_handover_to_new_instance,The following statement contains a magic number: RunOn(() =>              {                  var t = TestActor;                  Cluster.RegisterOnMemberRemoved(() => t.Tell("MemberRemoved"));                  Cluster.Leave(Node(_config.Third).Address);                  ExpectMsg("stop"' 10.Seconds());                  ExpectMsg("postStop");                  ExpectMsg("MemberRemoved");                  ExpectTerminated(_echoProxy.Value' TimeSpan.FromSeconds(10));              }' _config.Third);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>                  {                      memberProbe.ExpectMsg<ClusterEvent.MemberUp>(TimeSpan.FromSeconds(15)).Member.Address                          .Should()                          .Be(Node(nodes.First()).Address);                  }' nodes.Skip(1).ToArray());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,AwaitMemberUp,The following statement contains a magic number: RunOn(() =>              {                  var roleNodes = nodes.Select(node => Node(node).Address);                    var addresses = memberProbe.ReceiveN(nodes.Length' TimeSpan.FromSeconds(15))                      .Where(x => x is ClusterEvent.MemberUp)                      .Select(x => (x as ClusterEvent.MemberUp).Member.Address);                    addresses.Except(roleNodes).Count().Should().Be(0);              }' nodes.First());
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,VerifyProxyMsg,The following statement contains a magic number: RunOn(() =>              {                  // make sure that the proxy has received membership changes                  // and points to the current singleton                  var p = CreateTestProbe();                  var oldestAddress = Node(oldest).Address;                  Within(TimeSpan.FromSeconds(10)' () =>                  {                      AwaitAssert(() =>                      {                          Sys.ActorSelection("/user/consumerProxy").Tell(Consumer.Ping.Instance' p.Ref);                          p.ExpectMsg<Consumer.Pong>(TimeSpan.FromSeconds(1));                          var replyFromAddress = p.LastSender.Path.Address;                          if (oldest.Equals(proxyNode))                              replyFromAddress.HasLocalScope.Should().BeTrue();                          else                              replyFromAddress.Should().Be(oldestAddress);                      });                  });                    // send a real message                  Sys.ActorSelection("/user/consumerProxy").Tell(msg);              }' proxyNode);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,VerifyMsg,The following statement contains a magic number: RunOn(() =>              {                  ExpectMsg(msg' TimeSpan.FromSeconds(5));              }' oldest);
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_startup_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  var memberProbe = CreateTestProbe();                  Cluster.Subscribe(memberProbe.Ref' new[] { typeof(ClusterEvent.MemberUp) });                  memberProbe.ExpectMsg<ClusterEvent.CurrentClusterState>();                    RunOn(() =>                  {                      // watch that it is not terminated' which would indicate misbehaviour                      Watch(Sys.ActorOf(Props.Create<PointToPointChannel>()' "queue"));                  }' _controller);                  EnterBarrier("queue-started");                    Join(_first' _first);                  AwaitMemberUp(memberProbe' _first);                  VerifyRegistration(_first);                  VerifyMsg(_first' Msg);                    // join the observer node as well' which should not influence since it doesn't have the "worker" role                  Join(_observer' _first);                  AwaitMemberUp(memberProbe' _observer' _first);                  VerifyProxyMsg(_first' _first' Msg);                    Join(_second' _first);                  AwaitMemberUp(memberProbe' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _second' Msg);                    Join(_third' _first);                  AwaitMemberUp(memberProbe' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _third' Msg);                    Join(_fourth' _first);                  AwaitMemberUp(memberProbe' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _fourth' Msg);                    Join(_fifth' _first);                  AwaitMemberUp(memberProbe' _fifth' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _fifth' Msg);                    Join(_sixth' _first);                  AwaitMemberUp(memberProbe' _sixth' _fifth' _fourth' _third' _second' _observer' _first);                  VerifyMsg(_first' Msg);                  VerifyProxyMsg(_first' _sixth' Msg);                    EnterBarrier("after-1");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_let_the_proxy_messages_to_the_singleton_in_a_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  VerifyProxyMsg(_first' _first' Msg);                  VerifyProxyMsg(_first' _second' Msg);                  VerifyProxyMsg(_first' _third' Msg);                  VerifyProxyMsg(_first' _fourth' Msg);                  VerifyProxyMsg(_first' _fifth' Msg);                  VerifyProxyMsg(_first' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_handover_when_oldest_leaves_in_6_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(30)' () =>              {                  var leaveNode = _first;                    RunOn(() =>                  {                      Cluster.Leave(GetAddress(leaveNode));                  }' leaveNode);                    VerifyRegistration(_second);                  VerifyMsg(_second' Msg);                  VerifyProxyMsg(_second' _second' Msg);                  VerifyProxyMsg(_second' _third' Msg);                  VerifyProxyMsg(_second' _fourth' Msg);                  VerifyProxyMsg(_second' _fifth' Msg);                  VerifyProxyMsg(_second' _sixth' Msg);                    RunOn(() =>                  {                      Sys.ActorSelection("/user/consumer").Tell(new Identify("singleton")' _identifyProbe.Ref);                      _identifyProbe.ExpectMsg<ActorIdentity>(i =>                      {                          if (i.MessageId.Equals("singleton") && i.Subject != null)                          {                              Watch(i.Subject);                              ExpectTerminated(i.Subject);                          }                      });                  }' leaveNode);                  EnterBarrier("after-leave");              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_5_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  // mute logging of deadLetters during shutdown of systems                  if (!Log.IsDebugEnabled)                      Sys.EventStream.Publish(new Mute(new DeadLettersFilter(new PredicateMatcher(s => true)' new PredicateMatcher(s => true))));                  EnterBarrier("logs-muted");                    Crash(_second);                  VerifyRegistration(_third);                  VerifyMsg(_third' Msg);                  VerifyProxyMsg(_third' _third' Msg);                  VerifyProxyMsg(_third' _fourth' Msg);                  VerifyProxyMsg(_third' _fifth' Msg);                  VerifyProxyMsg(_third' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_two_oldest_crash_in_3_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Crash(_third' _fourth);                  VerifyRegistration(_fifth);                  VerifyMsg(_fifth' Msg);                  VerifyProxyMsg(_fifth' _fifth' Msg);                  VerifyProxyMsg(_fifth' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerSpec.cs,ClusterSingletonManager_should_takeover_when_oldest_crashes_in_2_node_cluster,The following statement contains a magic number: Within(TimeSpan.FromSeconds(60)' () =>              {                  Crash(_fifth);                  VerifyRegistration(_sixth);                  VerifyMsg(_sixth' Msg);                  VerifyProxyMsg(_sixth' _sixth' Msg);              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: Within(TimeSpan.FromSeconds(7)' () =>              {                  AwaitAssert(() =>                  {                      var members = Cluster.ReadView.State.Members;                      members.Count.Should().Be(3);                      members.All(c => c.Status == MemberStatus.Up).Should().BeTrue();                  });              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: Within(TimeSpan.FromSeconds(7)' () =>              {                  AwaitAssert(() =>                  {                      var members = Cluster.ReadView.State.Members;                      members.Count.Should().Be(3);                      members.All(c => c.Status == MemberStatus.Up).Should().BeTrue();                  });              });
Magic Number,Akka.Cluster.Tools.Tests.MultiNode.Singleton,ClusterSingletonManagerStartupSpec,C:\research\architectureSmells\repos\rogeralsing_Pigeon\src\contrib\cluster\Akka.Cluster.Tools.Tests.MultiNode\Singleton\ClusterSingletonManagerStartupSpec.cs,Startup_of_ClusterSingleton_should_be_quick,The following statement contains a magic number: ExpectMsg<IActorRef>(TimeSpan.FromSeconds(3));
