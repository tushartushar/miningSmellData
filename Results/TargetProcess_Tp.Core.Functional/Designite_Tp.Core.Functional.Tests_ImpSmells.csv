Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectManyTest,The length of the statement  "			var result = collection.SelectMany(x => x == "1" ? Maybe.Just(1) : Maybe.Nothing' (s' i) => string.Format("{0}_{1}"' s' i)); " is 124.
Long Statement,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The length of the statement  "				var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1)); " is 120.
Long Statement,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The length of the statement  "				var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1)); " is 120.
Long Statement,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,JustNotEqualDiffTypesTest,The length of the statement  "			// Unfortunately' R# has a bug which breaks the inspection here without introducing the separate variable (http://youtrack.jetbrains.com/issue/RSRP-393174). " is 156.
Long Statement,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrThrowTest,The length of the statement  "			Assert.That(() => n.GetOrThrow("Some message")' Throws.Exception.Message.EqualTo("Some message").And.InstanceOf<InvalidOperationException>()); " is 142.
Magic Number,Tp.Core.Functional.Tests,DictionaryExtensionsTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\DictionaryExtensionsTests.cs,GetValueTest,The following statement contains a magic number: AssertNothing(d.GetValue(2));
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,SwitchTest,The following statement contains a magic number: Assert.AreEqual(2' assertCount);
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,SwitchTest,The following statement contains a magic number: var result1 = left.Switch(i => i * 2' Fail<string' int>);
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,SwitchTest,The following statement contains a magic number: Assert.AreEqual(2' result1);
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,SwitchTest,The following statement contains a magic number: var result2 = right.Switch(Fail<int' int>' s => 5);
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,SwitchTest,The following statement contains a magic number: Assert.AreEqual(5' result2);
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,IfTest,The following statement contains a magic number: Assert.AreEqual(2' eitherTrue.Switch(i => i * 2' Fail<string' int>));
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,IfTest,The following statement contains a magic number: Assert.AreEqual(2' eitherTrue.Switch(i => i * 2' Fail<string' int>));
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,IfTest,The following statement contains a magic number: Assert.AreEqual(5' eitherFalse.Switch(Fail<int' int>' s => 5));
Magic Number,Tp.Core.Functional.Tests,EihterTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\EihterTests.cs,IfTest,The following statement contains a magic number: Assert.AreEqual(5' eitherFalse.Switch(Fail<int' int>' s => 5));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,FirstOrNothingTest,The following statement contains a magic number: var nonEmpty = new[] { 1' 2' 1' 2 };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,FirstOrNothingTest,The following statement contains a magic number: var nonEmpty = new[] { 1' 2' 1' 2 };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,FirstOrNothingTest,The following statement contains a magic number: AssertSome(nonEmpty.FirstOrNothing(x => x == 2)' 2);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,FirstOrNothingTest,The following statement contains a magic number: AssertSome(nonEmpty.FirstOrNothing(x => x == 2)' 2);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SingleOrNothingTest,The following statement contains a magic number: var nonEmpty = new[] { 1' 2' 1' 2 };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SingleOrNothingTest,The following statement contains a magic number: var nonEmpty = new[] { 1' 2' 1' 2 };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SingleOrNothingTest,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => nonEmpty.SingleOrNothing(x => x == 2' throwOnSeveral: true));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SingleOrNothingTest,The following statement contains a magic number: AssertNothing(nonEmpty.SingleOrNothing(x => x == 2' throwOnSeveral: false));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SequenceTest,The following statement contains a magic number: var withoutNothing = new[] { Maybe.Just(1)' Maybe.Just(2) };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SequenceTest,The following statement contains a magic number: AssertSome(withoutNothing.Sequence()' new[] { 1' 2 });
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,ChooseTest,The following statement contains a magic number: var withoutNothing = new[] { Maybe.Just(1)' Maybe.Just(2) };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,ChooseTest,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2 }' withoutNothing.Choose());
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,ChooseWithSelectorTest,The following statement contains a magic number: var collection = new[] {1' 2' 3};
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,ChooseWithSelectorTest,The following statement contains a magic number: var collection = new[] {1' 2' 3};
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? Maybe.Just(2) : Maybe.Nothing' (s' i) => string.Format("{0}_{1}"' s' i));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var q = from x in some  						from m in x == 1 ? Maybe.Just(2) : Maybe.Nothing  						select x + "_" + m;
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var result = nothing.SelectMany(x => x == 1 ? Maybe.Just(2) : Maybe.Nothing'  					(s' i) => string.Format("{0}_{1}"' s' i));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var q = from x in nothing  						from m in x == 1 ? Maybe.Just(2) : Maybe.Nothing  						select x + "_" + m;
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var some = Maybe.Just(2);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? Maybe.Just(2) : Maybe.Nothing'  					(s' i) => string.Format("{0}_{1}"' s' i));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany2Test,The following statement contains a magic number: var q = from x in some  						from m in x == 1 ? Maybe.Just(2) : Maybe.Nothing  						select x + "_" + m;
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var result = some.SelectMany(x => x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }' (i' i1) => string.Format("{0}_{1}"' i' i1));
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,SelectMany3Test,The following statement contains a magic number: var q = from x in some  						from y in x == 1 ? new[] { 1' 2 } : new[] { 2' 3 }  						select string.Format("{0}_{1}"' x' y);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,BindTest,The following statement contains a magic number: var collection = new[] { Maybe.Just(1)' Maybe.Nothing' Maybe.Just(2) };
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,BindTest,The following statement contains a magic number: var result = collection.Bind(x => x == 1 ? Maybe.Just(3) : Maybe.Nothing);
Magic Number,Tp.Core.Functional.Tests,MaybeEnumerableTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeEnumerableTests.cs,BindTest,The following statement contains a magic number: Assert.AreEqual(result' new[] { Maybe.Just(3)' Maybe.Nothing' Maybe<int>.Nothing });
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,JustEqualTest,The following statement contains a magic number: Maybe<int> maybeInt3 = 2;
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,JustNotEqualTest,The following statement contains a magic number: Maybe<int> maybeInt2 = 2;
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetEitherTestCases,The following statement contains a magic number: yield return new TestCaseData(Maybe.Just(5)' Maybe<int>.Nothing)  				.Returns(Maybe.Just("Left 5"))  				.SetDescription("Should use the left branch if it has a value");
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetEitherTestCases,The following statement contains a magic number: yield return new TestCaseData(Maybe.Just(5)' Maybe.Just(7))  				.Returns(Maybe.Just("Left 5"))  				.SetDescription("Should use the left branch with a value even if the right one has a value");
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetEitherTestCases,The following statement contains a magic number: yield return new TestCaseData(Maybe.Just(5)' Maybe.Just(7))  				.Returns(Maybe.Just("Left 5"))  				.SetDescription("Should use the left branch with a value even if the right one has a value");
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetEitherTestCases,The following statement contains a magic number: yield return new TestCaseData(Maybe<int>.Nothing' Maybe.Just(7))  				.Returns(Maybe.Just("Right 7"))  				.SetDescription("Should use the right branch if it has a value");
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,EitherShouldShortCircuitEvenIfLeftBranchReturnsNothing,The following statement contains a magic number: var left = Maybe.Just(5);
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,SelectTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(1)' Maybe.Just(2).Select(x => x / 2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,SelectTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(1)' Maybe.Just(2).Select(x => x / 2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,WhereTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Nothing' Maybe.Just(1).Where(x => x == 2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrElseTest,The following statement contains a magic number: Assert.AreEqual(2' Maybe<int>.Nothing.GetOrElse(() => 2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrElseTest,The following statement contains a magic number: Assert.AreEqual(2' Maybe<int>.Nothing.GetOrElse(() => 2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrDefaultTest,The following statement contains a magic number: Assert.AreEqual(1' Maybe.Just(1).GetOrDefault(2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrDefaultTest,The following statement contains a magic number: Assert.AreEqual(2' Maybe<int>.Nothing.GetOrDefault(2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,GetOrDefaultTest,The following statement contains a magic number: Assert.AreEqual(2' Maybe<int>.Nothing.GetOrDefault(2));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,OrElseTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(2)' Maybe<int>.Nothing.OrElse(() => Maybe.Just(2)));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,OrElseTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(2)' Maybe<int>.Nothing.OrElse(() => Maybe.Just(2)));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,BindTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(2)' Maybe.Just(1).Bind(x => Maybe.Just(x * 2)));
Magic Number,Tp.Core.Functional.Tests,MaybeTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\MaybeTests.cs,BindTest,The following statement contains a magic number: Assert.AreEqual(Maybe.Just(2)' Maybe.Just(1).Bind(x => Maybe.Just(x * 2)));
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,SelectTest,The following statement contains a magic number: Assert.AreEqual(2' i.Select(a => a * 2));
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,SelectTest,The following statement contains a magic number: Assert.AreEqual(2' i.Select(a => a * 2));
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,BindTest,The following statement contains a magic number: Assert.AreEqual(2' i.Bind(a => (int?)a * 2));
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,BindTest,The following statement contains a magic number: Assert.AreEqual(2' i.Bind(a => (int?)a * 2));
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,ChooseTest,The following statement contains a magic number: var collection = new int?[] { 1' 2' null' 3 };
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,ChooseTest,The following statement contains a magic number: var collection = new int?[] { 1' 2' null' 3 };
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,ChooseTest,The following statement contains a magic number: Assert.AreEqual(new int?[] { 2' 3 }' result);
Magic Number,Tp.Core.Functional.Tests,NullableExtensionTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\NullableExtensionTests.cs,ChooseTest,The following statement contains a magic number: Assert.AreEqual(new int?[] { 2' 3 }' result);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,WhereTest,The following statement contains a magic number: AssertFailure<ArgumentOutOfRangeException>(_success.Where(x => x == 2));
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,SelectManyTest,The following statement contains a magic number: AssertSuccess(_success.SelectMany(x => Try.Success(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,SelectManyTest,The following statement contains a magic number: AssertSuccess(_success.SelectMany(x => Try.Success(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,SelectTest,The following statement contains a magic number: AssertSuccess(_success.Select(x => x * 2)' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,SelectTest,The following statement contains a magic number: AssertSuccess(_success.Select(x => x * 2)' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTest,The following statement contains a magic number: AssertSuccess(_failure.Recover(e =>  			{  				Assert.IsInstanceOf<TestException>(e);  				return 5;  			})' 5);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTest,The following statement contains a magic number: AssertSuccess(_failure.Recover(e =>  			{  				Assert.IsInstanceOf<TestException>(e);  				return 5;  			})' 5);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTest,The following statement contains a magic number: AssertSuccess(_failure.Recover(e =>  			{  				Assert.IsInstanceOf<TestException>(e);  				return Try.Success(5);  			})' 5);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTest,The following statement contains a magic number: AssertSuccess(_failure.Recover(e =>  			{  				Assert.IsInstanceOf<TestException>(e);  				return Try.Success(5);  			})' 5);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,SwitchTest,The following statement contains a magic number: Assert.AreEqual(2' assertCounter);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_success.Recover<TestException>(e => Maybe.Just(2))' 1);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_success.Recover<ArgumentException>(e => Maybe.Just(2))' 1);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_success.Recover<Exception>(e => Maybe.Just(2))' 1);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<TestException>(e => Maybe.Just(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<TestException>(e => Maybe.Just(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertFailure<TestException>(_failure.Recover<ArgumentException>(e => Maybe.Just(2)));
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<Exception>(e => Maybe.Just(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<Exception>(e => Maybe.Just(2))' 2);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<ArgumentException>(e => 2)  				.Recover<TestException>(e => 3)' 3);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<ArgumentException>(e => 2)  				.Recover<TestException>(e => 3)' 3);
Magic Number,Tp.Core.Functional.Tests,TryTests,D:\research\architectureSmells\repos1\TargetProcess_Tp.Core.Functional\src\Tp.Core.Functional.Tests\TryTests.cs,RecoverTypedTest,The following statement contains a magic number: AssertSuccess(_failure.Recover<ArgumentException>(e => 2)  				.Recover<TestException>(e => 3)' 3);
