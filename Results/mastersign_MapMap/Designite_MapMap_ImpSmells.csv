Implementation smell,Namespace,Class,File,Method,Description
Complex Method,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,Initialize,Cyclomatic complexity of the method is 27
Complex Method,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,Cyclomatic complexity of the method is 17
Complex Method,de.mastersign.mapmap,CaptureSettings,C:\repos\mastersign_MapMap\CaptureSettings.cs,Parse,Cyclomatic complexity of the method is 66
Complex Method,de.mastersign.mapmap,CaptureSettings,C:\repos\mastersign_MapMap\CaptureSettings.cs,BuildCommandLineArguments,Cyclomatic complexity of the method is 21
Long Parameter List,de.mastersign.mapmap,MouseController,C:\repos\mastersign_MapMap\MouseController.cs,mouse_event,The method has 5 parameters.
Long Statement,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The length of the statement  "		var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * MouseDragStepsX.Count () + (TilesY - 1) * MouseDragStepsY.Count ()) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0)); " is 259.
Long Statement,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The length of the statement  "		var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * KeyboardDragStepsX + (TilesY - 1) * KeyboardDragStepsY) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0)); " is 247.
Long Statement,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The length of the statement  "		MessageBox.Show (this' "The capturing was interrupted by the user. The result is incomplete."' "Captureing canceled"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 164.
Long Statement,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnCreateShortcut_Click,The length of the statement  "	if (MessageBox.Show (this' "Would you activate the automatic start for the shortcut?"' "Automatic start"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 178.
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The following statement contains a magic number: if (radMouseControl.Checked) {  	var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * MouseDragStepsX.Count () + (TilesY - 1) * MouseDragStepsY.Count ()) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0));  	lblTotalTime.Text = totalTime.ToString (@"h\:mm\:ss");  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The following statement contains a magic number: if (radMouseControl.Checked) {  	var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * MouseDragStepsX.Count () + (TilesY - 1) * MouseDragStepsY.Count ()) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0));  	lblTotalTime.Text = totalTime.ToString (@"h\:mm\:ss");  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The following statement contains a magic number: if (radKeyboardControl.Checked) {  	var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * KeyboardDragStepsX + (TilesY - 1) * KeyboardDragStepsY) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0));  	lblTotalTime.Text = totalTime.ToString (@"h\:mm\:ss");  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,ValueChangeHandler,The following statement contains a magic number: if (radKeyboardControl.Checked) {  	var totalTime = new TimeSpan (0' 0' 0' (int)Math.Ceiling (((TilesX * TilesY * TileWaitTime) + ((TilesX - 1) * 2 * (TilesY - 1) * KeyboardDragStepsX + (TilesY - 1) * KeyboardDragStepsY) * DragStepTime + PrestartWaitTime + StartWaitTime) / 1000.0));  	lblTotalTime.Text = totalTime.ToString (@"h\:mm\:ss");  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (!IsCanceled) {  	Cursor.Position = new Point (dr.X + dr.Width / 2' dr.Y + dr.Height / 2);  	MouseController.Click ();  	Application.DoEvents ();  	Thread.Sleep (StartWaitTime);  	Application.DoEvents ();  	if (!IsCanceled) {  		var reverse = true;  		for (var ty = 0; ty < TilesY; ty++) {  			var py = ty * dr.Height;  			for (var tx = 0; tx < TilesX; tx++) {  				var px = reverse ? tx * dr.Width : (TilesX - 1 - tx) * dr.Width;  				Thread.Sleep (TileWaitTime);  				if (IsCanceled)  					break;  				CaptureMapRegion (bmp' px' py);  				if (!automatic) {  					UpdatePreview (bmp);  				}  				if (tx == TilesX - 1)  					continue;  				DragX (reverse);  				if (IsCanceled)  					break;  			}  			if (IsCanceled)  				break;  			reverse = !reverse;  			if (ty == TilesY - 1)  				continue;  			DragY ();  			if (IsCanceled)  				break;  		}  		if (chkReturnToStart.Checked) {  			if (TilesY % 2 == 1) {  				for (var tx = 0; tx < TilesX - 1; tx++) {  					DragX (false);  				}  			}  			for (var ty = 0; ty < TilesY - 1; ty++) {  				DragY (false);  			}  		}  		bitmap = bmp;  		UpdatePreview (bitmap);  		btnSave.Enabled = true;  	}  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (!IsCanceled) {  	Cursor.Position = new Point (dr.X + dr.Width / 2' dr.Y + dr.Height / 2);  	MouseController.Click ();  	Application.DoEvents ();  	Thread.Sleep (StartWaitTime);  	Application.DoEvents ();  	if (!IsCanceled) {  		var reverse = true;  		for (var ty = 0; ty < TilesY; ty++) {  			var py = ty * dr.Height;  			for (var tx = 0; tx < TilesX; tx++) {  				var px = reverse ? tx * dr.Width : (TilesX - 1 - tx) * dr.Width;  				Thread.Sleep (TileWaitTime);  				if (IsCanceled)  					break;  				CaptureMapRegion (bmp' px' py);  				if (!automatic) {  					UpdatePreview (bmp);  				}  				if (tx == TilesX - 1)  					continue;  				DragX (reverse);  				if (IsCanceled)  					break;  			}  			if (IsCanceled)  				break;  			reverse = !reverse;  			if (ty == TilesY - 1)  				continue;  			DragY ();  			if (IsCanceled)  				break;  		}  		if (chkReturnToStart.Checked) {  			if (TilesY % 2 == 1) {  				for (var tx = 0; tx < TilesX - 1; tx++) {  					DragX (false);  				}  			}  			for (var ty = 0; ty < TilesY - 1; ty++) {  				DragY (false);  			}  		}  		bitmap = bmp;  		UpdatePreview (bitmap);  		btnSave.Enabled = true;  	}  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (!IsCanceled) {  	Cursor.Position = new Point (dr.X + dr.Width / 2' dr.Y + dr.Height / 2);  	MouseController.Click ();  	Application.DoEvents ();  	Thread.Sleep (StartWaitTime);  	Application.DoEvents ();  	if (!IsCanceled) {  		var reverse = true;  		for (var ty = 0; ty < TilesY; ty++) {  			var py = ty * dr.Height;  			for (var tx = 0; tx < TilesX; tx++) {  				var px = reverse ? tx * dr.Width : (TilesX - 1 - tx) * dr.Width;  				Thread.Sleep (TileWaitTime);  				if (IsCanceled)  					break;  				CaptureMapRegion (bmp' px' py);  				if (!automatic) {  					UpdatePreview (bmp);  				}  				if (tx == TilesX - 1)  					continue;  				DragX (reverse);  				if (IsCanceled)  					break;  			}  			if (IsCanceled)  				break;  			reverse = !reverse;  			if (ty == TilesY - 1)  				continue;  			DragY ();  			if (IsCanceled)  				break;  		}  		if (chkReturnToStart.Checked) {  			if (TilesY % 2 == 1) {  				for (var tx = 0; tx < TilesX - 1; tx++) {  					DragX (false);  				}  			}  			for (var ty = 0; ty < TilesY - 1; ty++) {  				DragY (false);  			}  		}  		bitmap = bmp;  		UpdatePreview (bitmap);  		btnSave.Enabled = true;  	}  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: Cursor.Position = new Point (dr.X + dr.Width / 2' dr.Y + dr.Height / 2);  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: Cursor.Position = new Point (dr.X + dr.Width / 2' dr.Y + dr.Height / 2);  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (!IsCanceled) {  	var reverse = true;  	for (var ty = 0; ty < TilesY; ty++) {  		var py = ty * dr.Height;  		for (var tx = 0; tx < TilesX; tx++) {  			var px = reverse ? tx * dr.Width : (TilesX - 1 - tx) * dr.Width;  			Thread.Sleep (TileWaitTime);  			if (IsCanceled)  				break;  			CaptureMapRegion (bmp' px' py);  			if (!automatic) {  				UpdatePreview (bmp);  			}  			if (tx == TilesX - 1)  				continue;  			DragX (reverse);  			if (IsCanceled)  				break;  		}  		if (IsCanceled)  			break;  		reverse = !reverse;  		if (ty == TilesY - 1)  			continue;  		DragY ();  		if (IsCanceled)  			break;  	}  	if (chkReturnToStart.Checked) {  		if (TilesY % 2 == 1) {  			for (var tx = 0; tx < TilesX - 1; tx++) {  				DragX (false);  			}  		}  		for (var ty = 0; ty < TilesY - 1; ty++) {  			DragY (false);  		}  	}  	bitmap = bmp;  	UpdatePreview (bitmap);  	btnSave.Enabled = true;  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (chkReturnToStart.Checked) {  	if (TilesY % 2 == 1) {  		for (var tx = 0; tx < TilesX - 1; tx++) {  			DragX (false);  		}  	}  	for (var ty = 0; ty < TilesY - 1; ty++) {  		DragY (false);  	}  }  
Magic Number,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,btnStart_Click,The following statement contains a magic number: if (TilesY % 2 == 1) {  	for (var tx = 0; tx < TilesX - 1; tx++) {  		DragX (false);  	}  }  
Missing Default,de.mastersign.mapmap,SettingsForm,C:\repos\mastersign_MapMap\SettingsForm.cs,Initialize,The following switch statement is missing a default case: switch (ss.ControlMode.Value) {  case CaptureSettings.ControlModes.Mouse:  	radMouseControl.Checked = true;  	break;  case CaptureSettings.ControlModes.Keyboard:  	radKeyboardControl.Checked = true;  	break;  }  
Missing Default,de.mastersign.mapmap,CaptureSettings,C:\repos\mastersign_MapMap\CaptureSettings.cs,Parse,The following switch statement is missing a default case: switch (args [pos - 1]) {  case "crt":  	CaptureRegionTop = ParseInt32 (args' ref pos) ?? CaptureRegionTop;  	break;  case "crr":  	CaptureRegionRight = ParseInt32 (args' ref pos) ?? CaptureRegionRight;  	break;  case "crb":  	CaptureRegionBottom = ParseInt32 (args' ref pos) ?? CaptureRegionBottom;  	break;  case "crl":  	CaptureRegionLeft = ParseInt32 (args' ref pos) ?? CaptureRegionLeft;  	break;  case "tx":  	TilesX = ParseInt32 (args' ref pos) ?? TilesX;  	break;  case "ty":  	TilesY = ParseInt32 (args' ref pos) ?? TilesY;  	break;  case "cm":  	ControlMode = ParseEnum<ControlModes> (args' ref pos) ?? ControlMode;  	break;  case "drt":  	MouseDragRegionTop = ParseInt32 (args' ref pos) ?? MouseDragRegionTop;  	break;  case "drr":  	MouseDragRegionRight = ParseInt32 (args' ref pos) ?? MouseDragRegionRight;  	break;  case "drb":  	MouseDragRegionBottom = ParseInt32 (args' ref pos) ?? MouseDragRegionBottom;  	break;  case "drl":  	MouseDragRegionLeft = ParseInt32 (args' ref pos) ?? MouseDragRegionLeft;  	break;  case "dss":  	MouseDragStepSize = ParseInt32 (args' ref pos) ?? MouseDragStepSize;  	break;  case "ds":  	MouseDragStepSize = ParseInt32 (args' ref pos) ?? MouseDragStepSize;  	break;  case "ksx":  	KeyboardStepSizeX = ParseInt32 (args' ref pos) ?? KeyboardStepSizeX;  	break;  case "ksy":  	KeyboardStepSizeY = ParseInt32 (args' ref pos) ?? KeyboardStepSizeY;  	break;  case "dls":  	StepWaitTime = ParseDecimal (args' ref pos) ?? StepWaitTime;  	break;  case "dlt":  	TileWaitTime = ParseDecimal (args' ref pos) ?? TileWaitTime;  	break;  case "dl1":  	PrestartWaitTime = ParseDecimal (args' ref pos) ?? PrestartWaitTime;  	break;  case "dl2":  	StartWaitTime = ParseDecimal (args' ref pos) ?? StartWaitTime;  	break;  case "rts":  	ReturnToStart = ParseBoolean (args' ref pos) ?? ReturnToStart;  	break;  case "tp":  	TargetPath = ParseString (args' ref pos) ?? TargetPath;  	break;  case "auto":  	Automatic = ParseBoolean (args' ref pos) ?? Automatic;  	break;  }  
