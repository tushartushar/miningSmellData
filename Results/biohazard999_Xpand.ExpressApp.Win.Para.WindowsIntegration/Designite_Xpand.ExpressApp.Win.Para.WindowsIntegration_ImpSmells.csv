Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Xpand.ExpressApp.Win.Para.WindowsIntegration,WindowsIntegrationWindowsFormsModule,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\WindowsIntegrationWindowsFormsModule.cs,RegisterProtocols,Cyclomatic complexity of the method is 17
Complex Method,Xpand.ExpressApp.Win.Para.WindowsIntegration,WindowsIntegrationWindowsFormsModule,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\WindowsIntegrationWindowsFormsModule.cs,CleanUriProtocols,Cyclomatic complexity of the method is 8
Complex Method,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,Cyclomatic complexity of the method is 9
Complex Method,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,ListenForArguments,Cyclomatic complexity of the method is 8
Long Parameter List,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListWindowController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListWindowController.cs,Window_TemplateChanged,The method has 8 parameters.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListHandleStartupItemController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListHandleStartupItemController.cs,WinShowNavigationItemController_StartupWindowShown,The length of the statement  "	((WinShowViewStrategyBase)Application.ShowViewStrategy).StartupWindowShown -= WinShowNavigationItemController_StartupWindowShown; " is 129.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListHandleStartupItemController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListHandleStartupItemController.cs,OnActivated,The length of the statement  "	((WinShowViewStrategyBase)Application.ShowViewStrategy).StartupWindowShown += WinShowNavigationItemController_StartupWindowShown; " is 129.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListHandleStartupItemController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListHandleStartupItemController.cs,OnDeactivated,The length of the statement  "	((WinShowViewStrategyBase)Application.ShowViewStrategy).StartupWindowShown -= WinShowNavigationItemController_StartupWindowShown; " is 129.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,WindowsIntegrationWindowsFormsModule,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\WindowsIntegrationWindowsFormsModule.cs,GetShortcutApprefMsName,The length of the statement  "		string appKey = key.GetSubKeyNames ().FirstOrDefault (x => GetValue (key' x' "UrlUpdateInfo") == updateLocation.ToString ()); " is 125.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,WindowsIntegrationWindowsFormsModule,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\WindowsIntegrationWindowsFormsModule.cs,CleanUriProtocols,The length of the statement  "					argument = argument.Substring (options.CustomProtocolOptions.ProtocolHandler.Length' argument.Length - options.CustomProtocolOptions.ProtocolHandler.Length); " is 157.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListWindowController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListWindowController.cs,Window_TemplateChanged,The length of the statement  "	var imageNames = options.Jumplists.TasksCategory.OfType<IModelTaskbarJumplistJumpItemBase> ().Where (m => !String.IsNullOrEmpty (m.ImageName)).Select (imageName => imageName.ImageName).ToList (); " is 195.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration,TaskbarJumpListWindowController,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\TaskbarJumpListWindowController.cs,Window_TemplateChanged,The length of the statement  "		imageNames.AddRange (category.OfType<IModelTaskbarJumplistJumpItemBase> ().Where (m => !String.IsNullOrEmpty (m.ImageName)).Select (imageName => imageName.ImageName)); " is 167.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration.Model,ModelTaskbarJumplistJumpItemNavigationItem_Logic,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Model\IModelTaskbarJumplistJumpItemNavigationItem.cs,Get_UseProtocolIfAvailable,The length of the statement  "		return (item.Application.Options as IModelTaskbarOptions).TaskbarJumplistOptions.NavigationItemJumplistUseCustomProtocol; " is 121.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration.Model,ModelTaskbarJumplistJumpItemNavigationItem_Logic,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Model\IModelTaskbarJumplistJumpItemNavigationItem.cs,GetPureArguments,The length of the statement  "	newArgs = (item.Application.Options as IModelTaskbarOptions).TaskbarJumplistOptions.NavigationItemJumplistArgumentName + newArgs; " is 129.
Long Statement,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,ImageExtensions,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\ImageExtensions.cs,CopyImage,The length of the statement  "	if (format == PixelFormat.Format1bppIndexed || format == PixelFormat.Format4bppIndexed || format == PixelFormat.Format8bppIndexed || format == PixelFormat.Indexed) " is 163.
Complex Conditional,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,ImageExtensions,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\ImageExtensions.cs,CopyImage,The conditional expression  "format == PixelFormat.Format1bppIndexed || format == PixelFormat.Format4bppIndexed || format == PixelFormat.Format8bppIndexed || format == PixelFormat.Indexed"  is complex.
Empty Catch Block,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The method has an empty catch block.
Empty Catch Block,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The method has an empty catch block.
Empty Catch Block,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,ListenForArguments,The method has an empty catch block.
Empty Catch Block,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,FileScope,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\FileScope.cs,Dispose,The method has an empty catch block.
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The following statement contains a magic number: if (!_OwnsMutex) {  	try {  		using (var client = new NamedPipeClientStream (_Identifier))  			using (var writer = new StreamWriter (client)) {  				client.Connect (200);  				foreach (String argument in arguments) {  					if (!string.IsNullOrEmpty (argument)) {  						writer.WriteLine (argument);  					}  				}  			}  		return true;  	}  	catch (TimeoutException) {  	}  	//Couldn't connect to server  	catch (IOException) {  	}  	//Pipe was broken  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The following statement contains a magic number: try {  	using (var client = new NamedPipeClientStream (_Identifier))  		using (var writer = new StreamWriter (client)) {  			client.Connect (200);  			foreach (String argument in arguments) {  				if (!string.IsNullOrEmpty (argument)) {  					writer.WriteLine (argument);  				}  			}  		}  	return true;  }  catch (TimeoutException) {  }  //Couldn't connect to server  catch (IOException) {  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The following statement contains a magic number: using (var client = new NamedPipeClientStream (_Identifier))  	using (var writer = new StreamWriter (client)) {  		client.Connect (200);  		foreach (String argument in arguments) {  			if (!string.IsNullOrEmpty (argument)) {  				writer.WriteLine (argument);  			}  		}  	}  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The following statement contains a magic number: using (var writer = new StreamWriter (client)) {  	client.Connect (200);  	foreach (String argument in arguments) {  		if (!string.IsNullOrEmpty (argument)) {  			writer.WriteLine (argument);  		}  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration,SingleInstance,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\SingleInstance.cs,PassArgumentsToFirstInstance,The following statement contains a magic number: client.Connect (200);  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: using (var writer = new BinaryWriter (stream' Encoding.UTF8)) {  	// Remove any duplicated resolutions. Done first because this may change the image count.  	ValidateImages ();  	var imageData = new Dictionary<IconEntry' byte[]> ();  	// Write header  	new IconHeader {  		Reserved = 0'  		Type = 1'  		Count = Convert.ToInt16 (images.Count)  	}.Save (writer);  	// The offset of the first icon.  	var offset = Marshal.SizeOf (typeof(IconHeader)) + images.Count * Marshal.SizeOf (typeof(IconEntry));  	// Write all the icon entries  	for (var i = 0; i < images.Count; i++) {  		var image = images [i] as Bitmap;  		var data = image.ToArray ();  		// This extension method saves an Image to a png-format byte array.  		var entry = new IconEntry {  			Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  			Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  			ColorCount = 0'  			Reserved = 0'  			Planes = 1'  			BitCount = 32'  			BytesInRes = data.Length'  			ImageOffset = offset  		};  		imageData [entry] = data;  		entry.Save (writer);  		offset += data.Length;  	}  	// Write the Icons.  	foreach (var kvp in imageData) {  		writer.Seek (kvp.Key.ImageOffset' SeekOrigin.Begin);  		writer.Write (kvp.Value);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: using (var writer = new BinaryWriter (stream' Encoding.UTF8)) {  	// Remove any duplicated resolutions. Done first because this may change the image count.  	ValidateImages ();  	var imageData = new Dictionary<IconEntry' byte[]> ();  	// Write header  	new IconHeader {  		Reserved = 0'  		Type = 1'  		Count = Convert.ToInt16 (images.Count)  	}.Save (writer);  	// The offset of the first icon.  	var offset = Marshal.SizeOf (typeof(IconHeader)) + images.Count * Marshal.SizeOf (typeof(IconEntry));  	// Write all the icon entries  	for (var i = 0; i < images.Count; i++) {  		var image = images [i] as Bitmap;  		var data = image.ToArray ();  		// This extension method saves an Image to a png-format byte array.  		var entry = new IconEntry {  			Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  			Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  			ColorCount = 0'  			Reserved = 0'  			Planes = 1'  			BitCount = 32'  			BytesInRes = data.Length'  			ImageOffset = offset  		};  		imageData [entry] = data;  		entry.Save (writer);  		offset += data.Length;  	}  	// Write the Icons.  	foreach (var kvp in imageData) {  		writer.Seek (kvp.Key.ImageOffset' SeekOrigin.Begin);  		writer.Write (kvp.Value);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: using (var writer = new BinaryWriter (stream' Encoding.UTF8)) {  	// Remove any duplicated resolutions. Done first because this may change the image count.  	ValidateImages ();  	var imageData = new Dictionary<IconEntry' byte[]> ();  	// Write header  	new IconHeader {  		Reserved = 0'  		Type = 1'  		Count = Convert.ToInt16 (images.Count)  	}.Save (writer);  	// The offset of the first icon.  	var offset = Marshal.SizeOf (typeof(IconHeader)) + images.Count * Marshal.SizeOf (typeof(IconEntry));  	// Write all the icon entries  	for (var i = 0; i < images.Count; i++) {  		var image = images [i] as Bitmap;  		var data = image.ToArray ();  		// This extension method saves an Image to a png-format byte array.  		var entry = new IconEntry {  			Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  			Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  			ColorCount = 0'  			Reserved = 0'  			Planes = 1'  			BitCount = 32'  			BytesInRes = data.Length'  			ImageOffset = offset  		};  		imageData [entry] = data;  		entry.Save (writer);  		offset += data.Length;  	}  	// Write the Icons.  	foreach (var kvp in imageData) {  		writer.Seek (kvp.Key.ImageOffset' SeekOrigin.Begin);  		writer.Write (kvp.Value);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	var data = image.ToArray ();  	// This extension method saves an Image to a png-format byte array.  	var entry = new IconEntry {  		Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  		Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  		ColorCount = 0'  		Reserved = 0'  		Planes = 1'  		BitCount = 32'  		BytesInRes = data.Length'  		ImageOffset = offset  	};  	imageData [entry] = data;  	entry.Save (writer);  	offset += data.Length;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	var data = image.ToArray ();  	// This extension method saves an Image to a png-format byte array.  	var entry = new IconEntry {  		Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  		Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  		ColorCount = 0'  		Reserved = 0'  		Planes = 1'  		BitCount = 32'  		BytesInRes = data.Length'  		ImageOffset = offset  	};  	imageData [entry] = data;  	entry.Save (writer);  	offset += data.Length;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,SaveToStream,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	var data = image.ToArray ();  	// This extension method saves an Image to a png-format byte array.  	var entry = new IconEntry {  		Width = image.Width < 256 ? Convert.ToByte (image.Width) : (byte)0'  		Height = image.Height < 256 ? Convert.ToByte (image.Height) : (byte)0'  		ColorCount = 0'  		Reserved = 0'  		Planes = 1'  		BitCount = 32'  		BytesInRes = data.Length'  		ImageOffset = offset  	};  	imageData [entry] = data;  	entry.Save (writer);  	offset += data.Length;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	/* Images larger than 256x256 will create invalid                  * icons' so resize any image that's too large. */if (image.Width > 256 || image.Height > 256) {  		image = image.Resize (256' 256) as Bitmap;  	}  	if (!contained.Contains (image.Width)) {  		contained.Add (image.Width);  		validatedImages.Add (image);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	/* Images larger than 256x256 will create invalid                  * icons' so resize any image that's too large. */if (image.Width > 256 || image.Height > 256) {  		image = image.Resize (256' 256) as Bitmap;  	}  	if (!contained.Contains (image.Width)) {  		contained.Add (image.Width);  		validatedImages.Add (image);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	/* Images larger than 256x256 will create invalid                  * icons' so resize any image that's too large. */if (image.Width > 256 || image.Height > 256) {  		image = image.Resize (256' 256) as Bitmap;  	}  	if (!contained.Contains (image.Width)) {  		contained.Add (image.Width);  		validatedImages.Add (image);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: for (var i = 0; i < images.Count; i++) {  	var image = images [i] as Bitmap;  	/* Images larger than 256x256 will create invalid                  * icons' so resize any image that's too large. */if (image.Width > 256 || image.Height > 256) {  		image = image.Resize (256' 256) as Bitmap;  	}  	if (!contained.Contains (image.Width)) {  		contained.Add (image.Width);  		validatedImages.Add (image);  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: if (image.Width > 256 || image.Height > 256) {  	image = image.Resize (256' 256) as Bitmap;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: if (image.Width > 256 || image.Height > 256) {  	image = image.Resize (256' 256) as Bitmap;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: if (image.Width > 256 || image.Height > 256) {  	image = image.Resize (256' 256) as Bitmap;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: if (image.Width > 256 || image.Height > 256) {  	image = image.Resize (256' 256) as Bitmap;  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: image = image.Resize (256' 256) as Bitmap;  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.Helpers,IconFileWriter,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\Helpers\IconFileWriter.cs,ValidateImages,The following statement contains a magic number: image = image.Resize (256' 256) as Bitmap;  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.ResourceManagers,RuntimeImageResourceManager,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\ResourceManagers\RuntimeImageResourceManager.cs,WriteImageResouces,The following statement contains a magic number: using (new FilesScope (imageTempPaths.Select (m => m.Item1))) {  	uint c = 100;  	uint id = 1;  	foreach (var fileTuple in imageTempPaths) {  		var rc = new IconDirectoryResource {  			Name = new ResourceId (c)'  			Language = GetCurrentLangId ()  		};  		var iconFile = new IconFile (fileTuple.Item1);  		foreach (var icon in iconFile.Icons) {  			rc.Icons.Add (new IconResource (icon' new ResourceId (id)' rc.Language));  		}  		rc.SaveTo (assemblyPath);  		ImageIndexes [fileTuple.Item2] = Convert.ToInt32 (id) - 1;  		c++;  		id++;  	}  }  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.ResourceManagers,RuntimeImageResourceManager,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\ResourceManagers\RuntimeImageResourceManager.cs,MAKELANGID,The following statement contains a magic number: return (((ushort)sub) << 10) | ((ushort)primary);  
Magic Number,Xpand.ExpressApp.Win.Para.WindowsIntegration.ResourceManagers,RuntimeImageResourceManager,C:\repos\biohazard999_Xpand.ExpressApp.Win.Para.WindowsIntegration\src\WindowsIntegration\ResourceManagers\RuntimeImageResourceManager.cs,SUBLANGID,The following statement contains a magic number: return ((ushort)lcid) >> 10;  
