Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,The method has 125 lines of code.
Long Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,The method has 145 lines of code.
Long Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Intersects,The method has 100 lines of code.
Long Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,The method has 127 lines of code.
Long Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,The method has 140 lines of code.
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,Cyclomatic complexity of the method is 13
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,Cyclomatic complexity of the method is 13
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetPositions,Cyclomatic complexity of the method is 9
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Intersects,Cyclomatic complexity of the method is 12
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Not,Cyclomatic complexity of the method is 8
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,Cyclomatic complexity of the method is 13
Complex Method,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,Cyclomatic complexity of the method is 13
Long Identifier,Ewah,RunningLengthWord,C:\repos\lemire_csharpewah\EWAH\RunningLengthWord.cs,,The length of the parameter NotRunningLengthPlusRunningBit is 30.
Long Identifier,Ewah,RunningLengthWord,C:\repos\lemire_csharpewah\EWAH\RunningLengthWord.cs,,The length of the parameter NotShiftedLargestRunningLengthCount is 35.
Long Identifier,Ewah,RunningLengthWord,C:\repos\lemire_csharpewah\EWAH\RunningLengthWord.cs,,The length of the parameter ShiftedLargestRunningLengthCount is 32.
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: const int B = 31;
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext())              {                  i.Next();                  if (i._Rlw.RunningBit == true)                  {                      karprabin += B * karprabin                                 + (i._Rlw.RunningLength & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);                  }                  int dw = i.DirtyWords;                  long numLiteralWords = i._Rlw.NumberOfLiteralWords;                  long buf;                  for (int k = 0; k < numLiteralWords; ++k)                  {                      buf = this._Buffer[dw + k];                      karprabin += B * karprabin + (buf & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)buf) >> 32);                  }             }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext())              {                  i.Next();                  if (i._Rlw.RunningBit == true)                  {                      karprabin += B * karprabin                                 + (i._Rlw.RunningLength & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);                  }                  int dw = i.DirtyWords;                  long numLiteralWords = i._Rlw.NumberOfLiteralWords;                  long buf;                  for (int k = 0; k < numLiteralWords; ++k)                  {                      buf = this._Buffer[dw + k];                      karprabin += B * karprabin + (buf & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)buf) >> 32);                  }             }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext())              {                  i.Next();                  if (i._Rlw.RunningBit == true)                  {                      karprabin += B * karprabin                                 + (i._Rlw.RunningLength & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);                  }                  int dw = i.DirtyWords;                  long numLiteralWords = i._Rlw.NumberOfLiteralWords;                  long buf;                  for (int k = 0; k < numLiteralWords; ++k)                  {                      buf = this._Buffer[dw + k];                      karprabin += B * karprabin + (buf & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)buf) >> 32);                  }             }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext())              {                  i.Next();                  if (i._Rlw.RunningBit == true)                  {                      karprabin += B * karprabin                                 + (i._Rlw.RunningLength & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);                  }                  int dw = i.DirtyWords;                  long numLiteralWords = i._Rlw.NumberOfLiteralWords;                  long buf;                  for (int k = 0; k < numLiteralWords; ++k)                  {                      buf = this._Buffer[dw + k];                      karprabin += B * karprabin + (buf & ((1L << 32) - 1));                      karprabin += B * karprabin + (long)(((ulong)buf) >> 32);                  }             }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddLiteralWord,The following statement contains a magic number: if (numbersofar >= RunningLengthWord.LargestLiteralCount)              {                  PushBack(0);                  _Rlw.Position = _ActualSizeInWords - 1;                  _Rlw.NumberOfLiteralWords = 1;                  PushBack(newdata);                  return 2;              }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,NegativePushBack,The following statement contains a magic number: while (_ActualSizeInWords + number >= _Buffer.Length)              {                  Array.Resize(ref _Buffer' _Buffer.Length * 2);                  _Rlw.ArrayOfWords = _Buffer;              }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: if (_ActualSizeInWords == _Buffer.Length)              {                  Array.Resize(ref _Buffer' _Buffer.Length * 2);                  _Rlw.ArrayOfWords = _Buffer;              }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: while (_ActualSizeInWords + number >= _Buffer.Length)              {                  Array.Resize(ref _Buffer' _Buffer.Length * 2);                  _Rlw.ArrayOfWords = _Buffer;              }
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: const UInt64 mask1h = (~0UL) / 3 << 1;
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: const UInt64 mask2l = (~0UL) / 5;
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: const UInt64 mask4l = (~0UL) / 17;
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: v = (v & mask2l) + ((v >> 2) & mask2l);
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: v += v >> 4;
Magic Number,Ewah,EwahCompressedBitArray,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: return (v * MaskMult) >> 56;
Magic Number,Ewah,IntIteratorImpl,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Add,The following statement contains a magic number: while (_LocalBufferSize > _LocalBuffer.Length)                  {                      Array.Resize(ref _LocalBuffer' _LocalBuffer.Length * 2);                  }
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: byte[] buff= new byte[8];
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read(buff' 0' 4);
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read(buff' 0' 4);
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read(buff' 0' 4);
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: for (int i = 0; i < actualSizeInWords; i++) {                  serializationStream.Read(buff' 0' 8);                  buffer[i] = BitConverter.ToInt64(buff' 0);              }
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write( BitConverter.GetBytes(bitArray.SizeInBits)' 0' 4 );
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write( BitConverter.GetBytes(bitArray._ActualSizeInWords)'0' 4 );
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write(BitConverter.GetBytes(bitArray._Rlw.Position)' 0' 4);
Magic Number,Ewah,EwahCompressedBitArraySerializer,C:\repos\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: for(int i=0; i< bitArray._ActualSizeInWords;i++) {                  serializationStream.Write(BitConverter.GetBytes(bitArray._Buffer[i])' 0' 8);              }
