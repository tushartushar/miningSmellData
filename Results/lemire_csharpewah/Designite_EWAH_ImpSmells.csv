Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,The method has 87 lines of code.
Long Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,The method has 97 lines of code.
Long Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Intersects,The method has 77 lines of code.
Long Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,The method has 94 lines of code.
Long Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,The method has 100 lines of code.
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,Cyclomatic complexity of the method is 14
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,Cyclomatic complexity of the method is 16
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetPositions,Cyclomatic complexity of the method is 9
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Intersects,Cyclomatic complexity of the method is 12
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Not,Cyclomatic complexity of the method is 7
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,Cyclomatic complexity of the method is 14
Complex Method,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,Cyclomatic complexity of the method is 16
Long Parameter List,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,EwahCompressedBitArray,The method has 4 parameters.
Long Statement,Ewah,BufferedRunningLengthWord,D:\newReposJune17\lemire_csharpewah\EWAH\BufferedRunningLengthWord.cs,ToString,The length of the statement  "	return "running bit = " + RunningBit + " running length = " + RunningLength + " number of lit. words " + NumberOfLiteralWords; " is 126.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddStreamOfEmptyWords,The length of the statement  "		long whatwecanadd = number < RunningLengthWord.LargestRunningLengthCount - runlen ? number : RunningLengthWord.LargestRunningLengthCount - runlen; " is 146.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddStreamOfEmptyWords,The length of the statement  "		long whatwecanadd = number < RunningLengthWord.LargestRunningLengthCount ? number : RunningLengthWord.LargestRunningLengthCount; " is 128.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,The length of the statement  "					container.Add (i.Buffer [prey.DirtyWordOffset + i.DirtyWords + k] & j.Buffer [predator.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,And,The length of the statement  "					container.Add (i.Buffer [predator.DirtyWordOffset + i.DirtyWords + k] & j.Buffer [prey.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,The length of the statement  "					container.Add ((~i.Buffer [prey.DirtyWordOffset + i.DirtyWords + k]) & j.Buffer [predator.DirtyWordOffset + j.DirtyWords + k]); " is 127.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AndNot,The length of the statement  "					container.Add ((~i.Buffer [predator.DirtyWordOffset + i.DirtyWords + k]) & j.Buffer [prey.DirtyWordOffset + j.DirtyWords + k]); " is 127.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,The length of the statement  "					container.Add (i.Buffer [prey.DirtyWordOffset + i.DirtyWords + k] | j.Buffer [predator.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Or,The length of the statement  "					container.Add (i.Buffer [predator.DirtyWordOffset + i.DirtyWords + k] | j.Buffer [prey.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,SetSizeInBits,The length of the statement  "		AddStreamOfEmptyWords (false' (size / WordInBits) - SizeInBits / WordInBits + (finalLeftover != 0 ? 1 : 0) + (currentLeftover != 0 ? -1 : 0)); " is 142.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,The length of the statement  "					container.Add (i.Buffer [prey.DirtyWordOffset + i.DirtyWords + k] ^ j.Buffer [predator.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Xor,The length of the statement  "					container.Add (i.Buffer [predator.DirtyWordOffset + i.DirtyWords + k] ^ j.Buffer [prey.DirtyWordOffset + j.DirtyWords + k]); " is 124.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddStreamOfDirtyWords,The length of the statement  "	long whatwecanadd = number < RunningLengthWord.LargestLiteralCount - numberOfLiteralWords ? number : RunningLengthWord.LargestLiteralCount - numberOfLiteralWords; " is 162.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddStreamOfNegatedDirtyWords,The length of the statement  "	long whatwecanadd = number < RunningLengthWord.LargestLiteralCount - numberOfLiteralWords ? number : RunningLengthWord.LargestLiteralCount - numberOfLiteralWords; " is 162.
Long Statement,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,Discharge,The length of the statement  "		container.AddStreamOfDirtyWords (enumerator.Buffer' enumerator.DirtyWords + runningLengthWord.DirtyWordOffset' runningLengthWord.NumberOfLiteralWords); " is 151.
Long Statement,Ewah,RunningLengthWord,D:\newReposJune17\lemire_csharpewah\EWAH\RunningLengthWord.cs,ToString,The length of the statement  "	return "running bit = " + RunningBit + " running length = " + RunningLength + " number of lit. words " + NumberOfLiteralWords; " is 126.
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext ()) {  	i.Next ();  	if (i._Rlw.RunningBit == true) {  		karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  	}  	int dw = i.DirtyWords;  	long numLiteralWords = i._Rlw.NumberOfLiteralWords;  	long buf;  	for (int k = 0; k < numLiteralWords; ++k) {  		buf = this._Buffer [dw + k];  		karprabin += B * karprabin + (buf & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  	}  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext ()) {  	i.Next ();  	if (i._Rlw.RunningBit == true) {  		karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  	}  	int dw = i.DirtyWords;  	long numLiteralWords = i._Rlw.NumberOfLiteralWords;  	long buf;  	for (int k = 0; k < numLiteralWords; ++k) {  		buf = this._Buffer [dw + k];  		karprabin += B * karprabin + (buf & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  	}  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext ()) {  	i.Next ();  	if (i._Rlw.RunningBit == true) {  		karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  	}  	int dw = i.DirtyWords;  	long numLiteralWords = i._Rlw.NumberOfLiteralWords;  	long buf;  	for (int k = 0; k < numLiteralWords; ++k) {  		buf = this._Buffer [dw + k];  		karprabin += B * karprabin + (buf & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  	}  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: while (i.HasNext ()) {  	i.Next ();  	if (i._Rlw.RunningBit == true) {  		karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  	}  	int dw = i.DirtyWords;  	long numLiteralWords = i._Rlw.NumberOfLiteralWords;  	long buf;  	for (int k = 0; k < numLiteralWords; ++k) {  		buf = this._Buffer [dw + k];  		karprabin += B * karprabin + (buf & ((1L << 32) - 1));  		karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  	}  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: if (i._Rlw.RunningBit == true) {  	karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  	karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: if (i._Rlw.RunningBit == true) {  	karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  	karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: karprabin += B * karprabin + (i._Rlw.RunningLength & ((1L << 32) - 1));  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: karprabin += B * karprabin + (long)(((ulong)i._Rlw.RunningLength) >> 32);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: for (int k = 0; k < numLiteralWords; ++k) {  	buf = this._Buffer [dw + k];  	karprabin += B * karprabin + (buf & ((1L << 32) - 1));  	karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: for (int k = 0; k < numLiteralWords; ++k) {  	buf = this._Buffer [dw + k];  	karprabin += B * karprabin + (buf & ((1L << 32) - 1));  	karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: karprabin += B * karprabin + (buf & ((1L << 32) - 1));  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,GetHashCode,The following statement contains a magic number: karprabin += B * karprabin + (long)(((ulong)buf) >> 32);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddLiteralWord,The following statement contains a magic number: if (numbersofar >= RunningLengthWord.LargestLiteralCount) {  	PushBack (0);  	_Rlw.Position = _ActualSizeInWords - 1;  	_Rlw.NumberOfLiteralWords = 1;  	PushBack (newdata);  	return 2;  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,AddLiteralWord,The following statement contains a magic number: return 2;  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,NegativePushBack,The following statement contains a magic number: while (_ActualSizeInWords + number >= _Buffer.Length) {  	Array.Resize (ref _Buffer' _Buffer.Length * 2);  	_Rlw.ArrayOfWords = _Buffer;  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,NegativePushBack,The following statement contains a magic number: Array.Resize (ref _Buffer' _Buffer.Length * 2);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: if (_ActualSizeInWords == _Buffer.Length) {  	Array.Resize (ref _Buffer' _Buffer.Length * 2);  	_Rlw.ArrayOfWords = _Buffer;  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: Array.Resize (ref _Buffer' _Buffer.Length * 2);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: while (_ActualSizeInWords + number >= _Buffer.Length) {  	Array.Resize (ref _Buffer' _Buffer.Length * 2);  	_Rlw.ArrayOfWords = _Buffer;  }  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,PushBack,The following statement contains a magic number: Array.Resize (ref _Buffer' _Buffer.Length * 2);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: v = (v & mask2l) + ((v >> 2) & mask2l);  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: v += v >> 4;  
Magic Number,Ewah,EwahCompressedBitArray,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArray.cs,bitCount,The following statement contains a magic number: return (v * MaskMult) >> 56;  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read (buff' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read (buff' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read (buff' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: for (int i = 0; i < actualSizeInWords; i++) {  	serializationStream.Read (buff' 0' 8);  	buffer [i] = BitConverter.ToInt64 (buff' 0);  }  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Deserialize,The following statement contains a magic number: serializationStream.Read (buff' 0' 8);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write (BitConverter.GetBytes (bitArray.SizeInBits)' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write (BitConverter.GetBytes (bitArray._ActualSizeInWords)' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write (BitConverter.GetBytes (bitArray._Rlw.Position)' 0' 4);  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: for (int i = 0; i < bitArray._ActualSizeInWords; i++) {  	serializationStream.Write (BitConverter.GetBytes (bitArray._Buffer [i])' 0' 8);  }  
Magic Number,Ewah,EwahCompressedBitArraySerializer,D:\newReposJune17\lemire_csharpewah\EWAH\EwahCompressedBitArraySerializer.cs,Serialize,The following statement contains a magic number: serializationStream.Write (BitConverter.GetBytes (bitArray._Buffer [i])' 0' 8);  
