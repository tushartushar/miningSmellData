Implementation smell,Namespace,Class,File,Method,Description
Long Method,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The method has 199 lines of code.
Complex Method,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ReadProcessingInstructionValue,Cyclomatic complexity of the method is 8
Complex Method,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,Cyclomatic complexity of the method is 41
Complex Method,SequelMaxNet,Element,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Element.cs,SplitString,Cyclomatic complexity of the method is 8
Long Parameter List,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ReadProcessingInstructionValue,The method has 5 parameters.
Long Parameter List,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ReadElementName,The method has 5 parameters.
Long Parameter List,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,PrintStack,The method has 5 parameters.
Long Statement,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The length of the statement  "		return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l'; " is 130.
Long Statement,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The length of the statement  "		return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E'; " is 234.
Long Statement,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The length of the statement  "		return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '['; " is 234.
Long Statement,SequelMaxNet,RawElement,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\RawElement.cs,IsValidName,The length of the statement  "		if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '-' || ch == '_' || ch == '.')) { " is 129.
Complex Conditional,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ReadAttributeValue,The conditional expression  "(src [index] == '\"' && src [index + 1] == '\"') || (src [index] == '\'' && src [index + 1] == '\'')"  is complex.
Complex Conditional,SequelMaxNet,RawElement,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\RawElement.cs,IsValidName,The conditional expression  "!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch == '-' || ch == '_' || ch == '.')"  is complex.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetBool,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetBool,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetChar,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetChar,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt16,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt16,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt32,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt32,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt64,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetInt64,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt16,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt16,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt32,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt32,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt64,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetUInt64,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetFloat,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetFloat,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetDouble,The method has an empty catch block.
Empty Catch Block,SequelMaxNet,Attribute,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Attribute.cs,GetDouble,The method has an empty catch block.
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: if (index + 4 < src.Length) {  	// comparing "<?xml"  	return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: if (index + 4 < src.Length) {  	// comparing "<?xml"  	return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: if (index + 4 < src.Length) {  	// comparing "<?xml"  	return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: if (index + 4 < src.Length) {  	// comparing "<?xml"  	return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsProcessingInstructionStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '?' && src [index + 2] == 'x' && src [index + 3] == 'm' && src [index + 4] == 'l';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<!DOCTYPE"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsDocTypeStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == 'D' && src [index + 3] == 'O' && src [index + 4] == 'C' && src [index + 5] == 'T' && src [index + 6] == 'Y' && src [index + 7] == 'P' && src [index + 8] == 'E';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: if (index + 8 < src.Length) {  	// comparing "<![CDATA["  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '[' && src [index + 3] == 'C' && src [index + 4] == 'D' && src [index + 5] == 'A' && src [index + 6] == 'T' && src [index + 7] == 'A' && src [index + 8] == '[';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataEnd,The following statement contains a magic number: if (index + 2 < src.Length) {  	// comparing "]]>"  	return src [index] == ']' && src [index + 1] == ']' && src [index + 2] == '>';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataEnd,The following statement contains a magic number: if (index + 2 < src.Length) {  	// comparing "]]>"  	return src [index] == ']' && src [index + 1] == ']' && src [index + 2] == '>';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCDataEnd,The following statement contains a magic number: return src [index] == ']' && src [index + 1] == ']' && src [index + 2] == '>';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentStart,The following statement contains a magic number: if (index + 3 < src.Length) {  	// comparing "<!--"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '-' && src [index + 3] == '-';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentStart,The following statement contains a magic number: if (index + 3 < src.Length) {  	// comparing "<!--"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '-' && src [index + 3] == '-';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentStart,The following statement contains a magic number: if (index + 3 < src.Length) {  	// comparing "<!--"  	return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '-' && src [index + 3] == '-';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '-' && src [index + 3] == '-';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentStart,The following statement contains a magic number: return src [index] == '<' && src [index + 1] == '!' && src [index + 2] == '-' && src [index + 3] == '-';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentEnd,The following statement contains a magic number: if (index + 2 < src.Length) {  	// comparing "-."  	return src [index] == '-' && src [index + 1] == '-' && src [index + 2] == '>';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentEnd,The following statement contains a magic number: if (index + 2 < src.Length) {  	// comparing "-."  	return src [index] == '-' && src [index + 1] == '-' && src [index + 2] == '>';  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,IsCommentEnd,The following statement contains a magic number: return src [index] == '-' && src [index + 1] == '-' && src [index + 2] == '>';  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The following statement contains a magic number: while (i < src.Length) {  	text = "";  	while (IsContent (src' i)) {  		text += src [i];  		++i;  	}  	if (i >= src.Length)  		break;  	if (IsCDataStart (src' i)) {  		i += CDataStartLength;  		ReadCDataValue (src' ref i' out val);  		if (StackElement.Count > 0) {  			string key = GetStackString (StackElement);  			if (dict_CDataDelegate.ContainsKey (key)) {  				EndElementDelegate del = dict_CDataDelegate [key];  				del (val);  			}  		}  	}  	else if (IsCommentStart (src' i)) {  		i += CommentStartLength;  		ReadCommentValue (src' ref i' out val);  		if (StackElement.Count > 0) {  			string key = GetStackString (StackElement);  			if (dict_CommentDelegate.ContainsKey (key)) {  				EndElementDelegate del = dict_CommentDelegate [key];  				del (val);  			}  		}  	}  	else if (src [i] == '<' && IsEndElementStart (src' i) == false)// is start element  	 {  		// read element  		AfterElementName res = AfterElementName.None;  		++i;  		if (ReadElementName (src' ref i' out name' out res' ref newline_cnt)) {  			if (name == "") {  				throw new InvalidOperationException ("empty name");  			}  			StackElement.Push (name);  			StackLineNum.Push (newline_cnt + 1);  			RawElement pRawElement = new RawElement (name);  			if (res == AfterElementName.EncounterWhitespace) {  				bool isStartElementEnd = false;  				while (i < src.Length) {  					while (IsWhitespace (src' i' ref newline_cnt)) {  						++i;  					}  					isStartElementEnd = IsStartElementEnd (src' i);  					if (isStartElementEnd) {  						i += 1;  						string key = GetStackString (StackElement);  						if (dict_StartElemDelegate.ContainsKey (key)) {  							StartElementDelegate del = dict_StartElemDelegate [key];  							Element elem = new Element (pRawElement);  							del (elem);  						}  						else {  							pRawElement.Destroy ();  							pRawElement = null;  						}  						if (dict_EndElemDelegate.ContainsKey (key)) {  							EndElementDelegate del = dict_EndElemDelegate [key];  							del ("");  						}  						StackElement.Pop ();  						StackLineNum.Pop ();  						goto breakout;  					}  					if (src [i] == '>')  						break;  					ReadAttributeName (src' ref i' out name' ref newline_cnt);  					while (IsWhitespace (src' i' ref newline_cnt) || src [i] == '=')  						++i;  					ReadAttributeValue (src' ref i' out val);  					if (name != "") {  						pRawElement.GetAttrs ().Add (new KeyValuePair<string' string> (name' val));  					}  				}  				string key1 = GetStackString (StackElement);  				if (dict_StartElemDelegate.ContainsKey (key1)) {  					StartElementDelegate del = dict_StartElemDelegate [key1];  					Element elem = new Element (pRawElement);  					del (elem);  				}  				else {  					if (!isStartElementEnd) {  						pRawElement.Destroy ();  						pRawElement = null;  					}  				}  			}  			else if (res == AfterElementName.ElementEnded) {  				string key = GetStackString (StackElement);  				if (dict_StartElemDelegate.ContainsKey (key)) {  					StartElementDelegate del = dict_StartElemDelegate [key];  					Element elem = new Element (pRawElement);  					del (elem);  				}  				else {  					pRawElement.Destroy ();  					pRawElement = null;  				}  				if (dict_EndElemDelegate.ContainsKey (key)) {  					EndElementDelegate del = dict_EndElemDelegate [key];  					del ("");  				}  				StackElement.Pop ();  				StackLineNum.Pop ();  			}  			else// NodeEnded  			 {  				string key = GetStackString (StackElement);  				if (dict_StartElemDelegate.ContainsKey (key)) {  					StartElementDelegate del = dict_StartElemDelegate [key];  					Element elem = new Element (pRawElement);  					del (elem);  				}  				else {  					pRawElement.Destroy ();  					pRawElement = null;  				}  			}  		}  		else// parser error  		 {  			PrintStack (i' newline_cnt' "Start tag error"' StackElement' StackLineNum);  		}  	}  	else// is end element  	 {  		AfterElementName result;  		i += 2;  		if (ReadElementName (src' ref i' out name' out result' ref newline_cnt)) {  			if (name == "") {  				PrintStack (i' newline_cnt' "The ending tag error"' StackElement' StackLineNum);  			}  			if (result == AfterElementName.NodeEnded) {  				if (StackElement.Peek () != name) {  					// print error of different start and end names  					string error = "Different start and end tag:";  					error += "Expect <" + StackElement.Peek () + "> but received </" + name + ">";  					PrintStack (i' newline_cnt' error' StackElement' StackLineNum);  					return false;  				}  				else {  					string key1 = GetStackString (StackElement);  					if (dict_EndElemDelegate.ContainsKey (key1)) {  						EndElementDelegate del = dict_EndElemDelegate [key1];  						int newline_cnt1 = 0;  						if (IsWhitespace (text' ref newline_cnt1))  							del ("");  						else  							del (UnescapeXML (text));  					}  					StackElement.Pop ();  					StackLineNum.Pop ();  				}  			}  		}  		else {  			// print all stack names and element without a end element  			PrintStack (i' newline_cnt' "The last element does not have a ending tag"' StackElement' StackLineNum);  		}  	}  	breakout:  	++i;  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The following statement contains a magic number: if (IsCDataStart (src' i)) {  	i += CDataStartLength;  	ReadCDataValue (src' ref i' out val);  	if (StackElement.Count > 0) {  		string key = GetStackString (StackElement);  		if (dict_CDataDelegate.ContainsKey (key)) {  			EndElementDelegate del = dict_CDataDelegate [key];  			del (val);  		}  	}  }  else if (IsCommentStart (src' i)) {  	i += CommentStartLength;  	ReadCommentValue (src' ref i' out val);  	if (StackElement.Count > 0) {  		string key = GetStackString (StackElement);  		if (dict_CommentDelegate.ContainsKey (key)) {  			EndElementDelegate del = dict_CommentDelegate [key];  			del (val);  		}  	}  }  else if (src [i] == '<' && IsEndElementStart (src' i) == false)// is start element   {  	// read element  	AfterElementName res = AfterElementName.None;  	++i;  	if (ReadElementName (src' ref i' out name' out res' ref newline_cnt)) {  		if (name == "") {  			throw new InvalidOperationException ("empty name");  		}  		StackElement.Push (name);  		StackLineNum.Push (newline_cnt + 1);  		RawElement pRawElement = new RawElement (name);  		if (res == AfterElementName.EncounterWhitespace) {  			bool isStartElementEnd = false;  			while (i < src.Length) {  				while (IsWhitespace (src' i' ref newline_cnt)) {  					++i;  				}  				isStartElementEnd = IsStartElementEnd (src' i);  				if (isStartElementEnd) {  					i += 1;  					string key = GetStackString (StackElement);  					if (dict_StartElemDelegate.ContainsKey (key)) {  						StartElementDelegate del = dict_StartElemDelegate [key];  						Element elem = new Element (pRawElement);  						del (elem);  					}  					else {  						pRawElement.Destroy ();  						pRawElement = null;  					}  					if (dict_EndElemDelegate.ContainsKey (key)) {  						EndElementDelegate del = dict_EndElemDelegate [key];  						del ("");  					}  					StackElement.Pop ();  					StackLineNum.Pop ();  					goto breakout;  				}  				if (src [i] == '>')  					break;  				ReadAttributeName (src' ref i' out name' ref newline_cnt);  				while (IsWhitespace (src' i' ref newline_cnt) || src [i] == '=')  					++i;  				ReadAttributeValue (src' ref i' out val);  				if (name != "") {  					pRawElement.GetAttrs ().Add (new KeyValuePair<string' string> (name' val));  				}  			}  			string key1 = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key1)) {  				StartElementDelegate del = dict_StartElemDelegate [key1];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				if (!isStartElementEnd) {  					pRawElement.Destroy ();  					pRawElement = null;  				}  			}  		}  		else if (res == AfterElementName.ElementEnded) {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  			if (dict_EndElemDelegate.ContainsKey (key)) {  				EndElementDelegate del = dict_EndElemDelegate [key];  				del ("");  			}  			StackElement.Pop ();  			StackLineNum.Pop ();  		}  		else// NodeEnded  		 {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  		}  	}  	else// parser error  	 {  		PrintStack (i' newline_cnt' "Start tag error"' StackElement' StackLineNum);  	}  }  else// is end element   {  	AfterElementName result;  	i += 2;  	if (ReadElementName (src' ref i' out name' out result' ref newline_cnt)) {  		if (name == "") {  			PrintStack (i' newline_cnt' "The ending tag error"' StackElement' StackLineNum);  		}  		if (result == AfterElementName.NodeEnded) {  			if (StackElement.Peek () != name) {  				// print error of different start and end names  				string error = "Different start and end tag:";  				error += "Expect <" + StackElement.Peek () + "> but received </" + name + ">";  				PrintStack (i' newline_cnt' error' StackElement' StackLineNum);  				return false;  			}  			else {  				string key1 = GetStackString (StackElement);  				if (dict_EndElemDelegate.ContainsKey (key1)) {  					EndElementDelegate del = dict_EndElemDelegate [key1];  					int newline_cnt1 = 0;  					if (IsWhitespace (text' ref newline_cnt1))  						del ("");  					else  						del (UnescapeXML (text));  				}  				StackElement.Pop ();  				StackLineNum.Pop ();  			}  		}  	}  	else {  		// print all stack names and element without a end element  		PrintStack (i' newline_cnt' "The last element does not have a ending tag"' StackElement' StackLineNum);  	}  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The following statement contains a magic number: if (IsCommentStart (src' i)) {  	i += CommentStartLength;  	ReadCommentValue (src' ref i' out val);  	if (StackElement.Count > 0) {  		string key = GetStackString (StackElement);  		if (dict_CommentDelegate.ContainsKey (key)) {  			EndElementDelegate del = dict_CommentDelegate [key];  			del (val);  		}  	}  }  else if (src [i] == '<' && IsEndElementStart (src' i) == false)// is start element   {  	// read element  	AfterElementName res = AfterElementName.None;  	++i;  	if (ReadElementName (src' ref i' out name' out res' ref newline_cnt)) {  		if (name == "") {  			throw new InvalidOperationException ("empty name");  		}  		StackElement.Push (name);  		StackLineNum.Push (newline_cnt + 1);  		RawElement pRawElement = new RawElement (name);  		if (res == AfterElementName.EncounterWhitespace) {  			bool isStartElementEnd = false;  			while (i < src.Length) {  				while (IsWhitespace (src' i' ref newline_cnt)) {  					++i;  				}  				isStartElementEnd = IsStartElementEnd (src' i);  				if (isStartElementEnd) {  					i += 1;  					string key = GetStackString (StackElement);  					if (dict_StartElemDelegate.ContainsKey (key)) {  						StartElementDelegate del = dict_StartElemDelegate [key];  						Element elem = new Element (pRawElement);  						del (elem);  					}  					else {  						pRawElement.Destroy ();  						pRawElement = null;  					}  					if (dict_EndElemDelegate.ContainsKey (key)) {  						EndElementDelegate del = dict_EndElemDelegate [key];  						del ("");  					}  					StackElement.Pop ();  					StackLineNum.Pop ();  					goto breakout;  				}  				if (src [i] == '>')  					break;  				ReadAttributeName (src' ref i' out name' ref newline_cnt);  				while (IsWhitespace (src' i' ref newline_cnt) || src [i] == '=')  					++i;  				ReadAttributeValue (src' ref i' out val);  				if (name != "") {  					pRawElement.GetAttrs ().Add (new KeyValuePair<string' string> (name' val));  				}  			}  			string key1 = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key1)) {  				StartElementDelegate del = dict_StartElemDelegate [key1];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				if (!isStartElementEnd) {  					pRawElement.Destroy ();  					pRawElement = null;  				}  			}  		}  		else if (res == AfterElementName.ElementEnded) {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  			if (dict_EndElemDelegate.ContainsKey (key)) {  				EndElementDelegate del = dict_EndElemDelegate [key];  				del ("");  			}  			StackElement.Pop ();  			StackLineNum.Pop ();  		}  		else// NodeEnded  		 {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  		}  	}  	else// parser error  	 {  		PrintStack (i' newline_cnt' "Start tag error"' StackElement' StackLineNum);  	}  }  else// is end element   {  	AfterElementName result;  	i += 2;  	if (ReadElementName (src' ref i' out name' out result' ref newline_cnt)) {  		if (name == "") {  			PrintStack (i' newline_cnt' "The ending tag error"' StackElement' StackLineNum);  		}  		if (result == AfterElementName.NodeEnded) {  			if (StackElement.Peek () != name) {  				// print error of different start and end names  				string error = "Different start and end tag:";  				error += "Expect <" + StackElement.Peek () + "> but received </" + name + ">";  				PrintStack (i' newline_cnt' error' StackElement' StackLineNum);  				return false;  			}  			else {  				string key1 = GetStackString (StackElement);  				if (dict_EndElemDelegate.ContainsKey (key1)) {  					EndElementDelegate del = dict_EndElemDelegate [key1];  					int newline_cnt1 = 0;  					if (IsWhitespace (text' ref newline_cnt1))  						del ("");  					else  						del (UnescapeXML (text));  				}  				StackElement.Pop ();  				StackLineNum.Pop ();  			}  		}  	}  	else {  		// print all stack names and element without a end element  		PrintStack (i' newline_cnt' "The last element does not have a ending tag"' StackElement' StackLineNum);  	}  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The following statement contains a magic number: if (src [i] == '<' && IsEndElementStart (src' i) == false)// is start element   {  	// read element  	AfterElementName res = AfterElementName.None;  	++i;  	if (ReadElementName (src' ref i' out name' out res' ref newline_cnt)) {  		if (name == "") {  			throw new InvalidOperationException ("empty name");  		}  		StackElement.Push (name);  		StackLineNum.Push (newline_cnt + 1);  		RawElement pRawElement = new RawElement (name);  		if (res == AfterElementName.EncounterWhitespace) {  			bool isStartElementEnd = false;  			while (i < src.Length) {  				while (IsWhitespace (src' i' ref newline_cnt)) {  					++i;  				}  				isStartElementEnd = IsStartElementEnd (src' i);  				if (isStartElementEnd) {  					i += 1;  					string key = GetStackString (StackElement);  					if (dict_StartElemDelegate.ContainsKey (key)) {  						StartElementDelegate del = dict_StartElemDelegate [key];  						Element elem = new Element (pRawElement);  						del (elem);  					}  					else {  						pRawElement.Destroy ();  						pRawElement = null;  					}  					if (dict_EndElemDelegate.ContainsKey (key)) {  						EndElementDelegate del = dict_EndElemDelegate [key];  						del ("");  					}  					StackElement.Pop ();  					StackLineNum.Pop ();  					goto breakout;  				}  				if (src [i] == '>')  					break;  				ReadAttributeName (src' ref i' out name' ref newline_cnt);  				while (IsWhitespace (src' i' ref newline_cnt) || src [i] == '=')  					++i;  				ReadAttributeValue (src' ref i' out val);  				if (name != "") {  					pRawElement.GetAttrs ().Add (new KeyValuePair<string' string> (name' val));  				}  			}  			string key1 = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key1)) {  				StartElementDelegate del = dict_StartElemDelegate [key1];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				if (!isStartElementEnd) {  					pRawElement.Destroy ();  					pRawElement = null;  				}  			}  		}  		else if (res == AfterElementName.ElementEnded) {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  			if (dict_EndElemDelegate.ContainsKey (key)) {  				EndElementDelegate del = dict_EndElemDelegate [key];  				del ("");  			}  			StackElement.Pop ();  			StackLineNum.Pop ();  		}  		else// NodeEnded  		 {  			string key = GetStackString (StackElement);  			if (dict_StartElemDelegate.ContainsKey (key)) {  				StartElementDelegate del = dict_StartElemDelegate [key];  				Element elem = new Element (pRawElement);  				del (elem);  			}  			else {  				pRawElement.Destroy ();  				pRawElement = null;  			}  		}  	}  	else// parser error  	 {  		PrintStack (i' newline_cnt' "Start tag error"' StackElement' StackLineNum);  	}  }  else// is end element   {  	AfterElementName result;  	i += 2;  	if (ReadElementName (src' ref i' out name' out result' ref newline_cnt)) {  		if (name == "") {  			PrintStack (i' newline_cnt' "The ending tag error"' StackElement' StackLineNum);  		}  		if (result == AfterElementName.NodeEnded) {  			if (StackElement.Peek () != name) {  				// print error of different start and end names  				string error = "Different start and end tag:";  				error += "Expect <" + StackElement.Peek () + "> but received </" + name + ">";  				PrintStack (i' newline_cnt' error' StackElement' StackLineNum);  				return false;  			}  			else {  				string key1 = GetStackString (StackElement);  				if (dict_EndElemDelegate.ContainsKey (key1)) {  					EndElementDelegate del = dict_EndElemDelegate [key1];  					int newline_cnt1 = 0;  					if (IsWhitespace (text' ref newline_cnt1))  						del ("");  					else  						del (UnescapeXML (text));  				}  				StackElement.Pop ();  				StackLineNum.Pop ();  			}  		}  	}  	else {  		// print all stack names and element without a end element  		PrintStack (i' newline_cnt' "The last element does not have a ending tag"' StackElement' StackLineNum);  	}  }  
Magic Number,SequelMaxNet,Document,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Document.cs,ParseXMLString,The following statement contains a magic number: i += 2;  
Magic Number,SequelMaxNet,Element,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Element.cs,SplitString,The following statement contains a magic number: if (bMultipleParent) {  	char[] seps = new char[3];  	seps [0] = '|';  	seps [1] = '/';  	seps [2] = '\\';  	string[] arr = temp.Split (seps);  	for (int i = 0; i < arr.Length; ++i)  		vec.Add (arr [i]);  }  
Magic Number,SequelMaxNet,Element,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Element.cs,SplitString,The following statement contains a magic number: if (bMultipleParent) {  	char[] seps = new char[3];  	seps [0] = '|';  	seps [1] = '/';  	seps [2] = '\\';  	string[] arr = temp.Split (seps);  	for (int i = 0; i < arr.Length; ++i)  		vec.Add (arr [i]);  }  
Magic Number,SequelMaxNet,Element,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\Element.cs,SplitString,The following statement contains a magic number: seps [2] = '\\';  
Magic Number,SequelMaxNet,RawElement,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\RawElement.cs,Find,The following statement contains a magic number: if (bMultipleParent) {  	char[] seps = new char[3];  	seps [0] = '|';  	seps [1] = '/';  	seps [2] = '\\';  	vec = temp.Split (seps);  }  
Magic Number,SequelMaxNet,RawElement,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\RawElement.cs,Find,The following statement contains a magic number: if (bMultipleParent) {  	char[] seps = new char[3];  	seps [0] = '|';  	seps [1] = '/';  	seps [2] = '\\';  	vec = temp.Split (seps);  }  
Magic Number,SequelMaxNet,RawElement,C:\repos\shaovoon_sequelmaxnet\SequelMaxNet\RawElement.cs,Find,The following statement contains a magic number: seps [2] = '\\';  
