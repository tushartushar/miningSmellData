Implementation smell,Namespace,Class,File,Method,Description
Long Method,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The method has 134 lines of code.
Long Method,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The method has 103 lines of code.
Complex Method,Infrastructure.Azure.MessageLog,QueryCriteriaExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\MessageLog\QueryCriteriaExtensions.cs,ToExpression,Cyclomatic complexity of the method is 19
Complex Method,Infrastructure.Azure.Messaging,CommandBus,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\CommandBus.cs,BuildMessage,Cyclomatic complexity of the method is 10
Complex Method,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,Cyclomatic complexity of the method is 10
Complex Method,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,UpdateSqlFilter,Cyclomatic complexity of the method is 11
Complex Method,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReleaseMessage,Cyclomatic complexity of the method is 13
Complex Method,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,Cyclomatic complexity of the method is 11
Long Parameter List,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure,DynamicThrottling,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,DynamicThrottling,The method has 7 parameters.
Long Parameter List,Infrastructure.Azure.MessageLog,QueryCriteriaExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\MessageLog\QueryCriteriaExtensions.cs,ToExpression,The method has 14 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The method has 16 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPendingAsync,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,DeletePendingAsync,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPartitionsWithPendingEvents,The method has 8 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The method has 7 parameters.
Long Parameter List,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,ProcessPartition,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,UpdateSqlFilter,The method has 5 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The method has 5 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The method has 8 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The method has 6 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The method has 10 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReleaseMessage,The method has 11 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The method has 5 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The method has 8 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The method has 7 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,The method has 8 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,TopicSender,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\TopicSender.cs,TopicSender,The method has 5 parameters.
Long Parameter List,Infrastructure.Azure.Messaging,TopicSender,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\TopicSender.cs,SendAsync,The method has 5 parameters.
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeCompleteAsync,The method has 7 parameters.
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeAbandonAsync,The method has 7 parameters.
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The method has 9 parameters.
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The method has 14 parameters.
Long Identifier,Infrastructure.Azure,DynamicThrottling,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,DynamicThrottling,The length of the parameter intervalForRestoringDegreeOfParallelism is 39.
Long Statement,Infrastructure.Azure,DynamicThrottling,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,WaitUntilAllowedParallelism,The length of the statement  "		// Trace.WriteLine("Waiting for available degrees of parallelism. Available: " + this.availableDegreesOfParallelism + ". In use: " + this.currentParallelJobs); " is 159.
Long Statement,Infrastructure.Azure,DynamicThrottling,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,Start,The length of the statement  "	this.parallelismRestoringTimer.Change (intervalForRestoringDegreeOfParallelism' intervalForRestoringDegreeOfParallelism); " is 121.
Long Statement,Infrastructure.Azure.MessageLog,AzureEventLogReader,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\MessageLog\AzureEventLogReader.cs,Query,The length of the statement  "	var query = (IQueryable<MessageLogEntity>)context.CreateQuery<MessageLogEntity> ().Where (x => x.Kind == StandardMetadata.EventKind); " is 133.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPendingAsync,The length of the statement  "	this.pendingEventsQueueRetryPolicy.ExecuteAction (ac => query.BeginExecuteSegmented (token' ac' null)' ar => query.EndExecuteSegmented (ar)' rs =>  { " is 149.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPartitionsWithPendingEvents,The length of the statement  "	var query = TableQueryableExtensions.AsTableQuery (table.CreateQuery<EventTableServiceEntity> ().Where (eventTable => System.String.Compare (eventTable.RowKey' UnpublishedRowKeyPrefix' System.StringComparison.Ordinal) >= 0 && System.String.Compare (eventTable.RowKey' UnpublishedRowKeyPrefixUpperLimit' System.StringComparison.Ordinal) <= 0).Select (x => new { " is 360.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPartitionsWithPendingEvents,The length of the statement  "	this.pendingEventsQueueRetryPolicy.ExecuteAction (ac => query.BeginExecuteSegmented (token' ac' null)' ar => query.EndExecuteSegmented (ar)' rs =>  { " is 149.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPartitionsWithPendingEvents,The length of the statement  "				// TODO: is there a better way to get the correct exception message instead of an OperationCancelledException in the consuming thread? " is 134.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetEntitiesQuery,The length of the statement  "	var entityQuery = table.CreateQuery<EventTableServiceEntity> ().Where (eventTable => eventTable.PartitionKey == partitionKey && System.String.Compare (eventTable.RowKey' minRowKey' System.StringComparison.Ordinal) >= 0 && System.String.Compare (eventTable.RowKey' maxRowKey' System.StringComparison.Ordinal) <= 0).AsTableQuery<EventTableServiceEntity> (); " is 355.
Long Statement,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,Start,The length of the statement  "			foreach (var key in GetThrottlingEnumerable (this.enqueuedKeys.GetConsumingEnumerable (cancellationToken)' cancellationToken)) { " is 128.
Long Statement,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,ProcessPartition,The length of the statement  "		Trace.TraceError ("An error occurred while getting the events pending for publishing for partition {0}:\r\n{1}"' key' ex); " is 122.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,Initialize,The length of the statement  "	var serviceUri = ServiceBusEnvironment.CreateServiceUri (settings.ServiceUriScheme' settings.ServiceNamespace' settings.ServicePath); " is 133.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The length of the statement  "		throw new ArgumentOutOfRangeException (string.Format (CultureInfo.CurrentCulture' "Subscription '{0}' has not been registered for an event bus topic in the service bus configuration."' subscription)); " is 200.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The length of the statement  "			receiver = (IMessageReceiver)new SessionSubscriptionReceiver (this.settings' topicSettings.Path' subscription' true' instrumentation); " is 134.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The length of the statement  "			receiver = (IMessageReceiver)new SubscriptionReceiver (this.settings' topicSettings.Path' subscription' true' instrumentation); " is 127.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The length of the statement  "			Trace.TraceError ("An unrecoverable error occurred while trying to accept a session in subscription {1}:\r\n{0}"' ex' this.subscription); " is 137.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The length of the statement  "		this.receiveRetryPolicy.ExecuteAction (cb => this.client.BeginAcceptMessageSession (AcceptSessionLongPollingTimeout' cb' null)' ar =>  { " is 136.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "					Trace.TraceWarning ("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription); " is 158.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "				Trace.TraceError ("An unrecoverable error occurred while trying to close a session in subscription {1}:\r\n{0}"' ex' this.subscription); " is 136.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "			// Allow some time for releasing the messages before closing. Also' continue in a non I/O completion thread in order to block. " is 126.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "	// Declare an action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 123.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "									this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds); " is 127.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "	// Initialize a custom action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 132.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "		Trace.TraceError ("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription); " is 144.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReleaseMessage,The length of the statement  "		msg.SafeDeadLetterAsync (this.subscription' releaseAction.DeadLetterReason' releaseAction.DeadLetterDescription' operationSucceeded =>  { " is 137.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "	// Declare an action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 123.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "									this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds); " is 127.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "						this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 123.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "	// Initialize a custom action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 132.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "		Trace.TraceError ("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription); " is 144.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,The length of the statement  "		msg.SafeDeadLetterAsync (this.subscription' releaseAction.DeadLetterReason' releaseAction.DeadLetterDescription' success =>  { " is 126.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,Send,The length of the statement  "		// Trace.TraceInformation("Command with id {0} was not handled locally. Sending it and all remaining commands through the bus."' pending[0].Body.Id); " is 149.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "		var traceIdentifier = string.Format (CultureInfo.CurrentCulture' " (local handling of command with id {0})"' command.Body.Id); " is 126.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "		handled = this.commandDispatcher.ProcessMessage (traceIdentifier' command.Body' command.MessageId' command.CorrelationId); " is 122.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "		Trace.TraceWarning ("Exception handling command with id {0} synchronously: {1}. Command will be sent through the bus."' command.Body.Id' e.Message); " is 148.
Long Statement,Infrastructure.Azure.Messaging,TopicSender,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\TopicSender.cs,SendAsync,The length of the statement  "	this.retryPolicy.ExecuteAction (ac => this.DoBeginSendMessage (messageFactory ()' ac)' this.DoEndSendMessage' successCallback' ex =>  { " is 135.
Long Statement,Infrastructure.Azure.Messaging.Handling,CommandDispatcher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\CommandDispatcher.cs,Register,The length of the statement  "	var supportedCommandTypes = commandHandler.GetType ().GetInterfaces ().Where (iface => iface.IsGenericType && iface.GetGenericTypeDefinition () == genericHandler).Select (iface => iface.GetGenericArguments () [0]).ToList (); " is 224.
Long Statement,Infrastructure.Azure.Messaging.Handling,CommandDispatcher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\CommandDispatcher.cs,ProcessMessage,The length of the statement  "		// Trace.WriteLine(string.Format(CultureInfo.InvariantCulture' "Command{0} handled by {1}."' traceIdentifier' handler.GetType().FullName)); " is 139.
Long Statement,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "		Trace.TraceError ("An error occurred while processing the message" + traceIdentifier + " and will be dead-lettered:\r\n{0}"' e); " is 128.
Long Statement,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "		Trace.TraceWarning ("An error occurred while processing the message" + traceIdentifier + " and will be abandoned:\r\n{0}"' e); " is 126.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeCompleteAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginComplete (ac' null)' message.EndComplete' message' callback' "An error occurred while completing message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 379.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeAbandonAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginAbandon (ac' null)' message.EndAbandon' message' callback' "An error occurred while abandoning message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 377.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The length of the statement  "	SafeMessagingActionAsync (ac => message.BeginDeadLetter (reason' description' ac' null)' message.EndDeadLetter' message' callback' "An error occurred while dead-lettering message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' message.MessageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 408.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The length of the statement  "		Trace.TraceWarning ("An error occurred in attempt number {1} to release message {3} in subscription {2}: {0}"' e.LastException.GetType ().Name + " - " + e.LastException.Message' e.CurrentRetryCount' subscription' message.MessageId); " is 232.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The length of the statement  "			Trace.TraceWarning (actionErrorDescription' messageId' subscription' e.GetType ().Name + " - " + e.Message' processingElapsedMilliseconds' schedulingElapsedMilliseconds' messagingActionStart' roundtripStopwatch.ElapsedMilliseconds); " is 232.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageReceived,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageCompleted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SessionSubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SessionSubscriptionReceiverInstrumentation.cs,SessionStarted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SessionSubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SessionSubscriptionReceiverInstrumentation.cs,SessionEnded,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.MessageLog,AzureMessageLogWriter,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\MessageLog\AzureMessageLogWriter.cs,Save,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateTopicIfNotExists,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateSubscriptionIfNotExists,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,TryAddRule,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,TryRemoveRule,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,OnMessageCompleted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,BuildTraceIdentifier,The method has an empty catch block.
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: try {  	this.account = account;  	this.rootContainerName = rootContainerName;  	this.blobClient = account.CreateCloudBlobClient ();  	this.readRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new Incremental (1' TimeSpan.FromMilliseconds (100)' TimeSpan.FromSeconds (1)));  	this.readRetryPolicy.Retrying += (s' e) => Trace.TraceWarning ("An error occurred in attempt number {1} to read from blob storage: {0}"' e.LastException.Message' e.CurrentRetryCount);  	this.writeRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new FixedInterval (1' TimeSpan.FromSeconds (10)) {  		FastFirstRetry = false  	});  	this.writeRetryPolicy.Retrying += (s' e) => Trace.TraceWarning ("An error occurred in attempt number {1} to write to blob storage: {0}"' e.LastException.Message' e.CurrentRetryCount);  	var containerReference = this.blobClient.GetContainerReference (this.rootContainerName);  	this.writeRetryPolicy.ExecuteAction (() => containerReference.CreateIfNotExists ());  }  catch (Exception ex) {  	string msg = ex.Message;  	throw;  }  
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: try {  	this.account = account;  	this.rootContainerName = rootContainerName;  	this.blobClient = account.CreateCloudBlobClient ();  	this.readRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new Incremental (1' TimeSpan.FromMilliseconds (100)' TimeSpan.FromSeconds (1)));  	this.readRetryPolicy.Retrying += (s' e) => Trace.TraceWarning ("An error occurred in attempt number {1} to read from blob storage: {0}"' e.LastException.Message' e.CurrentRetryCount);  	this.writeRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new FixedInterval (1' TimeSpan.FromSeconds (10)) {  		FastFirstRetry = false  	});  	this.writeRetryPolicy.Retrying += (s' e) => Trace.TraceWarning ("An error occurred in attempt number {1} to write to blob storage: {0}"' e.LastException.Message' e.CurrentRetryCount);  	var containerReference = this.blobClient.GetContainerReference (this.rootContainerName);  	this.writeRetryPolicy.ExecuteAction (() => containerReference.CreateIfNotExists ());  }  catch (Exception ex) {  	string msg = ex.Message;  	throw;  }  
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: this.readRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new Incremental (1' TimeSpan.FromMilliseconds (100)' TimeSpan.FromSeconds (1)));  
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: this.writeRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy> (new FixedInterval (1' TimeSpan.FromSeconds (10)) {  	FastFirstRetry = false  });  
Magic Number,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The following statement contains a magic number: if (this.InstrumentationEnabled) {  	try {  		if (success) {  			this.totalMessagesSuccessfullyProcessedCounter.Increment ();  		}  		else {  			this.totalMessagesUnsuccessfullyProcessedCounter.Increment ();  		}  		this.averageMessageProcessingTimeCounter.IncrementBy (elapsedMilliseconds / 100);  		this.averageMessageProcessingTimeBaseCounter.Increment ();  	}  	catch (ObjectDisposedException) {  	}  }  
Magic Number,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The following statement contains a magic number: try {  	if (success) {  		this.totalMessagesSuccessfullyProcessedCounter.Increment ();  	}  	else {  		this.totalMessagesUnsuccessfullyProcessedCounter.Increment ();  	}  	this.averageMessageProcessingTimeCounter.IncrementBy (elapsedMilliseconds / 100);  	this.averageMessageProcessingTimeBaseCounter.Increment ();  }  catch (ObjectDisposedException) {  }  
Magic Number,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The following statement contains a magic number: this.averageMessageProcessingTimeCounter.IncrementBy (elapsedMilliseconds / 100);  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: if (typeof(IMementoOriginator).IsAssignableFrom (typeof(T)) && this.cache != null) {  	// TODO: could be replaced with a compiled lambda to make it more performant  	var mementoConstructor = typeof(T).GetConstructor (new[] {  		typeof(Guid)'  		typeof(IMemento)'  		typeof(IEnumerable<IVersionedEvent>)  	});  	if (mementoConstructor == null) {  		throw new InvalidCastException ("Type T must have a constructor with the following signature: .ctor(Guid' IMemento' IEnumerable<IVersionedEvent>)");  	}  	this.originatorEntityFactory = (id' memento' events) => (T)mementoConstructor.Invoke (new object[] {  		id'  		memento'  		events  	});  	this.cacheMementoIfApplicable = (T originator) =>  {  		string key = GetPartitionKey (originator.Id);  		var memento = ((IMementoOriginator)originator).SaveToMemento ();  		this.cache.Set (key' new Tuple<IMemento' DateTime?> (memento' DateTime.UtcNow)' new CacheItemPolicy {  			AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  		});  	};  	this.getMementoFromCache = id => (Tuple<IMemento' DateTime?>)this.cache.Get (GetPartitionKey (id));  	this.markCacheAsStale = id =>  {  		var key = GetPartitionKey (id);  		var item = (Tuple<IMemento' DateTime?>)this.cache.Get (key);  		if (item != null && item.Item2.HasValue) {  			item = new Tuple<IMemento' DateTime?> (item.Item1' null);  			this.cache.Set (key' item' new CacheItemPolicy {  				AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  			});  		}  	};  }  else {  	// if no cache object or is not a cache originator' then no-op  	this.cacheMementoIfApplicable = o =>  {  	};  	this.getMementoFromCache = id =>  {  		return null;  	};  	this.markCacheAsStale = id =>  {  	};  }  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: if (typeof(IMementoOriginator).IsAssignableFrom (typeof(T)) && this.cache != null) {  	// TODO: could be replaced with a compiled lambda to make it more performant  	var mementoConstructor = typeof(T).GetConstructor (new[] {  		typeof(Guid)'  		typeof(IMemento)'  		typeof(IEnumerable<IVersionedEvent>)  	});  	if (mementoConstructor == null) {  		throw new InvalidCastException ("Type T must have a constructor with the following signature: .ctor(Guid' IMemento' IEnumerable<IVersionedEvent>)");  	}  	this.originatorEntityFactory = (id' memento' events) => (T)mementoConstructor.Invoke (new object[] {  		id'  		memento'  		events  	});  	this.cacheMementoIfApplicable = (T originator) =>  {  		string key = GetPartitionKey (originator.Id);  		var memento = ((IMementoOriginator)originator).SaveToMemento ();  		this.cache.Set (key' new Tuple<IMemento' DateTime?> (memento' DateTime.UtcNow)' new CacheItemPolicy {  			AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  		});  	};  	this.getMementoFromCache = id => (Tuple<IMemento' DateTime?>)this.cache.Get (GetPartitionKey (id));  	this.markCacheAsStale = id =>  {  		var key = GetPartitionKey (id);  		var item = (Tuple<IMemento' DateTime?>)this.cache.Get (key);  		if (item != null && item.Item2.HasValue) {  			item = new Tuple<IMemento' DateTime?> (item.Item1' null);  			this.cache.Set (key' item' new CacheItemPolicy {  				AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  			});  		}  	};  }  else {  	// if no cache object or is not a cache originator' then no-op  	this.cacheMementoIfApplicable = o =>  {  	};  	this.getMementoFromCache = id =>  {  		return null;  	};  	this.markCacheAsStale = id =>  {  	};  }  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: this.cacheMementoIfApplicable = (T originator) =>  {  	string key = GetPartitionKey (originator.Id);  	var memento = ((IMementoOriginator)originator).SaveToMemento ();  	this.cache.Set (key' new Tuple<IMemento' DateTime?> (memento' DateTime.UtcNow)' new CacheItemPolicy {  		AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  	});  };  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: this.cache.Set (key' new Tuple<IMemento' DateTime?> (memento' DateTime.UtcNow)' new CacheItemPolicy {  	AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  });  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: this.markCacheAsStale = id =>  {  	var key = GetPartitionKey (id);  	var item = (Tuple<IMemento' DateTime?>)this.cache.Get (key);  	if (item != null && item.Item2.HasValue) {  		item = new Tuple<IMemento' DateTime?> (item.Item1' null);  		this.cache.Set (key' item' new CacheItemPolicy {  			AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  		});  	}  };  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: if (item != null && item.Item2.HasValue) {  	item = new Tuple<IMemento' DateTime?> (item.Item1' null);  	this.cache.Set (key' item' new CacheItemPolicy {  		AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  	});  }  
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: this.cache.Set (key' item' new CacheItemPolicy {  	AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes (30)  });  
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 230' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 10' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 230' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 10' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 230' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 10' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 230' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 10' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 230' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 10' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: if (this.requiresSequentialProcessing) {  	this.client.PrefetchCount = 10;  }  else {  	this.client.PrefetchCount = 15;  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: if (this.requiresSequentialProcessing) {  	this.client.PrefetchCount = 10;  }  else {  	this.client.PrefetchCount = 15;  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 10;  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 15;  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 160' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 10000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 160' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 10000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 160' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 10000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 160' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 10000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 160' minDegreeOfParallelism: 30' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 10000);  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	// Initialize a custom action acting as a callback whenever a non-transient exception occurs while accepting a session.  	Action<Exception> recoverAcceptSession = ex =>  {  		// Just log an exception. Do not allow an unhandled exception to terminate the message receive loop abnormally.  		Trace.TraceError ("An unrecoverable error occurred while trying to accept a session in subscription {1}:\r\n{0}"' ex' this.subscription);  		this.dynamicThrottling.Penalize ();  		if (!cancellationToken.IsCancellationRequested) {  			// Continue accepting new sessions until told to stop regardless of any exceptions.  			TaskEx.Delay (10000).ContinueWith (t => AcceptSession (cancellationToken));  		}  	};  	this.receiveRetryPolicy.ExecuteAction (cb => this.client.BeginAcceptMessageSession (AcceptSessionLongPollingTimeout' cb' null)' ar =>  {  		// Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.  		try {  			return this.client.EndAcceptMessageSession (ar);  		}  		catch (TimeoutException) {  			// TimeoutException is not just transient but completely expected in this case' so not relying on Topaz to retry  			return null;  		}  	}' session =>  {  		if (session != null) {  			this.instrumentation.SessionStarted ();  			this.dynamicThrottling.NotifyWorkStarted ();  			// starts a new task to process new sessions in parallel when enough threads are available  			Task.Factory.StartNew (() => this.AcceptSession (cancellationToken)' cancellationToken);  			this.ReceiveMessagesAndCloseSession (session' cancellationToken);  		}  		else {  			this.AcceptSession (cancellationToken);  		}  	}' recoverAcceptSession);  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	// Continue accepting new sessions until told to stop regardless of any exceptions.  	TaskEx.Delay (10000).ContinueWith (t => AcceptSession (cancellationToken));  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The following statement contains a magic number: TaskEx.Delay (10000).ContinueWith (t => AcceptSession (cancellationToken));  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: try {  	unreleasedMessages.Signal ();  	if (!unreleasedMessages.Wait (15000' cancellationToken)) {  		Trace.TraceWarning ("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription);  	}  }  catch (OperationCanceledException) {  }  finally {  	unreleasedMessages.Dispose ();  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: if (!unreleasedMessages.Wait (15000' cancellationToken)) {  	Trace.TraceWarning ("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription);  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: if (this.requiresSequentialProcessing) {  	doClose.Invoke ();  }  else {  	// Allow some time for releasing the messages before closing. Also' continue in a non I/O completion thread in order to block.  	TaskEx.Delay (200).ContinueWith (t => doClose ());  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: TaskEx.Delay (200).ContinueWith (t => doClose ());  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: this.receiveRetryPolicy.ExecuteAction (cb =>  {  	// Start receiving a new message asynchronously.  	// Does not wait for new messages to arrive in a session. If no further messages we will just close the session.  	session.BeginReceive (TimeSpan.Zero' cb' null);  }' // Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.  session.EndReceive' msg =>  {  	// Process the message once it was successfully received  	// Check if we actually received any messages.  	if (msg != null) {  		var roundtripStopwatch = Stopwatch.StartNew ();  		long schedulingElapsedMilliseconds = 0;  		long processingElapsedMilliseconds = 0;  		unreleasedMessages.AddCount ();  		Task.Factory.StartNew (() =>  {  			var releaseAction = MessageReleaseAction.AbandonMessage;  			try {  				this.instrumentation.MessageReceived ();  				schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  				// Make sure the process was told to stop receiving while it was waiting for a new message.  				if (!cancellationToken.IsCancellationRequested) {  					try {  						try {  							// Process the received message.  							releaseAction = this.InvokeMessageHandler (msg);  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  							this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  						}  						catch {  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  							this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  							throw;  						}  					}  					finally {  						if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  							this.dynamicThrottling.Penalize ();  						}  					}  				}  			}  			finally {  				// Ensure that any resources allocated by a BrokeredMessage instance are released.  				if (this.requiresSequentialProcessing) {  					this.ReleaseMessage (msg' releaseAction' () =>  {  						receiveNext ();  					}' () =>  {  						closeSession (false);  					}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  				}  				else {  					// Receives next without waiting for the message to be released.  					this.ReleaseMessage (msg' releaseAction' () =>  {  					}' () =>  {  						this.dynamicThrottling.Penalize ();  					}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  					receiveNext.Invoke ();  				}  			}  		});  	}  	else {  		// no more messages in the session' close it and do not continue receiving  		closeSession (true);  	}  }' ex =>  {  	// Invoke a custom action to indicate that we have encountered an exception and  	// need further decision as to whether to continue receiving messages.  	recoverReceive.Invoke (ex);  });  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: if (msg != null) {  	var roundtripStopwatch = Stopwatch.StartNew ();  	long schedulingElapsedMilliseconds = 0;  	long processingElapsedMilliseconds = 0;  	unreleasedMessages.AddCount ();  	Task.Factory.StartNew (() =>  {  		var releaseAction = MessageReleaseAction.AbandonMessage;  		try {  			this.instrumentation.MessageReceived ();  			schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  			// Make sure the process was told to stop receiving while it was waiting for a new message.  			if (!cancellationToken.IsCancellationRequested) {  				try {  					try {  						// Process the received message.  						releaseAction = this.InvokeMessageHandler (msg);  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  					}  					catch {  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  						throw;  					}  				}  				finally {  					if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  						this.dynamicThrottling.Penalize ();  					}  				}  			}  		}  		finally {  			// Ensure that any resources allocated by a BrokeredMessage instance are released.  			if (this.requiresSequentialProcessing) {  				this.ReleaseMessage (msg' releaseAction' () =>  {  					receiveNext ();  				}' () =>  {  					closeSession (false);  				}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  			}  			else {  				// Receives next without waiting for the message to be released.  				this.ReleaseMessage (msg' releaseAction' () =>  {  				}' () =>  {  					this.dynamicThrottling.Penalize ();  				}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  				receiveNext.Invoke ();  			}  		}  	});  }  else {  	// no more messages in the session' close it and do not continue receiving  	closeSession (true);  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: Task.Factory.StartNew (() =>  {  	var releaseAction = MessageReleaseAction.AbandonMessage;  	try {  		this.instrumentation.MessageReceived ();  		schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  		// Make sure the process was told to stop receiving while it was waiting for a new message.  		if (!cancellationToken.IsCancellationRequested) {  			try {  				try {  					// Process the received message.  					releaseAction = this.InvokeMessageHandler (msg);  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  				}  				catch {  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  					throw;  				}  			}  			finally {  				if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  					this.dynamicThrottling.Penalize ();  				}  			}  		}  	}  	finally {  		// Ensure that any resources allocated by a BrokeredMessage instance are released.  		if (this.requiresSequentialProcessing) {  			this.ReleaseMessage (msg' releaseAction' () =>  {  				receiveNext ();  			}' () =>  {  				closeSession (false);  			}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  		}  		else {  			// Receives next without waiting for the message to be released.  			this.ReleaseMessage (msg' releaseAction' () =>  {  			}' () =>  {  				this.dynamicThrottling.Penalize ();  			}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  			receiveNext.Invoke ();  		}  	}  });  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: try {  	this.instrumentation.MessageReceived ();  	schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  	// Make sure the process was told to stop receiving while it was waiting for a new message.  	if (!cancellationToken.IsCancellationRequested) {  		try {  			try {  				// Process the received message.  				releaseAction = this.InvokeMessageHandler (msg);  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  			}  			catch {  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  				throw;  			}  		}  		finally {  			if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  				this.dynamicThrottling.Penalize ();  			}  		}  	}  }  finally {  	// Ensure that any resources allocated by a BrokeredMessage instance are released.  	if (this.requiresSequentialProcessing) {  		this.ReleaseMessage (msg' releaseAction' () =>  {  			receiveNext ();  		}' () =>  {  			closeSession (false);  		}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  	}  	else {  		// Receives next without waiting for the message to be released.  		this.ReleaseMessage (msg' releaseAction' () =>  {  		}' () =>  {  			this.dynamicThrottling.Penalize ();  		}' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  		receiveNext.Invoke ();  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	try {  		try {  			// Process the received message.  			releaseAction = this.InvokeMessageHandler (msg);  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  		}  		catch {  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  			throw;  		}  	}  	finally {  		if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  			this.dynamicThrottling.Penalize ();  		}  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: try {  	try {  		// Process the received message.  		releaseAction = this.InvokeMessageHandler (msg);  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  	}  	catch {  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  		throw;  	}  }  finally {  	if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  		this.dynamicThrottling.Penalize ();  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  	this.dynamicThrottling.Penalize ();  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel) {  	this.client.PrefetchCount = 18;  }  else {  	this.client.PrefetchCount = 14;  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel) {  	this.client.PrefetchCount = 18;  }  else {  	this.client.PrefetchCount = 14;  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 18;  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.client.PrefetchCount = 14;  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling = new DynamicThrottling (maxDegreeOfParallelism: 100' minDegreeOfParallelism: 50' penaltyAmount: 3' workFailedPenaltyAmount: 5' workCompletedParallelismGain: 1' intervalForRestoringDegreeOfParallelism: 8000);  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: this.receiveRetryPolicy.ExecuteAction (cb =>  {  	// Start receiving a new message asynchronously.  	this.client.BeginReceive (ReceiveLongPollingTimeout' cb' null);  }' ar =>  {  	// Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.  	try {  		return this.client.EndReceive (ar);  	}  	catch (TimeoutException) {  		// TimeoutException is not just transient but completely expected in this case' so not relying on Topaz to retry  		return null;  	}  }' msg =>  {  	// Process the message once it was successfully received  	if (this.processInParallel) {  		// Continue receiving and processing new messages asynchronously  		Task.Factory.StartNew (receiveNext);  	}  	// Check if we actually received any messages.  	if (msg != null) {  		var roundtripStopwatch = Stopwatch.StartNew ();  		long schedulingElapsedMilliseconds = 0;  		long processingElapsedMilliseconds = 0;  		Task.Factory.StartNew (() =>  {  			var releaseAction = MessageReleaseAction.AbandonMessage;  			try {  				this.instrumentation.MessageReceived ();  				schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  				// Make sure the process was told to stop receiving while it was waiting for a new message.  				if (!cancellationToken.IsCancellationRequested) {  					try {  						try {  							// Process the received message.  							releaseAction = this.InvokeMessageHandler (msg);  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  							this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  						}  						catch {  							processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  							this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  							throw;  						}  					}  					finally {  						if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  							this.dynamicThrottling.Penalize ();  						}  					}  				}  			}  			finally {  				// Ensure that any resources allocated by a BrokeredMessage instance are released.  				this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  			}  			if (!this.processInParallel) {  				// Continue receiving and processing new messages until told to stop.  				receiveNext.Invoke ();  			}  		});  	}  	else {  		this.dynamicThrottling.NotifyWorkCompleted ();  		if (!this.processInParallel) {  			// Continue receiving and processing new messages until told to stop.  			receiveNext.Invoke ();  		}  	}  }' ex =>  {  	// Invoke a custom action to indicate that we have encountered an exception and  	// need further decision as to whether to continue receiving messages.  	recoverReceive.Invoke (ex);  });  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (msg != null) {  	var roundtripStopwatch = Stopwatch.StartNew ();  	long schedulingElapsedMilliseconds = 0;  	long processingElapsedMilliseconds = 0;  	Task.Factory.StartNew (() =>  {  		var releaseAction = MessageReleaseAction.AbandonMessage;  		try {  			this.instrumentation.MessageReceived ();  			schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  			// Make sure the process was told to stop receiving while it was waiting for a new message.  			if (!cancellationToken.IsCancellationRequested) {  				try {  					try {  						// Process the received message.  						releaseAction = this.InvokeMessageHandler (msg);  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  					}  					catch {  						processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  						this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  						throw;  					}  				}  				finally {  					if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  						this.dynamicThrottling.Penalize ();  					}  				}  			}  		}  		finally {  			// Ensure that any resources allocated by a BrokeredMessage instance are released.  			this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  		}  		if (!this.processInParallel) {  			// Continue receiving and processing new messages until told to stop.  			receiveNext.Invoke ();  		}  	});  }  else {  	this.dynamicThrottling.NotifyWorkCompleted ();  	if (!this.processInParallel) {  		// Continue receiving and processing new messages until told to stop.  		receiveNext.Invoke ();  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: Task.Factory.StartNew (() =>  {  	var releaseAction = MessageReleaseAction.AbandonMessage;  	try {  		this.instrumentation.MessageReceived ();  		schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  		// Make sure the process was told to stop receiving while it was waiting for a new message.  		if (!cancellationToken.IsCancellationRequested) {  			try {  				try {  					// Process the received message.  					releaseAction = this.InvokeMessageHandler (msg);  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  				}  				catch {  					processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  					this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  					throw;  				}  			}  			finally {  				if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  					this.dynamicThrottling.Penalize ();  				}  			}  		}  	}  	finally {  		// Ensure that any resources allocated by a BrokeredMessage instance are released.  		this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  	}  	if (!this.processInParallel) {  		// Continue receiving and processing new messages until told to stop.  		receiveNext.Invoke ();  	}  });  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: try {  	this.instrumentation.MessageReceived ();  	schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;  	// Make sure the process was told to stop receiving while it was waiting for a new message.  	if (!cancellationToken.IsCancellationRequested) {  		try {  			try {  				// Process the received message.  				releaseAction = this.InvokeMessageHandler (msg);  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  			}  			catch {  				processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  				this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  				throw;  			}  		}  		finally {  			if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  				this.dynamicThrottling.Penalize ();  			}  		}  	}  }  finally {  	// Ensure that any resources allocated by a BrokeredMessage instance are released.  	this.ReleaseMessage (msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	try {  		try {  			// Process the received message.  			releaseAction = this.InvokeMessageHandler (msg);  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  		}  		catch {  			processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  			this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  			throw;  		}  	}  	finally {  		if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  			this.dynamicThrottling.Penalize ();  		}  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: try {  	try {  		// Process the received message.  		releaseAction = this.InvokeMessageHandler (msg);  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		this.instrumentation.MessageProcessed (releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);  	}  	catch {  		processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;  		this.instrumentation.MessageProcessed (false' processingElapsedMilliseconds);  		throw;  	}  }  finally {  	if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  		this.dynamicThrottling.Penalize ();  	}  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds (45)) {  	this.dynamicThrottling.Penalize ();  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: recoverReceive = ex =>  {  	// Just log an exception. Do not allow an unhandled exception to terminate the message receive loop abnormally.  	Trace.TraceError ("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription);  	this.dynamicThrottling.NotifyWorkCompletedWithError ();  	if (!cancellationToken.IsCancellationRequested) {  		// Continue receiving and processing new messages until told to stop regardless of any exceptions.  		TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  	}  };  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested) {  	// Continue receiving and processing new messages until told to stop regardless of any exceptions.  	TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  }  
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\project-hu_hu\Tesco.Hudl\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: TaskEx.Delay (10000).ContinueWith (t => receiveMessage.Invoke ());  
