Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,run,Cyclomatic complexity of the method is 13
Complex Method,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,Cyclomatic complexity of the method is 11
Complex Method,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,Cyclomatic complexity of the method is 12
Complex Method,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,dumpBlackPoint,Cyclomatic complexity of the method is 15
Complex Method,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,Cyclomatic complexity of the method is 23
Long Statement,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The length of the statement  "				var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine; " is 133.
Long Statement,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The length of the statement  "					var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine; " is 133.
Long Statement,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,dumpBlackPoint,The length of the statement  "			result.SetPixel (offset + x' y' Color.FromArgb (luminanceMatrix [y * width + x]' luminanceMatrix [y * width + x]' luminanceMatrix [y * width + x])); " is 148.
Long Statement,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The length of the statement  "		Console.Out.WriteLine ("\nDecoded " + successful + " files out of " + total + " successfully (" + (successful * 100 / total) + "%)\n"); " is 135.
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: using (image) {  	LuminanceSource source;  	if (config.Crop == null) {  		source = new BitmapLuminanceSource (image);  	}  	else {  		int[] crop = config.Crop;  		source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  	}  	if (config.DumpBlackPoint) {  		var bitmap = new BinaryBitmap (new HybridBinarizer (source));  		dumpBlackPoint (uri' image' bitmap' source);  	}  	var reader = new BarcodeReader {  		AutoRotate = config.AutoRotate  	};  	foreach (var entry in hints)  		reader.Options.Hints.Add (entry.Key' entry.Value);  	Result result = reader.Decode (source);  	if (result != null) {  		if (config.Brief) {  			Console.Out.WriteLine (uri + ": Success");  		}  		else {  			ParsedResult parsedResult = ResultParser.parseResult (result);  			var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine;  			for (int i = 0; i < result.ResultPoints.Length; i++) {  				ResultPoint rp = result.ResultPoints [i];  				Console.Out.WriteLine ("  Point " + i + ": (" + rp.X + ''' + rp.Y + ')');  			}  			resultString += "Raw result:" + Environment.NewLine + result.Text + Environment.NewLine;  			resultString += "Parsed result:" + Environment.NewLine + parsedResult.DisplayResult + Environment.NewLine;  			Console.Out.WriteLine (resultString);  			ResultString = resultString;  		}  	}  	else {  		var resultString = originalInput + ": No barcode found";  		Console.Out.WriteLine (resultString);  		ResultString = resultString;  	}  	return result;  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: using (image) {  	LuminanceSource source;  	if (config.Crop == null) {  		source = new BitmapLuminanceSource (image);  	}  	else {  		int[] crop = config.Crop;  		source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  	}  	if (config.DumpBlackPoint) {  		var bitmap = new BinaryBitmap (new HybridBinarizer (source));  		dumpBlackPoint (uri' image' bitmap' source);  	}  	var reader = new BarcodeReader {  		AutoRotate = config.AutoRotate  	};  	foreach (var entry in hints)  		reader.Options.Hints.Add (entry.Key' entry.Value);  	Result result = reader.Decode (source);  	if (result != null) {  		if (config.Brief) {  			Console.Out.WriteLine (uri + ": Success");  		}  		else {  			ParsedResult parsedResult = ResultParser.parseResult (result);  			var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine;  			for (int i = 0; i < result.ResultPoints.Length; i++) {  				ResultPoint rp = result.ResultPoints [i];  				Console.Out.WriteLine ("  Point " + i + ": (" + rp.X + ''' + rp.Y + ')');  			}  			resultString += "Raw result:" + Environment.NewLine + result.Text + Environment.NewLine;  			resultString += "Parsed result:" + Environment.NewLine + parsedResult.DisplayResult + Environment.NewLine;  			Console.Out.WriteLine (resultString);  			ResultString = resultString;  		}  	}  	else {  		var resultString = originalInput + ": No barcode found";  		Console.Out.WriteLine (resultString);  		ResultString = resultString;  	}  	return result;  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: if (config.Crop == null) {  	source = new BitmapLuminanceSource (image);  }  else {  	int[] crop = config.Crop;  	source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: if (config.Crop == null) {  	source = new BitmapLuminanceSource (image);  }  else {  	int[] crop = config.Crop;  	source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decode,The following statement contains a magic number: source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: using (image) {  	LuminanceSource source;  	if (config.Crop == null) {  		source = new BitmapLuminanceSource (image);  	}  	else {  		int[] crop = config.Crop;  		source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  	}  	if (config.DumpBlackPoint) {  		var bitmap = new BinaryBitmap (new HybridBinarizer (source));  		dumpBlackPoint (uri' image' bitmap' source);  	}  	var reader = new BarcodeReader {  		AutoRotate = config.AutoRotate  	};  	foreach (var entry in hints)  		reader.Options.Hints.Add (entry.Key' entry.Value);  	Result[] results = reader.DecodeMultiple (source);  	if (results != null && results.Length > 0) {  		if (config.Brief) {  			Console.Out.WriteLine (uri + ": Success");  		}  		else {  			foreach (var result in results) {  				ParsedResult parsedResult = ResultParser.parseResult (result);  				var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine;  				for (int i = 0; i < result.ResultPoints.Length; i++) {  					ResultPoint rp = result.ResultPoints [i];  					Console.Out.WriteLine ("  Point " + i + ": (" + rp.X + ''' + rp.Y + ')');  				}  				resultString += "Raw result:" + Environment.NewLine + result.Text + Environment.NewLine;  				resultString += "Parsed result:" + Environment.NewLine + parsedResult.DisplayResult + Environment.NewLine;  				Console.Out.WriteLine (resultString);  				ResultString = resultString;  			}  		}  		return results;  	}  	else {  		var resultString = originalInput + ": No barcode found";  		Console.Out.WriteLine (resultString);  		ResultString = resultString;  	}  	return null;  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: using (image) {  	LuminanceSource source;  	if (config.Crop == null) {  		source = new BitmapLuminanceSource (image);  	}  	else {  		int[] crop = config.Crop;  		source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  	}  	if (config.DumpBlackPoint) {  		var bitmap = new BinaryBitmap (new HybridBinarizer (source));  		dumpBlackPoint (uri' image' bitmap' source);  	}  	var reader = new BarcodeReader {  		AutoRotate = config.AutoRotate  	};  	foreach (var entry in hints)  		reader.Options.Hints.Add (entry.Key' entry.Value);  	Result[] results = reader.DecodeMultiple (source);  	if (results != null && results.Length > 0) {  		if (config.Brief) {  			Console.Out.WriteLine (uri + ": Success");  		}  		else {  			foreach (var result in results) {  				ParsedResult parsedResult = ResultParser.parseResult (result);  				var resultString = originalInput + " (format: " + result.BarcodeFormat + "' type: " + parsedResult.Type + "):" + Environment.NewLine;  				for (int i = 0; i < result.ResultPoints.Length; i++) {  					ResultPoint rp = result.ResultPoints [i];  					Console.Out.WriteLine ("  Point " + i + ": (" + rp.X + ''' + rp.Y + ')');  				}  				resultString += "Raw result:" + Environment.NewLine + result.Text + Environment.NewLine;  				resultString += "Parsed result:" + Environment.NewLine + parsedResult.DisplayResult + Environment.NewLine;  				Console.Out.WriteLine (resultString);  				ResultString = resultString;  			}  		}  		return results;  	}  	else {  		var resultString = originalInput + ": No barcode found";  		Console.Out.WriteLine (resultString);  		ResultString = resultString;  	}  	return null;  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: if (config.Crop == null) {  	source = new BitmapLuminanceSource (image);  }  else {  	int[] crop = config.Crop;  	source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: if (config.Crop == null) {  	source = new BitmapLuminanceSource (image);  }  else {  	int[] crop = config.Crop;  	source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  }  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  
Magic Number,CommandLineDecoder,DecodeThread,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\DecodeThread.cs,decodeMulti,The following statement contains a magic number: source = new BitmapLuminanceSource (image).crop (crop [0]' crop [1]' crop [2]' crop [3]);  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if ("--try_harder".Equals (arg)) {  		config.TryHarder = true;  	}  	else if ("--pure_barcode".Equals (arg)) {  		config.PureBarcode = true;  	}  	else if ("--products_only".Equals (arg)) {  		config.ProductsOnly = true;  	}  	else if ("--dump_results".Equals (arg)) {  		config.DumpResults = true;  	}  	else if ("--dump_black_point".Equals (arg)) {  		config.DumpBlackPoint = true;  	}  	else if ("--multi".Equals (arg)) {  		config.Multi = true;  	}  	else if ("--brief".Equals (arg)) {  		config.Brief = true;  	}  	else if ("--recursive".Equals (arg)) {  		config.Recursive = true;  	}  	else if ("--autorotate".Equals (arg)) {  		config.AutoRotate = true;  	}  	else if (arg.StartsWith ("--crop")) {  		int[] crop = new int[4];  		String[] tokens = arg.Substring (7).Split (''');  		for (int i = 0; i < crop.Length; i++) {  			crop [i] = int.Parse (tokens [i]);  		}  		config.Crop = crop;  	}  	else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  		int threadsCount = int.Parse (arg.Substring (10));  		if (threadsCount > 1) {  			config.Threads = threadsCount;  		}  	}  	else if (arg.StartsWith ("-")) {  		Console.Error.WriteLine ("Unknown command line option " + arg);  		printUsage ();  		return;  	}  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if ("--try_harder".Equals (arg)) {  		config.TryHarder = true;  	}  	else if ("--pure_barcode".Equals (arg)) {  		config.PureBarcode = true;  	}  	else if ("--products_only".Equals (arg)) {  		config.ProductsOnly = true;  	}  	else if ("--dump_results".Equals (arg)) {  		config.DumpResults = true;  	}  	else if ("--dump_black_point".Equals (arg)) {  		config.DumpBlackPoint = true;  	}  	else if ("--multi".Equals (arg)) {  		config.Multi = true;  	}  	else if ("--brief".Equals (arg)) {  		config.Brief = true;  	}  	else if ("--recursive".Equals (arg)) {  		config.Recursive = true;  	}  	else if ("--autorotate".Equals (arg)) {  		config.AutoRotate = true;  	}  	else if (arg.StartsWith ("--crop")) {  		int[] crop = new int[4];  		String[] tokens = arg.Substring (7).Split (''');  		for (int i = 0; i < crop.Length; i++) {  			crop [i] = int.Parse (tokens [i]);  		}  		config.Crop = crop;  	}  	else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  		int threadsCount = int.Parse (arg.Substring (10));  		if (threadsCount > 1) {  			config.Threads = threadsCount;  		}  	}  	else if (arg.StartsWith ("-")) {  		Console.Error.WriteLine ("Unknown command line option " + arg);  		printUsage ();  		return;  	}  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if ("--try_harder".Equals (arg)) {  		config.TryHarder = true;  	}  	else if ("--pure_barcode".Equals (arg)) {  		config.PureBarcode = true;  	}  	else if ("--products_only".Equals (arg)) {  		config.ProductsOnly = true;  	}  	else if ("--dump_results".Equals (arg)) {  		config.DumpResults = true;  	}  	else if ("--dump_black_point".Equals (arg)) {  		config.DumpBlackPoint = true;  	}  	else if ("--multi".Equals (arg)) {  		config.Multi = true;  	}  	else if ("--brief".Equals (arg)) {  		config.Brief = true;  	}  	else if ("--recursive".Equals (arg)) {  		config.Recursive = true;  	}  	else if ("--autorotate".Equals (arg)) {  		config.AutoRotate = true;  	}  	else if (arg.StartsWith ("--crop")) {  		int[] crop = new int[4];  		String[] tokens = arg.Substring (7).Split (''');  		for (int i = 0; i < crop.Length; i++) {  			crop [i] = int.Parse (tokens [i]);  		}  		config.Crop = crop;  	}  	else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  		int threadsCount = int.Parse (arg.Substring (10));  		if (threadsCount > 1) {  			config.Threads = threadsCount;  		}  	}  	else if (arg.StartsWith ("-")) {  		Console.Error.WriteLine ("Unknown command line option " + arg);  		printUsage ();  		return;  	}  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if ("--try_harder".Equals (arg)) {  		config.TryHarder = true;  	}  	else if ("--pure_barcode".Equals (arg)) {  		config.PureBarcode = true;  	}  	else if ("--products_only".Equals (arg)) {  		config.ProductsOnly = true;  	}  	else if ("--dump_results".Equals (arg)) {  		config.DumpResults = true;  	}  	else if ("--dump_black_point".Equals (arg)) {  		config.DumpBlackPoint = true;  	}  	else if ("--multi".Equals (arg)) {  		config.Multi = true;  	}  	else if ("--brief".Equals (arg)) {  		config.Brief = true;  	}  	else if ("--recursive".Equals (arg)) {  		config.Recursive = true;  	}  	else if ("--autorotate".Equals (arg)) {  		config.AutoRotate = true;  	}  	else if (arg.StartsWith ("--crop")) {  		int[] crop = new int[4];  		String[] tokens = arg.Substring (7).Split (''');  		for (int i = 0; i < crop.Length; i++) {  			crop [i] = int.Parse (tokens [i]);  		}  		config.Crop = crop;  	}  	else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  		int threadsCount = int.Parse (arg.Substring (10));  		if (threadsCount > 1) {  			config.Threads = threadsCount;  		}  	}  	else if (arg.StartsWith ("-")) {  		Console.Error.WriteLine ("Unknown command line option " + arg);  		printUsage ();  		return;  	}  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--try_harder".Equals (arg)) {  	config.TryHarder = true;  }  else if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--try_harder".Equals (arg)) {  	config.TryHarder = true;  }  else if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--try_harder".Equals (arg)) {  	config.TryHarder = true;  }  else if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--try_harder".Equals (arg)) {  	config.TryHarder = true;  }  else if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--pure_barcode".Equals (arg)) {  	config.PureBarcode = true;  }  else if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--products_only".Equals (arg)) {  	config.ProductsOnly = true;  }  else if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_results".Equals (arg)) {  	config.DumpResults = true;  }  else if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--dump_black_point".Equals (arg)) {  	config.DumpBlackPoint = true;  }  else if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--multi".Equals (arg)) {  	config.Multi = true;  }  else if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--brief".Equals (arg)) {  	config.Brief = true;  }  else if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--recursive".Equals (arg)) {  	config.Recursive = true;  }  else if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if ("--autorotate".Equals (arg)) {  	config.AutoRotate = true;  }  else if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--crop")) {  	int[] crop = new int[4];  	String[] tokens = arg.Substring (7).Split (''');  	for (int i = 0; i < crop.Length; i++) {  		crop [i] = int.Parse (tokens [i]);  	}  	config.Crop = crop;  }  else if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--threads") && arg.Length >= 10) {  	int threadsCount = int.Parse (arg.Substring (10));  	if (threadsCount > 1) {  		config.Threads = threadsCount;  	}  }  else if (arg.StartsWith ("-")) {  	Console.Error.WriteLine ("Unknown command line option " + arg);  	printUsage ();  	return;  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: if (total > 1) {  	Console.Out.WriteLine ("\nDecoded " + successful + " files out of " + total + " successfully (" + (successful * 100 / total) + "%)\n");  }  
Magic Number,CommandLineDecoder,Program,C:\repos\dawidcieszynski_ZXing.Net\Clients\CommandLineDecoder\Program.cs,Main,The following statement contains a magic number: Console.Out.WriteLine ("\nDecoded " + successful + " files out of " + total + " successfully (" + (successful * 100 / total) + "%)\n");  
