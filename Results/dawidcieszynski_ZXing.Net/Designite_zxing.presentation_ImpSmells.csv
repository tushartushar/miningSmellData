Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZXing.Rendering,WriteableBitmapRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\WriteableBitmapRenderer.cs,Render,The method has 114 lines of code.
Complex Method,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,BitmapSourceLuminanceSource,Cyclomatic complexity of the method is 17
Complex Method,ZXing.Rendering,GeometryRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\GeometryRenderer.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,ZXing.Rendering,WriteableBitmapRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\WriteableBitmapRenderer.cs,Render,Cyclomatic complexity of the method is 12
Long Parameter List,ZXing.Rendering,GeometryRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\GeometryRenderer.cs,Render,The method has 6 parameters.
Long Statement,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The length of the statement  "			luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight); " is 121.
Long Statement,ZXing.Rendering,GeometryRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\GeometryRenderer.cs,Render,The length of the statement  "	return new PathGeometry (cycles.Select (x => new PathFigure (x.First ().ToPoint (1)' x.Skip (1).Select (y => new LineSegment (y.ToPoint (1)' true))' true))); " is 157.
Long Statement,ZXing.Rendering,WriteableBitmapRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\WriteableBitmapRenderer.cs,Render,The length of the statement  "	bool outputContent = (options == null || !options.PureBarcode) && !String.IsNullOrEmpty (content) && (format == BarcodeFormat.CODE_39 || format == BarcodeFormat.CODE_128 || format == BarcodeFormat.EAN_13 || format == BarcodeFormat.EAN_8 || format == BarcodeFormat.CODABAR || format == BarcodeFormat.ITF || format == BarcodeFormat.UPC_A || format == BarcodeFormat.MSI || format == BarcodeFormat.PLESSEY); " is 403.
Long Statement,ZXing.Rendering,WriteableBitmapRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\WriteableBitmapRenderer.cs,Render,The length of the statement  "         using (var stream = System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.AsStream(bmp.PixelBuffer))" is 123.
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var r = buffer [curX];  		var g = buffer [curX + 1];  		var b = buffer [curX + 2];  		luminances [luminanceIndex] = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceRGB,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var r = buffer [curX];  	var g = buffer [curX + 1];  	var b = buffer [curX + 2];  	luminances [luminanceIndex] = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		luminances [luminanceIndex] = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	luminances [luminanceIndex] = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var b = buffer [curX];  		var g = buffer [curX + 1];  		var r = buffer [curX + 2];  		var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  		var alpha = buffer [curX + 3];  		luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  		luminances [luminanceIndex] = luminance;  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var b = buffer [curX];  	var g = buffer [curX + 1];  	var r = buffer [curX + 2];  	var luminance = (byte)((RChannelWeight * r + GChannelWeight * g + BChannelWeight * b) >> ChannelWeight);  	var alpha = buffer [curX + 3];  	luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  	luminances [luminanceIndex] = luminance;  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGRA,The following statement contains a magic number: luminance = (byte)(((luminance * alpha) >> 8) + (255 * (255 - alpha) >> 8));  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curY = 0; curY < height; curY++) {  	bitmap.CopyPixels (rect' buffer' bufferSize' 0);  	for (var curX = 0; curX < bufferSize; curX += stepX) {  		var byte1 = buffer [curX];  		var byte2 = buffer [curX + 1];  		var b5 = byte1 & 0x1F;  		var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  		var r5 = (byte2 >> 2) & 0x1F;  		var r8 = (r5 * 527 + 23) >> 6;  		var g8 = (g5 * 527 + 23) >> 6;  		var b8 = (b5 * 527 + 23) >> 6;  		// cheap' not fully accurate conversion  		//var pixel = (byte2 << 8) | byte1;  		//b8 = (((pixel) & 0x001F) << 3);  		//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  		//r8 = (((pixel) & 0xF800) >> 8);  		luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  		luminanceIndex++;  	}  	rect.Y++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing,BitmapSourceLuminanceSource,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\BitmapSourceLuminanceSource.cs,CalculateLuminanceBGR565,The following statement contains a magic number: for (var curX = 0; curX < bufferSize; curX += stepX) {  	var byte1 = buffer [curX];  	var byte2 = buffer [curX + 1];  	var b5 = byte1 & 0x1F;  	var g5 = (((byte1 & 0xE0) >> 5) | ((byte2 & 0x03) << 3)) & 0x1F;  	var r5 = (byte2 >> 2) & 0x1F;  	var r8 = (r5 * 527 + 23) >> 6;  	var g8 = (g5 * 527 + 23) >> 6;  	var b8 = (b5 * 527 + 23) >> 6;  	// cheap' not fully accurate conversion  	//var pixel = (byte2 << 8) | byte1;  	//b8 = (((pixel) & 0x001F) << 3);  	//g8 = (((pixel) & 0x07E0) >> 2) & 0xFF;  	//r8 = (((pixel) & 0xF800) >> 8);  	luminances [luminanceIndex] = (byte)((RChannelWeight * r8 + GChannelWeight * g8 + BChannelWeight * b8) >> ChannelWeight);  	luminanceIndex++;  }  
Magic Number,ZXing.Rendering,WriteableBitmapRenderer,C:\repos\dawidcieszynski_ZXing.Net\Source\lib\renderer\WriteableBitmapRenderer.cs,WriteableBitmapRenderer,The following statement contains a magic number: FontSize = 10.0;  
