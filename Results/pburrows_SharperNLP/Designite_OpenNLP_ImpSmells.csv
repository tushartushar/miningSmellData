Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The method has 102 lines of code.
Long Method,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,GetFeatures,The method has 113 lines of code.
Long Method,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,GetFeatures,The method has 112 lines of code.
Long Method,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The method has 186 lines of code.
Long Method,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The method has 128 lines of code.
Long Method,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The method has 129 lines of code.
Long Method,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The method has 134 lines of code.
Long Method,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The method has 126 lines of code.
Long Method,OpenNLP.Tools.SentenceDetect,SentenceDetectionContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\SentenceDetectionContextGenerator.cs,GetContext,The method has 162 lines of code.
Complex Method,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,ConstructMentionContexts,Cyclomatic complexity of the method is 8
Complex Method,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectMentions,Cyclomatic complexity of the method is 8
Complex Method,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,Cyclomatic complexity of the method is 14
Complex Method,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHeadIndex,Cyclomatic complexity of the method is 8
Complex Method,OpenNLP.Tools.Coreference.Resolver,AbstractResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\AbstractResolver.cs,StripNounPhrase,Cyclomatic complexity of the method is 13
Complex Method,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Resolve,Cyclomatic complexity of the method is 10
Complex Method,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Retain,Cyclomatic complexity of the method is 11
Complex Method,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetStringMatchFeatures,Cyclomatic complexity of the method is 13
Complex Method,OpenNLP.Tools.Coreference.Similarity,GenderModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\GenderModel.cs,SetExtents,Cyclomatic complexity of the method is 11
Complex Method,OpenNLP.Tools.Coreference.Similarity,NumberModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\NumberModel.cs,SetExtents,Cyclomatic complexity of the method is 9
Complex Method,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,Cyclomatic complexity of the method is 9
Complex Method,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessParse,Cyclomatic complexity of the method is 9
Complex Method,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,Cyclomatic complexity of the method is 29
Complex Method,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,Cyclomatic complexity of the method is 9
Complex Method,OpenNLP.Tools.Parser,EnglishHeadRules,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\EnglishHeadRules.cs,GetHead,Cyclomatic complexity of the method is 14
Complex Method,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,Cyclomatic complexity of the method is 14
Complex Method,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,Cyclomatic complexity of the method is 20
Complex Method,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddParseEvents,Cyclomatic complexity of the method is 12
Complex Method,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,Cyclomatic complexity of the method is 20
Complex Method,OpenNLP.Tools.SentenceDetect,SentenceDetectionContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\SentenceDetectionContextGenerator.cs,GetContext,Cyclomatic complexity of the method is 22
Complex Method,OpenNLP.Tools.Tokenize,TokenSpanEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenSpanEventReader.cs,AddEvents,Cyclomatic complexity of the method is 11
Complex Method,OpenNLP.Tools.Util,BeamSearch,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\BeamSearch.cs,BestSequences,Cyclomatic complexity of the method is 15
Long Parameter List,OpenNLP.Tools.Coreference,DiscourseEntity,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DiscourseEntity.cs,DiscourseEntity,The method has 5 parameters. Parameters: mention' gender' genderProbability' number' numberProbability
Long Parameter List,OpenNLP.Tools.Coreference.Mention,Mention,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\Mention.cs,Mention,The method has 5 parameters. Parameters: span' headSpan' entityId' parse' extentType
Long Parameter List,OpenNLP.Tools.Coreference.Mention,Mention,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\Mention.cs,Mention,The method has 6 parameters. Parameters: span' headSpan' entityId' parse' extentType' nameType
Long Parameter List,OpenNLP.Tools.Coreference.Mention,MentionContext,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\MentionContext.cs,MentionContext,The method has 11 parameters. Parameters: span' headSpan' entityId' parse' extentType' nameType' mentionIndex' mentionsInSentence' mentionIndexInDocument' sentenceIndex' headFinder
Long Parameter List,OpenNLP.Tools.Coreference.Mention,MentionContext,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\MentionContext.cs,MentionContext,The method has 6 parameters. Parameters: mention' mentionIndexInSentence' mentionsInSentence' mentionIndexInDocument' sentenceIndex' headFinder
Long Parameter List,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,MaximumEntropyResolver,The method has 6 parameters. Parameters: modelDirectory' name' mode' numberOfEntitiesBack' preferFirstReferent' nonReferentialResolver
Long Parameter List,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,MaximumEntropyResolver,The method has 5 parameters. Parameters: modelDirectory' modelName' mode' numberEntitiesBack' nonReferentialResolver
Long Parameter List,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,MaximumEntropyResolver,The method has 5 parameters. Parameters: modelDirectory' modelName' mode' numberEntitiesBack' preferFirstReferent
Long Parameter List,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,MaximumEntropyResolver,The method has 6 parameters. Parameters: modelDirectory' modelName' mode' numberEntitiesBack' preferFirstReferent' nonReferentialProbability
Long Parameter List,OpenNLP.Tools.Coreference.Similarity,Context,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\Context.cs,Context,The method has 7 parameters. Parameters: span' headSpan' entityId' parse' extentType' nameType' headFinder
Long Parameter List,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,ConstructExclusionSet,The method has 5 parameters. Parameters: entityKey' entities' headSets' nameSets' singletons
Long Parameter List,OpenNLP.Tools.NameFind,NameBeamSearch,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\MaximumEntropyNameFinder.cs,NameBeamSearch,The method has 5 parameters. Parameters: nameFinder' size' contextGenerator' model' beamSize
Long Parameter List,OpenNLP.Tools.Parser,EnglishTreebankParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\EnglishTreebankParser.cs,EnglishTreebankParser,The method has 5 parameters. Parameters: dataDirectory' useTagDictionary' useCaseSensitiveTagDictionary' beamSize' advancePercentage
Long Parameter List,OpenNLP.Tools.Parser,EnglishTreebankPosTagger,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\EnglishTreebankParser.cs,EnglishTreebankPosTagger,The method has 5 parameters. Parameters: modelFile' beamSize' tagDictionary' useCase' cacheSize
Long Parameter List,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,MaximumEntropyParser,The method has 5 parameters. Parameters: buildModel' checkModel' tagger' chunker' headRules
Long Parameter List,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,MaximumEntropyParser,The method has 7 parameters. Parameters: buildModel' checkModel' tagger' chunker' headRules' beamSize' advancePercentage
Long Parameter List,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,TrainModel,The method has 5 parameters. Parameters: trainingFile' modelType' headRulesFile' iterations' cutoff
Long Parameter List,OpenNLP.Tools.Parser,Parse,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\Parse.cs,Parse,The method has 5 parameters. Parameters: parseText' span' type' probability' head
Long Parameter List,OpenNLP.Tools.PosTagger,PosBeamSearch,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\MaximumEntropyPosTagger.cs,PosBeamSearch,The method has 5 parameters. Parameters: posTagger' size' contextGenerator' model' cacheSize
Long Identifier,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,DefaultLinker,The length of the parameter fixedNonReferentialProbability is 30.
Long Identifier,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The length of the parameter fixedNonReferentialProbability is 30.
Long Identifier,OpenNLP.Tools.Coreference,Linker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\ILinker.cs,,The length of the parameter SingularThirdPersonPronounPattern is 33.
Long Identifier,OpenNLP.Tools.Coreference,Linker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\ILinker.cs,,The length of the parameter PluralThirdPersonPronounPattern is 31.
Long Identifier,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,,The length of the parameter mPrenominalNamedEntitiesCollection is 34.
Long Identifier,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,,The length of the parameter mCoordinatedNounPhrasesCollection is 33.
Long Identifier,OpenNLP.Tools.Lang.English,TreebankLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\TreebankLinker.cs,TreebankLinker,The length of the parameter fixedNonReferentialProbability is 30.
Long Identifier,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The length of the parameter previousPreviousConstituentBackOff is 34.
Long Identifier,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The length of the parameter previousPreviousChunkTagBackOff is 31.
Long Statement,OpenNLP.Tools.Chunker,ChunkerEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\ChunkerEventReader.cs,AddNewEvents,The length of the statement  "				mEvents[eventIndex] = new SharpEntropy.TrainingEvent(predicates[eventIndex]' mContextGenerator.GetContext(eventIndex' tokens' tags' predicates)); " is 145.
Long Statement,OpenNLP.Tools.Chunker,EnglishTreebankChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\EnglishTreebankChunker.cs,GetChunks,The length of the statement  "			for (int currentTokenAndTag = 0' tokenAndTagCount = tokenAndTags.Length; currentTokenAndTag < tokenAndTagCount; currentTokenAndTag++) " is 133.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,UpdateExtent,The length of the statement  "					entity = new DiscourseEntity(mention' mention.GetGender()' mention.GenderProbability' mention.GetNumber()' mention.NumberProbability); " is 134.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,UpdateExtent,The length of the statement  "					DiscourseEntity newEntity = new DiscourseEntity(mention' mention.GetGender()' mention.GenderProbability' mention.GetNumber()' mention.NumberProbability); " is 153.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,UpdateExtent,The length of the statement  "					DiscourseEntity newEntity = new DiscourseEntity(mention' mention.GetGender()' mention.GenderProbability' mention.GetNumber()' mention.NumberProbability); " is 153.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,ConstructMentionContexts,The length of the statement  "                    for (int currentMentionInSentence = mentionIndex; currentMentionInSentence < mentions.Length; currentMentionInSentence++) " is 121.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,ConstructMentionContexts,The length of the statement  "				contexts[mentionIndex] = new MentionContext(mentions[mentionIndex]' mentionInSentenceIndex' mentionsInSentenceCount' mentionIndex' sentenceIndex' HeadFinder); " is 158.
Long Statement,OpenNLP.Tools.Coreference,AbstractLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\AbstractLinker.cs,ConstructMentionContexts,The length of the statement  "				//System.err.println("AbstractLinker.constructMentionContexts: mi="+mi+" sn="+mentionParse.getSentenceNumber()+" extent="+mentions[mi]+" parse="+mentionParse.getSpan()+" mc="+contexts[mi].toText()); " is 198.
Long Statement,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The length of the statement  "                    Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) }; " is 586.
Long Statement,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The length of the statement  "                    Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) }; " is 626.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectCoordinatedNounPhraseMentions,The length of the statement  "                            Util.Span nounPhraseSpan = new Util.Span((nounPhraseTokens[tokenIndex + 1]).Span.Start' (nounPhraseTokens[lastNounPhraseTokenIndex]).Span.End); " is 143.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectCoordinatedNounPhraseMentions,The length of the statement  "							//System.err.println("adding extent for conjunction in: "+np+" preeceeded by "+((Parse) npTokens.get(ti-1)).getSyntacticType()); " is 128.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectCoordinatedNounPhraseMentions,The length of the statement  "                        Util.Span nounPhraseSpan = new Util.Span((nounPhraseTokens[tokenIndex + 1]).Span.Start' (nounPhraseTokens[lastNounPhraseTokenIndex]).Span.End); " is 143.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectCoordinatedNounPhraseMentions,The length of the statement  "                    Util.Span nounPhraseSpan = new Util.Span((nounPhraseTokens[tokenIndex]).Span.Start' (nounPhraseTokens[lastNounPhraseTokenIndex]).Span.End); " is 139.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectPossessivePronouns,The length of the statement  "					Mention possessivePronounExtent = new Mention(token.Span' token.Span' token.EntityId' null' OpenNLP.Tools.Coreference.Linker.PronounModifier); " is 142.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectPossessivePronouns,The length of the statement  "					//System.err.println("AbstractEntityFinder.collectPossesivePronouns: adding possesive pronoun: "+tok+" "+tok.getEntityId()); " is 124.
Long Statement,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,GetMentions,The length of the statement  "			//System.err.println("AbstractMentionFinder.getMentions: got " + nps.size()); // + " nps' and " + nes.size() + " named entities"); " is 130.
Long Statement,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,The length of the statement  "                    //System.err.println("PTBHeadFinder.getHead: "+p.getSyntacticType()+" "+p+" parts[currentPart] "+pi+"="+parts[currentPart].getSyntacticType()+" "+parts[currentPart]); " is 166.
Long Statement,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHeadIndex,The length of the statement  "				//System.err.println("PTBHeadFinder.getHeadIndex "+p+" "+p.getSyntacticType()+" sChild "+sci+" type = "+sc.getSyntacticType()); " is 127.
Long Statement,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHeadIndex,The length of the statement  "			//System.err.println("PTBHeadFinder.getHeadIndex: "+p+" hi="+toks.size()+"-"+tokenCount+" -1 = "+(toks.size()-tokenCount -1)); " is 126.
Long Statement,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetLastHead,The length of the statement  "				//if (p.getEntityId() != -1 && head.getEntityId() != p.getEntityId()) {	System.err.println(p+" ("+p.getEntityId()+") -> "+head+" ("+head.getEntityId()+")");      } " is 163.
Long Statement,OpenNLP.Tools.Coreference.Resolver,DefaultNonReferentialResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\DefaultNonReferentialResolver.cs,GetNonReferentialProbability,The length of the statement  "				System.Console.Error.WriteLine(this + " " + mention.ToText() + " ->  null " + probability + " " + string.Join("'"' features.ToArray())); " is 136.
Long Statement,OpenNLP.Tools.Coreference.Resolver,DefaultNonReferentialResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\DefaultNonReferentialResolver.cs,Train,The length of the statement  "					System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default); " is 120.
Long Statement,OpenNLP.Tools.Coreference.Resolver,DefiniteNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\DefiniteNounResolver.cs,CanResolve,The length of the statement  "			bool rv = mtokens.Length > 1 && !mention.HeadTokenTag.StartsWith("NNP") && IsDefiniteArticle(firstTok' mention.FirstTokenTag); " is 126.
Long Statement,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,IsExcluded,The length of the statement  "			//System.err.println("IsAResolver.excluded?: ec.span="+ec.getSpan()+" cec.span="+cec.getSpan()+" cec="+cec.toText()+" lastToken="+ec.getNextToken()); " is 149.
Long Statement,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,IsExcluded,The length of the statement  "			if (currentContext.IndexSpan.End <= context.IndexSpan.End + 2 && (context.NextToken != null && (context.NextToken.ToString().Equals("'") || context.NextToken.ToString().Equals(".")))) " is 183.
Long Statement,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,GetFeatures,The length of the statement  "			features.add("t=" + ((Parse) c1toks.get(i)).getSyntacticType() + "|" + "t=" + ((Parse) c2toks.get(j)).getSyntacticType()); " is 122.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Resolve,The length of the statement  "				System.Console.Error.WriteLine(this.ToString() + ".resolve: " + expression.ToText() + " -> " + "null " + nonReferentialProbability); " is 132.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Resolve,The length of the statement  "						System.Console.Error.WriteLine("excluded " + this.ToString() + ".resolve: " + expression.ToText() + " -> " + discourseEntity + " " + mCandidateProbabilities[entityIndex]); " is 171.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Resolve,The length of the statement  "						System.Console.Error.WriteLine(this + ".resolve: " + expression.ToText() + " -> " + discourseEntity + " (" + expression.GetGender() + "'" + discourseEntity.Gender + ") " + mCandidateProbabilities[entityIndex] + " " + string.Join("'"' features)); //SupportClass.CollectionToString(lfeatures)); " is 292.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Retain,The length of the statement  "								System.Console.Error.WriteLine(this + ".retain: Referent excluded: (" + mention.Id + ") " + mention.ToText() + " " + mention.IndexSpan + " -> (" + entityMention.Id + ") " + entityMention.ToText() + " " + entityMention.Span + " " + this); " is 237.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Retain,The length of the statement  "						//if (!sampleSelection || (mention.getId() != -1 && entityMention.getId() == mention.getId()) || (!nonReferentFound && useAsDifferentExample)) { " is 144.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Retain,The length of the statement  "							System.Console.Error.WriteLine(this + ".retain: " + mention.Id + " " + mention.ToText() + " -> " + entityMention.Id + " " + currentDiscourseEntity); " is 148.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Train,The length of the statement  "                    using (System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default)) " is 127.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetSemanticCompatibilityFeature,The length of the statement  "						System.Console.Error.WriteLine("MaxentResolver.GetSemanticCompatibilityFeature: sem-compat " + sim + " " + entityContext.ToText() + " " + checkEntityContext.ToText()); " is 167.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetCompatibilityFeatures,The length of the statement  "			if (semanticCompatibilityFeature == mSimilarityCompatible && genderCompatibilityFeature == mGenderCompatible && numberCompatibilityFeature == mNumberCompatible) " is 160.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetCompatibilityFeatures,The length of the statement  "			else if (semanticCompatibilityFeature == mSimilarityIncompatible || genderCompatibilityFeature == mGenderIncompatible || numberCompatibilityFeature == mNumberIncompatible) " is 171.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,IsSubstring,The length of the statement  "            //System.err.println("MaxentResolver.IsSubstring: mentionStrip="+mentionStrip+" entityMentionStrip="+entityMentionStrip); " is 121.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetDistanceFeatures,The length of the statement  "				//hobbsEntityDistance = entityDistance - (entities within sentence from mention to end) + (entities within sentence form start to mention)  " is 138.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetDistanceFeatures,The length of the statement  "				//hobbsEntityDistance = entityDistance - (cec.maxNounLocation - cec.getNounPhraseSentenceIndex) + cec.getNounPhraseSentenceIndex;  " is 129.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetDistanceFeatures,The length of the statement  "				hobbsEntityDistance = entityDistance + (2 * currentEntityContext.NounPhraseSentenceIndex) - currentEntityContext.MaxNounPhraseSentenceIndex; " is 140.
Long Statement,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetStringMatchFeatures,The length of the statement  "				//  //System.err.println("skipping "+mention.headTokenText+" with "+xec.headTokenText+" because "+mention.headTokenTag+" != "+xec.headTokenTag); " is 144.
Long Statement,OpenNLP.Tools.Coreference.Resolver,PluralPronounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\PluralPronounResolver.cs,IsOutOfRange,The length of the statement  "			//System.err.println("MaxentPluralPronounResolver.outOfRange: ["+ec.toText()+" ("+ec.id+")] ["+cec.toText()+" ("+cec.id+")] ec.sentenceNumber=("+ec.sentenceNumber+")-cec.sentenceNumber=("+cec.sentenceNumber+") > "+NUM_SENTS_BACK_PRONOUNS);     " is 239.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "			//UPGRADE_TODO: Class 'java.util.HashMap' was converted to 'System.Collections.Hashtable' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashMap'" " is 246.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_TODO: The differences in the expected value  of parameters for constructor 'java.io.BufferedReader.BufferedReader'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 265.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_WARNING: At least one expression was used more than once in the target code. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1181'" " is 195.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_ISSUE: Method 'java.lang.Class.getResourceAsStream' was not converted. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1000_javalangClassgetResourceAsStream_javalangString'" " is 237.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//str = new System.IO.StreamReader(new System.IO.StreamReader(this.GetType().getResourceAsStream(name)' System.Text.Encoding.Default).BaseStream' new System.IO.StreamReader(this.GetType().getResourceAsStream(name)' System.Text.Encoding.Default).CurrentEncoding); " is 262.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_TODO: The differences in the expected value  of parameters for constructor 'java.io.BufferedReader.BufferedReader'  may cause compilation errors.  "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1092'" " is 265.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_WARNING: At least one expression was used more than once in the target code. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1181'" " is 195.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					//UPGRADE_TODO: Constructor 'java.io.FileReader.FileReader' was converted to 'System.IO.StreamReader' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073'" " is 242.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "					str = new System.IO.StreamReader(new System.IO.StreamReader(name' System.Text.Encoding.Default).BaseStream' new System.IO.StreamReader(name' System.Text.Encoding.Default).CurrentEncoding); " is 188.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "						//UPGRADE_TODO: Class 'java.util.HashSet' was converted to 'SupportClass.HashSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashSet'" " is 245.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "						//UPGRADE_TODO: Class 'java.util.HashSet' was converted to 'SupportClass.HashSetSupport' which has a different behavior. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilHashSet'" " is 245.
Long Statement,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The length of the statement  "				//UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.toString' may return a different value. "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1043'" " is 219.
Long Statement,OpenNLP.Tools.Coreference.Resolver,SingularPronounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\SingularPronounResolver.cs,CanResolve,The length of the statement  "			return (tag != null && tag.StartsWith("PRP") && Linker.SingularThirdPersonPronounPattern.IsMatch(mention.HeadTokenText)); " is 121.
Long Statement,OpenNLP.Tools.Coreference.Resolver,SingularPronounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\SingularPronounResolver.cs,IsOutOfRange,The length of the statement  "			//System.err.println("MaxentSingularPronounresolve.outOfRange: ["+entity.getLastExtent().toText()+" ("+entity.getId()+")] ["+mention.toText()+" ("+mention.getId()+")] entity.sentenceNumber=("+entity.getLastExtent().getSentenceNumber()+")-mention.sentenceNumber=("+mention.getSentenceNumber()+") > "+numSentencesBack);     " is 317.
Long Statement,OpenNLP.Tools.Coreference.Similarity,GenderModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\GenderModel.cs,GenderMain,The length of the statement  "			string output = "m=" + dist[model.MaleIndex] + " f=" + dist[model.FemaleIndex] + " n=" + dist[model.NeuterIndex] + " " + string.Join("'"' (model.GetFeatures(Context.ParseContext(words[0])).ToArray())); " is 201.
Long Statement,OpenNLP.Tools.Coreference.Similarity,MaximumEntropyCompatibilityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\MaximumEntropyCompatibilityModel.cs,ComputeGender,The length of the statement  "				System.Console.Error.WriteLine("MaxentCompatibilityModel.computeGender: " + context.ToString() + " m=" + genderDistribution[mGenderModel.MaleIndex] + " f=" + genderDistribution[mGenderModel.FemaleIndex] + " n=" + genderDistribution[mGenderModel.NeuterIndex]); " is 259.
Long Statement,OpenNLP.Tools.Coreference.Similarity,MaximumEntropyCompatibilityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\MaximumEntropyCompatibilityModel.cs,ComputeNumber,The length of the statement  "			//System.err.println("MaxentCompatibiltyResolver.computeNumber: "+c+" sing="+dist[numModel.getSingularIndex()]+" plural="+dist[numModel.getPluralIndex()]); " is 155.
Long Statement,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,SetExtents,The length of the statement  "                    for (int secondEntityContextIndex = firstEntityContextIndex + 1; secondEntityContextIndex < entityContexts.Count; secondEntityContextIndex++) " is 141.
Long Statement,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,SetExtents,The length of the statement  "									System.Console.Error.WriteLine(firstEntityContext.ToString() + " " + string.Join("'"' entityNameSet.ToArray()) + " " + compareEntityContext.ToString() + " " + nameSets[compareEntityContext.Id]); " is 194.
Long Statement,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,TrainModel,The length of the statement  "				System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default); " is 120.
Long Statement,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,GetNamePronounFeatures,The length of the statement  "            features.Add("ng=" + name.NameType + "'" + Resolver.AbstractResolver.GetPronounGender(pronoun.HeadTokenText.ToLower())); " is 120.
Long Statement,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,SimilarityMain,The length of the statement  "			return p + " " + string.Join("'"' model.GetFeatures(Context.ParseContext(words[0])' Context.ParseContext(words[1])).ToArray()); " is 127.
Long Statement,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The length of the statement  "            return (GetContext(((int)contextData[0])' (List<string>)contextData[1]' (List<string>)contextData[2]' (IDictionary<string' string>)contextData[3])); " is 148.
Long Statement,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessParse,The length of the statement  "					if ((finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Start) || (finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Other)) " is 159.
Long Statement,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessText,The length of the statement  "							if ((finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Start || finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Other) && (finderTags[currentFinder][currentToken - 1] == MaximumEntropyNameFinder.Start || finderTags[currentFinder][currentToken - 1] == MaximumEntropyNameFinder.Continue)) " is 324.
Long Statement,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessText,The length of the statement  "						output.Append(line.Substring(spans[currentToken - 1].End' (spans[currentToken].Start) - (spans[currentToken - 1].End))); " is 120.
Long Statement,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessText,The length of the statement  "						if (finderTags[currentFinder][tokens.Length - 1] == MaximumEntropyNameFinder.Start || finderTags[currentFinder][tokens.Length - 1] == MaximumEntropyNameFinder.Continue) " is 168.
Long Statement,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,CreateModels,The length of the statement  "					SharpEntropy.IMaximumEntropyModel model = new SharpEntropy.GisModel(new SharpEntropy.IO.BinaryGisModelReader(modelName)); " is 121.
Long Statement,OpenNLP.Tools.NameFind,MaximumEntropyNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\MaximumEntropyNameFinder.cs,TrainModel,The length of the statement  "			SharpEntropy.ITrainingEventReader eventReader = new NameFinderEventReader(new SharpEntropy.PlainTextByLineDataReader(new System.IO.StreamReader(trainingFile))); " is 160.
Long Statement,OpenNLP.Tools.NameFind,NameFinderEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\NameFinderEventReader.cs,AddEvents,The length of the statement  "				mEvents[currentToken] = new SharpEntropy.TrainingEvent(outcomesList[currentToken]' mContextGenerator.GetContext(currentToken' tokens' outcomesList' mPreviousTags)); " is 164.
Long Statement,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The length of the statement  "			feature.Append("c").Append(index).Append("=").Append(inputParse.Type).Append("|").Append(inputParse.Head.ToString()).Append("|").Append(type); " is 142.
Long Statement,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The length of the statement  "			feature.Append("cil=").Append(type).Append("'").Append(firstParse.Type).Append("|").Append(firstParse.Head.ToString()).Append("'").Append(secondParse.Type).Append("|").Append(secondParse.Head.ToString()); " is 204.
Long Statement,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The length of the statement  "			feature.Append("ci*l=").Append(type).Append("'").Append(firstParse.Type).Append("'").Append(secondParse.Type).Append("|").Append(secondParse.Head.ToString()); " is 158.
Long Statement,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The length of the statement  "			feature.Append("cil*=").Append(type).Append("'").Append(firstParse.Type).Append("|").Append(firstParse.Head.ToString()).Append("'").Append(secondParse.Type); " is 157.
Long Statement,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The length of the statement  "			string cacheKey = currentTokenIndex.ToString(System.Globalization.CultureInfo.InvariantCulture) + previousPreviousTag + previousTag " is 131.
Long Statement,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The length of the statement  "			string previousPreviousChunkTag = ChunkAndPosTag(-2' previousPreviousWord' previousPreviousTag' previousPreviousPriorDecision); " is 127.
Long Statement,OpenNLP.Tools.Parser,EnglishTreebankParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\EnglishTreebankParser.cs,DoParse,The length of the statement  "						lineBuilder.Append(currentParse.ToString() + " " + parses[currentParseIndex].Probability.ToString(System.Globalization.CultureInfo.InvariantCulture) + " "); " is 156.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The length of the statement  "						//for (System.Collections.IEnumerator pi = mOldDerivationsHeap.GetEnumerator(); pi.MoveNext() && derivationsProcessed < K; derivationsProcessed++) " is 146.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The length of the statement  "								//System.Console.Error.WriteLine("advancing ts " + derivationsProcessed + " prob=" + ((Parse) mNewDerivationsHeap.Last()).Probability); " is 135.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The length of the statement  "							for (int currentDerivation = 0' derivationCount = newDerivations.Length; currentDerivation < derivationCount; currentDerivation++) " is 130.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The length of the statement  "							System.Console.Error.WriteLine("Couldn't advance parse " + derivationLength + " stage " + derivationsProcessed + "!\n"); " is 120.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "					//System.Console.Error.WriteLine("lastStart " + lastStartIndex + " " + lastStartNode.Label + " " + lastStartNode.Probability); " is 126.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "					newParse1.AppendDerivationBuffer(highestBuildProbabilityIndex.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 123.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "				mCheckModel.Evaluate(mCheckContextGenerator.GetContext(newParse1.GetChildren()' lastStartType' lastStartIndex' advanceNodeIndex)' mCheckProbabilities); " is 151.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "				//System.Console.Out.WriteLine("check " + mCheckProbabilities[mCompleteIndex] + " " + mCheckProbabilities[mIncompleteIndex]); " is 125.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "					if (isFlat && constituent[advanceNodeIndex - lastStartIndex].Type != constituent[advanceNodeIndex - lastStartIndex].Head.Type)  " is 126.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceParses,The length of the statement  "						newParse2.Insert(new Parse(inputParse.Text' new Util.Span(lastStartNode.Span.Start' advanceNode.Span.End)' lastStartType' mCheckProbabilities[1]' mHeadRules.GetHead(constituent' lastStartType))); " is 195.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceChunks,The length of the statement  "			Util.Sequence[] chunkerSequences = mBasalChunker.TopKSequences(words' parseTags' minChunkScore - inputParse.Probability); " is 121.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceChunks,The length of the statement  "					newParses[sequenceIndex].AppendDerivationBuffer(sequenceIndex.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 123.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceChunks,The length of the statement  "					//	System.Console.Error.WriteLine(words[tagIndex] + " " + parseTags[tagIndex] + " " + tags[tagIndex] + " " + probabilities[tagIndex]); " is 134.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceChunks,The length of the statement  "							//System.Console.Error.WriteLine("Putting " + type + " at " + start + "'" + end + " " + newParses[sequenceIndex].Probability); " is 126.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceChunks,The length of the statement  "							newParses[sequenceIndex].Insert(new Parse(startParse.Text' new Util.Span(startParse.Span.Start' endParse.Span.End)' type' 1' mHeadRules.GetHead(consitituents' type))); " is 167.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,AdvanceTags,The length of the statement  "					newParses[tagSequenceIndex].AppendDerivationBuffer(tagSequenceIndex.ToString(System.Globalization.CultureInfo.InvariantCulture)); " is 129.
Long Statement,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,TrainModel,The length of the statement  "			SharpEntropy.ITrainingEventReader eventReader = new ParserEventReader(new SharpEntropy.PlainTextByLineDataReader(new System.IO.StreamReader(trainingFile))' rules' modelType); " is 174.
Long Statement,OpenNLP.Tools.Parser,Parse,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\Parse.cs,FromParseString,The length of the statement  "						consitutents.Add(new Util.Pair<string' Util.Span>(MaximumEntropyParser.TokenNode' new Util.Span(offset' offset + token.Length))); " is 129.
Long Statement,OpenNLP.Tools.Parser,Parse,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\Parse.cs,FromParseString,The length of the statement  "			for (int currentConstituent = 0' constituentCount = consitutents.Count; currentConstituent < constituentCount; currentConstituent++) " is 132.
Long Statement,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddParseEvents,The length of the statement  "							events.Add(new SharpEntropy.TrainingEvent(MaximumEntropyParser.CompleteOutcome' mCheckContextGenerator.GetContext(chunks' type' start + 1' currentChunk))); " is 155.
Long Statement,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddParseEvents,The length of the statement  "							Parse[] reducedChunks = new Parse[chunks.Length - (reduceEnd - reduceStart + 1) + 1]; //total - num_removed + 1 (for new node) " is 126.
Long Statement,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddParseEvents,The length of the statement  "							events.Add(new SharpEntropy.TrainingEvent(MaximumEntropyParser.IncompleteOutcome' mCheckContextGenerator.GetContext(chunks' type' start + 1' currentChunk))); " is 157.
Long Statement,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddChunkEvents,The length of the statement  "				events.Add(new SharpEntropy.TrainingEvent(predicates[currentToken]' mChunkContextGenerator.GetContext(currentToken' tokens.ToArray()' tags.ToArray()' predicates.ToArray()))); " is 174.
Long Statement,OpenNLP.Tools.Parser,ParserEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ParserEventReader.cs,AddTagEvents,The length of the statement  "				events.Add(new SharpEntropy.TrainingEvent(predicates[currentToken]' mPosContextGenerator.GetContext(currentToken' tokens.ToArray()' predicates.ToArray()' null))); " is 162.
Long Statement,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The length of the statement  "			string cacheKey = index.ToString(System.Globalization.CultureInfo.InvariantCulture) + tagPrevious + tagPreviousPrevious; " is 120.
Long Statement,OpenNLP.Tools.PosTagger,MaximumEntropyPosTagger,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\MaximumEntropyPosTagger.cs,GetOrderedTags,The length of the statement  "			double[] probabilities = mPosModel.Evaluate(mContextGenerator.GetContext(index' words.ToArray()' (string[]) tags.ToArray(typeof(string))' null)); " is 145.
Long Statement,OpenNLP.Tools.PosTagger,PosEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\PosEventReader.cs,Split,The length of the statement  "				System.Console.Out.WriteLine("There is a problem in your training data: " + input + " does not conform to the format WORD_TAG."); " is 129.
Long Statement,OpenNLP.Tools.SentenceDetect,MaximumEntropySentenceDetector,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\MaximumEntropySentenceDetector.cs,SentenceDetect,The length of the statement  "				sentences[currentStart] = input.Substring(startsList[currentStart - 1]' (startsList[currentStart]) - (startsList[currentStart - 1])); " is 133.
Long Statement,OpenNLP.Tools.SentenceDetect,MaximumEntropySentenceDetector,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\MaximumEntropySentenceDetector.cs,SentencePositionDetect,The length of the statement  "						positions.Add(GetFirstNonWhitespace(input' GetFirstWhitespace(input' cInt + 1)));//moIntegerPool.GetInteger(GetFirstNonWhitespace(input' GetFirstWhitespace(input' cInt + 1)))); " is 176.
Long Statement,OpenNLP.Tools.SentenceDetect,SentenceDetectionContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\SentenceDetectionContextGenerator.cs,GetContext,The length of the statement  "				for (int currentEndOfSentenceCharacter = 0' endOfSentenceCharactersLength = mEndOfSentenceCharacters.Length; currentEndOfSentenceCharacter < endOfSentenceCharactersLength; currentEndOfSentenceCharacter++) " is 204.
Long Statement,OpenNLP.Tools.SentenceDetect,SentenceDetectionContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\SentenceDetectionContextGenerator.cs,GetContext,The length of the statement  "				for (int currentEndOfSentenceCharacter = 0' endOfSentenceCharactersLength = mEndOfSentenceCharacters.Length; currentEndOfSentenceCharacter < endOfSentenceCharactersLength; currentEndOfSentenceCharacter++) " is 204.
Long Statement,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,TokenizePositions,The length of the statement  "						double[] probabilities = mModel.Evaluate(mContextGenerator.GetContext(new Util.Pair<string' int>(token' currentPosition - originalStart))); " is 139.
Long Statement,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,Tokenize,The length of the statement  "				tokens[currentToken] = input.Substring(tokenSpans[currentToken].Start' (tokenSpans[currentToken].End) - (tokenSpans[currentToken].Start)); " is 138.
Long Statement,OpenNLP.Tools.Tokenize,TokenSpanEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenSpanEventReader.cs,AddEvents,The length of the statement  "					if (candidateToken.Length > 1 && (!mSkipAlphanumerics || !MaximumEntropyTokenizer.AlphaNumeric.IsMatch(candidateToken)))  " is 120.
Long Statement,OpenNLP.Tools.Tokenize,TokenSpanEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenSpanEventReader.cs,AddEvents,The length of the statement  "                                    string[] context = mContextGenerator.GetContext(new Util.Pair<string' int>(candidateToken' currentPosition - candidateStart)); " is 126.
Long Statement,OpenNLP.Tools.Tokenize,TokenSpanEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenSpanEventReader.cs,AddEvents,The length of the statement  "                                    string[] context = mContextGenerator.GetContext(new Util.Pair<string' int>(candidateToken' trainingTokenSpan.End - candidateStart)); " is 132.
Long Statement,OpenNLP.Tools.Util,Sequence,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\Sequence.cs,GetProbabilities,The length of the statement  "			for (int currentProbability = 0' probabilityCount = mProbabilities.Count; currentProbability < probabilityCount; currentProbability++) " is 134.
Complex Conditional,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,IsPossessive,The conditional expression  "parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase"  is complex.
Complex Conditional,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,The conditional expression  "parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase"  is complex.
Complex Conditional,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,IsExcluded,The conditional expression  "currentContext.IndexSpan.End <= context.IndexSpan.End + 2 && (context.NextToken != null && (context.NextToken.ToString().Equals("'") || context.NextToken.ToString().Equals(".")))"  is complex.
Complex Conditional,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,IsDefiniteArticle,The conditional expression  "token == "the" || token == "these" || token == "these" || tag == "PRP$""  is complex.
Complex Conditional,OpenNLP.Tools.Coreference.Similarity,GenderModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\GenderModel.cs,GetGender,The conditional expression  "token == "Mrs." || token == "Mrs" || token == "Ms." || token == "Ms""  is complex.
Complex Conditional,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessText,The conditional expression  "(finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Start || finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Other) && (finderTags[currentFinder][currentToken - 1] == MaximumEntropyNameFinder.Start || finderTags[currentFinder][currentToken - 1] == MaximumEntropyNameFinder.Continue)"  is complex.
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,DefaultLinker,The constructor "DefaultLinker" calls a virtual method "InitializeHeaderFinder".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,DefaultLinker,The constructor "DefaultLinker" calls a virtual method "InitializeMentionFinder".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,DefaultLinker,The constructor "DefaultLinker" calls a virtual method "InitializeResolvers".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference.Mention,WordnetDictionary,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\WordnetDictionary.cs,WordnetDictionary,The constructor "WordnetDictionary" calls a virtual method "AddDelegate".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference.Mention,WordnetDictionary,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\WordnetDictionary.cs,WordnetDictionary,The constructor "WordnetDictionary" calls a virtual method "AddDelegate".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference.Mention,WordnetDictionary,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\WordnetDictionary.cs,WordnetDictionary,The constructor "WordnetDictionary" calls a virtual method "AddDelegate".
Virtual Method Call from Constructor,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,MaximumEntropyResolver,The constructor "MaximumEntropyResolver" calls a virtual method "GetNumberEntitiesBack".
Magic Number,OpenNLP.Tools.Chunker,ChunkerEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\ChunkerEventReader.cs,AddNewEvents,The following statement contains a magic number: for (string line = mDataReader.NextToken(); line.Length > 0; line = mDataReader.NextToken())  			{  				string[] parts = line.Split(' ');  				if (parts.Length != 3)   				{  					//skip this line; it is in error  				}  				else   				{  					tokenList.Add(parts[0]);  					tagList.Add(parts[1]);  					predicateList.Add(parts[2]);  				}  			}
Magic Number,OpenNLP.Tools.Chunker,ChunkerEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\ChunkerEventReader.cs,AddNewEvents,The following statement contains a magic number: for (string line = mDataReader.NextToken(); line.Length > 0; line = mDataReader.NextToken())  			{  				string[] parts = line.Split(' ');  				if (parts.Length != 3)   				{  					//skip this line; it is in error  				}  				else   				{  					tokenList.Add(parts[0]);  					tagList.Add(parts[1]);  					predicateList.Add(parts[2]);  				}  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: string[] outcomes = ((Util.Sequence) data[2]).Outcomes.ToArray();
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: return (GetContext(((int)data[0])' (object[])data[1]' (string[])data[3]' outcomes));
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: List<string> features = new List<string>(45);
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex < 2)  			{  				wordPreviousPrevious = "w_2=bos";  				tagPreviousPrevious = "t_2=bos";  				predicatePreviousPrevious = "p_2=bos";  			}  			else  			{  				wordPreviousPrevious = "w_2=" + tokens[tokenIndex - 2];  				tagPreviousPrevious = "t_2=" + tags[tokenIndex - 2];  				predicatePreviousPrevious = "p_2" + predicates[tokenIndex - 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex < 2)  			{  				wordPreviousPrevious = "w_2=bos";  				tagPreviousPrevious = "t_2=bos";  				predicatePreviousPrevious = "p_2=bos";  			}  			else  			{  				wordPreviousPrevious = "w_2=" + tokens[tokenIndex - 2];  				tagPreviousPrevious = "t_2=" + tags[tokenIndex - 2];  				predicatePreviousPrevious = "p_2" + predicates[tokenIndex - 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex < 2)  			{  				wordPreviousPrevious = "w_2=bos";  				tagPreviousPrevious = "t_2=bos";  				predicatePreviousPrevious = "p_2=bos";  			}  			else  			{  				wordPreviousPrevious = "w_2=" + tokens[tokenIndex - 2];  				tagPreviousPrevious = "t_2=" + tags[tokenIndex - 2];  				predicatePreviousPrevious = "p_2" + predicates[tokenIndex - 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex < 2)  			{  				wordPreviousPrevious = "w_2=bos";  				tagPreviousPrevious = "t_2=bos";  				predicatePreviousPrevious = "p_2=bos";  			}  			else  			{  				wordPreviousPrevious = "w_2=" + tokens[tokenIndex - 2];  				tagPreviousPrevious = "t_2=" + tags[tokenIndex - 2];  				predicatePreviousPrevious = "p_2" + predicates[tokenIndex - 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex + 2 >= tokens.Length)  			{  				wordNextNext = "w2=eos";  				tagNextNext = "t2=eos";  			}  			else  			{  				wordNextNext = "w2=" + tokens[tokenIndex + 2];  				tagNextNext = "t2=" + tags[tokenIndex + 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex + 2 >= tokens.Length)  			{  				wordNextNext = "w2=eos";  				tagNextNext = "t2=eos";  			}  			else  			{  				wordNextNext = "w2=" + tokens[tokenIndex + 2];  				tagNextNext = "t2=" + tags[tokenIndex + 2];  			}
Magic Number,OpenNLP.Tools.Chunker,DefaultChunkerContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\DefaultChunkerContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokenIndex + 2 >= tokens.Length)  			{  				wordNextNext = "w2=eos";  				tagNextNext = "t2=eos";  			}  			else  			{  				wordNextNext = "w2=" + tokens[tokenIndex + 2];  				tagNextNext = "t2=" + tags[tokenIndex + 2];  			}
Magic Number,OpenNLP.Tools.Chunker,EnglishTreebankChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\EnglishTreebankChunker.cs,ValidOutcome,The following statement contains a magic number: if (outcome.StartsWith("I-"))  			{  				string[] tags = sequence.Outcomes.ToArray();  				int lastTagIndex = tags.Length - 1;  				if (lastTagIndex == - 1)  				{  					return (false);  				}  				else  				{  					string lastTag = tags[lastTagIndex];  					if (lastTag == "O")  					{  						return false;  					}  					if (lastTag.Substring(2) != outcome.Substring(2))  					{  						return false;  					}  				}  			}
Magic Number,OpenNLP.Tools.Chunker,EnglishTreebankChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\EnglishTreebankChunker.cs,ValidOutcome,The following statement contains a magic number: if (outcome.StartsWith("I-"))  			{  				string[] tags = sequence.Outcomes.ToArray();  				int lastTagIndex = tags.Length - 1;  				if (lastTagIndex == - 1)  				{  					return (false);  				}  				else  				{  					string lastTag = tags[lastTagIndex];  					if (lastTag == "O")  					{  						return false;  					}  					if (lastTag.Substring(2) != outcome.Substring(2))  					{  						return false;  					}  				}  			}
Magic Number,OpenNLP.Tools.Chunker,EnglishTreebankChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\EnglishTreebankChunker.cs,GetChunks,The following statement contains a magic number: for (int currentChunk = 0' chunkCount = chunks.Length; currentChunk < chunkCount; currentChunk++)  			{  				if (currentChunk > 0 && !chunks[currentChunk].StartsWith("I-") && chunks[currentChunk - 1] != "O")  				{  					output.Append(" ]");  				}  				if (chunks[currentChunk].StartsWith("B-"))  				{  					output.Append(" [" + chunks[currentChunk].Substring(2));  				}  				  				output.Append(" " + tokens[currentChunk] + "/" + tags[currentChunk]);  			}
Magic Number,OpenNLP.Tools.Chunker,MaximumEntropyChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\MaximumEntropyChunker.cs,Train,The following statement contains a magic number: return Train(eventReader' 100' 5);
Magic Number,OpenNLP.Tools.Chunker,MaximumEntropyChunker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Chunker\MaximumEntropyChunker.cs,Train,The following statement contains a magic number: return Train(eventReader' 100' 5);
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference,DefaultLinker,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\DefaultLinker.cs,InitializeResolvers,The following statement contains a magic number: if (LinkerMode.Test == mode || LinkerMode.Eval == mode)  			{  				if (fixedNonReferentialProbability < 0)  				{                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test) };  				}  				else  				{  					INonReferentialResolver nrr = new FixedNonReferentialResolver(fixedNonReferentialProbability);                      Resolvers = new MaximumEntropyResolver[] { new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new ProperNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new IsAResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new PluralNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new CommonNounResolver(CoreferenceProjectName' ResolverMode.Test' nrr)' new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Test' nrr) };  				}  				if (LinkerMode.Eval == mode)  				{  					//String[] names = {"Pronoun"' "Proper"' "Def-NP"' "Is-a"' "Plural Pronoun"};  					//eval = new Evaluation(names);  				}                  MaximumEntropyResolver.SimilarityModel = SimilarityModel.TestModel(CoreferenceProjectName + "/sim");  			}  			else if (LinkerMode.Train == mode)  			{  				Resolvers = new AbstractResolver[9];  				Resolvers[0] = new SingularPronounResolver(CoreferenceProjectName' ResolverMode.Train);  				Resolvers[1] = new ProperNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[2] = new DefiniteNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[3] = new IsAResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[4] = new PluralPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[5] = new PluralNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[6] = new CommonNounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[7] = new SpeechPronounResolver(CoreferenceProjectName' ResolverMode.Train);                  Resolvers[8] = new PerfectResolver();  			}  			else  			{  				System.Console.Error.WriteLine("DefaultLinker: Invalid Mode");  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,IsPossessive,The following statement contains a magic number: if (parts.Count > 2)  			{                  if (parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase)  				{  					return true;  				}  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,IsPossessive,The following statement contains a magic number: if (parts.Count > 2)  			{                  if (parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase)  				{  					return true;  				}  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,IsOfPrepPhrase,The following statement contains a magic number: if (parts.Count == 2)  			{                  if (parts[0].IsNounPhrase)  				{                      List<IParse> childParts = parts[1].SyntacticChildren;                      if (childParts.Count == 2)  					{                          if (childParts[0].IsToken && childParts[0].ToString() == "of")  						{  							return true;  						}  					}  				}  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,IsOfPrepPhrase,The following statement contains a magic number: if (parts.Count == 2)  			{                  if (parts[0].IsNounPhrase)  				{                      List<IParse> childParts = parts[1].SyntacticChildren;                      if (childParts.Count == 2)  					{                          if (childParts[0].IsToken && childParts[0].ToString() == "of")  						{  							return true;  						}  					}  				}  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,AbstractMentionFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\AbstractMentionFinder.cs,CollectPossessivePronouns,The following statement contains a magic number: for (int tokenIndex = nounPhraseTokens.Count - 2; tokenIndex >= 0; tokenIndex--)  			{  				IParse token = nounPhraseTokens[tokenIndex];  				if (token == headToken)  				{  					continue;  				}  				if (token.SyntacticType.StartsWith("PRP") && IsHandledPronoun(token.ToString()))  				{  					Mention possessivePronounExtent = new Mention(token.Span' token.Span' token.EntityId' null' OpenNLP.Tools.Coreference.Linker.PronounModifier);  					//System.err.println("AbstractEntityFinder.collectPossesivePronouns: adding possesive pronoun: "+tok+" "+tok.getEntityId());  					entities.Add(possessivePronounExtent);  					//System.err.println("AbstractMentionFinder: adding pos-pro: "+ppExtent);  					break;  				}  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,The following statement contains a magic number: if (parse.IsNounPhrase)  			{  				List<IParse> parts = parse.SyntacticChildren;  				//shallow parse POS  				if (parts.Count > 2)  				{                      if (parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase)  					{                          return (parts[2]);  					}  				}  				//full parse POS  				if (parts.Count > 1)  				{                      if (parts[0].IsNounPhrase)  					{                          List<IParse> childTokens = parts[0].Tokens;  						if (childTokens.Count == 0)  						{                              System.Console.Error.WriteLine("PTBHeadFinder: NP " + parts[0] + " with no tokens");  						}  						IParse tok = childTokens[childTokens.Count - 1];  						if (tok.SyntacticType == "POS")  						{  							return null;  						}  					}  				}  				//coordinated nps are their own entities  				if (parts.Count > 1)  				{  					for (int currentPart = 1; currentPart < parts.Count - 1; currentPart++)  					{                          if (parts[currentPart].IsToken && parts[currentPart].SyntacticType == "CC")  						{  							return null;  						}  					}  				}  				//all other NPs  				for (int currentPart = 0; currentPart < parts.Count; currentPart++)  				{                      //System.err.println("PTBHeadFinder.getHead: "+p.getSyntacticType()+" "+p+" parts[currentPart] "+pi+"="+parts[currentPart].getSyntacticType()+" "+parts[currentPart]);                      if (parts[currentPart].IsNounPhrase)  					{                          return parts[currentPart];  					}  				}  				return null;  			}  			else  			{  				return null;  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,The following statement contains a magic number: if (parse.IsNounPhrase)  			{  				List<IParse> parts = parse.SyntacticChildren;  				//shallow parse POS  				if (parts.Count > 2)  				{                      if (parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase)  					{                          return (parts[2]);  					}  				}  				//full parse POS  				if (parts.Count > 1)  				{                      if (parts[0].IsNounPhrase)  					{                          List<IParse> childTokens = parts[0].Tokens;  						if (childTokens.Count == 0)  						{                              System.Console.Error.WriteLine("PTBHeadFinder: NP " + parts[0] + " with no tokens");  						}  						IParse tok = childTokens[childTokens.Count - 1];  						if (tok.SyntacticType == "POS")  						{  							return null;  						}  					}  				}  				//coordinated nps are their own entities  				if (parts.Count > 1)  				{  					for (int currentPart = 1; currentPart < parts.Count - 1; currentPart++)  					{                          if (parts[currentPart].IsToken && parts[currentPart].SyntacticType == "CC")  						{  							return null;  						}  					}  				}  				//all other NPs  				for (int currentPart = 0; currentPart < parts.Count; currentPart++)  				{                      //System.err.println("PTBHeadFinder.getHead: "+p.getSyntacticType()+" "+p+" parts[currentPart] "+pi+"="+parts[currentPart].getSyntacticType()+" "+parts[currentPart]);                      if (parts[currentPart].IsNounPhrase)  					{                          return parts[currentPart];  					}  				}  				return null;  			}  			else  			{  				return null;  			}
Magic Number,OpenNLP.Tools.Coreference.Mention,PennTreebankHeadFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Mention\PennTreebankHeadFinder.cs,GetHead,The following statement contains a magic number: if (parse.IsNounPhrase)  			{  				List<IParse> parts = parse.SyntacticChildren;  				//shallow parse POS  				if (parts.Count > 2)  				{                      if (parts[1].IsToken && parts[1].SyntacticType == "POS" && parts[0].IsNounPhrase && parts[2].IsNounPhrase)  					{                          return (parts[2]);  					}  				}  				//full parse POS  				if (parts.Count > 1)  				{                      if (parts[0].IsNounPhrase)  					{                          List<IParse> childTokens = parts[0].Tokens;  						if (childTokens.Count == 0)  						{                              System.Console.Error.WriteLine("PTBHeadFinder: NP " + parts[0] + " with no tokens");  						}  						IParse tok = childTokens[childTokens.Count - 1];  						if (tok.SyntacticType == "POS")  						{  							return null;  						}  					}  				}  				//coordinated nps are their own entities  				if (parts.Count > 1)  				{  					for (int currentPart = 1; currentPart < parts.Count - 1; currentPart++)  					{                          if (parts[currentPart].IsToken && parts[currentPart].SyntacticType == "CC")  						{  							return null;  						}  					}  				}  				//all other NPs  				for (int currentPart = 0; currentPart < parts.Count; currentPart++)  				{                      //System.err.println("PTBHeadFinder.getHead: "+p.getSyntacticType()+" "+p+" parts[currentPart] "+pi+"="+parts[currentPart].getSyntacticType()+" "+parts[currentPart]);                      if (parts[currentPart].IsNounPhrase)  					{                          return parts[currentPart];  					}  				}  				return null;  			}  			else  			{  				return null;  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,DefaultNonReferentialResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\DefaultNonReferentialResolver.cs,Train,The following statement contains a magic number: if (ResolverMode.Train == mResolverMode)  			{  				System.Console.Error.WriteLine(this + " referential");    				if (mDebugOn)  				{  					System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default);  					foreach (SharpEntropy.TrainingEvent trainingEvent in mEvents)  					{  						writer.Write(trainingEvent.ToString() + "\n");  					}  					writer.Close();  				}                    SharpEntropy.GisTrainer trainer = new SharpEntropy.GisTrainer();                  trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);                  new SharpEntropy.IO.BinaryGisModelWriter().Persist(new SharpEntropy.GisModel(trainer)' mModelName + mModelExtension);  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,DefaultNonReferentialResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\DefaultNonReferentialResolver.cs,Train,The following statement contains a magic number: if (ResolverMode.Train == mResolverMode)  			{  				System.Console.Error.WriteLine(this + " referential");    				if (mDebugOn)  				{  					System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default);  					foreach (SharpEntropy.TrainingEvent trainingEvent in mEvents)  					{  						writer.Write(trainingEvent.ToString() + "\n");  					}  					writer.Close();  				}                    SharpEntropy.GisTrainer trainer = new SharpEntropy.GisTrainer();                  trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);                  new SharpEntropy.IO.BinaryGisModelWriter().Persist(new SharpEntropy.GisModel(trainer)' mModelName + mModelExtension);  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,IsExcluded,The following statement contains a magic number: if (currentContext.IndexSpan.End == context.IndexSpan.Start - 2)  			{  				return false;  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,IsAResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\IsAResolver.cs,IsExcluded,The following statement contains a magic number: if (currentContext.IndexSpan.End <= context.IndexSpan.End + 2 && (context.NextToken != null && (context.NextToken.ToString().Equals("'") || context.NextToken.ToString().Equals("."))))  			{  				//System.err.println("IsAResolver.excluded: (false) spans end + punct");  				return false;  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetMentionCountFeature,The following statement contains a magic number: if (discourseEntity.MentionCount >= 5)  			{  				return ("mc=5+");  			}  			else  			{  				return ("mc=" + discourseEntity.MentionCount);  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Train,The following statement contains a magic number: if (mResolverMode == ResolverMode.Train)  			{  				if (mDebugOn)  				{  					System.Console.Error.WriteLine(this.ToString() + " referential");                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default))                      {                          foreach (SharpEntropy.TrainingEvent e in mEvents)                          {                              writer.Write(e.ToString() + "\n");                          }                          writer.Close();                      }  				}                    SharpEntropy.GisTrainer trainer = new SharpEntropy.GisTrainer();                  trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);                  new SharpEntropy.IO.BinaryGisModelWriter().Persist(new SharpEntropy.GisModel(trainer)' mModelName + mModelExtension);                    				mNonReferentialResolver.Train();  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,Train,The following statement contains a magic number: if (mResolverMode == ResolverMode.Train)  			{  				if (mDebugOn)  				{  					System.Console.Error.WriteLine(this.ToString() + " referential");                      using (System.IO.StreamWriter writer = new System.IO.StreamWriter(mModelName + ".events"' false' System.Text.Encoding.Default))                      {                          foreach (SharpEntropy.TrainingEvent e in mEvents)                          {                              writer.Write(e.ToString() + "\n");                          }                          writer.Close();                      }  				}                    SharpEntropy.GisTrainer trainer = new SharpEntropy.GisTrainer();                  trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);                  new SharpEntropy.IO.BinaryGisModelWriter().Persist(new SharpEntropy.GisModel(trainer)' mModelName + mModelExtension);                    				mNonReferentialResolver.Train();  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,MaximumEntropyResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\MaximumEntropyResolver.cs,GetDistanceFeatures,The following statement contains a magic number: if (sentenceDistance == 0)  			{  				hobbsEntityDistance = currentEntityContext.NounPhraseSentenceIndex;  			}  			else  			{  				//hobbsEntityDistance = entityDistance - (entities within sentence from mention to end) + (entities within sentence form start to mention)   				//hobbsEntityDistance = entityDistance - (cec.maxNounLocation - cec.getNounPhraseSentenceIndex) + cec.getNounPhraseSentenceIndex;   				hobbsEntityDistance = entityDistance + (2 * currentEntityContext.NounPhraseSentenceIndex) - currentEntityContext.MaxNounPhraseSentenceIndex;  			}
Magic Number,OpenNLP.Tools.Coreference.Resolver,ProperNounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\ProperNounResolver.cs,initAcronyms,The following statement contains a magic number: acroMap = new System.Collections.Hashtable(15000);
Magic Number,OpenNLP.Tools.Coreference.Resolver,SingularPronounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\SingularPronounResolver.cs,SingularPronounResolver,The following statement contains a magic number: NumberSentencesBack = 2;
Magic Number,OpenNLP.Tools.Coreference.Resolver,SingularPronounResolver,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Resolver\SingularPronounResolver.cs,SingularPronounResolver,The following statement contains a magic number: NumberSentencesBack = 2;
Magic Number,OpenNLP.Tools.Coreference.Similarity,Context,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\Context.cs,ParseContext,The following statement contains a magic number: if (parts.Length == 2)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' null);  			}  			else if (parts.Length == 3)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' parts[2]);  			}
Magic Number,OpenNLP.Tools.Coreference.Similarity,Context,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\Context.cs,ParseContext,The following statement contains a magic number: if (parts.Length == 2)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' null);  			}  			else if (parts.Length == 3)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' parts[2]);  			}
Magic Number,OpenNLP.Tools.Coreference.Similarity,Context,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\Context.cs,ParseContext,The following statement contains a magic number: if (parts.Length == 2)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' null);  			}  			else if (parts.Length == 3)  			{  				string[] tokens = parts[0].Split(' ');  				return new Context(tokens' tokens[tokens.Length - 1]' parts[1]' parts[2]);  			}
Magic Number,OpenNLP.Tools.Coreference.Similarity,NumberModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\NumberModel.cs,TrainModel,The following statement contains a magic number: trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);
Magic Number,OpenNLP.Tools.Coreference.Similarity,NumberModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\NumberModel.cs,TrainModel,The following statement contains a magic number: trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);
Magic Number,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,TrainModel,The following statement contains a magic number: trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);
Magic Number,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,TrainModel,The following statement contains a magic number: trainer.TrainModel(new Util.CollectionEventReader(mEvents)' 100' 10);
Magic Number,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,GetNameCommonFeatures,The following statement contains a magic number: List<string> features = new List<string>(2 + synsets.Count);
Magic Number,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,GetNameNumberFeatures,The following statement contains a magic number: List<string> features = new List<string>(2);
Magic Number,OpenNLP.Tools.Coreference.Similarity,SimilarityModel,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Coreference\Similarity\SimilarityModel.cs,GetNamePronounFeatures,The following statement contains a magic number: List<string> features = new List<string>(2);
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: return (GetContext(((int)contextData[0])' (List<string>)contextData[1]' (List<string>)contextData[2]' (IDictionary<string' string>)contextData[3]));
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: return (GetContext(((int)contextData[0])' (List<string>)contextData[1]' (List<string>)contextData[2]' (IDictionary<string' string>)contextData[3]));
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: if (index > 1)  			{  				previousPrevious = predicates[index - 2];  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: string[] contexts = new string[featureCount + 4];
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: contexts[featureCount + 2] = "powf=" + previous + WordFeature(tokens[index]);
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetContext,The following statement contains a magic number: contexts[featureCount + 3] = "ppo=" + previousPrevious;
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index - 2 >= 0)  			{  				string previousPreviousWord = tokens[index - 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("ppw=" + previousPreviousWord);  				string previousPreviousWordFeature = WordFeature(tokens[index - 2]);  				features.Add("ppwf=" + previousPreviousWordFeature);  				features.Add("ppw&f=" + previousPreviousWord + "'" + previousPreviousWordFeature);  			}  			else  			{  				features.Add("ppw=BOS");  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index - 2 >= 0)  			{  				string previousPreviousWord = tokens[index - 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("ppw=" + previousPreviousWord);  				string previousPreviousWordFeature = WordFeature(tokens[index - 2]);  				features.Add("ppwf=" + previousPreviousWordFeature);  				features.Add("ppw&f=" + previousPreviousWord + "'" + previousPreviousWordFeature);  			}  			else  			{  				features.Add("ppw=BOS");  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index - 2 >= 0)  			{  				string previousPreviousWord = tokens[index - 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("ppw=" + previousPreviousWord);  				string previousPreviousWordFeature = WordFeature(tokens[index - 2]);  				features.Add("ppwf=" + previousPreviousWordFeature);  				features.Add("ppw&f=" + previousPreviousWord + "'" + previousPreviousWordFeature);  			}  			else  			{  				features.Add("ppw=BOS");  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index + 2 >= tokens.Length)  			{  				features.Add("nnw=EOS");  			}  			else  			{  				string nextNextWord = tokens[index + 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("nnw=" + nextNextWord);  				string nextNextWordFeature = WordFeature(tokens[index + 2]);  				features.Add("nnwf=" + nextNextWordFeature);  				features.Add("nnw&f=" + nextNextWord + "'" + nextNextWordFeature);  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index + 2 >= tokens.Length)  			{  				features.Add("nnw=EOS");  			}  			else  			{  				string nextNextWord = tokens[index + 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("nnw=" + nextNextWord);  				string nextNextWordFeature = WordFeature(tokens[index + 2]);  				features.Add("nnwf=" + nextNextWordFeature);  				features.Add("nnw&f=" + nextNextWord + "'" + nextNextWordFeature);  			}
Magic Number,OpenNLP.Tools.NameFind,DefaultNameContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\DefaultNameContextGenerator.cs,GetStaticFeatures,The following statement contains a magic number: if (index + 2 >= tokens.Length)  			{  				features.Add("nnw=EOS");  			}  			else  			{  				string nextNextWord = tokens[index + 2].ToLower(System.Globalization.CultureInfo.InvariantCulture);  				features.Add("nnw=" + nextNextWord);  				string nextNextWordFeature = WordFeature(tokens[index + 2]);  				features.Add("nnwf=" + nextNextWordFeature);  				features.Add("nnw&f=" + nextNextWord + "'" + nextNextWordFeature);  			}
Magic Number,OpenNLP.Tools.NameFind,EnglishNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\EnglishNameFinder.cs,ProcessParse,The following statement contains a magic number: for (int currentFinder = 0' finderCount = models.Length; currentFinder < finderCount; currentFinder++)  			{  				int start = -1;                    List<Span> names = new List<Span>(5);  				for (int currentToken = 0' tokenCount = tokens.Length; currentToken < tokenCount; currentToken++)  				{  					if ((finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Start) || (finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Other))  					{  						if (start != -1)  						{  							names.Add(new Span(start' currentToken - 1));  						}  						start = -1;  					}  					if (finderTags[currentFinder][currentToken] == MaximumEntropyNameFinder.Start)  					{  						start = currentToken;  					}  				}  				if (start != - 1)  				{  					names.Add(new Span(start' tokens.Length - 1));  				}  				AddNames(models[currentFinder]' names' tokenParses' lineParse);  			}
Magic Number,OpenNLP.Tools.NameFind,MaximumEntropyNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\MaximumEntropyNameFinder.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' 100' 5);
Magic Number,OpenNLP.Tools.NameFind,MaximumEntropyNameFinder,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\NameFind\MaximumEntropyNameFinder.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' 100' 5);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,MakeConstituent,The following statement contains a magic number: StringBuilder feature = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,MakeConstituentBackOff,The following statement contains a magic number: StringBuilder feature = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: List<string> features = new List<string>(100);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: if (index - 2 >= 0)  			{  				previousPreviousParse = constituents[index - 2];  			}
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: if (index - 2 >= 0)  			{  				previousPreviousParse = constituents[index - 2];  			}
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: if (index + 2 < constituentCount)  			{  				nextNextParse = constituents[index + 2];  			}
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: if (index + 2 < constituentCount)  			{  				nextNextParse = constituents[index + 2];  			}
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: string previousPreviousConstituent = MakeConstituent(previousPreviousParse' - 2);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: string nextNextConstituent = MakeConstituent(nextNextParse' 2);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: string previousPreviousConstituentBackOff = MakeConstituentBackOff(previousPreviousParse' - 2);
Magic Number,OpenNLP.Tools.Parser,BuildContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\BuildContextGenerator.cs,GetContext,The following statement contains a magic number: string nextNextConstituentBackOff = MakeConstituentBackOff(nextNextParse' 2);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: return GetContext((Parse[]) parameters[0]' (string) parameters[1]' ((int) parameters[2])' ((int) parameters[3]));
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: return GetContext((Parse[]) parameters[0]' (string) parameters[1]' ((int) parameters[2])' ((int) parameters[3]));
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,Surround,The following statement contains a magic number: StringBuilder feature = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The following statement contains a magic number: StringBuilder feature = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,CheckConstituent,The following statement contains a magic number: StringBuilder feature = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: List<string> features = new List<string>(100);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: StringBuilder production = new StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: if (firstConstituent - 2 >= 0)  			{  				previousPreviousParse = constituents[firstConstituent - 2];  			}
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: if (firstConstituent - 2 >= 0)  			{  				previousPreviousParse = constituents[firstConstituent - 2];  			}
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: if (lastConstituent + 2 < constituentCount)  			{  				nextNextParse = constituents[lastConstituent + 2];  			}
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: if (lastConstituent + 2 < constituentCount)  			{  				nextNextParse = constituents[lastConstituent + 2];  			}
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: Surround(previousPreviousParse' - 2' type' features);
Magic Number,OpenNLP.Tools.Parser,CheckContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\CheckContextGenerator.cs,GetContext,The following statement contains a magic number: Surround(nextNextParse' 2' type' features);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: return (GetContext(((int) data[0])' (string[]) data[1]' (string[]) data[2]' (string[]) data[3]));
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: return (GetContext(((int) data[0])' (string[]) data[1]' (string[]) data[2]' (string[]) data[3]));
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: List<string> features = new List<string>(19);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: int previousPreviousTokenIndex = currentTokenIndex - 2;
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: int nextNextTokenIndex = currentTokenIndex + 2;
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: string previousPreviousChunkTag = ChunkAndPosTag(-2' previousPreviousWord' previousPreviousTag' previousPreviousPriorDecision);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: string previousPreviousChunkTagBackOff = ChunkAndPosTagBackOff(-2' previousPreviousTag' previousPreviousPriorDecision);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: string nextNextChunkTag = ChunkAndPosTag(2' nextNextWord' nextNextTag' null);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,GetContext,The following statement contains a magic number: string nextNextChunkTagBackOff = ChunkAndPosTagBackOff(2' nextNextTag' null);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,ChunkAndPosTag,The following statement contains a magic number: System.Text.StringBuilder feature = new System.Text.StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,ChunkContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\ChunkContextGenerator.cs,ChunkAndPosTagBackOff,The following statement contains a magic number: System.Text.StringBuilder feature = new System.Text.StringBuilder(20);
Magic Number,OpenNLP.Tools.Parser,EnglishHeadRules,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\EnglishHeadRules.cs,ReadHeadRules,The following statement contains a magic number: using (StreamReader headRulesStreamReader = new StreamReader(file' System.Text.Encoding.UTF7))  			{  				string line = headRulesStreamReader.ReadLine();                  mHeadRules = new Dictionary<string' HeadRule>(30);  			  				while (line != null)  				{  					Util.StringTokenizer tokenizer = new Util.StringTokenizer(line);  					string number = tokenizer.NextToken();  					string type = tokenizer.NextToken();  					string direction = tokenizer.NextToken();  					string[] tags = new string[int.Parse(number' System.Globalization.CultureInfo.InvariantCulture)];  					int currentTag = 0;  					string tag = tokenizer.NextToken();  					while (tag != null)  					{  						tags[currentTag] = tag;  						currentTag++;  						tag = tokenizer.NextToken();  					}  					mHeadRules[type] = new HeadRule((direction == "1")' tags);  					line = headRulesStreamReader.ReadLine();  				}			  			}
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The following statement contains a magic number: int maxDerivationLength = 2 * flatParse.ChildCount + 3;
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The following statement contains a magic number: int maxDerivationLength = 2 * flatParse.ChildCount + 3;
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The following statement contains a magic number: double bestComplete = - 100000;
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,FullParse,The following statement contains a magic number: while (mParses.Count < M && derivationLength < maxDerivationLength)  			{  				mNewDerivationsHeap = new Util.TreeSet<Parse>();  				if (mOldDerivationsHeap.Count > 0)  				{  					int derivationsProcessed = 0;    					foreach (Parse currentParse in mOldDerivationsHeap)  						//for (System.Collections.IEnumerator pi = mOldDerivationsHeap.GetEnumerator(); pi.MoveNext() && derivationsProcessed < K; derivationsProcessed++)  					{  						derivationsProcessed++;  						if (derivationsProcessed >= K)   						{  							break;  						}    						// for each derivation  						//Parse currentParse = (Parse) pi.Current;  						if (currentParse.Probability < bestComplete)  //this parse and the ones which follow will never win' stop advancing.  						{  							break;  						}  						if (guessParse == null && derivationLength == 2)  						{  							guessParse = currentParse;  						}    						//System.Console.Out.Write(derivationLength + " " + derivationsProcessed + " "+currentParse.Probability);  						//System.Console.Out.Write(currentParse.Show());  						//System.Console.Out.WriteLine();    						Parse[] newDerivations = null;  						if (0 == derivationLength)   						{  							newDerivations = AdvanceTags(currentParse);  						}  						else if (1 == derivationLength)   						{  							if (mNewDerivationsHeap.Count < K)   							{  								//System.Console.Error.WriteLine("advancing ts " + derivationsProcessed + " " + mNewDerivationsHeap.Count + " < " + K);  								newDerivations = AdvanceChunks(currentParse' bestComplete);  							}  							else   							{  								//System.Console.Error.WriteLine("advancing ts " + derivationsProcessed + " prob=" + ((Parse) mNewDerivationsHeap.Last()).Probability);  								newDerivations = AdvanceChunks(currentParse'((Parse) mNewDerivationsHeap.Last()).Probability);  							}  						}  						else   						{ // derivationLength > 1  							newDerivations = AdvanceParses(currentParse' Q);  						}    						if (newDerivations != null)  						{  							for (int currentDerivation = 0' derivationCount = newDerivations.Length; currentDerivation < derivationCount; currentDerivation++)  							{  								//System.out.println("currentDerivation="+currentDerivation+" of "+newDerivations.length);  								if (newDerivations[currentDerivation].IsComplete)  								{  									AdvanceTop(newDerivations[currentDerivation]);  									if (newDerivations[currentDerivation].Probability > bestComplete)  									{  										bestComplete = newDerivations[currentDerivation].Probability;  									}  									mParses.Add(newDerivations[currentDerivation]);  									  								}  								else  								{  									mNewDerivationsHeap.Add(newDerivations[currentDerivation]);  								}  							}  							//RN added sort  							mNewDerivationsHeap.Sort();  						}  						else  						{  							System.Console.Error.WriteLine("Couldn't advance parse " + derivationLength + " stage " + derivationsProcessed + "!\n");  						}  					}  					derivationLength++;  					mOldDerivationsHeap = mNewDerivationsHeap;  				}  				else  				{  					break;  				}  			}
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' modelType' headRulesFile' 100' 5);
Magic Number,OpenNLP.Tools.Parser,MaximumEntropyParser,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\MaximumEntropyParser.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' modelType' headRulesFile' 100' 5);
Magic Number,OpenNLP.Tools.Parser,Parse,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Parser\Parse.cs,InitializeDerivationBuffer,The following statement contains a magic number: mDerivation = new StringBuilder(100);
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: return GetContext(((int) data[0])' (object[]) data[1]' (string[]) data[2]' null);
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokens.Length > index + 1)   			{  				next = tokens[index + 1].ToString();  				if (tokens.Length > index + 2)  				{  					nextNext = tokens[index + 2].ToString();  				}  				else  				{  					nextNext = SentenceEnd;   				}  			}  			else  			{  				next = SentenceEnd;   			}
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: if (tokens.Length > index + 1)   			{  				next = tokens[index + 1].ToString();  				if (tokens.Length > index + 2)  				{  					nextNext = tokens[index + 2].ToString();  				}  				else  				{  					nextNext = SentenceEnd;   				}  			}  			else  			{  				next = SentenceEnd;   			}
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: if (index - 1 >= 0)   			{  				previous = tokens[index - 1].ToString();  				tagPrevious = tags[index - 1].ToString();    				if (index - 2 >= 0)   				{  					previousPrevious = tokens[index - 2].ToString();  					tagPreviousPrevious = tags[index - 2].ToString();  				}  				else  				{  					previousPrevious = SentenceBeginning;   				}  			}  			else  			{  				previous = SentenceBeginning;   			}
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: if (index - 1 >= 0)   			{  				previous = tokens[index - 1].ToString();  				tagPrevious = tags[index - 1].ToString();    				if (index - 2 >= 0)   				{  					previousPrevious = tokens[index - 2].ToString();  					tagPreviousPrevious = tags[index - 2].ToString();  				}  				else  				{  					previousPrevious = SentenceBeginning;   				}  			}  			else  			{  				previous = SentenceBeginning;   			}
Magic Number,OpenNLP.Tools.PosTagger,DefaultPosContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\DefaultPosContextGenerator.cs,GetContext,The following statement contains a magic number: if (index - 1 >= 0)   			{  				previous = tokens[index - 1].ToString();  				tagPrevious = tags[index - 1].ToString();    				if (index - 2 >= 0)   				{  					previousPrevious = tokens[index - 2].ToString();  					tagPreviousPrevious = tags[index - 2].ToString();  				}  				else  				{  					previousPrevious = SentenceBeginning;   				}  			}  			else  			{  				previous = SentenceBeginning;   			}
Magic Number,OpenNLP.Tools.PosTagger,MaximumEntropyPosTagger,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\MaximumEntropyPosTagger.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' 100' 5);
Magic Number,OpenNLP.Tools.PosTagger,MaximumEntropyPosTagger,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\MaximumEntropyPosTagger.cs,TrainModel,The following statement contains a magic number: return TrainModel(trainingFile' 100' 5);
Magic Number,OpenNLP.Tools.PosTagger,PosLookupListWriter,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\PosTagger\PosLookupListWriter.cs,Write,The following statement contains a magic number: Write(5);
Magic Number,OpenNLP.Tools.SentenceDetect,MaximumEntropySentenceDetector,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\SentenceDetect\MaximumEntropySentenceDetector.cs,MaximumEntropySentenceDetector,The following statement contains a magic number: mSentenceProbs = new List<double>(50);
Magic Number,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,MaximumEntropyTokenizer,The following statement contains a magic number: mTokenProbabilities = new List<double>(50);
Magic Number,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,TokenizePositions,The following statement contains a magic number: for (int currentToken = 0' tokenCount = tokens.Length; currentToken < tokenCount; currentToken++)  			{  				Util.Span tokenSpan = tokens[currentToken];  				string token = input.Substring(tokenSpan.Start' (tokenSpan.End) - (tokenSpan.Start));  				// Can't tokenize single characters  				if (token.Length < 2)  				{  					mNewTokens.Add(tokenSpan);  					mTokenProbabilities.Add(1.0);  				}  				else if (AlphaNumericOptimization && AlphaNumeric.IsMatch(token))  				{  					mNewTokens.Add(tokenSpan);  					mTokenProbabilities.Add(1.0);  				}  				else  				{  					int startPosition = tokenSpan.Start;  					int endPosition = tokenSpan.End;  					int originalStart = tokenSpan.Start;  					double tokenProbability = 1.0;  					for (int currentPosition = originalStart + 1; currentPosition < endPosition; currentPosition++)  					{  						double[] probabilities = mModel.Evaluate(mContextGenerator.GetContext(new Util.Pair<string' int>(token' currentPosition - originalStart)));  						string bestOutcome = mModel.GetBestOutcome(probabilities);  						  						tokenProbability *= probabilities[mModel.GetOutcomeIndex(bestOutcome)];  						if (bestOutcome == TokenContextGenerator.SplitIndicator)  						{  							mNewTokens.Add(new Util.Span(startPosition' currentPosition));  							mTokenProbabilities.Add(tokenProbability);  							startPosition = currentPosition;  							tokenProbability = 1.0;  						}  					}  					mNewTokens.Add(new Util.Span(startPosition' endPosition));  					mTokenProbabilities.Add(tokenProbability);  				}  			}
Magic Number,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,Train,The following statement contains a magic number: SharpEntropy.GisTrainer trainer = new SharpEntropy.GisTrainer(0.1);
Magic Number,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,Train,The following statement contains a magic number: trainer.TrainModel(100' new SharpEntropy.TwoPassDataIndexer(eventReader' 5));
Magic Number,OpenNLP.Tools.Tokenize,MaximumEntropyTokenizer,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\MaximumEntropyTokenizer.cs,Train,The following statement contains a magic number: trainer.TrainModel(100' new SharpEntropy.TwoPassDataIndexer(eventReader' 5));
Magic Number,OpenNLP.Tools.Tokenize,TokenContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenContextGenerator.cs,GetContext,The following statement contains a magic number: if (index > 0)  			{  				AddCharPredicates("p1"' data[index - 1]' predicates);  				if (index > 1)  				{  					AddCharPredicates("p2"' data[index - 2]' predicates);  					predicates.Add("p21=" + data[index - 2] + data[index - 1]);  				}  				else  				{  					predicates.Add("p2=bok");  				}  				predicates.Add("p1f1=" + data[index - 1] + data[index]);  			}  			else  			{  				predicates.Add("p1=bok");  			}
Magic Number,OpenNLP.Tools.Tokenize,TokenContextGenerator,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenContextGenerator.cs,GetContext,The following statement contains a magic number: if (index > 0)  			{  				AddCharPredicates("p1"' data[index - 1]' predicates);  				if (index > 1)  				{  					AddCharPredicates("p2"' data[index - 2]' predicates);  					predicates.Add("p21=" + data[index - 2] + data[index - 1]);  				}  				else  				{  					predicates.Add("p2=bok");  				}  				predicates.Add("p1f1=" + data[index - 1] + data[index]);  			}  			else  			{  				predicates.Add("p1=bok");  			}
Magic Number,OpenNLP.Tools.Tokenize,TokenSpanEventReader,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Tokenize\TokenSpanEventReader.cs,TokenSpanEventReader,The following statement contains a magic number: mEvents = new List<SharpEntropy.TrainingEvent>(50);
Magic Number,OpenNLP.Tools.Util,ListHeap<T>,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\ListHeap.cs,ParentIndex,The following statement contains a magic number: return (index - 1) / 2;
Magic Number,OpenNLP.Tools.Util,ListHeap<T>,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\ListHeap.cs,LeftIndex,The following statement contains a magic number: return (index + 1) * 2 - 1;
Magic Number,OpenNLP.Tools.Util,ListHeap<T>,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\ListHeap.cs,RightIndex,The following statement contains a magic number: return (index + 1) * 2;
Magic Number,OpenNLP.Tools.Util,Span,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\Span.cs,GetHashCode,The following statement contains a magic number: return((Start << 16) | (0x0000FFFF | this.End));
Magic Number,OpenNLP.Tools.Util,Span,C:\repos\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\OpenNLP\OpenNLP\Tools\Util\Span.cs,ToString,The following statement contains a magic number: System.Text.StringBuilder buffer = new System.Text.StringBuilder(15);
