Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The method has 69 lines of code.
Long Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The method has 68 lines of code.
Long Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The method has 109 lines of code.
Long Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The method has 77 lines of code.
Long Method,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The method has 148 lines of code.
Long Method,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,NextResult,The method has 63 lines of code.
Complex Method,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,Cyclomatic complexity of the method is 7
Complex Method,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetValue,Cyclomatic complexity of the method is 11
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,SQLiteConnection,Cyclomatic complexity of the method is 8
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,Cyclomatic complexity of the method is 18
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,Cyclomatic complexity of the method is 14
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,Cyclomatic complexity of the method is 13
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,Cyclomatic complexity of the method is 27
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,Cyclomatic complexity of the method is 9
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,Cyclomatic complexity of the method is 8
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,Cyclomatic complexity of the method is 25
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,Cyclomatic complexity of the method is 18
Complex Method,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,Cyclomatic complexity of the method is 14
Complex Method,System.Data.SQLite,SQLiteConvert,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConvert.cs,Split,Cyclomatic complexity of the method is 7
Complex Method,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,VerifyType,Cyclomatic complexity of the method is 24
Complex Method,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,Cyclomatic complexity of the method is 24
Complex Method,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,NextResult,Cyclomatic complexity of the method is 13
Complex Method,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,ConvertParams,Cyclomatic complexity of the method is 19
Complex Method,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,SetReturnValue,Cyclomatic complexity of the method is 13
Complex Method,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,SQLiteFunction,Cyclomatic complexity of the method is 7
Complex Method,System.Data.SQLite,SQLiteParameterCollection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameterCollection.cs,MapParameters,Cyclomatic complexity of the method is 14
Complex Method,System.Data.SQLite,SQLiteStatement,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteStatement.cs,BindParameter,Cyclomatic complexity of the method is 36
Long Parameter List,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,ColumnMetaData,The method has 8 parameters.
Long Parameter List,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,GetBytes,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,GetChars,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,CreateFunction,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,GetParamValueBytes,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLite3_UTF16,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3_UTF16.cs,CreateFunction,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,ColumnMetaData,The method has 8 parameters.
Long Parameter List,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetBytes,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetChars,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,CreateFunction,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetParamValueBytes,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteCommandBuilder,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommandBuilder.cs,ApplyParameterInfo,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,UpdateCallback,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,UpdateEventArgs,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,UpdateEventArgs,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetChars,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,CompareCallback,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 10 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 10 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameter,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameter.cs,SQLiteParameter,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteParameterCollection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteParameterCollection.cs,Add,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,SQLiteStatement,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteStatement.cs,SQLiteStatement,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_exec_interop,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_prepare_interop,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_bind_blob_interop,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_bind_text_interop,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_create_collation_interop,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_create_function_interop,The method has 8 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_result_blob_interop,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_result_text_interop,The method has 4 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_table_column_metadata_interop,The method has 11 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_prepare16_interop,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_bind_text16_interop,The method has 5 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_create_collation16_interop,The method has 6 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_create_function16_interop,The method has 8 parameters.
Long Parameter List,System.Data.SQLite,UnsafeNativeMethods,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\UnsafeNativeMethods.cs,sqlite3_result_text16_interop,The method has 4 parameters.
Long Statement,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Bind_Blob,The length of the statement  "	int n = UnsafeNativeMethods.sqlite3_bind_blob_interop (stmt._sqlite_stmt' index' blobData' blobData.Length' (IntPtr)(-1)); " is 122.
Long Statement,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,ColumnMetaData,The length of the statement  "	n = UnsafeNativeMethods.sqlite3_table_column_metadata_interop (_sql' ToUTF8 (dataBase)' ToUTF8 (table)' ToUTF8 (column)' out dataTypePtr' out collSeqPtr' out nnotNull' out nprimaryKey' out nautoInc' out dtLen' out csLen); " is 221.
Long Statement,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,CreateFunction,The length of the statement  "	int n = UnsafeNativeMethods.sqlite3_create_function_interop (_sql' ToUTF8 (strFunction)' nArgs' 1' func' funcstep' funcfinal' out nCookie); " is 139.
Long Statement,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,ChangePassword,The length of the statement  "	int n = UnsafeNativeMethods.sqlite3_rekey_interop (_sql' newPasswordBytes' (newPasswordBytes == null) ? 0 : newPasswordBytes.Length); " is 133.
Long Statement,System.Data.SQLite,SQLite3_UTF16,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3_UTF16.cs,Bind_ParamName,The length of the statement  "	return base.ToString (UnsafeNativeMethods.sqlite3_bind_parameter_name_interop (stmt._sqlite_stmt' index' out len)' len); " is 120.
Long Statement,System.Data.SQLite,SQLite3_UTF16,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3_UTF16.cs,CreateFunction,The length of the statement  "	int n = UnsafeNativeMethods.sqlite3_create_function16_interop (_sql' strFunction' nArgs' 4' func' funcstep' funcfinal' out nCookie); " is 132.
Long Statement,System.Data.SQLite,SQLiteCommand,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommand.cs,BuildNextCommand,The length of the statement  "		stmt = _cnn._sql.Prepare (_remainingText' (_statementList == null) ? null : _statementList [_statementList.Count - 1]' out _remainingText); " is 139.
Long Statement,System.Data.SQLite,SQLiteCommandBuilder,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommandBuilder.cs,QuoteIdentifier,The length of the statement  "	if (String.IsNullOrEmpty (QuotePrefix) || String.IsNullOrEmpty (QuoteSuffix) || String.IsNullOrEmpty (unquotedIdentifier)) " is 122.
Long Statement,System.Data.SQLite,SQLiteCommandBuilder,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommandBuilder.cs,UnquoteIdentifier,The length of the statement  "	if (String.IsNullOrEmpty (QuotePrefix) || String.IsNullOrEmpty (QuoteSuffix) || String.IsNullOrEmpty (quotedIdentifier)) " is 120.
Long Statement,System.Data.SQLite,SQLiteCommandBuilder,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommandBuilder.cs,UnquoteIdentifier,The length of the statement  "	if (quotedIdentifier.StartsWith (QuotePrefix' StringComparison.InvariantCultureIgnoreCase) == false || quotedIdentifier.EndsWith (QuoteSuffix' StringComparison.InvariantCultureIgnoreCase) == false) " is 197.
Long Statement,System.Data.SQLite,SQLiteCommandBuilder,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommandBuilder.cs,UnquoteIdentifier,The length of the statement  "	return quotedIdentifier.Substring (QuotePrefix.Length' quotedIdentifier.Length - (QuotePrefix.Length + QuoteSuffix.Length)).Replace (QuoteSuffix + QuoteSuffix' QuoteSuffix); " is 173.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,UpdateCallback,The length of the statement  "	_updateHandler (this' new UpdateEventArgs (_sql.UTF8ToString (database' databaseLen)' _sql.UTF8ToString (table' tableLen)' (UpdateEventType)type' rowid)); " is 154.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,ParseConnectionString,The length of the statement  "			throw new ArgumentException (String.Format (CultureInfo.CurrentCulture' "Invalid ConnectionString format for parameter \"{0}\""' (arPiece.Length > 0) ? arPiece [0] : "null")); " is 175.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The length of the statement  "        fileName = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetCallingAssembly().GetName().CodeBase) + fileName.Substring(1);" is 135.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The length of the statement  "		SQLiteDateFormats dateFormat = String.Compare (FindKey (opts' "DateTimeFormat"' "ISO8601")' "ticks"' true' CultureInfo.InvariantCulture) == 0 ? SQLiteDateFormats.Ticks : SQLiteDateFormats.ISO8601; " is 196.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The length of the statement  "				throw new IO.FileNotFoundException (String.Format (CultureInfo.CurrentCulture' "Unable to locate file \"{0}\"' creating new database."' fileName)); " is 147.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,SetPassword,The length of the statement  "	SetPassword (String.IsNullOrEmpty (databasePassword) ? null : System.Text.UTF8Encoding.UTF8.GetBytes (databasePassword)); " is 121.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,ExpandFileName,The length of the statement  "			if (sourceFile [_dataDirectory.Length] == System.IO.Path.DirectorySeparatorChar || sourceFile [_dataDirectory.Length] == System.IO.Path.AltDirectorySeparatorChar) " is 162.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The length of the statement  "	using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table' OR [type] LIKE 'view'"' strCatalog)' this)) " is 203.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The length of the statement  "				if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) { " is 132.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The length of the statement  "					using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this)) " is 163.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The length of the statement  "									if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) { " is 149.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "	using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this)) " is 181.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "				if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) { " is 132.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "					using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this)) " is 173.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "						if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) { " is 121.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "					using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this)) " is 168.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "									if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) { " is 159.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The length of the statement  "										using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this)) " is 169.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The length of the statement  "	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this)) " is 175.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The length of the statement  "	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this)) " is 174.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The length of the statement  "				if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) { " is 124.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "	using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this)) " is 181.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "				if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) { " is 132.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "					using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this)) " is 173.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0) " is 134.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "					using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this)) " is 252.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "								if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) { " is 133.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "									using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this)) " is 174.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The length of the statement  "												if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0) " is 141.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The length of the statement  "	using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this)) " is 179.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The length of the statement  "				if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) { " is 129.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The length of the statement  "					using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) { " is 174.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The length of the statement  "												if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) { " is 147.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "	using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this)) " is 181.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "				if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) { " is 132.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "					using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this)) " is 168.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "							using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this)) " is 177.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "										row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4)); " is 155.
Long Statement,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The length of the statement  "										if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0) " is 147.
Long Statement,System.Data.SQLite,SQLiteConvert,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConvert.cs,TypeNameToDbType,The length of the statement  "		if (String.Compare (Name' 0' _typeNames [n].typeName' 0' _typeNames [n].typeName.Length' true' CultureInfo.InvariantCulture) == 0) " is 130.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The length of the statement  "			_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement); " is 234.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The length of the statement  "				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection)) " is 240.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The length of the statement  "							if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) { " is 134.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The length of the statement  "				if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) { " is 137.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSQLiteType,The length of the statement  "		_fieldTypeArray [i].Type = SQLiteConvert.TypeNameToDbType (_activeStatement._sql.ColumnType (_activeStatement' i' out _fieldTypeArray [i].Affinity)); " is 149.
Long Statement,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,Read,The length of the statement  "	if (_readingState == -1)// First step was already done at the NextResult() level' so don't step again' just return true. " is 120.
Long Statement,System.Data.SQLite,SQLiteStatement,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteStatement.cs,MapParameter,The length of the statement  "		if (String.Compare (_paramNames [n]' startAt' s' 0' Math.Max (_paramNames [n].Length - startAt' s.Length)' true' CultureInfo.InvariantCulture) == 0) { " is 150.
Virtual Method Call from Constructor,System.Data.SQLite,SQLiteStatement,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteStatement.cs,SQLiteStatement,The constructor "SQLiteStatement" calls a virtual method "Bind_ParamCount".
Virtual Method Call from Constructor,System.Data.SQLite,SQLiteStatement,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteStatement.cs,SQLiteStatement,The constructor "SQLiteStatement" calls a virtual method "Bind_ParamName".
Empty Catch Block,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The method has an empty catch block.
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: while (true) {  	n = UnsafeNativeMethods.sqlite3_step_interop (stmt._sqlite_stmt);  	if (n == 100)  		return true;  	if (n == 101)  		return false;  	if (n > 0) {  		int r;  		// An error occurred' attempt to reset the statement.  If the reset worked because the  		// schema has changed' re-try the step again.  If it errored our because the database  		// is locked' then keep retrying until the command timeout occurs.  		r = Reset (stmt);  		if (r == 0)  			throw new SQLiteException (n' SQLiteLastError ());  		else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  		 {  			// Keep trying  			if (dwtick == 0)// First time we've encountered the lock  			 {  				dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  				rnd = new Random ();  			}  			// If we've exceeded the command's timeout' give up and throw an error  			if (DateTime.Now.Ticks - dwtick > 0) {  				throw new SQLiteException (r' SQLiteLastError ());  			} else {  				// Otherwise sleep for a random amount of time up to 250ms  				UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: while (true) {  	n = UnsafeNativeMethods.sqlite3_step_interop (stmt._sqlite_stmt);  	if (n == 100)  		return true;  	if (n == 101)  		return false;  	if (n > 0) {  		int r;  		// An error occurred' attempt to reset the statement.  If the reset worked because the  		// schema has changed' re-try the step again.  If it errored our because the database  		// is locked' then keep retrying until the command timeout occurs.  		r = Reset (stmt);  		if (r == 0)  			throw new SQLiteException (n' SQLiteLastError ());  		else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  		 {  			// Keep trying  			if (dwtick == 0)// First time we've encountered the lock  			 {  				dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  				rnd = new Random ();  			}  			// If we've exceeded the command's timeout' give up and throw an error  			if (DateTime.Now.Ticks - dwtick > 0) {  				throw new SQLiteException (r' SQLiteLastError ());  			} else {  				// Otherwise sleep for a random amount of time up to 250ms  				UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: while (true) {  	n = UnsafeNativeMethods.sqlite3_step_interop (stmt._sqlite_stmt);  	if (n == 100)  		return true;  	if (n == 101)  		return false;  	if (n > 0) {  		int r;  		// An error occurred' attempt to reset the statement.  If the reset worked because the  		// schema has changed' re-try the step again.  If it errored our because the database  		// is locked' then keep retrying until the command timeout occurs.  		r = Reset (stmt);  		if (r == 0)  			throw new SQLiteException (n' SQLiteLastError ());  		else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  		 {  			// Keep trying  			if (dwtick == 0)// First time we've encountered the lock  			 {  				dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  				rnd = new Random ();  			}  			// If we've exceeded the command's timeout' give up and throw an error  			if (DateTime.Now.Ticks - dwtick > 0) {  				throw new SQLiteException (r' SQLiteLastError ());  			} else {  				// Otherwise sleep for a random amount of time up to 250ms  				UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: while (true) {  	n = UnsafeNativeMethods.sqlite3_step_interop (stmt._sqlite_stmt);  	if (n == 100)  		return true;  	if (n == 101)  		return false;  	if (n > 0) {  		int r;  		// An error occurred' attempt to reset the statement.  If the reset worked because the  		// schema has changed' re-try the step again.  If it errored our because the database  		// is locked' then keep retrying until the command timeout occurs.  		r = Reset (stmt);  		if (r == 0)  			throw new SQLiteException (n' SQLiteLastError ());  		else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  		 {  			// Keep trying  			if (dwtick == 0)// First time we've encountered the lock  			 {  				dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  				rnd = new Random ();  			}  			// If we've exceeded the command's timeout' give up and throw an error  			if (DateTime.Now.Ticks - dwtick > 0) {  				throw new SQLiteException (r' SQLiteLastError ());  			} else {  				// Otherwise sleep for a random amount of time up to 250ms  				UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: while (true) {  	n = UnsafeNativeMethods.sqlite3_step_interop (stmt._sqlite_stmt);  	if (n == 100)  		return true;  	if (n == 101)  		return false;  	if (n > 0) {  		int r;  		// An error occurred' attempt to reset the statement.  If the reset worked because the  		// schema has changed' re-try the step again.  If it errored our because the database  		// is locked' then keep retrying until the command timeout occurs.  		r = Reset (stmt);  		if (r == 0)  			throw new SQLiteException (n' SQLiteLastError ());  		else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  		 {  			// Keep trying  			if (dwtick == 0)// First time we've encountered the lock  			 {  				dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  				rnd = new Random ();  			}  			// If we've exceeded the command's timeout' give up and throw an error  			if (DateTime.Now.Ticks - dwtick > 0) {  				throw new SQLiteException (r' SQLiteLastError ());  			} else {  				// Otherwise sleep for a random amount of time up to 250ms  				UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (n == 100)  	return true;  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (n == 101)  	return false;  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (n > 0) {  	int r;  	// An error occurred' attempt to reset the statement.  If the reset worked because the  	// schema has changed' re-try the step again.  If it errored our because the database  	// is locked' then keep retrying until the command timeout occurs.  	r = Reset (stmt);  	if (r == 0)  		throw new SQLiteException (n' SQLiteLastError ());  	else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  	 {  		// Keep trying  		if (dwtick == 0)// First time we've encountered the lock  		 {  			dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  			rnd = new Random ();  		}  		// If we've exceeded the command's timeout' give up and throw an error  		if (DateTime.Now.Ticks - dwtick > 0) {  			throw new SQLiteException (r' SQLiteLastError ());  		} else {  			// Otherwise sleep for a random amount of time up to 250ms  			UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (n > 0) {  	int r;  	// An error occurred' attempt to reset the statement.  If the reset worked because the  	// schema has changed' re-try the step again.  If it errored our because the database  	// is locked' then keep retrying until the command timeout occurs.  	r = Reset (stmt);  	if (r == 0)  		throw new SQLiteException (n' SQLiteLastError ());  	else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  	 {  		// Keep trying  		if (dwtick == 0)// First time we've encountered the lock  		 {  			dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  			rnd = new Random ();  		}  		// If we've exceeded the command's timeout' give up and throw an error  		if (DateTime.Now.Ticks - dwtick > 0) {  			throw new SQLiteException (r' SQLiteLastError ());  		} else {  			// Otherwise sleep for a random amount of time up to 250ms  			UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (n > 0) {  	int r;  	// An error occurred' attempt to reset the statement.  If the reset worked because the  	// schema has changed' re-try the step again.  If it errored our because the database  	// is locked' then keep retrying until the command timeout occurs.  	r = Reset (stmt);  	if (r == 0)  		throw new SQLiteException (n' SQLiteLastError ());  	else if (r == 6 && stmt._command != null)// SQLITE_LOCKED  	 {  		// Keep trying  		if (dwtick == 0)// First time we've encountered the lock  		 {  			dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  			rnd = new Random ();  		}  		// If we've exceeded the command's timeout' give up and throw an error  		if (DateTime.Now.Ticks - dwtick > 0) {  			throw new SQLiteException (r' SQLiteLastError ());  		} else {  			// Otherwise sleep for a random amount of time up to 250ms  			UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  		}  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 0)  	throw new SQLiteException (n' SQLiteLastError ());  else if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 0)  	throw new SQLiteException (n' SQLiteLastError ());  else if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 0)  	throw new SQLiteException (n' SQLiteLastError ());  else if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (r == 6 && stmt._command != null)// SQLITE_LOCKED   {  	// Keep trying  	if (dwtick == 0)// First time we've encountered the lock  	 {  		dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  		rnd = new Random ();  	}  	// If we've exceeded the command's timeout' give up and throw an error  	if (DateTime.Now.Ticks - dwtick > 0) {  		throw new SQLiteException (r' SQLiteLastError ());  	} else {  		// Otherwise sleep for a random amount of time up to 250ms  		UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (dwtick == 0)// First time we've encountered the lock   {  	dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  	rnd = new Random ();  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: dwtick = DateTime.Now.Ticks + (stmt._command._commandTimeout * 10000000);  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: if (DateTime.Now.Ticks - dwtick > 0) {  	throw new SQLiteException (r' SQLiteLastError ());  } else {  	// Otherwise sleep for a random amount of time up to 250ms  	UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Step,The following statement contains a magic number: UnsafeNativeMethods.sqlite3_sleep_interop ((uint)rnd.Next (1' 250));  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 17)// SQLITE_SCHEMA   {  	// Recreate a dummy statement  	string str;  	using (SQLiteStatement tmp = Prepare (stmt._sqlStatement' null' out str)) {  		// Finalize the existing statement  		FinalizeStatement (stmt);  		// Reassign a new statement pointer to the old statement and clear the temporary one  		stmt._sqlite_stmt = tmp._sqlite_stmt;  		tmp._sqlite_stmt = IntPtr.Zero;  		// Reapply parameters  		stmt.BindParameters ();  	}  	return -1;  	// Reset was OK' with schema change  } else if (n == 6)  	// SQLITE_LOCKED  	return n;  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 17)// SQLITE_SCHEMA   {  	// Recreate a dummy statement  	string str;  	using (SQLiteStatement tmp = Prepare (stmt._sqlStatement' null' out str)) {  		// Finalize the existing statement  		FinalizeStatement (stmt);  		// Reassign a new statement pointer to the old statement and clear the temporary one  		stmt._sqlite_stmt = tmp._sqlite_stmt;  		tmp._sqlite_stmt = IntPtr.Zero;  		// Reapply parameters  		stmt.BindParameters ();  	}  	return -1;  	// Reset was OK' with schema change  } else if (n == 6)  	// SQLITE_LOCKED  	return n;  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 6)  	// SQLITE_LOCKED  	return n;  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: unsafe {  	fixed (byte* psql = &b [0]) {  		while (n == 17 && retries < 3) {  			n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  			retries++;  		}  		if (n > 0)  			throw new SQLiteException (n' SQLiteLastError ());  		strRemain = UTF8ToString (ptr' len);  		SQLiteStatement cmd = null;  		if (stmt != IntPtr.Zero)  			cmd = new SQLiteStatement (this' stmt' strSql.Substring (0' strSql.Length - strRemain.Length)' previous);  		return cmd;  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: unsafe {  	fixed (byte* psql = &b [0]) {  		while (n == 17 && retries < 3) {  			n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  			retries++;  		}  		if (n > 0)  			throw new SQLiteException (n' SQLiteLastError ());  		strRemain = UTF8ToString (ptr' len);  		SQLiteStatement cmd = null;  		if (stmt != IntPtr.Zero)  			cmd = new SQLiteStatement (this' stmt' strSql.Substring (0' strSql.Length - strRemain.Length)' previous);  		return cmd;  	}  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: fixed (byte* psql = &b [0]) {  	while (n == 17 && retries < 3) {  		n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  		retries++;  	}  	if (n > 0)  		throw new SQLiteException (n' SQLiteLastError ());  	strRemain = UTF8ToString (ptr' len);  	SQLiteStatement cmd = null;  	if (stmt != IntPtr.Zero)  		cmd = new SQLiteStatement (this' stmt' strSql.Substring (0' strSql.Length - strRemain.Length)' previous);  	return cmd;  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: fixed (byte* psql = &b [0]) {  	while (n == 17 && retries < 3) {  		n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  		retries++;  	}  	if (n > 0)  		throw new SQLiteException (n' SQLiteLastError ());  	strRemain = UTF8ToString (ptr' len);  	SQLiteStatement cmd = null;  	if (stmt != IntPtr.Zero)  		cmd = new SQLiteStatement (this' stmt' strSql.Substring (0' strSql.Length - strRemain.Length)' previous);  	return cmd;  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: while (n == 17 && retries < 3) {  	n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  	retries++;  }  
Magic Number,System.Data.SQLite,SQLite3,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3.cs,Prepare,The following statement contains a magic number: while (n == 17 && retries < 3) {  	n = UnsafeNativeMethods.sqlite3_prepare_interop (_sql' (IntPtr)psql' b.Length - 1' out stmt' out ptr' out len);  	retries++;  }  
Magic Number,System.Data.SQLite,SQLite3_UTF16,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLite3_UTF16.cs,ToString,The following statement contains a magic number: return Marshal.PtrToStringUni (b' nbytelen / 2);  
Magic Number,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetValue,The following statement contains a magic number: switch (TypeToAffinity (t)) {  case TypeAffinity.Blob:  	if (typ.Type == DbType.Guid && typ.Affinity == TypeAffinity.Text)  		return new Guid (GetText (stmt' index));  	int n = (int)GetBytes (stmt' index' 0' null' 0' 0);  	byte[] b = new byte[n];  	GetBytes (stmt' index' 0' b' 0' n);  	if (typ.Type == DbType.Guid && n == 16)  		return new Guid (b);  	return b;  case TypeAffinity.DateTime:  	return GetDateTime (stmt' index);  case TypeAffinity.Double:  	return Convert.ChangeType (GetDouble (stmt' index)' t' null);  case TypeAffinity.Int64:  	return Convert.ChangeType (GetInt64 (stmt' index)' t' null);  default:  	return GetText (stmt' index);  }  
Magic Number,System.Data.SQLite,SQLiteBase,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteBase.cs,GetValue,The following statement contains a magic number: if (typ.Type == DbType.Guid && n == 16)  	return new Guid (b);  
Magic Number,System.Data.SQLite,SQLiteCommand,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommand.cs,SQLiteCommand,The following statement contains a magic number: _commandTimeout = 30;  
Magic Number,System.Data.SQLite,SQLiteCommand,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteCommand.cs,InitializeForReader,The following statement contains a magic number: _cnn._sql.SetTimeout (_commandTimeout * 1000);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,ParseConnectionString,The following statement contains a magic number: for (n = 0; n < x; n++) {  	arPiece = SQLiteConvert.Split (arParts [n]' '=');  	if (arPiece.Length == 2) {  		ls.Add (new KeyValuePair<string' string> (arPiece [0]' arPiece [1]));  	} else  		throw new ArgumentException (String.Format (CultureInfo.CurrentCulture' "Invalid ConnectionString format for parameter \"{0}\""' (arPiece.Length > 0) ? arPiece [0] : "null"));  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,ParseConnectionString,The following statement contains a magic number: if (arPiece.Length == 2) {  	ls.Add (new KeyValuePair<string' string> (arPiece [0]' arPiece [1]));  } else  	throw new ArgumentException (String.Format (CultureInfo.CurrentCulture' "Invalid ConnectionString format for parameter \"{0}\""' (arPiece.Length > 0) ? arPiece [0] : "null"));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: if (Convert.ToInt32 (FindKey (opts' "Version"' "3")' CultureInfo.InvariantCulture) != 3)  	throw new NotSupportedException ("Only SQLite Version 3 is supported at this time");  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: try {  	bool bUTF16 = (Convert.ToBoolean (FindKey (opts' "UseUTF16Encoding"' "False")' CultureInfo.InvariantCulture) == true);  	SQLiteDateFormats dateFormat = String.Compare (FindKey (opts' "DateTimeFormat"' "ISO8601")' "ticks"' true' CultureInfo.InvariantCulture) == 0 ? SQLiteDateFormats.Ticks : SQLiteDateFormats.ISO8601;  	if (bUTF16)  		// SQLite automatically sets the encoding of the database to UTF16 if called from sqlite3_open16()  		_sql = new SQLite3_UTF16 (dateFormat);  	else  		_sql = new SQLite3 (dateFormat);  	fileName = ExpandFileName (fileName);  	try {  		if (IO.File.Exists (fileName) == false)  			throw new IO.FileNotFoundException (String.Format (CultureInfo.CurrentCulture' "Unable to locate file \"{0}\"' creating new database."' fileName));  	} catch {  	}  	_sql.Open (fileName);  	string password = FindKey (opts' "Password"' null);  	if (String.IsNullOrEmpty (password) == false)  		_sql.SetPassword (System.Text.UTF8Encoding.UTF8.GetBytes (password));  	else if (_password != null)  		_sql.SetPassword (_password);  	_password = null;  	_dataSource = System.IO.Path.GetFileNameWithoutExtension (fileName);  	OnStateChange (ConnectionState.Open);  	using (SQLiteCommand cmd = CreateCommand ()) {  		string defValue;  		defValue = FindKey (opts' "Synchronous"' "Normal");  		if (String.Compare (defValue' "Normal"' true' CultureInfo.InvariantCulture) != 0) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Synchronous={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  		defValue = FindKey (opts' "Cache Size"' "2000");  		if (Convert.ToInt32 (defValue) != 2000) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Cache_Size={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  		if (fileName != ":memory:") {  			defValue = FindKey (opts' "Page Size"' "1024");  			if (Convert.ToInt32 (defValue) != 1024) {  				cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  				cmd.ExecuteNonQuery ();  			}  		}  	}  	#if !PLATFORM_COMPACTFRAMEWORK  	if (FindKey (opts' "Enlist"' "Y").ToUpper () [0] == 'Y' && Transactions.Transaction.Current != null)  		EnlistTransaction (Transactions.Transaction.Current);  	#endif  } catch (SQLiteException) {  	OnStateChange (ConnectionState.Broken);  	throw;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: try {  	bool bUTF16 = (Convert.ToBoolean (FindKey (opts' "UseUTF16Encoding"' "False")' CultureInfo.InvariantCulture) == true);  	SQLiteDateFormats dateFormat = String.Compare (FindKey (opts' "DateTimeFormat"' "ISO8601")' "ticks"' true' CultureInfo.InvariantCulture) == 0 ? SQLiteDateFormats.Ticks : SQLiteDateFormats.ISO8601;  	if (bUTF16)  		// SQLite automatically sets the encoding of the database to UTF16 if called from sqlite3_open16()  		_sql = new SQLite3_UTF16 (dateFormat);  	else  		_sql = new SQLite3 (dateFormat);  	fileName = ExpandFileName (fileName);  	try {  		if (IO.File.Exists (fileName) == false)  			throw new IO.FileNotFoundException (String.Format (CultureInfo.CurrentCulture' "Unable to locate file \"{0}\"' creating new database."' fileName));  	} catch {  	}  	_sql.Open (fileName);  	string password = FindKey (opts' "Password"' null);  	if (String.IsNullOrEmpty (password) == false)  		_sql.SetPassword (System.Text.UTF8Encoding.UTF8.GetBytes (password));  	else if (_password != null)  		_sql.SetPassword (_password);  	_password = null;  	_dataSource = System.IO.Path.GetFileNameWithoutExtension (fileName);  	OnStateChange (ConnectionState.Open);  	using (SQLiteCommand cmd = CreateCommand ()) {  		string defValue;  		defValue = FindKey (opts' "Synchronous"' "Normal");  		if (String.Compare (defValue' "Normal"' true' CultureInfo.InvariantCulture) != 0) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Synchronous={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  		defValue = FindKey (opts' "Cache Size"' "2000");  		if (Convert.ToInt32 (defValue) != 2000) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Cache_Size={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  		if (fileName != ":memory:") {  			defValue = FindKey (opts' "Page Size"' "1024");  			if (Convert.ToInt32 (defValue) != 1024) {  				cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  				cmd.ExecuteNonQuery ();  			}  		}  	}  	#if !PLATFORM_COMPACTFRAMEWORK  	if (FindKey (opts' "Enlist"' "Y").ToUpper () [0] == 'Y' && Transactions.Transaction.Current != null)  		EnlistTransaction (Transactions.Transaction.Current);  	#endif  } catch (SQLiteException) {  	OnStateChange (ConnectionState.Broken);  	throw;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: using (SQLiteCommand cmd = CreateCommand ()) {  	string defValue;  	defValue = FindKey (opts' "Synchronous"' "Normal");  	if (String.Compare (defValue' "Normal"' true' CultureInfo.InvariantCulture) != 0) {  		cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Synchronous={0}"' defValue);  		cmd.ExecuteNonQuery ();  	}  	defValue = FindKey (opts' "Cache Size"' "2000");  	if (Convert.ToInt32 (defValue) != 2000) {  		cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Cache_Size={0}"' defValue);  		cmd.ExecuteNonQuery ();  	}  	if (fileName != ":memory:") {  		defValue = FindKey (opts' "Page Size"' "1024");  		if (Convert.ToInt32 (defValue) != 1024) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: using (SQLiteCommand cmd = CreateCommand ()) {  	string defValue;  	defValue = FindKey (opts' "Synchronous"' "Normal");  	if (String.Compare (defValue' "Normal"' true' CultureInfo.InvariantCulture) != 0) {  		cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Synchronous={0}"' defValue);  		cmd.ExecuteNonQuery ();  	}  	defValue = FindKey (opts' "Cache Size"' "2000");  	if (Convert.ToInt32 (defValue) != 2000) {  		cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Cache_Size={0}"' defValue);  		cmd.ExecuteNonQuery ();  	}  	if (fileName != ":memory:") {  		defValue = FindKey (opts' "Page Size"' "1024");  		if (Convert.ToInt32 (defValue) != 1024) {  			cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  			cmd.ExecuteNonQuery ();  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: if (Convert.ToInt32 (defValue) != 2000) {  	cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Cache_Size={0}"' defValue);  	cmd.ExecuteNonQuery ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: if (fileName != ":memory:") {  	defValue = FindKey (opts' "Page Size"' "1024");  	if (Convert.ToInt32 (defValue) != 1024) {  		cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  		cmd.ExecuteNonQuery ();  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Open,The following statement contains a magic number: if (Convert.ToInt32 (defValue) != 1024) {  	cmd.CommandText = String.Format (CultureInfo.InvariantCulture' "PRAGMA Page_Size={0}"' defValue);  	cmd.ExecuteNonQuery ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Columns (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Columns (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Indexes (parms [0]' parms [2]' parms [4]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Indexes (parms [0]' parms [2]' parms [4]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Tables (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Tables (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_Views (parms [0]' parms [2]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following statement contains a magic number: return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_DataSourceInformation,The following statement contains a magic number: row.ItemArray = new object[] {  	null'  	"SQLite"'  	_sql.Version'  	_sql.Version'  	3'  	@"(^\[\p{Lo}\p{Lu}\p{Ll}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Nd}@$#_]*$)|(^\[[^\]\0]|\]\]+\]$)|(^\""[^\""\0]|\""\""+\""$)"'  	1'  	false'  	"{0}"'  	@"@[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	255'  	@"^[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	@"(([^\[]|\]\])*)"'  	1'  	";"'  	@"'(([^']|'')*)'"'  	15  };  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_DataSourceInformation,The following statement contains a magic number: row.ItemArray = new object[] {  	null'  	"SQLite"'  	_sql.Version'  	_sql.Version'  	3'  	@"(^\[\p{Lo}\p{Lu}\p{Ll}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Nd}@$#_]*$)|(^\[[^\]\0]|\]\]+\]$)|(^\""[^\""\0]|\""\""+\""$)"'  	1'  	false'  	"{0}"'  	@"@[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	255'  	@"^[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	@"(([^\[]|\]\])*)"'  	1'  	";"'  	@"'(([^']|'')*)'"'  	15  };  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_DataSourceInformation,The following statement contains a magic number: row.ItemArray = new object[] {  	null'  	"SQLite"'  	_sql.Version'  	_sql.Version'  	3'  	@"(^\[\p{Lo}\p{Lu}\p{Ll}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Nd}@$#_]*$)|(^\[[^\]\0]|\]\]+\]$)|(^\""[^\""\0]|\""\""+\""$)"'  	1'  	false'  	"{0}"'  	@"@[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	255'  	@"^[\p{Lo}\p{Lu}\p{Ll}\p{Lm}_@#][\p{Lo}\p{Lu}\p{Ll}\p{Lm}\p{Nd}\uff3f_@#\$]*(?=\s+|$)"'  	@"(([^\[]|\]\])*)"'  	1'  	";"'  	@"'(([^']|'')*)'"'  	15  };  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table' OR [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  							foreach (DataRow schemaRow in tblSchema.Rows) {  								if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["TABLE_CATALOG"] = strCatalog;  									row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  									row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  									row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  									row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  									row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  									// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  									row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  									tbl.Rows.Add (row);  								}  							}  						}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table' OR [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  							foreach (DataRow schemaRow in tblSchema.Rows) {  								if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["TABLE_CATALOG"] = strCatalog;  									row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  									row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  									row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  									row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  									row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  									// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  									row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  									tbl.Rows.Add (row);  								}  							}  						}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table' OR [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  							foreach (DataRow schemaRow in tblSchema.Rows) {  								if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["TABLE_CATALOG"] = strCatalog;  									row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  									row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  									row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  									row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  									row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  									// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  									row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  									tbl.Rows.Add (row);  								}  							}  						}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  						foreach (DataRow schemaRow in tblSchema.Rows) {  							if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["TABLE_CATALOG"] = strCatalog;  								row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  								row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  								row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  								row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  								row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  								// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  								row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  								tbl.Rows.Add (row);  							}  						}  					}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  						foreach (DataRow schemaRow in tblSchema.Rows) {  							if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["TABLE_CATALOG"] = strCatalog;  								row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  								row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  								row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  								row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  								row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  								// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  								row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  								tbl.Rows.Add (row);  							}  						}  					}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  						foreach (DataRow schemaRow in tblSchema.Rows) {  							if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["TABLE_CATALOG"] = strCatalog;  								row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  								row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  								row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  								row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  								row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  								// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  								row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  								tbl.Rows.Add (row);  							}  						}  					}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  					foreach (DataRow schemaRow in tblSchema.Rows) {  						if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  							row = tbl.NewRow ();  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  							row ["TABLE_CATALOG"] = strCatalog;  							row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  							row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  							row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  							row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  							row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  							// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  							row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  							row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  							row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  							tbl.Rows.Add (row);  						}  					}  				}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  					foreach (DataRow schemaRow in tblSchema.Rows) {  						if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  							row = tbl.NewRow ();  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  							row ["TABLE_CATALOG"] = strCatalog;  							row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  							row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  							row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  							row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  							row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  							// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  							row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  							row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  							row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  							tbl.Rows.Add (row);  						}  					}  				}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  					foreach (DataRow schemaRow in tblSchema.Rows) {  						if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  							row = tbl.NewRow ();  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  							row ["TABLE_CATALOG"] = strCatalog;  							row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  							row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  							row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  							row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  							row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  							// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  							row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  							row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  							row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  							tbl.Rows.Add (row);  						}  					}  				}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  			using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  				foreach (DataRow schemaRow in tblSchema.Rows) {  					if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  						row = tbl.NewRow ();  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  						row ["TABLE_CATALOG"] = strCatalog;  						row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  						row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  						row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  						row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  						row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  						// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  						row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  						row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  						row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  						tbl.Rows.Add (row);  					}  				}  			}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  			using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  				foreach (DataRow schemaRow in tblSchema.Rows) {  					if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  						row = tbl.NewRow ();  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  						row ["TABLE_CATALOG"] = strCatalog;  						row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  						row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  						row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  						row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  						row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  						// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  						row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  						row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  						row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  						tbl.Rows.Add (row);  					}  				}  			}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  			using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  				foreach (DataRow schemaRow in tblSchema.Rows) {  					if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  						row = tbl.NewRow ();  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  						row ["TABLE_CATALOG"] = strCatalog;  						row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  						row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  						row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  						row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  						row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  						// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  						row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  						row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  						row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  						tbl.Rows.Add (row);  					}  				}  			}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  		using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  			foreach (DataRow schemaRow in tblSchema.Rows) {  				if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  					row = tbl.NewRow ();  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  					row ["TABLE_CATALOG"] = strCatalog;  					row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  					row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  					row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  					row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  					row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  					// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  					row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  					row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  					row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  					tbl.Rows.Add (row);  				}  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  		using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  			foreach (DataRow schemaRow in tblSchema.Rows) {  				if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  					row = tbl.NewRow ();  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  					row ["TABLE_CATALOG"] = strCatalog;  					row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  					row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  					row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  					row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  					row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  					// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  					row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  					row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  					row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  					tbl.Rows.Add (row);  				}  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  	using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  		foreach (DataRow schemaRow in tblSchema.Rows) {  			if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  				row = tbl.NewRow ();  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  				row ["TABLE_CATALOG"] = strCatalog;  				row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  				row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  				row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  				row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  				row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  				// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  				row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  				row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  				row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: using (DataTable tblSchema = rd.GetSchemaTable (false' true)) {  	foreach (DataRow schemaRow in tblSchema.Rows) {  		if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  			row = tbl.NewRow ();  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  			row ["TABLE_CATALOG"] = strCatalog;  			row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  			row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  			row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  			row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  			row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  			// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  			row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  			row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  			row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: foreach (DataRow schemaRow in tblSchema.Rows) {  	if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  		row = tbl.NewRow ();  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  		row ["TABLE_CATALOG"] = strCatalog;  		row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  		row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  		row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  		row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  		row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  		// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  		row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  		row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  		row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: if (String.Compare (schemaRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  	row = tbl.NewRow ();  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  	row ["TABLE_CATALOG"] = strCatalog;  	row ["ORDINAL_POSITION"] = schemaRow [SchemaTableColumn.ColumnOrdinal];  	row ["COLUMN_HASDEFAULT"] = (schemaRow [SchemaTableOptionalColumn.DefaultValue] != DBNull.Value);  	row ["COLUMN_DEFAULT"] = schemaRow [SchemaTableOptionalColumn.DefaultValue];  	row ["IS_NULLABLE"] = schemaRow [SchemaTableColumn.AllowDBNull];  	row ["DATA_TYPE"] = schemaRow ["DataTypeName"];  	// SQLiteConvert.DbTypeToType((DbType)schemaRow[SchemaTableColumn.ProviderType]).ToString();  	row ["CHARACTER_MAXIMUM_LENGTH"] = schemaRow [SchemaTableColumn.ColumnSize];  	row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  	row ["PRIMARY_KEY"] = schemaRow [SchemaTableColumn.IsKey];  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Columns,The following statement contains a magic number: row ["TABLE_NAME"] = rdTables.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  				// Such indexes are not listed in the indexes list but count as indexes just the same.  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1) {  								primaryKeys.Add (rdTable.GetInt32 (0));  								// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["PRIMARY_KEY"] = true;  					row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["UNIQUE"] = true;  					if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						tbl.Rows.Add (row);  					}  					primaryKeys.Clear ();  				}  				// Now fetch all the rest of the indexes.  				using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  						while (rd.Read ()) {  							if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  								row = tbl.NewRow ();  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["INDEX_CATALOG"] = strCatalog;  								row ["INDEX_NAME"] = rd.GetString (1);  								row ["UNIQUE"] = rd.GetBoolean (2);  								row ["PRIMARY_KEY"] = false;  								// Now for the really hard work.  Figure out which index is the primary key index.  								// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  								// primary key' and all the columns in the given index match the primary key columns  								if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  									using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  										using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  											int nMatches = 0;  											while (rdDetails.Read ()) {  												if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  													nMatches = 0;  													break;  												}  												nMatches++;  											}  											if (nMatches == primaryKeys.Count) {  												row ["PRIMARY_KEY"] = true;  												primaryKeys.Clear ();  											}  										}  								}  								tbl.Rows.Add (row);  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  			// Such indexes are not listed in the indexes list but count as indexes just the same.  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1) {  							primaryKeys.Add (rdTable.GetInt32 (0));  							// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["PRIMARY_KEY"] = true;  				row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["UNIQUE"] = true;  				if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					tbl.Rows.Add (row);  				}  				primaryKeys.Clear ();  			}  			// Now fetch all the rest of the indexes.  			using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  					while (rd.Read ()) {  						if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  							row = tbl.NewRow ();  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["INDEX_CATALOG"] = strCatalog;  							row ["INDEX_NAME"] = rd.GetString (1);  							row ["UNIQUE"] = rd.GetBoolean (2);  							row ["PRIMARY_KEY"] = false;  							// Now for the really hard work.  Figure out which index is the primary key index.  							// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  							// primary key' and all the columns in the given index match the primary key columns  							if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  								using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  									using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  										int nMatches = 0;  										while (rdDetails.Read ()) {  											if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  												nMatches = 0;  												break;  											}  											nMatches++;  										}  										if (nMatches == primaryKeys.Count) {  											row ["PRIMARY_KEY"] = true;  											primaryKeys.Clear ();  										}  									}  							}  							tbl.Rows.Add (row);  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  		// Such indexes are not listed in the indexes list but count as indexes just the same.  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1) {  						primaryKeys.Add (rdTable.GetInt32 (0));  						// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["PRIMARY_KEY"] = true;  			row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["UNIQUE"] = true;  			if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				tbl.Rows.Add (row);  			}  			primaryKeys.Clear ();  		}  		// Now fetch all the rest of the indexes.  		using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  				while (rd.Read ()) {  					if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  						row = tbl.NewRow ();  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["INDEX_CATALOG"] = strCatalog;  						row ["INDEX_NAME"] = rd.GetString (1);  						row ["UNIQUE"] = rd.GetBoolean (2);  						row ["PRIMARY_KEY"] = false;  						// Now for the really hard work.  Figure out which index is the primary key index.  						// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  						// primary key' and all the columns in the given index match the primary key columns  						if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  							using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  								using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  									int nMatches = 0;  									while (rdDetails.Read ()) {  										if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  											nMatches = 0;  											break;  										}  										nMatches++;  									}  									if (nMatches == primaryKeys.Count) {  										row ["PRIMARY_KEY"] = true;  										primaryKeys.Clear ();  									}  								}  						}  						tbl.Rows.Add (row);  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	// First' look for any rowid indexes -- which sqlite defines are INTEGER PRIMARY KEY columns.  	// Such indexes are not listed in the indexes list but count as indexes just the same.  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1) {  					primaryKeys.Add (rdTable.GetInt32 (0));  					// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["PRIMARY_KEY"] = true;  		row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["UNIQUE"] = true;  		if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			tbl.Rows.Add (row);  		}  		primaryKeys.Clear ();  	}  	// Now fetch all the rest of the indexes.  	using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  			while (rd.Read ()) {  				if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["INDEX_CATALOG"] = strCatalog;  					row ["INDEX_NAME"] = rd.GetString (1);  					row ["UNIQUE"] = rd.GetBoolean (2);  					row ["PRIMARY_KEY"] = false;  					// Now for the really hard work.  Figure out which index is the primary key index.  					// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  					// primary key' and all the columns in the given index match the primary key columns  					if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  						using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  							using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  								int nMatches = 0;  								while (rdDetails.Read ()) {  									if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  										nMatches = 0;  										break;  									}  									nMatches++;  								}  								if (nMatches == primaryKeys.Count) {  									row ["PRIMARY_KEY"] = true;  									primaryKeys.Clear ();  								}  							}  					}  					tbl.Rows.Add (row);  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1) {  				primaryKeys.Add (rdTable.GetInt32 (0));  				// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1) {  				primaryKeys.Add (rdTable.GetInt32 (0));  				// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1) {  				primaryKeys.Add (rdTable.GetInt32 (0));  				// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  	while (rdTable.Read ()) {  		if (rdTable.GetInt32 (5) == 1) {  			primaryKeys.Add (rdTable.GetInt32 (0));  			// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  			if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  				maybeRowId = true;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  	while (rdTable.Read ()) {  		if (rdTable.GetInt32 (5) == 1) {  			primaryKeys.Add (rdTable.GetInt32 (0));  			// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  			if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  				maybeRowId = true;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTable.Read ()) {  	if (rdTable.GetInt32 (5) == 1) {  		primaryKeys.Add (rdTable.GetInt32 (0));  		// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  		if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  			maybeRowId = true;  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rdTable.Read ()) {  	if (rdTable.GetInt32 (5) == 1) {  		primaryKeys.Add (rdTable.GetInt32 (0));  		// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  		if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  			maybeRowId = true;  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (rdTable.GetInt32 (5) == 1) {  	primaryKeys.Add (rdTable.GetInt32 (0));  	// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  	if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  		maybeRowId = true;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (rdTable.GetInt32 (5) == 1) {  	primaryKeys.Add (rdTable.GetInt32 (0));  	// If the primary key is of type INTEGER' then its a rowid and we need to make a fake index entry for it.  	if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  		maybeRowId = true;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  	maybeRowId = true;  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (primaryKeys.Count == 1 && maybeRowId == true) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["INDEX_CATALOG"] = strCatalog;  	row ["PRIMARY_KEY"] = true;  	row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  	row ["UNIQUE"] = true;  	if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  		tbl.Rows.Add (row);  	}  	primaryKeys.Clear ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (primaryKeys.Count == 1 && maybeRowId == true) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["INDEX_CATALOG"] = strCatalog;  	row ["PRIMARY_KEY"] = true;  	row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  	row ["UNIQUE"] = true;  	if (String.Compare ((string)row ["INDEX_NAME"]' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  		tbl.Rows.Add (row);  	}  	primaryKeys.Clear ();  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: row ["TABLE_NAME"] = rdTables.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: row ["INDEX_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["INDEX_NAME"] = rd.GetString (1);  				row ["UNIQUE"] = rd.GetBoolean (2);  				row ["PRIMARY_KEY"] = false;  				// Now for the really hard work.  Figure out which index is the primary key index.  				// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  				// primary key' and all the columns in the given index match the primary key columns  				if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  					using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  						using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  							int nMatches = 0;  							while (rdDetails.Read ()) {  								if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  									nMatches = 0;  									break;  								}  								nMatches++;  							}  							if (nMatches == primaryKeys.Count) {  								row ["PRIMARY_KEY"] = true;  								primaryKeys.Clear ();  							}  						}  				}  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["INDEX_NAME"] = rd.GetString (1);  				row ["UNIQUE"] = rd.GetBoolean (2);  				row ["PRIMARY_KEY"] = false;  				// Now for the really hard work.  Figure out which index is the primary key index.  				// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  				// primary key' and all the columns in the given index match the primary key columns  				if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  					using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  						using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  							int nMatches = 0;  							while (rdDetails.Read ()) {  								if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  									nMatches = 0;  									break;  								}  								nMatches++;  							}  							if (nMatches == primaryKeys.Count) {  								row ["PRIMARY_KEY"] = true;  								primaryKeys.Clear ();  							}  						}  				}  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["INDEX_NAME"] = rd.GetString (1);  				row ["UNIQUE"] = rd.GetBoolean (2);  				row ["PRIMARY_KEY"] = false;  				// Now for the really hard work.  Figure out which index is the primary key index.  				// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  				// primary key' and all the columns in the given index match the primary key columns  				if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  					using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  						using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  							int nMatches = 0;  							while (rdDetails.Read ()) {  								if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  									nMatches = 0;  									break;  								}  								nMatches++;  							}  							if (nMatches == primaryKeys.Count) {  								row ["PRIMARY_KEY"] = true;  								primaryKeys.Clear ();  							}  						}  				}  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["INDEX_CATALOG"] = strCatalog;  				row ["INDEX_NAME"] = rd.GetString (1);  				row ["UNIQUE"] = rd.GetBoolean (2);  				row ["PRIMARY_KEY"] = false;  				// Now for the really hard work.  Figure out which index is the primary key index.  				// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  				// primary key' and all the columns in the given index match the primary key columns  				if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  					using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  						using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  							int nMatches = 0;  							while (rdDetails.Read ()) {  								if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  									nMatches = 0;  									break;  								}  								nMatches++;  							}  							if (nMatches == primaryKeys.Count) {  								row ["PRIMARY_KEY"] = true;  								primaryKeys.Clear ();  							}  						}  				}  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["INDEX_NAME"] = rd.GetString (1);  			row ["UNIQUE"] = rd.GetBoolean (2);  			row ["PRIMARY_KEY"] = false;  			// Now for the really hard work.  Figure out which index is the primary key index.  			// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  			// primary key' and all the columns in the given index match the primary key columns  			if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  				using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  					using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  						int nMatches = 0;  						while (rdDetails.Read ()) {  							if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  								nMatches = 0;  								break;  							}  							nMatches++;  						}  						if (nMatches == primaryKeys.Count) {  							row ["PRIMARY_KEY"] = true;  							primaryKeys.Clear ();  						}  					}  			}  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["INDEX_NAME"] = rd.GetString (1);  			row ["UNIQUE"] = rd.GetBoolean (2);  			row ["PRIMARY_KEY"] = false;  			// Now for the really hard work.  Figure out which index is the primary key index.  			// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  			// primary key' and all the columns in the given index match the primary key columns  			if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  				using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  					using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  						int nMatches = 0;  						while (rdDetails.Read ()) {  							if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  								nMatches = 0;  								break;  							}  							nMatches++;  						}  						if (nMatches == primaryKeys.Count) {  							row ["PRIMARY_KEY"] = true;  							primaryKeys.Clear ();  						}  					}  			}  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["INDEX_CATALOG"] = strCatalog;  			row ["INDEX_NAME"] = rd.GetString (1);  			row ["UNIQUE"] = rd.GetBoolean (2);  			row ["PRIMARY_KEY"] = false;  			// Now for the really hard work.  Figure out which index is the primary key index.  			// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  			// primary key' and all the columns in the given index match the primary key columns  			if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  				using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  					using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  						int nMatches = 0;  						while (rdDetails.Read ()) {  							if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  								nMatches = 0;  								break;  							}  							nMatches++;  						}  						if (nMatches == primaryKeys.Count) {  							row ["PRIMARY_KEY"] = true;  							primaryKeys.Clear ();  						}  					}  			}  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["INDEX_NAME"] = rd.GetString (1);  		row ["UNIQUE"] = rd.GetBoolean (2);  		row ["PRIMARY_KEY"] = false;  		// Now for the really hard work.  Figure out which index is the primary key index.  		// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  		// primary key' and all the columns in the given index match the primary key columns  		if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  			using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  				using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  					int nMatches = 0;  					while (rdDetails.Read ()) {  						if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  							nMatches = 0;  							break;  						}  						nMatches++;  					}  					if (nMatches == primaryKeys.Count) {  						row ["PRIMARY_KEY"] = true;  						primaryKeys.Clear ();  					}  				}  		}  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["INDEX_NAME"] = rd.GetString (1);  		row ["UNIQUE"] = rd.GetBoolean (2);  		row ["PRIMARY_KEY"] = false;  		// Now for the really hard work.  Figure out which index is the primary key index.  		// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  		// primary key' and all the columns in the given index match the primary key columns  		if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  			using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  				using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  					int nMatches = 0;  					while (rdDetails.Read ()) {  						if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  							nMatches = 0;  							break;  						}  						nMatches++;  					}  					if (nMatches == primaryKeys.Count) {  						row ["PRIMARY_KEY"] = true;  						primaryKeys.Clear ();  					}  				}  		}  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["INDEX_CATALOG"] = strCatalog;  		row ["INDEX_NAME"] = rd.GetString (1);  		row ["UNIQUE"] = rd.GetBoolean (2);  		row ["PRIMARY_KEY"] = false;  		// Now for the really hard work.  Figure out which index is the primary key index.  		// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  		// primary key' and all the columns in the given index match the primary key columns  		if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  			using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  				using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  					int nMatches = 0;  					while (rdDetails.Read ()) {  						if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  							nMatches = 0;  							break;  						}  						nMatches++;  					}  					if (nMatches == primaryKeys.Count) {  						row ["PRIMARY_KEY"] = true;  						primaryKeys.Clear ();  					}  				}  		}  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["INDEX_CATALOG"] = strCatalog;  	row ["INDEX_NAME"] = rd.GetString (1);  	row ["UNIQUE"] = rd.GetBoolean (2);  	row ["PRIMARY_KEY"] = false;  	// Now for the really hard work.  Figure out which index is the primary key index.  	// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  	// primary key' and all the columns in the given index match the primary key columns  	if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  		using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  			using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  				int nMatches = 0;  				while (rdDetails.Read ()) {  					if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  						nMatches = 0;  						break;  					}  					nMatches++;  				}  				if (nMatches == primaryKeys.Count) {  					row ["PRIMARY_KEY"] = true;  					primaryKeys.Clear ();  				}  			}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["INDEX_CATALOG"] = strCatalog;  	row ["INDEX_NAME"] = rd.GetString (1);  	row ["UNIQUE"] = rd.GetBoolean (2);  	row ["PRIMARY_KEY"] = false;  	// Now for the really hard work.  Figure out which index is the primary key index.  	// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  	// primary key' and all the columns in the given index match the primary key columns  	if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  		using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  			using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  				int nMatches = 0;  				while (rdDetails.Read ()) {  					if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  						nMatches = 0;  						break;  					}  					nMatches++;  				}  				if (nMatches == primaryKeys.Count) {  					row ["PRIMARY_KEY"] = true;  					primaryKeys.Clear ();  				}  			}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strIndex' true' CultureInfo.InvariantCulture) == 0 || strIndex == null) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["INDEX_CATALOG"] = strCatalog;  	row ["INDEX_NAME"] = rd.GetString (1);  	row ["UNIQUE"] = rd.GetBoolean (2);  	row ["PRIMARY_KEY"] = false;  	// Now for the really hard work.  Figure out which index is the primary key index.  	// The only way to figure it out is to check if the index was an autoindex and if we have a non-rowid  	// primary key' and all the columns in the given index match the primary key columns  	if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  		using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  			using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  				int nMatches = 0;  				while (rdDetails.Read ()) {  					if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  						nMatches = 0;  						break;  					}  					nMatches++;  				}  				if (nMatches == primaryKeys.Count) {  					row ["PRIMARY_KEY"] = true;  					primaryKeys.Clear ();  				}  			}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: row ["TABLE_NAME"] = rdTables.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: row ["UNIQUE"] = rd.GetBoolean (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Indexes,The following statement contains a magic number: if (primaryKeys.Count > 0 && rd.GetString (1).StartsWith ("sqlite_autoindex_" + rdTables.GetString (2)' StringComparison.InvariantCultureIgnoreCase) == true) {  	using (SQLiteCommand cmdDetails = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rd.GetString (1))' this))  		using (SQLiteDataReader rdDetails = cmdDetails.ExecuteReader ()) {  			int nMatches = 0;  			while (rdDetails.Read ()) {  				if (primaryKeys.Contains (rdDetails.GetInt32 (1)) == false) {  					nMatches = 0;  					break;  				}  				nMatches++;  			}  			if (nMatches == primaryKeys.Count) {  				row ["PRIMARY_KEY"] = true;  				primaryKeys.Clear ();  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			strItem = rd.GetString (0);  			if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  				strItem = "SYSTEM_TABLE";  			if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  				if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["TABLE_TYPE"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			strItem = rd.GetString (0);  			if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  				strItem = "SYSTEM_TABLE";  			if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  				if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["TABLE_TYPE"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			strItem = rd.GetString (0);  			if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  				strItem = "SYSTEM_TABLE";  			if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  				if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["TABLE_TYPE"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			strItem = rd.GetString (0);  			if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  				strItem = "SYSTEM_TABLE";  			if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  				if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["TABLE_TYPE"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		strItem = rd.GetString (0);  		if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  			strItem = "SYSTEM_TABLE";  		if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  			if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["TABLE_TYPE"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		strItem = rd.GetString (0);  		if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  			strItem = "SYSTEM_TABLE";  		if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  			if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["TABLE_TYPE"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		strItem = rd.GetString (0);  		if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  			strItem = "SYSTEM_TABLE";  		if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  			if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["TABLE_TYPE"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		strItem = rd.GetString (0);  		if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  			strItem = "SYSTEM_TABLE";  		if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  			if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["TABLE_TYPE"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: while (rd.Read ()) {  	strItem = rd.GetString (0);  	if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  		strItem = "SYSTEM_TABLE";  	if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  		if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["TABLE_TYPE"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: while (rd.Read ()) {  	strItem = rd.GetString (0);  	if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  		strItem = "SYSTEM_TABLE";  	if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  		if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["TABLE_TYPE"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: while (rd.Read ()) {  	strItem = rd.GetString (0);  	if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  		strItem = "SYSTEM_TABLE";  	if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  		if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["TABLE_TYPE"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: while (rd.Read ()) {  	strItem = rd.GetString (0);  	if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  		strItem = "SYSTEM_TABLE";  	if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  		if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["TABLE_TYPE"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  	strItem = "SYSTEM_TABLE";  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (rd.GetString (2)' 0' "SQLITE_"' 0' 7' true' CultureInfo.InvariantCulture) == 0)  	strItem = "SYSTEM_TABLE";  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  	if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rd.GetString (2);  		row ["TABLE_TYPE"] = strItem;  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (strType' strItem' true' CultureInfo.InvariantCulture) == 0 || strType == null) {  	if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rd.GetString (2);  		row ["TABLE_TYPE"] = strItem;  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rd.GetString (2);  	row ["TABLE_TYPE"] = strItem;  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: if (String.Compare (rd.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0 || strTable == null) {  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rd.GetString (2);  	row ["TABLE_TYPE"] = strItem;  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Tables,The following statement contains a magic number: row ["TABLE_NAME"] = rd.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  				strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  				if (nPos > -1) {  					strItem = strItem.Substring (nPos + 4).Trim ();  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["IS_UPDATABLE"] = false;  					row ["VIEW_DEFINITION"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  				strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  				if (nPos > -1) {  					strItem = strItem.Substring (nPos + 4).Trim ();  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["IS_UPDATABLE"] = false;  					row ["VIEW_DEFINITION"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  				strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  				if (nPos > -1) {  					strItem = strItem.Substring (nPos + 4).Trim ();  					row = tbl.NewRow ();  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rd.GetString (2);  					row ["IS_UPDATABLE"] = false;  					row ["VIEW_DEFINITION"] = strItem;  					tbl.Rows.Add (row);  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  			strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  			if (nPos > -1) {  				strItem = strItem.Substring (nPos + 4).Trim ();  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["IS_UPDATABLE"] = false;  				row ["VIEW_DEFINITION"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  			strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  			if (nPos > -1) {  				strItem = strItem.Substring (nPos + 4).Trim ();  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["IS_UPDATABLE"] = false;  				row ["VIEW_DEFINITION"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  			strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  			if (nPos > -1) {  				strItem = strItem.Substring (nPos + 4).Trim ();  				row = tbl.NewRow ();  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rd.GetString (2);  				row ["IS_UPDATABLE"] = false;  				row ["VIEW_DEFINITION"] = strItem;  				tbl.Rows.Add (row);  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  		strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  		if (nPos > -1) {  			strItem = strItem.Substring (nPos + 4).Trim ();  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["IS_UPDATABLE"] = false;  			row ["VIEW_DEFINITION"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  		strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  		if (nPos > -1) {  			strItem = strItem.Substring (nPos + 4).Trim ();  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["IS_UPDATABLE"] = false;  			row ["VIEW_DEFINITION"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  		strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  		if (nPos > -1) {  			strItem = strItem.Substring (nPos + 4).Trim ();  			row = tbl.NewRow ();  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rd.GetString (2);  			row ["IS_UPDATABLE"] = false;  			row ["VIEW_DEFINITION"] = strItem;  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  	strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  	if (nPos > -1) {  		strItem = strItem.Substring (nPos + 4).Trim ();  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rd.GetString (2);  		row ["IS_UPDATABLE"] = false;  		row ["VIEW_DEFINITION"] = strItem;  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  	strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  	if (nPos > -1) {  		strItem = strItem.Substring (nPos + 4).Trim ();  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rd.GetString (2);  		row ["IS_UPDATABLE"] = false;  		row ["VIEW_DEFINITION"] = strItem;  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strView' true' CultureInfo.InvariantCulture) == 0 || String.IsNullOrEmpty (strView)) {  	strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	nPos = Globalization.CultureInfo.InvariantCulture.CompareInfo.IndexOf (strItem' " AS "' CompareOptions.IgnoreCase);  	if (nPos > -1) {  		strItem = strItem.Substring (nPos + 4).Trim ();  		row = tbl.NewRow ();  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rd.GetString (2);  		row ["IS_UPDATABLE"] = false;  		row ["VIEW_DEFINITION"] = strItem;  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: strItem = rd.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: if (nPos > -1) {  	strItem = strItem.Substring (nPos + 4).Trim ();  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rd.GetString (2);  	row ["IS_UPDATABLE"] = false;  	row ["VIEW_DEFINITION"] = strItem;  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: if (nPos > -1) {  	strItem = strItem.Substring (nPos + 4).Trim ();  	row = tbl.NewRow ();  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rd.GetString (2);  	row ["IS_UPDATABLE"] = false;  	row ["VIEW_DEFINITION"] = strItem;  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: strItem = strItem.Substring (nPos + 4).Trim ();  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Views,The following statement contains a magic number: row ["TABLE_NAME"] = rd.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Catalogs,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand ("PRAGMA database_list"' this))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  		while (rd.Read ()) {  			if (String.Compare (rd.GetString (1)' strCatalog' true' CultureInfo.InvariantCulture) == 0 || strCatalog == null) {  				row = tbl.NewRow ();  				row ["CATALOG_NAME"] = rd.GetString (1);  				row ["DESCRIPTION"] = rd.GetString (2);  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Catalogs,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader ()) {  	while (rd.Read ()) {  		if (String.Compare (rd.GetString (1)' strCatalog' true' CultureInfo.InvariantCulture) == 0 || strCatalog == null) {  			row = tbl.NewRow ();  			row ["CATALOG_NAME"] = rd.GetString (1);  			row ["DESCRIPTION"] = rd.GetString (2);  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Catalogs,The following statement contains a magic number: while (rd.Read ()) {  	if (String.Compare (rd.GetString (1)' strCatalog' true' CultureInfo.InvariantCulture) == 0 || strCatalog == null) {  		row = tbl.NewRow ();  		row ["CATALOG_NAME"] = rd.GetString (1);  		row ["DESCRIPTION"] = rd.GetString (2);  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Catalogs,The following statement contains a magic number: if (String.Compare (rd.GetString (1)' strCatalog' true' CultureInfo.InvariantCulture) == 0 || strCatalog == null) {  	row = tbl.NewRow ();  	row ["CATALOG_NAME"] = rd.GetString (1);  	row ["DESCRIPTION"] = rd.GetString (2);  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_Catalogs,The following statement contains a magic number: row ["DESCRIPTION"] = rd.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			maybeRowId = false;  			primaryKeys.Clear ();  			if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  						while (rdTable.Read ()) {  							if (rdTable.GetInt32 (5) == 1)// is a primary key  							 {  								primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  								// Is an integer -- could be a rowid if no other primary keys exist in the table  								if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  									maybeRowId = true;  							}  						}  					}  				if (primaryKeys.Count == 1 && maybeRowId == true) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["COLUMN_NAME"] = primaryKeys [0].Value;  					row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  					row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  				using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  					using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  						while (rdIndexes.Read ()) {  							if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  								using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  									using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  										while (rdIndex.Read ()) {  											row = tbl.NewRow ();  											row ["CONSTRAINT_CATALOG"] = strCatalog;  											row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_NAME"] = rdIndexes.GetString (2);  											row ["COLUMN_NAME"] = rdIndex.GetString (2);  											row ["INDEX_NAME"] = rdIndexes.GetString (1);  											row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  											if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  												tbl.Rows.Add (row);  										}  									}  							}  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		maybeRowId = false;  		primaryKeys.Clear ();  		if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  					while (rdTable.Read ()) {  						if (rdTable.GetInt32 (5) == 1)// is a primary key  						 {  							primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  							// Is an integer -- could be a rowid if no other primary keys exist in the table  							if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  								maybeRowId = true;  						}  					}  				}  			if (primaryKeys.Count == 1 && maybeRowId == true) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["COLUMN_NAME"] = primaryKeys [0].Value;  				row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  				row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  			using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  				using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  					while (rdIndexes.Read ()) {  						if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  								using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  									while (rdIndex.Read ()) {  										row = tbl.NewRow ();  										row ["CONSTRAINT_CATALOG"] = strCatalog;  										row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_NAME"] = rdIndexes.GetString (2);  										row ["COLUMN_NAME"] = rdIndex.GetString (2);  										row ["INDEX_NAME"] = rdIndexes.GetString (1);  										row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  										if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  											tbl.Rows.Add (row);  									}  								}  						}  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTables.Read ()) {  	maybeRowId = false;  	primaryKeys.Clear ();  	if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  				while (rdTable.Read ()) {  					if (rdTable.GetInt32 (5) == 1)// is a primary key  					 {  						primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  						// Is an integer -- could be a rowid if no other primary keys exist in the table  						if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  							maybeRowId = true;  					}  				}  			}  		if (primaryKeys.Count == 1 && maybeRowId == true) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["COLUMN_NAME"] = primaryKeys [0].Value;  			row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  			row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  		using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  			using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  				while (rdIndexes.Read ()) {  					if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  							using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  								while (rdIndex.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdIndexes.GetString (2);  									row ["COLUMN_NAME"] = rdIndex.GetString (2);  									row ["INDEX_NAME"] = rdIndexes.GetString (1);  									row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  									if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  					}  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (rdTables.GetString (2)' strTable' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  			while (rdTable.Read ()) {  				if (rdTable.GetInt32 (5) == 1)// is a primary key  				 {  					primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  					// Is an integer -- could be a rowid if no other primary keys exist in the table  					if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  						maybeRowId = true;  				}  			}  		}  	if (primaryKeys.Count == 1 && maybeRowId == true) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["COLUMN_NAME"] = primaryKeys [0].Value;  		row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  		row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  	using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  		using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  			while (rdIndexes.Read ()) {  				if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  						using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  							while (rdIndex.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdIndexes.GetString (2);  								row ["COLUMN_NAME"] = rdIndex.GetString (2);  								row ["INDEX_NAME"] = rdIndexes.GetString (1);  								row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  								if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1)// is a primary key  			 {  				primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  				// Is an integer -- could be a rowid if no other primary keys exist in the table  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1)// is a primary key  			 {  				primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  				// Is an integer -- could be a rowid if no other primary keys exist in the table  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].table_info([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  		while (rdTable.Read ()) {  			if (rdTable.GetInt32 (5) == 1)// is a primary key  			 {  				primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  				// Is an integer -- could be a rowid if no other primary keys exist in the table  				if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  					maybeRowId = true;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  	while (rdTable.Read ()) {  		if (rdTable.GetInt32 (5) == 1)// is a primary key  		 {  			primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  			// Is an integer -- could be a rowid if no other primary keys exist in the table  			if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  				maybeRowId = true;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader ()) {  	while (rdTable.Read ()) {  		if (rdTable.GetInt32 (5) == 1)// is a primary key  		 {  			primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  			// Is an integer -- could be a rowid if no other primary keys exist in the table  			if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  				maybeRowId = true;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTable.Read ()) {  	if (rdTable.GetInt32 (5) == 1)// is a primary key  	 {  		primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  		// Is an integer -- could be a rowid if no other primary keys exist in the table  		if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  			maybeRowId = true;  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdTable.Read ()) {  	if (rdTable.GetInt32 (5) == 1)// is a primary key  	 {  		primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  		// Is an integer -- could be a rowid if no other primary keys exist in the table  		if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  			maybeRowId = true;  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (rdTable.GetInt32 (5) == 1)// is a primary key   {  	primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  	// Is an integer -- could be a rowid if no other primary keys exist in the table  	if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  		maybeRowId = true;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (rdTable.GetInt32 (5) == 1)// is a primary key   {  	primaryKeys.Add (new KeyValuePair<int' string> (rdTable.GetInt32 (0)' rdTable.GetString (1)));  	// Is an integer -- could be a rowid if no other primary keys exist in the table  	if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  		maybeRowId = true;  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.Compare (rdTable.GetString (2)' "INTEGER"' true' CultureInfo.InvariantCulture) == 0)  	maybeRowId = true;  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (primaryKeys.Count == 1 && maybeRowId == true) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["COLUMN_NAME"] = primaryKeys [0].Value;  	row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  	row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  	if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (primaryKeys.Count == 1 && maybeRowId == true) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["COLUMN_NAME"] = primaryKeys [0].Value;  	row ["INDEX_NAME"] = row ["CONSTRAINT_NAME"];  	row ["ORDINAL_POSITION"] = primaryKeys [0].Key;  	if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' (string)row ["INDEX_NAME"]' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "sqlite_master_PK_{0}"' rdTables.GetString (2));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: row ["TABLE_NAME"] = rdTables.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  	using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  		while (rdIndexes.Read ()) {  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  					using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  						while (rdIndex.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdIndexes.GetString (2);  							row ["COLUMN_NAME"] = rdIndex.GetString (2);  							row ["INDEX_NAME"] = rdIndexes.GetString (1);  							row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  							if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  	using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  		while (rdIndexes.Read ()) {  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  					using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  						while (rdIndex.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdIndexes.GetString (2);  							row ["COLUMN_NAME"] = rdIndex.GetString (2);  							row ["INDEX_NAME"] = rdIndexes.GetString (1);  							row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  							if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdIndexes = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'index' AND [tbl_name] LIKE '{1}'"' strCatalog' rdTables.GetString (2).Replace ("'"' "''"))' this))  	using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  		while (rdIndexes.Read ()) {  			if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  					using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  						while (rdIndex.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdIndexes.GetString (2);  							row ["COLUMN_NAME"] = rdIndex.GetString (2);  							row ["INDEX_NAME"] = rdIndexes.GetString (1);  							row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  							if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  	while (rdIndexes.Read ()) {  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  				using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  					while (rdIndex.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdIndexes.GetString (2);  						row ["COLUMN_NAME"] = rdIndex.GetString (2);  						row ["INDEX_NAME"] = rdIndexes.GetString (1);  						row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  						if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdIndexes = cmdIndexes.ExecuteReader ()) {  	while (rdIndexes.Read ()) {  		if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  				using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  					while (rdIndex.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdIndexes.GetString (2);  						row ["COLUMN_NAME"] = rdIndex.GetString (2);  						row ["INDEX_NAME"] = rdIndexes.GetString (1);  						row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  						if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdIndexes.Read ()) {  	if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  			using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  				while (rdIndex.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdIndexes.GetString (2);  					row ["COLUMN_NAME"] = rdIndex.GetString (2);  					row ["INDEX_NAME"] = rdIndexes.GetString (1);  					row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  					if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdIndexes.Read ()) {  	if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  			using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  				while (rdIndex.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdIndexes.GetString (2);  					row ["COLUMN_NAME"] = rdIndex.GetString (2);  					row ["INDEX_NAME"] = rdIndexes.GetString (1);  					row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  					if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  		using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  			while (rdIndex.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdIndexes.GetString (2);  				row ["COLUMN_NAME"] = rdIndex.GetString (2);  				row ["INDEX_NAME"] = rdIndexes.GetString (1);  				row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  				if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strIndex) || String.Compare (strIndex' rdIndexes.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  		using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  			while (rdIndex.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdIndexes.GetString (2);  				row ["COLUMN_NAME"] = rdIndex.GetString (2);  				row ["INDEX_NAME"] = rdIndexes.GetString (1);  				row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  				if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  	using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  		while (rdIndex.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdIndexes.GetString (2);  			row ["COLUMN_NAME"] = rdIndex.GetString (2);  			row ["INDEX_NAME"] = rdIndexes.GetString (1);  			row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  			if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteCommand cmdIndex = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].index_info([{1}])"' strCatalog' rdIndexes.GetString (1))' this))  	using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  		while (rdIndex.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdIndexes.GetString (2);  			row ["COLUMN_NAME"] = rdIndex.GetString (2);  			row ["INDEX_NAME"] = rdIndexes.GetString (1);  			row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  			if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  	while (rdIndex.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdIndexes.GetString (2);  		row ["COLUMN_NAME"] = rdIndex.GetString (2);  		row ["INDEX_NAME"] = rdIndexes.GetString (1);  		row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  		if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: using (SQLiteDataReader rdIndex = cmdIndex.ExecuteReader ()) {  	while (rdIndex.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdIndexes.GetString (2);  		row ["COLUMN_NAME"] = rdIndex.GetString (2);  		row ["INDEX_NAME"] = rdIndexes.GetString (1);  		row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  		if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdIndex.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdIndexes.GetString (2);  	row ["COLUMN_NAME"] = rdIndex.GetString (2);  	row ["INDEX_NAME"] = rdIndexes.GetString (1);  	row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  	if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: while (rdIndex.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = rdIndexes.GetString (1);  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdIndexes.GetString (2);  	row ["COLUMN_NAME"] = rdIndex.GetString (2);  	row ["INDEX_NAME"] = rdIndexes.GetString (1);  	row ["ORDINAL_POSITION"] = rdIndex.GetInt32 (1);  	if (String.IsNullOrEmpty (strColumn) || String.Compare (strColumn' row ["COLUMN_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: row ["TABLE_NAME"] = rdIndexes.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_IndexColumns,The following statement contains a magic number: row ["COLUMN_NAME"] = rdIndex.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  		while (rdViews.Read ()) {  			if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  					strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  					n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  					if (n < 0)  						continue;  					strSql = strSql.Substring (n + 4);  					using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  						using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  							using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  								using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  									using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  										for (n = 0; n < tblSchema.Rows.Count; n++) {  											viewRow = tblSchemaView.Rows [n];  											schemaRow = tblSchema.Rows [n];  											if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  												row = tbl.NewRow ();  												row ["VIEW_CATALOG"] = strCatalog;  												row ["VIEW_NAME"] = rdViews.GetString (2);  												row ["TABLE_CATALOG"] = strCatalog;  												row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  												row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  												row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  												row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  												tbl.Rows.Add (row);  											}  										}  									}  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  		while (rdViews.Read ()) {  			if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  					strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  					n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  					if (n < 0)  						continue;  					strSql = strSql.Substring (n + 4);  					using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  						using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  							using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  								using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  									using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  										for (n = 0; n < tblSchema.Rows.Count; n++) {  											viewRow = tblSchemaView.Rows [n];  											schemaRow = tblSchema.Rows [n];  											if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  												row = tbl.NewRow ();  												row ["VIEW_CATALOG"] = strCatalog;  												row ["VIEW_NAME"] = rdViews.GetString (2);  												row ["TABLE_CATALOG"] = strCatalog;  												row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  												row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  												row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  												row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  												tbl.Rows.Add (row);  											}  										}  									}  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  		while (rdViews.Read ()) {  			if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  					strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  					n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  					if (n < 0)  						continue;  					strSql = strSql.Substring (n + 4);  					using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  						using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  							using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  								using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  									using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  										for (n = 0; n < tblSchema.Rows.Count; n++) {  											viewRow = tblSchemaView.Rows [n];  											schemaRow = tblSchema.Rows [n];  											if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  												row = tbl.NewRow ();  												row ["VIEW_CATALOG"] = strCatalog;  												row ["VIEW_NAME"] = rdViews.GetString (2);  												row ["TABLE_CATALOG"] = strCatalog;  												row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  												row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  												row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  												row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  												tbl.Rows.Add (row);  											}  										}  									}  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  		while (rdViews.Read ()) {  			if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  					strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  					n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  					if (n < 0)  						continue;  					strSql = strSql.Substring (n + 4);  					using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  						using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  							using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  								using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  									using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  										for (n = 0; n < tblSchema.Rows.Count; n++) {  											viewRow = tblSchemaView.Rows [n];  											schemaRow = tblSchema.Rows [n];  											if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  												row = tbl.NewRow ();  												row ["VIEW_CATALOG"] = strCatalog;  												row ["VIEW_NAME"] = rdViews.GetString (2);  												row ["TABLE_CATALOG"] = strCatalog;  												row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  												row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  												row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  												row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  												tbl.Rows.Add (row);  											}  										}  									}  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViews = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'view'"' strCatalog)' this))  	using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  		while (rdViews.Read ()) {  			if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  					strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  					n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  					if (n < 0)  						continue;  					strSql = strSql.Substring (n + 4);  					using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  						using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  							using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  								using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  									using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  										for (n = 0; n < tblSchema.Rows.Count; n++) {  											viewRow = tblSchemaView.Rows [n];  											schemaRow = tblSchema.Rows [n];  											if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  												row = tbl.NewRow ();  												row ["VIEW_CATALOG"] = strCatalog;  												row ["VIEW_NAME"] = rdViews.GetString (2);  												row ["TABLE_CATALOG"] = strCatalog;  												row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  												row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  												row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  												row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  												tbl.Rows.Add (row);  											}  										}  									}  				}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  	while (rdViews.Read ()) {  		if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  				strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  				if (n < 0)  					continue;  				strSql = strSql.Substring (n + 4);  				using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  					using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  							using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  								using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  									for (n = 0; n < tblSchema.Rows.Count; n++) {  										viewRow = tblSchemaView.Rows [n];  										schemaRow = tblSchema.Rows [n];  										if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  											row = tbl.NewRow ();  											row ["VIEW_CATALOG"] = strCatalog;  											row ["VIEW_NAME"] = rdViews.GetString (2);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  											row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  											row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  											row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  											tbl.Rows.Add (row);  										}  									}  								}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  	while (rdViews.Read ()) {  		if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  				strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  				if (n < 0)  					continue;  				strSql = strSql.Substring (n + 4);  				using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  					using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  							using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  								using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  									for (n = 0; n < tblSchema.Rows.Count; n++) {  										viewRow = tblSchemaView.Rows [n];  										schemaRow = tblSchema.Rows [n];  										if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  											row = tbl.NewRow ();  											row ["VIEW_CATALOG"] = strCatalog;  											row ["VIEW_NAME"] = rdViews.GetString (2);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  											row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  											row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  											row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  											tbl.Rows.Add (row);  										}  									}  								}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  	while (rdViews.Read ()) {  		if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  				strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  				if (n < 0)  					continue;  				strSql = strSql.Substring (n + 4);  				using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  					using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  							using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  								using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  									for (n = 0; n < tblSchema.Rows.Count; n++) {  										viewRow = tblSchemaView.Rows [n];  										schemaRow = tblSchema.Rows [n];  										if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  											row = tbl.NewRow ();  											row ["VIEW_CATALOG"] = strCatalog;  											row ["VIEW_NAME"] = rdViews.GetString (2);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  											row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  											row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  											row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  											tbl.Rows.Add (row);  										}  									}  								}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  	while (rdViews.Read ()) {  		if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  				strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  				if (n < 0)  					continue;  				strSql = strSql.Substring (n + 4);  				using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  					using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  							using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  								using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  									for (n = 0; n < tblSchema.Rows.Count; n++) {  										viewRow = tblSchemaView.Rows [n];  										schemaRow = tblSchema.Rows [n];  										if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  											row = tbl.NewRow ();  											row ["VIEW_CATALOG"] = strCatalog;  											row ["VIEW_NAME"] = rdViews.GetString (2);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  											row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  											row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  											row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  											tbl.Rows.Add (row);  										}  									}  								}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViews = cmdViews.ExecuteReader ()) {  	while (rdViews.Read ()) {  		if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  				strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  				n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  				if (n < 0)  					continue;  				strSql = strSql.Substring (n + 4);  				using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  					using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  							using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  								using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  									for (n = 0; n < tblSchema.Rows.Count; n++) {  										viewRow = tblSchemaView.Rows [n];  										schemaRow = tblSchema.Rows [n];  										if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  											row = tbl.NewRow ();  											row ["VIEW_CATALOG"] = strCatalog;  											row ["VIEW_NAME"] = rdViews.GetString (2);  											row ["TABLE_CATALOG"] = strCatalog;  											row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  											row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  											row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  											row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  											tbl.Rows.Add (row);  										}  									}  								}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: while (rdViews.Read ()) {  	if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  			strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  			if (n < 0)  				continue;  			strSql = strSql.Substring (n + 4);  			using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  				using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  							using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  								for (n = 0; n < tblSchema.Rows.Count; n++) {  									viewRow = tblSchemaView.Rows [n];  									schemaRow = tblSchema.Rows [n];  									if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  										row = tbl.NewRow ();  										row ["VIEW_CATALOG"] = strCatalog;  										row ["VIEW_NAME"] = rdViews.GetString (2);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  										row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  										row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  										row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  										tbl.Rows.Add (row);  									}  								}  							}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: while (rdViews.Read ()) {  	if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  			strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  			if (n < 0)  				continue;  			strSql = strSql.Substring (n + 4);  			using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  				using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  							using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  								for (n = 0; n < tblSchema.Rows.Count; n++) {  									viewRow = tblSchemaView.Rows [n];  									schemaRow = tblSchema.Rows [n];  									if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  										row = tbl.NewRow ();  										row ["VIEW_CATALOG"] = strCatalog;  										row ["VIEW_NAME"] = rdViews.GetString (2);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  										row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  										row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  										row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  										tbl.Rows.Add (row);  									}  								}  							}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: while (rdViews.Read ()) {  	if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  			strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  			if (n < 0)  				continue;  			strSql = strSql.Substring (n + 4);  			using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  				using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  							using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  								for (n = 0; n < tblSchema.Rows.Count; n++) {  									viewRow = tblSchemaView.Rows [n];  									schemaRow = tblSchema.Rows [n];  									if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  										row = tbl.NewRow ();  										row ["VIEW_CATALOG"] = strCatalog;  										row ["VIEW_NAME"] = rdViews.GetString (2);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  										row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  										row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  										row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  										tbl.Rows.Add (row);  									}  								}  							}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: while (rdViews.Read ()) {  	if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  			strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  			if (n < 0)  				continue;  			strSql = strSql.Substring (n + 4);  			using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  				using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  							using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  								for (n = 0; n < tblSchema.Rows.Count; n++) {  									viewRow = tblSchemaView.Rows [n];  									schemaRow = tblSchema.Rows [n];  									if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  										row = tbl.NewRow ();  										row ["VIEW_CATALOG"] = strCatalog;  										row ["VIEW_NAME"] = rdViews.GetString (2);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  										row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  										row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  										row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  										tbl.Rows.Add (row);  									}  								}  							}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: while (rdViews.Read ()) {  	if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  			strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  			n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  			if (n < 0)  				continue;  			strSql = strSql.Substring (n + 4);  			using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  				using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  						using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  							using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  								for (n = 0; n < tblSchema.Rows.Count; n++) {  									viewRow = tblSchemaView.Rows [n];  									schemaRow = tblSchema.Rows [n];  									if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  										row = tbl.NewRow ();  										row ["VIEW_CATALOG"] = strCatalog;  										row ["VIEW_NAME"] = rdViews.GetString (2);  										row ["TABLE_CATALOG"] = strCatalog;  										row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  										row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  										row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  										row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  										tbl.Rows.Add (row);  									}  								}  							}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  		strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  		if (n < 0)  			continue;  		strSql = strSql.Substring (n + 4);  		using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  			using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  						using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  							for (n = 0; n < tblSchema.Rows.Count; n++) {  								viewRow = tblSchemaView.Rows [n];  								schemaRow = tblSchema.Rows [n];  								if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["VIEW_CATALOG"] = strCatalog;  									row ["VIEW_NAME"] = rdViews.GetString (2);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  									tbl.Rows.Add (row);  								}  							}  						}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  		strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  		if (n < 0)  			continue;  		strSql = strSql.Substring (n + 4);  		using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  			using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  						using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  							for (n = 0; n < tblSchema.Rows.Count; n++) {  								viewRow = tblSchemaView.Rows [n];  								schemaRow = tblSchema.Rows [n];  								if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["VIEW_CATALOG"] = strCatalog;  									row ["VIEW_NAME"] = rdViews.GetString (2);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  									tbl.Rows.Add (row);  								}  							}  						}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  		strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  		if (n < 0)  			continue;  		strSql = strSql.Substring (n + 4);  		using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  			using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  						using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  							for (n = 0; n < tblSchema.Rows.Count; n++) {  								viewRow = tblSchemaView.Rows [n];  								schemaRow = tblSchema.Rows [n];  								if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["VIEW_CATALOG"] = strCatalog;  									row ["VIEW_NAME"] = rdViews.GetString (2);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  									tbl.Rows.Add (row);  								}  							}  						}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  		strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  		if (n < 0)  			continue;  		strSql = strSql.Substring (n + 4);  		using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  			using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  						using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  							for (n = 0; n < tblSchema.Rows.Count; n++) {  								viewRow = tblSchemaView.Rows [n];  								schemaRow = tblSchema.Rows [n];  								if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["VIEW_CATALOG"] = strCatalog;  									row ["VIEW_NAME"] = rdViews.GetString (2);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  									tbl.Rows.Add (row);  								}  							}  						}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.IsNullOrEmpty (strView) || String.Compare (strView' rdViews.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  		strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  		n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  		if (n < 0)  			continue;  		strSql = strSql.Substring (n + 4);  		using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  			using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  					using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  						using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  							for (n = 0; n < tblSchema.Rows.Count; n++) {  								viewRow = tblSchemaView.Rows [n];  								schemaRow = tblSchema.Rows [n];  								if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  									row = tbl.NewRow ();  									row ["VIEW_CATALOG"] = strCatalog;  									row ["VIEW_NAME"] = rdViews.GetString (2);  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  									row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  									row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  									row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  									tbl.Rows.Add (row);  								}  							}  						}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  	strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  	if (n < 0)  		continue;  	strSql = strSql.Substring (n + 4);  	using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  		using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  					using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  						for (n = 0; n < tblSchema.Rows.Count; n++) {  							viewRow = tblSchemaView.Rows [n];  							schemaRow = tblSchema.Rows [n];  							if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["VIEW_CATALOG"] = strCatalog;  								row ["VIEW_NAME"] = rdViews.GetString (2);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  								tbl.Rows.Add (row);  							}  						}  					}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  	strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  	if (n < 0)  		continue;  	strSql = strSql.Substring (n + 4);  	using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  		using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  					using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  						for (n = 0; n < tblSchema.Rows.Count; n++) {  							viewRow = tblSchemaView.Rows [n];  							schemaRow = tblSchema.Rows [n];  							if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["VIEW_CATALOG"] = strCatalog;  								row ["VIEW_NAME"] = rdViews.GetString (2);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  								tbl.Rows.Add (row);  							}  						}  					}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  	strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  	if (n < 0)  		continue;  	strSql = strSql.Substring (n + 4);  	using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  		using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  					using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  						for (n = 0; n < tblSchema.Rows.Count; n++) {  							viewRow = tblSchemaView.Rows [n];  							schemaRow = tblSchema.Rows [n];  							if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["VIEW_CATALOG"] = strCatalog;  								row ["VIEW_NAME"] = rdViews.GetString (2);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  								tbl.Rows.Add (row);  							}  						}  					}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmdViewSelect = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdViews.GetString (2))' this)) {  	strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  	n = CultureInfo.InvariantCulture.CompareInfo.IndexOf (strSql' " AS "' CompareOptions.IgnoreCase);  	if (n < 0)  		continue;  	strSql = strSql.Substring (n + 4);  	using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  		using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  				using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  					using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  						for (n = 0; n < tblSchema.Rows.Count; n++) {  							viewRow = tblSchemaView.Rows [n];  							schemaRow = tblSchema.Rows [n];  							if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  								row = tbl.NewRow ();  								row ["VIEW_CATALOG"] = strCatalog;  								row ["VIEW_NAME"] = rdViews.GetString (2);  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  								row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  								row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  								row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  								tbl.Rows.Add (row);  							}  						}  					}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: strSql = rdViews.GetString (4).Replace ('\r'' ' ').Replace ('\n'' ' ').Replace ('\t'' ' ');  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: strSql = strSql.Substring (n + 4);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteCommand cmd = new SQLiteCommand (strSql' this))  	using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  			using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  				using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  					for (n = 0; n < tblSchema.Rows.Count; n++) {  						viewRow = tblSchemaView.Rows [n];  						schemaRow = tblSchema.Rows [n];  						if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  							row = tbl.NewRow ();  							row ["VIEW_CATALOG"] = strCatalog;  							row ["VIEW_NAME"] = rdViews.GetString (2);  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  							row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  							row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  							row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  							tbl.Rows.Add (row);  						}  					}  				}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rdViewSelect = cmdViewSelect.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  		using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  			using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  				for (n = 0; n < tblSchema.Rows.Count; n++) {  					viewRow = tblSchemaView.Rows [n];  					schemaRow = tblSchema.Rows [n];  					if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  						row = tbl.NewRow ();  						row ["VIEW_CATALOG"] = strCatalog;  						row ["VIEW_NAME"] = rdViews.GetString (2);  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  						row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  						row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  						row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  						tbl.Rows.Add (row);  					}  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (SQLiteDataReader rd = (SQLiteDataReader)cmd.ExecuteReader (CommandBehavior.SchemaOnly))  	using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  		using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  			for (n = 0; n < tblSchema.Rows.Count; n++) {  				viewRow = tblSchemaView.Rows [n];  				schemaRow = tblSchema.Rows [n];  				if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  					row = tbl.NewRow ();  					row ["VIEW_CATALOG"] = strCatalog;  					row ["VIEW_NAME"] = rdViews.GetString (2);  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  					row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  					row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  					row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  					tbl.Rows.Add (row);  				}  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (DataTable tblSchemaView = rdViewSelect.GetSchemaTable (false' false))  	using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  		for (n = 0; n < tblSchema.Rows.Count; n++) {  			viewRow = tblSchemaView.Rows [n];  			schemaRow = tblSchema.Rows [n];  			if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  				row = tbl.NewRow ();  				row ["VIEW_CATALOG"] = strCatalog;  				row ["VIEW_NAME"] = rdViews.GetString (2);  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  				row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  				row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  				row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  				tbl.Rows.Add (row);  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: using (DataTable tblSchema = rd.GetSchemaTable (false' false)) {  	for (n = 0; n < tblSchema.Rows.Count; n++) {  		viewRow = tblSchemaView.Rows [n];  		schemaRow = tblSchema.Rows [n];  		if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  			row = tbl.NewRow ();  			row ["VIEW_CATALOG"] = strCatalog;  			row ["VIEW_NAME"] = rdViews.GetString (2);  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  			row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  			row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  			row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  			tbl.Rows.Add (row);  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: for (n = 0; n < tblSchema.Rows.Count; n++) {  	viewRow = tblSchemaView.Rows [n];  	schemaRow = tblSchema.Rows [n];  	if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  		row = tbl.NewRow ();  		row ["VIEW_CATALOG"] = strCatalog;  		row ["VIEW_NAME"] = rdViews.GetString (2);  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  		row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  		row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  		row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  		tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: if (String.Compare (viewRow [SchemaTableColumn.ColumnName].ToString ()' strColumn' true' CultureInfo.InvariantCulture) == 0 || strColumn == null) {  	row = tbl.NewRow ();  	row ["VIEW_CATALOG"] = strCatalog;  	row ["VIEW_NAME"] = rdViews.GetString (2);  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_SCHEMA"] = schemaRow [SchemaTableColumn.BaseSchemaName];  	row ["TABLE_NAME"] = schemaRow [SchemaTableColumn.BaseTableName];  	row ["COLUMN_NAME"] = schemaRow [SchemaTableColumn.ColumnName];  	row ["VIEW_COLUMN_NAME"] = viewRow [SchemaTableColumn.ColumnName];  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ViewColumns,The following statement contains a magic number: row ["VIEW_NAME"] = rdViews.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTables = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[sqlite_master] WHERE [type] LIKE 'table'"' strCatalog)' this))  	using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  		while (rdTables.Read ()) {  			if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  				using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  						using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  							using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  								while (rdKey.Read ()) {  									row = tbl.NewRow ();  									row ["CONSTRAINT_CATALOG"] = strCatalog;  									row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  									row ["TABLE_CATALOG"] = strCatalog;  									row ["TABLE_NAME"] = rdTables.GetString (2);  									row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  									row ["IS_DEFERRABLE"] = false;  									row ["INITIALLY_DEFERRED"] = false;  									row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  									row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  									row ["FKEY_TO_CATALOG"] = strCatalog;  									row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  									row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  									if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  										tbl.Rows.Add (row);  								}  							}  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTables = cmdTables.ExecuteReader ()) {  	while (rdTables.Read ()) {  		if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  					using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  						using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  							while (rdKey.Read ()) {  								row = tbl.NewRow ();  								row ["CONSTRAINT_CATALOG"] = strCatalog;  								row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  								row ["TABLE_CATALOG"] = strCatalog;  								row ["TABLE_NAME"] = rdTables.GetString (2);  								row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  								row ["IS_DEFERRABLE"] = false;  								row ["INITIALLY_DEFERRED"] = false;  								row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  								row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  								row ["FKEY_TO_CATALOG"] = strCatalog;  								row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  								row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  								if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  									tbl.Rows.Add (row);  							}  						}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdTables.Read ()) {  	if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  				using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  					using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  						while (rdKey.Read ()) {  							row = tbl.NewRow ();  							row ["CONSTRAINT_CATALOG"] = strCatalog;  							row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  							row ["TABLE_CATALOG"] = strCatalog;  							row ["TABLE_NAME"] = rdTables.GetString (2);  							row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  							row ["IS_DEFERRABLE"] = false;  							row ["INITIALLY_DEFERRED"] = false;  							row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  							row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  							row ["FKEY_TO_CATALOG"] = strCatalog;  							row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  							row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  							if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  								tbl.Rows.Add (row);  						}  					}  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (strTable) || String.Compare (strTable' rdTables.GetString (2)' true' CultureInfo.InvariantCulture) == 0) {  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  			using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  				using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  					while (rdKey.Read ()) {  						row = tbl.NewRow ();  						row ["CONSTRAINT_CATALOG"] = strCatalog;  						row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  						row ["TABLE_CATALOG"] = strCatalog;  						row ["TABLE_NAME"] = rdTables.GetString (2);  						row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  						row ["IS_DEFERRABLE"] = false;  						row ["INITIALLY_DEFERRED"] = false;  						row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  						row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  						row ["FKEY_TO_CATALOG"] = strCatalog;  						row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  						row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  						if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  							tbl.Rows.Add (row);  					}  				}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "SELECT * FROM [{0}].[{1}]"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  		using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  			using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  				while (rdKey.Read ()) {  					row = tbl.NewRow ();  					row ["CONSTRAINT_CATALOG"] = strCatalog;  					row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  					row ["TABLE_CATALOG"] = strCatalog;  					row ["TABLE_NAME"] = rdTables.GetString (2);  					row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  					row ["IS_DEFERRABLE"] = false;  					row ["INITIALLY_DEFERRED"] = false;  					row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  					row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  					row ["FKEY_TO_CATALOG"] = strCatalog;  					row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  					row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  					if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  						tbl.Rows.Add (row);  				}  			}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdTable = cmdTable.ExecuteReader (CommandBehavior.SchemaOnly))  	using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  		using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  			while (rdKey.Read ()) {  				row = tbl.NewRow ();  				row ["CONSTRAINT_CATALOG"] = strCatalog;  				row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  				row ["TABLE_CATALOG"] = strCatalog;  				row ["TABLE_NAME"] = rdTables.GetString (2);  				row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  				row ["IS_DEFERRABLE"] = false;  				row ["INITIALLY_DEFERRED"] = false;  				row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  				row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  				row ["FKEY_TO_CATALOG"] = strCatalog;  				row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  				row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  				if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  					tbl.Rows.Add (row);  			}  		}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteCommand cmdKey = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].foreign_key_list([{1}])"' strCatalog' rdTables.GetString (2))' this))  	using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  		while (rdKey.Read ()) {  			row = tbl.NewRow ();  			row ["CONSTRAINT_CATALOG"] = strCatalog;  			row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  			row ["TABLE_CATALOG"] = strCatalog;  			row ["TABLE_NAME"] = rdTables.GetString (2);  			row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  			row ["IS_DEFERRABLE"] = false;  			row ["INITIALLY_DEFERRED"] = false;  			row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  			row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  			row ["FKEY_TO_CATALOG"] = strCatalog;  			row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  			row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  			if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  				tbl.Rows.Add (row);  		}  	}  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: using (SQLiteDataReader rdKey = cmdKey.ExecuteReader ()) {  	while (rdKey.Read ()) {  		row = tbl.NewRow ();  		row ["CONSTRAINT_CATALOG"] = strCatalog;  		row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  		row ["TABLE_CATALOG"] = strCatalog;  		row ["TABLE_NAME"] = rdTables.GetString (2);  		row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  		row ["IS_DEFERRABLE"] = false;  		row ["INITIALLY_DEFERRED"] = false;  		row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  		row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  		row ["FKEY_TO_CATALOG"] = strCatalog;  		row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  		row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  		if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  			tbl.Rows.Add (row);  	}  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: while (rdKey.Read ()) {  	row = tbl.NewRow ();  	row ["CONSTRAINT_CATALOG"] = strCatalog;  	row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  	row ["TABLE_CATALOG"] = strCatalog;  	row ["TABLE_NAME"] = rdTables.GetString (2);  	row ["CONSTRAINT_TYPE"] = "FOREIGN KEY";  	row ["IS_DEFERRABLE"] = false;  	row ["INITIALLY_DEFERRED"] = false;  	row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  	row ["FKEY_FROM_ORDINAL_POSITION"] = rdTable.GetOrdinal (row ["FKEY_FROM_COLUMN"].ToString ());  	row ["FKEY_TO_CATALOG"] = strCatalog;  	row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  	row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  	if (String.IsNullOrEmpty (strKeyName) || String.Compare (strKeyName' row ["CONSTRAINT_NAME"].ToString ()' true' CultureInfo.InvariantCulture) == 0)  		tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["CONSTRAINT_NAME"] = String.Format (CultureInfo.InvariantCulture' "FK_{0}_{1}_{2}"' rdTables.GetString (2)' rdKey.GetString (3)' rdKey.GetString (4));  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["TABLE_NAME"] = rdTables.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["FKEY_FROM_COLUMN"] = rdKey.GetString (3);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["FKEY_TO_TABLE"] = rdKey.GetString (2);  
Magic Number,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,Schema_ForeignKeys,The following statement contains a magic number: row ["FKEY_TO_COLUMN"] = rdKey.GetString (4);  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetGuid,The following statement contains a magic number: if (affinity == TypeAffinity.Blob) {  	byte[] buffer = new byte[16];  	_activeStatement._sql.GetBytes (_activeStatement' i' 0' buffer' 0' 16);  	return new Guid (buffer);  } else  	return new Guid (_activeStatement._sql.GetText (_activeStatement' i));  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetGuid,The following statement contains a magic number: if (affinity == TypeAffinity.Blob) {  	byte[] buffer = new byte[16];  	_activeStatement._sql.GetBytes (_activeStatement' i' 0' buffer' 0' 16);  	return new Guid (buffer);  } else  	return new Guid (_activeStatement._sql.GetText (_activeStatement' i));  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetGuid,The following statement contains a magic number: _activeStatement._sql.GetBytes (_activeStatement' i' 0' buffer' 0' 16);  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int n = 0; n < _fieldCount; n++) {  	row = tbl.NewRow ();  	// Default settings for the column  	row [SchemaTableColumn.ColumnName] = GetName (n);  	row [SchemaTableColumn.ColumnOrdinal] = n;  	row [SchemaTableColumn.ColumnSize] = SQLiteConvert.DbTypeToColumnSize (GetSQLiteType (n).Type);  	row [SchemaTableColumn.NumericPrecision] = 255;  	row [SchemaTableColumn.NumericScale] = 255;  	row [SchemaTableColumn.ProviderType] = GetSQLiteType (n).Type;  	row [SchemaTableColumn.IsLong] = (GetSQLiteType (n).Type == DbType.Binary);  	row [SchemaTableColumn.AllowDBNull] = true;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableOptionalColumn.IsRowVersion] = false;  	row [SchemaTableColumn.IsUnique] = false;  	row [SchemaTableColumn.IsKey] = false;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = false;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableColumn.DataType] = GetFieldType (n);  	row [SchemaTableOptionalColumn.IsHidden] = false;  	strColumn = _command.Connection._sql.ColumnOriginalName (_activeStatement' n);  	if (String.IsNullOrEmpty (strColumn) == false)  		row [SchemaTableColumn.BaseColumnName] = strColumn;  	row [SchemaTableColumn.IsExpression] = String.IsNullOrEmpty (strColumn);  	row [SchemaTableColumn.IsAliased] = (String.Compare (GetName (n)' strColumn' true' CultureInfo.InvariantCulture) != 0);  	temp = _command.Connection._sql.ColumnTableName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableColumn.BaseTableName] = temp;  	temp = _command.Connection._sql.ColumnDatabaseName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableOptionalColumn.BaseCatalogName] = temp;  	// If we have a table-bound column' extract the extra information from it  	if (String.IsNullOrEmpty (strColumn) == false) {  		string collSeq;  		string dataType;  		bool bNotNull;  		bool bPrimaryKey;  		bool bAutoIncrement;  		string[] arSize;  		// Get the column meta data  		_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  		if (bNotNull || bPrimaryKey)  			row [SchemaTableColumn.AllowDBNull] = false;  		row [SchemaTableColumn.IsKey] = bPrimaryKey;  		row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  		// For types like varchar(50) and such' extract the size  		arSize = dataType.Split ('(');  		if (arSize.Length > 1) {  			dataType = arSize [0];  			arSize = arSize [1].Split (')');  			if (arSize.Length > 1) {  				arSize = arSize [0].Split ('''' '.');  				if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  					row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				} else {  					row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  					if (arSize.Length > 1)  						row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  				}  			}  		}  		row ["DataTypeName"] = dataType;  		if (wantDefaultValue) {  			// Determine the default value for the column' which sucks because we have to query the schema for each column  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  				using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  					// Find the matching column  					while (rdTable.Read ()) {  						if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							if (rdTable.IsDBNull (4) == false)  								row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  							break;  						}  					}  				}  		}  		// Determine IsUnique properly' which is a pain in the butt!  		if (wantUniqueInfo) {  			if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  				strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  				strTable = (string)row [SchemaTableColumn.BaseTableName];  				tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					null  				});  			}  			foreach (DataRow rowIndexes in tblIndexes.Rows) {  				tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					(string)rowIndexes ["INDEX_NAME"]'  					null  				});  				foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  					if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  						if (tblIndexColumns.Rows.Count == 1)  							row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  						break;  					}  				}  			}  		}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int n = 0; n < _fieldCount; n++) {  	row = tbl.NewRow ();  	// Default settings for the column  	row [SchemaTableColumn.ColumnName] = GetName (n);  	row [SchemaTableColumn.ColumnOrdinal] = n;  	row [SchemaTableColumn.ColumnSize] = SQLiteConvert.DbTypeToColumnSize (GetSQLiteType (n).Type);  	row [SchemaTableColumn.NumericPrecision] = 255;  	row [SchemaTableColumn.NumericScale] = 255;  	row [SchemaTableColumn.ProviderType] = GetSQLiteType (n).Type;  	row [SchemaTableColumn.IsLong] = (GetSQLiteType (n).Type == DbType.Binary);  	row [SchemaTableColumn.AllowDBNull] = true;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableOptionalColumn.IsRowVersion] = false;  	row [SchemaTableColumn.IsUnique] = false;  	row [SchemaTableColumn.IsKey] = false;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = false;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableColumn.DataType] = GetFieldType (n);  	row [SchemaTableOptionalColumn.IsHidden] = false;  	strColumn = _command.Connection._sql.ColumnOriginalName (_activeStatement' n);  	if (String.IsNullOrEmpty (strColumn) == false)  		row [SchemaTableColumn.BaseColumnName] = strColumn;  	row [SchemaTableColumn.IsExpression] = String.IsNullOrEmpty (strColumn);  	row [SchemaTableColumn.IsAliased] = (String.Compare (GetName (n)' strColumn' true' CultureInfo.InvariantCulture) != 0);  	temp = _command.Connection._sql.ColumnTableName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableColumn.BaseTableName] = temp;  	temp = _command.Connection._sql.ColumnDatabaseName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableOptionalColumn.BaseCatalogName] = temp;  	// If we have a table-bound column' extract the extra information from it  	if (String.IsNullOrEmpty (strColumn) == false) {  		string collSeq;  		string dataType;  		bool bNotNull;  		bool bPrimaryKey;  		bool bAutoIncrement;  		string[] arSize;  		// Get the column meta data  		_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  		if (bNotNull || bPrimaryKey)  			row [SchemaTableColumn.AllowDBNull] = false;  		row [SchemaTableColumn.IsKey] = bPrimaryKey;  		row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  		// For types like varchar(50) and such' extract the size  		arSize = dataType.Split ('(');  		if (arSize.Length > 1) {  			dataType = arSize [0];  			arSize = arSize [1].Split (')');  			if (arSize.Length > 1) {  				arSize = arSize [0].Split ('''' '.');  				if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  					row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				} else {  					row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  					if (arSize.Length > 1)  						row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  				}  			}  		}  		row ["DataTypeName"] = dataType;  		if (wantDefaultValue) {  			// Determine the default value for the column' which sucks because we have to query the schema for each column  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  				using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  					// Find the matching column  					while (rdTable.Read ()) {  						if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							if (rdTable.IsDBNull (4) == false)  								row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  							break;  						}  					}  				}  		}  		// Determine IsUnique properly' which is a pain in the butt!  		if (wantUniqueInfo) {  			if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  				strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  				strTable = (string)row [SchemaTableColumn.BaseTableName];  				tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					null  				});  			}  			foreach (DataRow rowIndexes in tblIndexes.Rows) {  				tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					(string)rowIndexes ["INDEX_NAME"]'  					null  				});  				foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  					if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  						if (tblIndexColumns.Rows.Count == 1)  							row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  						break;  					}  				}  			}  		}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int n = 0; n < _fieldCount; n++) {  	row = tbl.NewRow ();  	// Default settings for the column  	row [SchemaTableColumn.ColumnName] = GetName (n);  	row [SchemaTableColumn.ColumnOrdinal] = n;  	row [SchemaTableColumn.ColumnSize] = SQLiteConvert.DbTypeToColumnSize (GetSQLiteType (n).Type);  	row [SchemaTableColumn.NumericPrecision] = 255;  	row [SchemaTableColumn.NumericScale] = 255;  	row [SchemaTableColumn.ProviderType] = GetSQLiteType (n).Type;  	row [SchemaTableColumn.IsLong] = (GetSQLiteType (n).Type == DbType.Binary);  	row [SchemaTableColumn.AllowDBNull] = true;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableOptionalColumn.IsRowVersion] = false;  	row [SchemaTableColumn.IsUnique] = false;  	row [SchemaTableColumn.IsKey] = false;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = false;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableColumn.DataType] = GetFieldType (n);  	row [SchemaTableOptionalColumn.IsHidden] = false;  	strColumn = _command.Connection._sql.ColumnOriginalName (_activeStatement' n);  	if (String.IsNullOrEmpty (strColumn) == false)  		row [SchemaTableColumn.BaseColumnName] = strColumn;  	row [SchemaTableColumn.IsExpression] = String.IsNullOrEmpty (strColumn);  	row [SchemaTableColumn.IsAliased] = (String.Compare (GetName (n)' strColumn' true' CultureInfo.InvariantCulture) != 0);  	temp = _command.Connection._sql.ColumnTableName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableColumn.BaseTableName] = temp;  	temp = _command.Connection._sql.ColumnDatabaseName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableOptionalColumn.BaseCatalogName] = temp;  	// If we have a table-bound column' extract the extra information from it  	if (String.IsNullOrEmpty (strColumn) == false) {  		string collSeq;  		string dataType;  		bool bNotNull;  		bool bPrimaryKey;  		bool bAutoIncrement;  		string[] arSize;  		// Get the column meta data  		_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  		if (bNotNull || bPrimaryKey)  			row [SchemaTableColumn.AllowDBNull] = false;  		row [SchemaTableColumn.IsKey] = bPrimaryKey;  		row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  		// For types like varchar(50) and such' extract the size  		arSize = dataType.Split ('(');  		if (arSize.Length > 1) {  			dataType = arSize [0];  			arSize = arSize [1].Split (')');  			if (arSize.Length > 1) {  				arSize = arSize [0].Split ('''' '.');  				if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  					row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				} else {  					row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  					if (arSize.Length > 1)  						row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  				}  			}  		}  		row ["DataTypeName"] = dataType;  		if (wantDefaultValue) {  			// Determine the default value for the column' which sucks because we have to query the schema for each column  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  				using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  					// Find the matching column  					while (rdTable.Read ()) {  						if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							if (rdTable.IsDBNull (4) == false)  								row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  							break;  						}  					}  				}  		}  		// Determine IsUnique properly' which is a pain in the butt!  		if (wantUniqueInfo) {  			if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  				strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  				strTable = (string)row [SchemaTableColumn.BaseTableName];  				tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					null  				});  			}  			foreach (DataRow rowIndexes in tblIndexes.Rows) {  				tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					(string)rowIndexes ["INDEX_NAME"]'  					null  				});  				foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  					if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  						if (tblIndexColumns.Rows.Count == 1)  							row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  						break;  					}  				}  			}  		}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int n = 0; n < _fieldCount; n++) {  	row = tbl.NewRow ();  	// Default settings for the column  	row [SchemaTableColumn.ColumnName] = GetName (n);  	row [SchemaTableColumn.ColumnOrdinal] = n;  	row [SchemaTableColumn.ColumnSize] = SQLiteConvert.DbTypeToColumnSize (GetSQLiteType (n).Type);  	row [SchemaTableColumn.NumericPrecision] = 255;  	row [SchemaTableColumn.NumericScale] = 255;  	row [SchemaTableColumn.ProviderType] = GetSQLiteType (n).Type;  	row [SchemaTableColumn.IsLong] = (GetSQLiteType (n).Type == DbType.Binary);  	row [SchemaTableColumn.AllowDBNull] = true;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableOptionalColumn.IsRowVersion] = false;  	row [SchemaTableColumn.IsUnique] = false;  	row [SchemaTableColumn.IsKey] = false;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = false;  	row [SchemaTableOptionalColumn.IsReadOnly] = false;  	row [SchemaTableColumn.DataType] = GetFieldType (n);  	row [SchemaTableOptionalColumn.IsHidden] = false;  	strColumn = _command.Connection._sql.ColumnOriginalName (_activeStatement' n);  	if (String.IsNullOrEmpty (strColumn) == false)  		row [SchemaTableColumn.BaseColumnName] = strColumn;  	row [SchemaTableColumn.IsExpression] = String.IsNullOrEmpty (strColumn);  	row [SchemaTableColumn.IsAliased] = (String.Compare (GetName (n)' strColumn' true' CultureInfo.InvariantCulture) != 0);  	temp = _command.Connection._sql.ColumnTableName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableColumn.BaseTableName] = temp;  	temp = _command.Connection._sql.ColumnDatabaseName (_activeStatement' n);  	if (String.IsNullOrEmpty (temp) == false)  		row [SchemaTableOptionalColumn.BaseCatalogName] = temp;  	// If we have a table-bound column' extract the extra information from it  	if (String.IsNullOrEmpty (strColumn) == false) {  		string collSeq;  		string dataType;  		bool bNotNull;  		bool bPrimaryKey;  		bool bAutoIncrement;  		string[] arSize;  		// Get the column meta data  		_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  		if (bNotNull || bPrimaryKey)  			row [SchemaTableColumn.AllowDBNull] = false;  		row [SchemaTableColumn.IsKey] = bPrimaryKey;  		row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  		// For types like varchar(50) and such' extract the size  		arSize = dataType.Split ('(');  		if (arSize.Length > 1) {  			dataType = arSize [0];  			arSize = arSize [1].Split (')');  			if (arSize.Length > 1) {  				arSize = arSize [0].Split ('''' '.');  				if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  					row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				} else {  					row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  					if (arSize.Length > 1)  						row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  				}  			}  		}  		row ["DataTypeName"] = dataType;  		if (wantDefaultValue) {  			// Determine the default value for the column' which sucks because we have to query the schema for each column  			using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  				using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  					// Find the matching column  					while (rdTable.Read ()) {  						if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  							if (rdTable.IsDBNull (4) == false)  								row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  							break;  						}  					}  				}  		}  		// Determine IsUnique properly' which is a pain in the butt!  		if (wantUniqueInfo) {  			if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  				strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  				strTable = (string)row [SchemaTableColumn.BaseTableName];  				tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					null  				});  			}  			foreach (DataRow rowIndexes in tblIndexes.Rows) {  				tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  					(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  					null'  					(string)row [SchemaTableColumn.BaseTableName]'  					(string)rowIndexes ["INDEX_NAME"]'  					null  				});  				foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  					if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  						if (tblIndexColumns.Rows.Count == 1)  							row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  						break;  					}  				}  			}  		}  	}  	tbl.Rows.Add (row);  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: row [SchemaTableColumn.NumericPrecision] = 255;  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: row [SchemaTableColumn.NumericScale] = 255;  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (String.IsNullOrEmpty (strColumn) == false) {  	string collSeq;  	string dataType;  	bool bNotNull;  	bool bPrimaryKey;  	bool bAutoIncrement;  	string[] arSize;  	// Get the column meta data  	_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  	if (bNotNull || bPrimaryKey)  		row [SchemaTableColumn.AllowDBNull] = false;  	row [SchemaTableColumn.IsKey] = bPrimaryKey;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  	// For types like varchar(50) and such' extract the size  	arSize = dataType.Split ('(');  	if (arSize.Length > 1) {  		dataType = arSize [0];  		arSize = arSize [1].Split (')');  		if (arSize.Length > 1) {  			arSize = arSize [0].Split ('''' '.');  			if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  				row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  			} else {  				row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				if (arSize.Length > 1)  					row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  			}  		}  	}  	row ["DataTypeName"] = dataType;  	if (wantDefaultValue) {  		// Determine the default value for the column' which sucks because we have to query the schema for each column  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  			using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  				// Find the matching column  				while (rdTable.Read ()) {  					if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						if (rdTable.IsDBNull (4) == false)  							row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  						break;  					}  				}  			}  	}  	// Determine IsUnique properly' which is a pain in the butt!  	if (wantUniqueInfo) {  		if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  			strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  			strTable = (string)row [SchemaTableColumn.BaseTableName];  			tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  				(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  				null'  				(string)row [SchemaTableColumn.BaseTableName]'  				null  			});  		}  		foreach (DataRow rowIndexes in tblIndexes.Rows) {  			tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  				(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  				null'  				(string)row [SchemaTableColumn.BaseTableName]'  				(string)rowIndexes ["INDEX_NAME"]'  				null  			});  			foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  				if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  					if (tblIndexColumns.Rows.Count == 1)  						row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  					break;  				}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (String.IsNullOrEmpty (strColumn) == false) {  	string collSeq;  	string dataType;  	bool bNotNull;  	bool bPrimaryKey;  	bool bAutoIncrement;  	string[] arSize;  	// Get the column meta data  	_command.Connection._sql.ColumnMetaData ((string)row [SchemaTableOptionalColumn.BaseCatalogName]' (string)row [SchemaTableColumn.BaseTableName]' strColumn' out dataType' out collSeq' out bNotNull' out bPrimaryKey' out bAutoIncrement);  	if (bNotNull || bPrimaryKey)  		row [SchemaTableColumn.AllowDBNull] = false;  	row [SchemaTableColumn.IsKey] = bPrimaryKey;  	row [SchemaTableOptionalColumn.IsAutoIncrement] = bAutoIncrement;  	// For types like varchar(50) and such' extract the size  	arSize = dataType.Split ('(');  	if (arSize.Length > 1) {  		dataType = arSize [0];  		arSize = arSize [1].Split (')');  		if (arSize.Length > 1) {  			arSize = arSize [0].Split ('''' '.');  			if (GetSQLiteType (n).Type == DbType.String || GetSQLiteType (n).Type == DbType.Binary) {  				row [SchemaTableColumn.ColumnSize] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  			} else {  				row [SchemaTableColumn.NumericPrecision] = Convert.ToInt32 (arSize [0]' CultureInfo.InvariantCulture);  				if (arSize.Length > 1)  					row [SchemaTableColumn.NumericScale] = Convert.ToInt32 (arSize [1]' CultureInfo.InvariantCulture);  			}  		}  	}  	row ["DataTypeName"] = dataType;  	if (wantDefaultValue) {  		// Determine the default value for the column' which sucks because we have to query the schema for each column  		using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  			using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  				// Find the matching column  				while (rdTable.Read ()) {  					if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  						if (rdTable.IsDBNull (4) == false)  							row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  						break;  					}  				}  			}  	}  	// Determine IsUnique properly' which is a pain in the butt!  	if (wantUniqueInfo) {  		if ((string)row [SchemaTableOptionalColumn.BaseCatalogName] != strCatalog || (string)row [SchemaTableColumn.BaseTableName] != strTable) {  			strCatalog = (string)row [SchemaTableOptionalColumn.BaseCatalogName];  			strTable = (string)row [SchemaTableColumn.BaseTableName];  			tblIndexes = _command.Connection.GetSchema ("Indexes"' new string[] {  				(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  				null'  				(string)row [SchemaTableColumn.BaseTableName]'  				null  			});  		}  		foreach (DataRow rowIndexes in tblIndexes.Rows) {  			tblIndexColumns = _command.Connection.GetSchema ("IndexColumns"' new string[] {  				(string)row [SchemaTableOptionalColumn.BaseCatalogName]'  				null'  				(string)row [SchemaTableColumn.BaseTableName]'  				(string)rowIndexes ["INDEX_NAME"]'  				null  			});  			foreach (DataRow rowColumnIndex in tblIndexColumns.Rows) {  				if (String.Compare ((string)rowColumnIndex ["COLUMN_NAME"]' strColumn' true' CultureInfo.InvariantCulture) == 0) {  					if (tblIndexColumns.Rows.Count == 1)  						row [SchemaTableColumn.IsUnique] = rowIndexes ["UNIQUE"];  					break;  				}  			}  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (wantDefaultValue) {  	// Determine the default value for the column' which sucks because we have to query the schema for each column  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  		using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  			// Find the matching column  			while (rdTable.Read ()) {  				if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					if (rdTable.IsDBNull (4) == false)  						row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  					break;  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (wantDefaultValue) {  	// Determine the default value for the column' which sucks because we have to query the schema for each column  	using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  		using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  			// Find the matching column  			while (rdTable.Read ()) {  				if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  					if (rdTable.IsDBNull (4) == false)  						row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  					break;  				}  			}  		}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  	using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  		// Find the matching column  		while (rdTable.Read ()) {  			if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  				if (rdTable.IsDBNull (4) == false)  					row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  				break;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: using (SQLiteCommand cmdTable = new SQLiteCommand (String.Format (CultureInfo.InvariantCulture' "PRAGMA [{0}].TABLE_INFO([{1}])"' row [SchemaTableOptionalColumn.BaseCatalogName]' row [SchemaTableColumn.BaseTableName])' _command.Connection))  	using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  		// Find the matching column  		while (rdTable.Read ()) {  			if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  				if (rdTable.IsDBNull (4) == false)  					row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  				break;  			}  		}  	}  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  	// Find the matching column  	while (rdTable.Read ()) {  		if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  			if (rdTable.IsDBNull (4) == false)  				row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  			break;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: using (DbDataReader rdTable = cmdTable.ExecuteReader ()) {  	// Find the matching column  	while (rdTable.Read ()) {  		if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  			if (rdTable.IsDBNull (4) == false)  				row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  			break;  		}  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: while (rdTable.Read ()) {  	if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  		if (rdTable.IsDBNull (4) == false)  			row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  		break;  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: while (rdTable.Read ()) {  	if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  		if (rdTable.IsDBNull (4) == false)  			row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  		break;  	}  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  	if (rdTable.IsDBNull (4) == false)  		row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  	break;  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (String.Compare ((string)row [SchemaTableColumn.BaseColumnName]' rdTable.GetString (1)' true' CultureInfo.InvariantCulture) == 0) {  	if (rdTable.IsDBNull (4) == false)  		row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  	break;  }  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (rdTable.IsDBNull (4) == false)  	row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (rdTable.IsDBNull (4) == false)  	row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  
Magic Number,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,GetSchemaTable,The following statement contains a magic number: row [SchemaTableOptionalColumn.DefaultValue] = rdTable [4];  
Missing Default,System.Data.SQLite,SQLiteConnection,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteConnection.cs,GetSchema,The following switch statement is missing a default case: switch (collectionName.ToUpper (CultureInfo.InvariantCulture)) {  case "METADATACOLLECTIONS":  	return Schema_MetaDataCollections ();  case "DATASOURCEINFORMATION":  	return Schema_DataSourceInformation ();  case "DATATYPES":  	return Schema_DataTypes ();  case "COLUMNS":  	return Schema_Columns (parms [0]' parms [2]' parms [3]);  case "INDEXES":  	return Schema_Indexes (parms [0]' parms [2]' parms [4]);  case "INDEXCOLUMNS":  	return Schema_IndexColumns (parms [0]' parms [2]' parms [3]' parms [4]);  case "TABLES":  	return Schema_Tables (parms [0]' parms [2]' parms [3]);  case "VIEWS":  	return Schema_Views (parms [0]' parms [2]);  case "VIEWCOLUMNS":  	return Schema_ViewColumns (parms [0]' parms [2]' parms [3]);  case "FOREIGNKEYS":  	return Schema_ForeignKeys (parms [0]' parms [2]' parms [3]);  case "CATALOGS":  	return Schema_Catalogs (parms [0]);  case "RESERVEDWORDS":  	return Schema_ReservedWords ();  }  
Missing Default,System.Data.SQLite,SQLiteDataReader,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteDataReader.cs,VerifyType,The following switch statement is missing a default case: switch (affinity) {  case TypeAffinity.Int64:  	if (typ == DbType.Int16)  		return affinity;  	if (typ == DbType.Int32)  		return affinity;  	if (typ == DbType.Int64)  		return affinity;  	if (typ == DbType.Boolean)  		return affinity;  	if (typ == DbType.Byte)  		return affinity;  	break;  case TypeAffinity.Double:  	if (typ == DbType.Single)  		return affinity;  	if (typ == DbType.Double)  		return affinity;  	if (typ == DbType.Decimal)  		return affinity;  	break;  case TypeAffinity.Text:  	if (typ == DbType.SByte)  		return affinity;  	if (typ == DbType.String)  		return affinity;  	if (typ == DbType.SByte)  		return affinity;  	if (typ == DbType.Guid)  		return affinity;  	if (typ == DbType.DateTime)  		return affinity;  	break;  case TypeAffinity.Blob:  	if (typ == DbType.Guid)  		return affinity;  	if (typ == DbType.String)  		return affinity;  	if (typ == DbType.Binary)  		return affinity;  	break;  }  
Missing Default,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,ConvertParams,The following switch statement is missing a default case: switch (_base.GetParamValueType ((IntPtr)argint [n])) {  case TypeAffinity.Null:  	parms [n] = DBNull.Value;  	break;  case TypeAffinity.Int64:  	parms [n] = _base.GetParamValueInt64 ((IntPtr)argint [n]);  	break;  case TypeAffinity.Double:  	parms [n] = _base.GetParamValueDouble ((IntPtr)argint [n]);  	break;  case TypeAffinity.Text:  	parms [n] = _base.GetParamValueText ((IntPtr)argint [n]);  	break;  case TypeAffinity.Blob:  	{  		int x;  		byte[] blob;  		x = (int)_base.GetParamValueBytes ((IntPtr)argint [n]' 0' null' 0' 0);  		blob = new byte[x];  		_base.GetParamValueBytes ((IntPtr)argint [n]' 0' blob' 0' x);  		parms [n] = blob;  	}  	break;  case TypeAffinity.DateTime:  	// Never happens here but what the heck' maybe it will one day.  	parms [n] = _base.ToDateTime (_base.GetParamValueText ((IntPtr)argint [n]));  	break;  }  
Missing Default,System.Data.SQLite,SQLiteFunction,D:\newReposJune17\pburrows_SharperNLP\SharpNLP-Original\SharpNLP\SQLite.NET\System.Data.SQLite\SQLiteFunction.cs,SetReturnValue,The following switch statement is missing a default case: switch (SQLiteConvert.TypeToAffinity (t)) {  case TypeAffinity.Null:  	_base.ReturnNull (context);  	return;  case TypeAffinity.Int64:  	_base.ReturnInt64 (context' Convert.ToInt64 (returnValue' CultureInfo.CurrentCulture));  	return;  case TypeAffinity.Double:  	_base.ReturnDouble (context' Convert.ToDouble (returnValue' CultureInfo.CurrentCulture));  	return;  case TypeAffinity.Text:  	_base.ReturnText (context' returnValue.ToString ());  	return;  case TypeAffinity.Blob:  	_base.ReturnBlob (context' (byte[])returnValue);  	return;  }  
