Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,Initialize,The length of the statement  "		InitializeConfigurationKey (Settings.Application.AutomaticUpdates.GetChannelSettingName (channel.Name)' channel.DefaultUrl); " is 124.
Long Statement,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The length of the statement  "	var checkForUpdates = _configurationService.GetRoamingValue<bool> (Settings.Application.AutomaticUpdates.CheckForUpdates); " is 122.
Long Statement,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The length of the statement  "	var channelName = _configurationService.GetRoamingValue<string> (Settings.Application.AutomaticUpdates.UpdateChannel' string.Empty); " is 132.
Long Statement,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The length of the statement  "			startInfo.Arguments = string.Format ("--update={0} --md={1} --silent"' channelUrl' maximumReleaseDate.Value.ToString ("yyyyMMddHHmmss")); " is 137.
Magic Number,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The following statement contains a magic number: await TaskHelper.Run (() =>  {  	try {  		if (!maximumReleaseDate.HasValue) {  			maximumReleaseDate = DateTime.MaxValue;  		}  		var startInfo = new ProcessStartInfo (updateExe);  		startInfo.Arguments = string.Format ("--update={0} --md={1} --silent"' channelUrl' maximumReleaseDate.Value.ToString ("yyyyMMddHHmmss"));  		startInfo.WorkingDirectory = Path.GetFullPath (".."' entryAssemblyDirectory);  		startInfo.UseShellExecute = true;  		startInfo.CreateNoWindow = true;  		var process = Process.Start (startInfo);  		process.WaitForExit ();  		Log.Debug ("Update.exe exited with exit code '{0}'"' process.ExitCode);  		// Possible exit codes:  		// -1 => An error occurred. Check the log file for more information about this error  		//  0 => No errors' no additional information available  		//  1 => New version available or new version is installed successfully (depending on switch /checkonly)  		//  2 => New version which is mandatory (forced) is available (for the future?)  		//  3 => No new version available  		switch (process.ExitCode) {  		case 1:  			IsUpdatedInstalled = true;  			UpdateInstalled.SafeInvoke (this);  			Log.Info ("Installed new update");  			break;  		case 4:  			IsUpdateOutsideMaintenanceAvailable = true;  			UpdateOutsideMaintenanceAvailable.SafeInvoke (this);  			Log.Info ("New update is available but is outside maintenance' maintenance ended on '{0}'"' maximumReleaseDate);  			break;  		}  	}  	catch (Exception ex) {  		Log.Error (ex' "Failed to check for updates");  	}  }' true);  
Magic Number,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The following statement contains a magic number: try {  	if (!maximumReleaseDate.HasValue) {  		maximumReleaseDate = DateTime.MaxValue;  	}  	var startInfo = new ProcessStartInfo (updateExe);  	startInfo.Arguments = string.Format ("--update={0} --md={1} --silent"' channelUrl' maximumReleaseDate.Value.ToString ("yyyyMMddHHmmss"));  	startInfo.WorkingDirectory = Path.GetFullPath (".."' entryAssemblyDirectory);  	startInfo.UseShellExecute = true;  	startInfo.CreateNoWindow = true;  	var process = Process.Start (startInfo);  	process.WaitForExit ();  	Log.Debug ("Update.exe exited with exit code '{0}'"' process.ExitCode);  	// Possible exit codes:  	// -1 => An error occurred. Check the log file for more information about this error  	//  0 => No errors' no additional information available  	//  1 => New version available or new version is installed successfully (depending on switch /checkonly)  	//  2 => New version which is mandatory (forced) is available (for the future?)  	//  3 => No new version available  	switch (process.ExitCode) {  	case 1:  		IsUpdatedInstalled = true;  		UpdateInstalled.SafeInvoke (this);  		Log.Info ("Installed new update");  		break;  	case 4:  		IsUpdateOutsideMaintenanceAvailable = true;  		UpdateOutsideMaintenanceAvailable.SafeInvoke (this);  		Log.Info ("New update is available but is outside maintenance' maintenance ended on '{0}'"' maximumReleaseDate);  		break;  	}  }  catch (Exception ex) {  	Log.Error (ex' "Failed to check for updates");  }  
Magic Number,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The following statement contains a magic number: switch (process.ExitCode) {  case 1:  	IsUpdatedInstalled = true;  	UpdateInstalled.SafeInvoke (this);  	Log.Info ("Installed new update");  	break;  case 4:  	IsUpdateOutsideMaintenanceAvailable = true;  	UpdateOutsideMaintenanceAvailable.SafeInvoke (this);  	Log.Info ("New update is available but is outside maintenance' maintenance ended on '{0}'"' maximumReleaseDate);  	break;  }  
Missing Default,Orc.Squirrel,UpdateService,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel\Orc.Squirrel.Shared\Services\UpdateService.cs,HandleUpdatesAsync,The following switch statement is missing a default case: switch (process.ExitCode) {  case 1:  	IsUpdatedInstalled = true;  	UpdateInstalled.SafeInvoke (this);  	Log.Info ("Installed new update");  	break;  case 4:  	IsUpdateOutsideMaintenanceAvailable = true;  	UpdateOutsideMaintenanceAvailable.SafeInvoke (this);  	Log.Info ("New update is available but is outside maintenance' maintenance ended on '{0}'"' maximumReleaseDate);  	break;  }  
