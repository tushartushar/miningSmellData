Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,Cyclomatic complexity of the method is 8
Long Statement,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractIcon,The length of the statement  "	var bitmapSource = Imaging.CreateBitmapSourceFromHIcon (icon.Handle' Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ()); " is 125.
Long Statement,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ToBitmap,The length of the statement  "	var data = bitmap.LockBits (new Rectangle (Point.Empty' bitmap.Size)' ImageLockMode.WriteOnly' PixelFormat.Format32bppPArgb); " is 125.
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: try {  	byte[] srcBuf = null;  	using (var stream = new MemoryStream ()) {  		icon.Save (stream);  		srcBuf = stream.ToArray ();  	}  	const int SizeICONDIR = 6;  	const int SizeICONDIRENTRY = 16;  	int iCount = BitConverter.ToInt16 (srcBuf' 4);  	for (int iIndex = 0; iIndex < iCount; iIndex++) {  		int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  		int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  		int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  		if (width == 0 && height == 0 && bitCount == 32) {  			int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  			int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  			using (var destStream = new MemoryStream ()) {  				var writer = new BinaryWriter (destStream);  				writer.Write (srcBuf' imageOffset' imageSize);  				destStream.Seek (0' SeekOrigin.Begin);  				extractedIcon = new Bitmap (destStream);  				// This is PNG! :)  				return extractedIcon;  			}  		}  	}  }  catch {  	return null;  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: for (int iIndex = 0; iIndex < iCount; iIndex++) {  	int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  	int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  	int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  	if (width == 0 && height == 0 && bitCount == 32) {  		int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  		int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  		using (var destStream = new MemoryStream ()) {  			var writer = new BinaryWriter (destStream);  			writer.Write (srcBuf' imageOffset' imageSize);  			destStream.Seek (0' SeekOrigin.Begin);  			extractedIcon = new Bitmap (destStream);  			// This is PNG! :)  			return extractedIcon;  		}  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: for (int iIndex = 0; iIndex < iCount; iIndex++) {  	int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  	int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  	int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  	if (width == 0 && height == 0 && bitCount == 32) {  		int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  		int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  		using (var destStream = new MemoryStream ()) {  			var writer = new BinaryWriter (destStream);  			writer.Write (srcBuf' imageOffset' imageSize);  			destStream.Seek (0' SeekOrigin.Begin);  			extractedIcon = new Bitmap (destStream);  			// This is PNG! :)  			return extractedIcon;  		}  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: for (int iIndex = 0; iIndex < iCount; iIndex++) {  	int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  	int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  	int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  	if (width == 0 && height == 0 && bitCount == 32) {  		int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  		int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  		using (var destStream = new MemoryStream ()) {  			var writer = new BinaryWriter (destStream);  			writer.Write (srcBuf' imageOffset' imageSize);  			destStream.Seek (0' SeekOrigin.Begin);  			extractedIcon = new Bitmap (destStream);  			// This is PNG! :)  			return extractedIcon;  		}  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: for (int iIndex = 0; iIndex < iCount; iIndex++) {  	int width = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex];  	int height = srcBuf [SizeICONDIR + SizeICONDIRENTRY * iIndex + 1];  	int bitCount = BitConverter.ToInt16 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);  	if (width == 0 && height == 0 && bitCount == 32) {  		int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  		int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  		using (var destStream = new MemoryStream ()) {  			var writer = new BinaryWriter (destStream);  			writer.Write (srcBuf' imageOffset' imageSize);  			destStream.Seek (0' SeekOrigin.Begin);  			extractedIcon = new Bitmap (destStream);  			// This is PNG! :)  			return extractedIcon;  		}  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: if (width == 0 && height == 0 && bitCount == 32) {  	int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  	int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  	using (var destStream = new MemoryStream ()) {  		var writer = new BinaryWriter (destStream);  		writer.Write (srcBuf' imageOffset' imageSize);  		destStream.Seek (0' SeekOrigin.Begin);  		extractedIcon = new Bitmap (destStream);  		// This is PNG! :)  		return extractedIcon;  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: if (width == 0 && height == 0 && bitCount == 32) {  	int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  	int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  	using (var destStream = new MemoryStream ()) {  		var writer = new BinaryWriter (destStream);  		writer.Write (srcBuf' imageOffset' imageSize);  		destStream.Seek (0' SeekOrigin.Begin);  		extractedIcon = new Bitmap (destStream);  		// This is PNG! :)  		return extractedIcon;  	}  }  
Magic Number,Orc.Squirrel,IconHelper,C:\repos\WildGums_Orc.Squirrel\src\Orc.Squirrel.Xaml\Orc.Squirrel.Xaml.Shared\Helpers\IconHelper.cs,ExtractVistaIcon,The following statement contains a magic number: if (width == 0 && height == 0 && bitCount == 32) {  	int imageSize = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);  	int imageOffset = BitConverter.ToInt32 (srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);  	using (var destStream = new MemoryStream ()) {  		var writer = new BinaryWriter (destStream);  		writer.Write (srcBuf' imageOffset' imageSize);  		destStream.Seek (0' SeekOrigin.Begin);  		extractedIcon = new Bitmap (destStream);  		// This is PNG! :)  		return extractedIcon;  	}  }  
