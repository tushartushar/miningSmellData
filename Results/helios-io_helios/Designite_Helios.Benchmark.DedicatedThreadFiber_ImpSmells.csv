Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The length of the statement  "		Console.WriteLine ("Comparing Systsem.Threading.ThreadPool vs Helios.Concurrency.DedicatedThreadFiber for {0} items"' workItems); " is 129.
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < generations; i++) {  	var workItems = 10000 * (int)Math.Pow (10' i);  	Console.WriteLine ("Comparing Systsem.Threading.ThreadPool vs Helios.Concurrency.DedicatedThreadFiber for {0} items"' workItems);  	Console.WriteLine ("DedicatedThreadFiber.NumThreads: {0}"' threadCount);  	Console.WriteLine ("System.Threading.ThreadPool");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  	Console.WriteLine ("Helios.Concurrency.DedicatedThreadFiber");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems' threadCount);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  }  
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < generations; i++) {  	var workItems = 10000 * (int)Math.Pow (10' i);  	Console.WriteLine ("Comparing Systsem.Threading.ThreadPool vs Helios.Concurrency.DedicatedThreadFiber for {0} items"' workItems);  	Console.WriteLine ("DedicatedThreadFiber.NumThreads: {0}"' threadCount);  	Console.WriteLine ("System.Threading.ThreadPool");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  	Console.WriteLine ("Helios.Concurrency.DedicatedThreadFiber");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems' threadCount);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  }  
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < generations; i++) {  	var workItems = 10000 * (int)Math.Pow (10' i);  	Console.WriteLine ("Comparing Systsem.Threading.ThreadPool vs Helios.Concurrency.DedicatedThreadFiber for {0} items"' workItems);  	Console.WriteLine ("DedicatedThreadFiber.NumThreads: {0}"' threadCount);  	Console.WriteLine ("System.Threading.ThreadPool");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  	Console.WriteLine ("Helios.Concurrency.DedicatedThreadFiber");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems' threadCount);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  }  
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < generations; i++) {  	var workItems = 10000 * (int)Math.Pow (10' i);  	Console.WriteLine ("Comparing Systsem.Threading.ThreadPool vs Helios.Concurrency.DedicatedThreadFiber for {0} items"' workItems);  	Console.WriteLine ("DedicatedThreadFiber.NumThreads: {0}"' threadCount);  	Console.WriteLine ("System.Threading.ThreadPool");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  	Console.WriteLine ("Helios.Concurrency.DedicatedThreadFiber");  	Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  		var sw = Stopwatch.StartNew ();  		CreateAndWaitForWorkItems (workItems' threadCount);  		return sw.ElapsedMilliseconds;  	}).Skip (1).Average ()));  }  
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  	var sw = Stopwatch.StartNew ();  	CreateAndWaitForWorkItems (workItems);  	return sw.ElapsedMilliseconds;  }).Skip (1).Average ()));  
Magic Number,Helios.Benchmark.DedicatedThreadFiber,Program,F:\newReposMay17\helios-io_helios\benchmark\Helios.Benchmark.DedicatedThreadFiber\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (TimeSpan.FromMilliseconds (Enumerable.Range (0' 6).Select (_ => {  	var sw = Stopwatch.StartNew ();  	CreateAndWaitForWorkItems (workItems' threadCount);  	return sw.ElapsedMilliseconds;  }).Skip (1).Average ()));  
