Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Aardwolf,JsonRootResponse,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\JsonRootResponse.cs,JsonRootResponse,The method has 7 parameters.
Long Statement,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The length of the statement  "		// Higher values mean more connections can be maintained yet at a much slower average response time; fewer connections will be rejected. " is 136.
Long Statement,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The length of the statement  "		// Lower values mean less connections can be maintained yet at a much faster average response time; more connections will be rejected. " is 134.
Empty Catch Block,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,ProcessListenerContext,The method has an empty catch block.
Magic Number,Aardwolf,ContentResponse,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\ContentResponse.cs,Execute,The following statement contains a magic number: using (context.Response.OutputStream)  	using (var tw = new System.IO.StreamWriter (context.Response.OutputStream' UTF8.WithoutBOM' 65536' true))  		await tw.WriteAsync (response);  
Magic Number,Aardwolf,ContentResponse,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\ContentResponse.cs,Execute,The following statement contains a magic number: using (var tw = new System.IO.StreamWriter (context.Response.OutputStream' UTF8.WithoutBOM' 65536' true))  	await tw.WriteAsync (response);  
Magic Number,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The following statement contains a magic number: Task.Run (async () => {  	// Configure the handler:  	if (_configValues != null) {  		var config = _handler as IConfigurationTrait;  		if (config != null) {  			var task = config.Configure (_hostContext' _configValues);  			if (task != null)  				if (!await task)  					return;  		}  	}  	// Initialize the handler:  	var init = _handler as IInitializationTrait;  	if (init != null) {  		var task = init.Initialize (_hostContext);  		if (task != null)  			if (!await task)  				return;  	}  	try {  		// Start the HTTP listener:  		_listener.Start ();  	} catch (HttpListenerException hlex) {  		Console.Error.WriteLine (hlex.Message);  		return;  	}  	// Accept connections:  	// Higher values mean more connections can be maintained yet at a much slower average response time; fewer connections will be rejected.  	// Lower values mean less connections can be maintained yet at a much faster average response time; more connections will be rejected.  	var sem = new Semaphore (_accepts' _accepts);  	while (true) {  		sem.WaitOne ();  		#pragma  		_listener.GetContextAsync ().ContinueWith (async t => {  			string errMessage;  			try {  				sem.Release ();  				var ctx = await t;  				await ProcessListenerContext (ctx' this);  				return;  			} catch (Exception ex) {  				errMessage = ex.ToString ();  			}  			await Console.Error.WriteLineAsync (errMessage);  		});  		#pragma  	}  }).Wait ();  
Magic Number,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The following statement contains a magic number: Task.Run (async () => {  	// Configure the handler:  	if (_configValues != null) {  		var config = _handler as IConfigurationTrait;  		if (config != null) {  			var task = config.Configure (_hostContext' _configValues);  			if (task != null)  				if (!await task)  					return;  		}  	}  	// Initialize the handler:  	var init = _handler as IInitializationTrait;  	if (init != null) {  		var task = init.Initialize (_hostContext);  		if (task != null)  			if (!await task)  				return;  	}  	try {  		// Start the HTTP listener:  		_listener.Start ();  	} catch (HttpListenerException hlex) {  		Console.Error.WriteLine (hlex.Message);  		return;  	}  	// Accept connections:  	// Higher values mean more connections can be maintained yet at a much slower average response time; fewer connections will be rejected.  	// Lower values mean less connections can be maintained yet at a much faster average response time; more connections will be rejected.  	var sem = new Semaphore (_accepts' _accepts);  	while (true) {  		sem.WaitOne ();  		#pragma  		_listener.GetContextAsync ().ContinueWith (async t => {  			string errMessage;  			try {  				sem.Release ();  				var ctx = await t;  				await ProcessListenerContext (ctx' this);  				return;  			} catch (Exception ex) {  				errMessage = ex.ToString ();  			}  			await Console.Error.WriteLineAsync (errMessage);  		});  		#pragma  	}  }).Wait ();  
Magic Number,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The following statement contains a magic number: while (true) {  	sem.WaitOne ();  	#pragma  	_listener.GetContextAsync ().ContinueWith (async t => {  		string errMessage;  		try {  			sem.Release ();  			var ctx = await t;  			await ProcessListenerContext (ctx' this);  			return;  		} catch (Exception ex) {  			errMessage = ex.ToString ();  		}  		await Console.Error.WriteLineAsync (errMessage);  	});  	#pragma  }  
Magic Number,Aardwolf,HttpAsyncHost,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\HttpAsyncHost.cs,Run,The following statement contains a magic number: while (true) {  	sem.WaitOne ();  	#pragma  	_listener.GetContextAsync ().ContinueWith (async t => {  		string errMessage;  		try {  			sem.Release ();  			var ctx = await t;  			await ProcessListenerContext (ctx' this);  			return;  		} catch (Exception ex) {  			errMessage = ex.ToString ();  		}  		await Console.Error.WriteLineAsync (errMessage);  	});  	#pragma  }  
Magic Number,Aardwolf,JsonRootResponse,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\JsonRootResponse.cs,JsonRootResponse,The following statement contains a magic number: this.success = statusCode == 200;  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: for (i = 0; (i + offset < value.Length) && (i < count); ++i) {  	c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  	c [i * 2 + 1] = hexChars [value [i + offset] & 15];  }  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: for (i = 0; (i + offset < value.Length) && (i < count); ++i) {  	c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  	c [i * 2 + 1] = hexChars [value [i + offset] & 15];  }  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: for (i = 0; (i + offset < value.Length) && (i < count); ++i) {  	c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  	c [i * 2 + 1] = hexChars [value [i + offset] & 15];  }  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: for (i = 0; (i + offset < value.Length) && (i < count); ++i) {  	c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  	c [i * 2 + 1] = hexChars [value [i + offset] & 15];  }  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: c [i * 2 + 0] = hexChars [value [i + offset] >> 4];  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: c [i * 2 + 1] = hexChars [value [i + offset] & 15];  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: c [i * 2 + 1] = hexChars [value [i + offset] & 15];  
Magic Number,System,ByteArrayExtensions,F:\newReposMay17\JamesDunne_aardwolf\Aardwolf\Extensions.cs,ToHexString,The following statement contains a magic number: return new string (c' 0' i * 2);  
