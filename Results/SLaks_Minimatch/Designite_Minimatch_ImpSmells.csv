Implementation smell,Namespace,Class,File,Method,Description
Long Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,BraceExpand,The method has 157 lines of code.
Long Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,The method has 267 lines of code.
Long Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,MatchOne,The method has 158 lines of code.
Complex Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,BraceExpand,Cyclomatic complexity of the method is 20
Complex Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,Cyclomatic complexity of the method is 33
Complex Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,MatchOne,Cyclomatic complexity of the method is 17
Complex Conditional,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,MatchOne,The conditional expression  "file[fi] == "." || file[fi] == ".." ||                                  (!options.Dot && !string.IsNullOrEmpty(file[fi]) && file[fi][0] == '.')"  is complex.
Complex Conditional,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,MatchOne,The conditional expression  "swallowee == "." || swallowee == ".." ||                                  (!options.Dot && swallowee[0] == '.')"  is complex.
Magic Number,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,BraceExpand,The following statement contains a magic number: int start = int.Parse(numset.Groups[1].Value)'                  end = int.Parse(numset.Groups[2].Value)'                  inc = start > end ? -1 : 1;
Magic Number,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,The following statement contains a magic number: var tail = re.Substring(pl.ReStart + 3);
Magic Number,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,The following statement contains a magic number: tail = escapeCheck.Replace(tail' m =>                  {                      string escape = m.Groups[2].Value;                      // the | isn't already escaped' so escape it.                      if (String.IsNullOrEmpty(escape)) escape = "\\";                        // need to escape all those slashes *again*' without escaping the                      // one that we need for escaping the | character.  As it works out'                      // escaping an even number of slashes can be done by simply repeating                      // it exactly after itself.  That's why this trick works.                      //                      // I am sorry that you have to see this.                      return m.Groups[1].Value + m.Groups[1].Value + escape + "|";                  });
Missing Default,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,The following switch statement is missing a default case: switch (plType)                          {                              case '!':                                  re += "[^/]*?)";                                  break;                              case '?':                              case '+':                              case '*': re += plType; break;                              case '@': break; // the default anyway                          }
Missing Default,Minimatch,Minimatcher,D:\research\architectureSmells\repos1\SLaks_Minimatch\Minimatch\Minimatcher.cs,Parse,The following switch statement is missing a default case: switch (re[0])              {                  case '.':                  case '[':                  case '(': addPatternStart = true; break;              }
