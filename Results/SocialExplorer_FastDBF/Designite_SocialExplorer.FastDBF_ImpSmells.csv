Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,Cyclomatic complexity of the method is 9
Complex Method,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The method has 5 parameters. Parameters: sName' type' nLength' nDecimals' nDataAddress
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,AddColumn,The length of the statement  "                throw new InvalidOperationException("This header is locked and can not be modified. Modifying the header would result in a corrupt DBF file. You can unlock the header by calling UnLock() method."); " is 197.
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,AddColumn,The length of the statement  "                throw new ArgumentOutOfRangeException("oNewCol"' "Unable to add new column. Adding this column puts the record length over the maximum (which is 65535 bytes)."); " is 161.
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,RemoveColumn,The length of the statement  "                throw new InvalidOperationException("This header is locked and can not be modified. Modifying the header would result in a corrupt DBF file. You can unlock the header by calling UnLock() method."); " is 197.
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The length of the statement  "                //since for char fields decimal count should be zero for other versions that do not support this extended functionality. " is 120.
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The length of the statement  "                //----------------------------------------------------------------------------------------------------------------------- " is 121.
Long Statement,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The length of the statement  "            //equivalent to reader.BaseStream.Seek(mHeaderLength' SeekOrigin.Begin) except that we are not using the seek function since " is 124.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,ReadNext,The length of the statement  "            //we are not checking whether it comes from another DBF file or not' we just need the same structure. Allow flexibility but be safe. " is 132.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,ReadNext,The length of the statement  "            if (oFillRecord.Header != _header && (oFillRecord.Header.ColumnCount != _header.ColumnCount || oFillRecord.Header.RecordLength != _header.RecordLength)) " is 152.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Read,The length of the statement  "            //we are not checking whether it comes from another DBF file or not' we just need the same structure. Allow flexibility but be safe. " is 132.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Read,The length of the statement  "            if (oFillRecord.Header != _header && (oFillRecord.Header.ColumnCount != _header.ColumnCount || oFillRecord.Header.RecordLength != _header.RecordLength)) " is 152.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Read,The length of the statement  "            //check whether requested record exists. Subtract 1 from file length (there is a terminating character 1A at the end of the file) " is 129.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,ReadValue,The length of the statement  "            //check whether requested record exists. Subtract 1 from file length (there is a terminating character 1A at the end of the file) " is 129.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Update,The length of the statement  "                throw new Exception("RecordIndex is not set' unable to update record. Set RecordIndex or call Write() method to add a new record to file."); " is 140.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Update,The length of the statement  "            if (orec.Header != _header && (orec.Header.ColumnCount != _header.ColumnCount || orec.Header.RecordLength != _header.RecordLength)) " is 131.
Long Statement,SocialExplorer.IO.FastDBF,DbfFile,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfFile.cs,Update,The length of the statement  "            //check whether we can seek to this position. Subtract 1 from file length (there is a terminating character 1A at the end of the file) " is 134.
Magic Number,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The following statement contains a magic number: if (_type == DbfColumnType.Integer)                  _length = 4;
Magic Number,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The following statement contains a magic number: if (_type == DbfColumnType.Date)                  _length = 8;
Magic Number,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The following statement contains a magic number: if (_type == DbfColumnType.Memo)                  _length = 10;
Magic Number,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The following statement contains a magic number: if (_length <= 0)                  throw new Exception("Invalid field length specified. Field length can not be zero or less than zero.");              else if (type != DbfColumnType.Character && type != DbfColumnType.Binary && _length > 255)                  throw new Exception("Invalid field length specified. For numbers it should be within 20 digits' but we allow up to 255. For Char and binary types' length up to 65'535 is allowed. For maximum compatibility use up to 255.");              else if ((type == DbfColumnType.Character || type == DbfColumnType.Binary) && _length > 65535)                  throw new Exception("Invalid field length specified. For Char and binary types' length up to 65535 is supported. For maximum compatibility use up to 255.");
Magic Number,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,DbfColumn,The following statement contains a magic number: if (_length <= 0)                  throw new Exception("Invalid field length specified. Field length can not be zero or less than zero.");              else if (type != DbfColumnType.Character && type != DbfColumnType.Binary && _length > 255)                  throw new Exception("Invalid field length specified. For numbers it should be within 20 digits' but we allow up to 255. For Char and binary types' length up to 65'535 is allowed. For maximum compatibility use up to 255.");              else if ((type == DbfColumnType.Character || type == DbfColumnType.Binary) && _length > 65535)                  throw new Exception("Invalid field length specified. For Char and binary types' length up to 65535 is supported. For maximum compatibility use up to 255.");
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,AddColumn,The following statement contains a magic number: if (_recordLength + oNewCol.Length > 65535)                  throw new ArgumentOutOfRangeException("oNewCol"' "Unable to add new column. Adding this column puts the record length over the maximum (which is 65535 bytes).");
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Write,The following statement contains a magic number: writer.Write((byte)(_updateDate.Year - 1900));
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Write,The following statement contains a magic number: for (int i = 0; i < 20; i++)                  writer.Write((byte)0);
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Write,The following statement contains a magic number: byte[] byteReserved = new byte[14];
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Write,The following statement contains a magic number: foreach (DbfColumn field in _fields)              {                  char[] cname = field.Name.PadRight(11' (char)0).ToCharArray();                  writer.Write(cname);                    // write the field type                  writer.Write((char)field.ColumnTypeChar);                    // write the field data address' offset from the start of the record.                  writer.Write(field.DataAddress);                      // write the length of the field.                  // if char field is longer than 255 bytes' then we use the decimal field as part of the field length.                  if (field.ColumnType == DbfColumn.DbfColumnType.Character && field.Length > 255)                  {                      //treat decimal count as high byte of field length' this extends char field max to 65535                      writer.Write((ushort)field.Length);                    }                  else                  {                      // write the length of the field.                      writer.Write((byte)field.Length);                        // write the decimal count.                      writer.Write((byte)field.DecimalCount);                  }                    // write the reserved bytes.                  writer.Write(byteReserved);                }
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Write,The following statement contains a magic number: foreach (DbfColumn field in _fields)              {                  char[] cname = field.Name.PadRight(11' (char)0).ToCharArray();                  writer.Write(cname);                    // write the field type                  writer.Write((char)field.ColumnTypeChar);                    // write the field data address' offset from the start of the record.                  writer.Write(field.DataAddress);                      // write the length of the field.                  // if char field is longer than 255 bytes' then we use the decimal field as part of the field length.                  if (field.ColumnType == DbfColumn.DbfColumnType.Character && field.Length > 255)                  {                      //treat decimal count as high byte of field length' this extends char field max to 65535                      writer.Write((ushort)field.Length);                    }                  else                  {                      // write the length of the field.                      writer.Write((byte)field.Length);                        // write the decimal count.                      writer.Write((byte)field.DecimalCount);                  }                    // write the reserved bytes.                  writer.Write(byteReserved);                }
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The following statement contains a magic number: _updateDate = new DateTime(year + 1900' month' day);
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The following statement contains a magic number: reader.ReadBytes(20);
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The following statement contains a magic number: for (int i = 0; i < nNumFields; i++)              {                    // read the field name				                  char[] buffer = new char[11];                  buffer = reader.ReadChars(11);                  string sFieldName = new string(buffer);                  int nullPoint = sFieldName.IndexOf((char)0);                  if (nullPoint != -1)                      sFieldName = sFieldName.Substring(0' nullPoint);                      //read the field type                  char cDbaseType = (char)reader.ReadByte();                    // read the field data address' offset from the start of the record.                  int nFieldDataAddress = reader.ReadInt32();                      //read the field length in bytes                  //if field type is char' then read FieldLength and Decimal count as one number to allow char fields to be                  //longer than 256 bytes (ASCII char). This is the way Clipper and FoxPro do it' and there is really no downside                  //since for char fields decimal count should be zero for other versions that do not support this extended functionality.                  //-----------------------------------------------------------------------------------------------------------------------                  int nFieldLength = 0;                  int nDecimals = 0;                  if (cDbaseType == 'C' || cDbaseType == 'c')                  {                      //treat decimal count as high byte                      nFieldLength = (int)reader.ReadUInt16();                  }                  else                  {                      //read field length as an unsigned byte.                      nFieldLength = (int)reader.ReadByte();                        //read decimal count as one byte                      nDecimals = (int)reader.ReadByte();                    }                      //read the reserved bytes.                  reader.ReadBytes(14);                    //Create and add field to collection                  _fields.Add(new DbfColumn(sFieldName' DbfColumn.GetDbaseType(cDbaseType)' nFieldLength' nDecimals' nDataOffset));                    // add up address information' you can not trust the address recorded in the DBF file...                  nDataOffset += nFieldLength;                }
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The following statement contains a magic number: for (int i = 0; i < nNumFields; i++)              {                    // read the field name				                  char[] buffer = new char[11];                  buffer = reader.ReadChars(11);                  string sFieldName = new string(buffer);                  int nullPoint = sFieldName.IndexOf((char)0);                  if (nullPoint != -1)                      sFieldName = sFieldName.Substring(0' nullPoint);                      //read the field type                  char cDbaseType = (char)reader.ReadByte();                    // read the field data address' offset from the start of the record.                  int nFieldDataAddress = reader.ReadInt32();                      //read the field length in bytes                  //if field type is char' then read FieldLength and Decimal count as one number to allow char fields to be                  //longer than 256 bytes (ASCII char). This is the way Clipper and FoxPro do it' and there is really no downside                  //since for char fields decimal count should be zero for other versions that do not support this extended functionality.                  //-----------------------------------------------------------------------------------------------------------------------                  int nFieldLength = 0;                  int nDecimals = 0;                  if (cDbaseType == 'C' || cDbaseType == 'c')                  {                      //treat decimal count as high byte                      nFieldLength = (int)reader.ReadUInt16();                  }                  else                  {                      //read field length as an unsigned byte.                      nFieldLength = (int)reader.ReadByte();                        //read decimal count as one byte                      nDecimals = (int)reader.ReadByte();                    }                      //read the reserved bytes.                  reader.ReadBytes(14);                    //Create and add field to collection                  _fields.Add(new DbfColumn(sFieldName' DbfColumn.GetDbaseType(cDbaseType)' nFieldLength' nDecimals' nDataOffset));                    // add up address information' you can not trust the address recorded in the DBF file...                  nDataOffset += nFieldLength;                }
Magic Number,SocialExplorer.IO.FastDBF,DbfHeader,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfHeader.cs,Read,The following statement contains a magic number: for (int i = 0; i < nNumFields; i++)              {                    // read the field name				                  char[] buffer = new char[11];                  buffer = reader.ReadChars(11);                  string sFieldName = new string(buffer);                  int nullPoint = sFieldName.IndexOf((char)0);                  if (nullPoint != -1)                      sFieldName = sFieldName.Substring(0' nullPoint);                      //read the field type                  char cDbaseType = (char)reader.ReadByte();                    // read the field data address' offset from the start of the record.                  int nFieldDataAddress = reader.ReadInt32();                      //read the field length in bytes                  //if field type is char' then read FieldLength and Decimal count as one number to allow char fields to be                  //longer than 256 bytes (ASCII char). This is the way Clipper and FoxPro do it' and there is really no downside                  //since for char fields decimal count should be zero for other versions that do not support this extended functionality.                  //-----------------------------------------------------------------------------------------------------------------------                  int nFieldLength = 0;                  int nDecimals = 0;                  if (cDbaseType == 'C' || cDbaseType == 'c')                  {                      //treat decimal count as high byte                      nFieldLength = (int)reader.ReadUInt16();                  }                  else                  {                      //read field length as an unsigned byte.                      nFieldLength = (int)reader.ReadByte();                        //read decimal count as one byte                      nDecimals = (int)reader.ReadByte();                    }                      //read the reserved bytes.                  reader.ReadBytes(14);                    //Create and add field to collection                  _fields.Add(new DbfColumn(sFieldName' DbfColumn.GetDbaseType(cDbaseType)' nFieldLength' nDecimals' nDataOffset));                    // add up address information' you can not trust the address recorded in the DBF file...                  nDataOffset += nFieldLength;                }
Missing Default,SocialExplorer.IO.FastDBF,DbfColumn,C:\repos\SocialExplorer_FastDBF\FastDBF\DbfColumn.cs,GetDbaseType,The following switch statement is missing a default case: switch (c.ToString().ToUpper())              {                  case "C": return DbfColumnType.Character;                  case "N": return DbfColumnType.Number;                  case "B": return DbfColumnType.Binary;                  case "L": return DbfColumnType.Boolean;                  case "D": return DbfColumnType.Date;                  case "I": return DbfColumnType.Integer;                  case "M": return DbfColumnType.Memo;                  case "F": return DbfColumnType.Float;              }
