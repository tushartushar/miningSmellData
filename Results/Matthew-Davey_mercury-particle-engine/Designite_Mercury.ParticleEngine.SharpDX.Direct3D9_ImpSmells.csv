Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Mercury.ParticleEngine.Renderers,PointSpriteRenderer,C:\repos\Matthew-Davey_mercury-particle-engine\Mercury.ParticleEngine.SharpDX.Direct3D9\Renderers\PointSpriteRenderer.cs,PointSpriteRenderer,The following statement contains a magic number: var vertexElements = new[] {                  new VertexElement(0' (short)Marshal.OffsetOf(typeof(Particle)' "Age")'      DeclarationType.Float1' DeclarationMethod.Default' DeclarationUsage.Color' 1)'                  new VertexElement(0' (short)Marshal.OffsetOf(typeof(Particle)' "Position")' DeclarationType.Float2' DeclarationMethod.Default' DeclarationUsage.Position' 0)'                  new VertexElement(0' (short)Marshal.OffsetOf(typeof(Particle)' "Colour")'   DeclarationType.Float4' DeclarationMethod.Default' DeclarationUsage.Color' 0)'                  new VertexElement(0' (short)Marshal.OffsetOf(typeof(Particle)' "Scale")'    DeclarationType.Float1' DeclarationMethod.Default' DeclarationUsage.PointSize' 0)'                  new VertexElement(0' (short)Marshal.OffsetOf(typeof(Particle)' "Rotation")' DeclarationType.Float1' DeclarationMethod.Default' DeclarationUsage.Color' 2)'                  VertexElement.VertexDeclarationEnd              };
Missing Default,Mercury.ParticleEngine.Renderers,PointSpriteRenderer,C:\repos\Matthew-Davey_mercury-particle-engine\Mercury.ParticleEngine.SharpDX.Direct3D9\Renderers\PointSpriteRenderer.cs,Render,The following switch statement is missing a default case: switch (emitter.RenderingOrder) {                  case RenderingOrder.FrontToBack: {                      emitter.Buffer.CopyTo(vertexDataPointer);                      break;                  }                  case RenderingOrder.BackToFront: {                      emitter.Buffer.CopyToReverse(vertexDataPointer);                      break;                  }              }
Missing Default,Mercury.ParticleEngine.Renderers,PointSpriteRenderer,C:\repos\Matthew-Davey_mercury-particle-engine\Mercury.ParticleEngine.SharpDX.Direct3D9\Renderers\PointSpriteRenderer.cs,SetupBlend,The following switch statement is missing a default case: switch (blendMode) {                  case BlendMode.Alpha:                      _device.SetRenderState(RenderState.BlendOperation'        BlendOperation.Add);                      _device.SetRenderState(RenderState.BlendOperationAlpha'   BlendOperation.Add);                      _device.SetRenderState(RenderState.SourceBlendAlpha'      Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlendAlpha' Blend.InverseSourceAlpha);                      _device.SetRenderState(RenderState.SourceBlend'           Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlend'      Blend.InverseSourceAlpha);                      return;                  case BlendMode.Add:                      _device.SetRenderState(RenderState.BlendOperation'        BlendOperation.Add);                      _device.SetRenderState(RenderState.BlendOperationAlpha'   BlendOperation.Add);                      _device.SetRenderState(RenderState.SourceBlendAlpha'      Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlendAlpha' Blend.InverseSourceAlpha);                      _device.SetRenderState(RenderState.SourceBlend'           Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlend'      Blend.One);                      return;                  case BlendMode.Subtract:                      _device.SetRenderState(RenderState.BlendOperation'        BlendOperation.ReverseSubtract);                      _device.SetRenderState(RenderState.BlendOperationAlpha'   BlendOperation.Add);                      _device.SetRenderState(RenderState.SourceBlendAlpha'      Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlendAlpha' Blend.InverseSourceAlpha);                      _device.SetRenderState(RenderState.SourceBlend'           Blend.SourceAlpha);                      _device.SetRenderState(RenderState.DestinationBlend'      Blend.One);                      return;              }
