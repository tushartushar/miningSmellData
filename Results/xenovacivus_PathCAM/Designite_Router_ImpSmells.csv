Implementation smell,Namespace,Class,File,Method,Description
Long Method,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The method has 129 lines of code.
Long Method,Router.Paths,PathTree,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GenerateToolPath,The method has 103 lines of code.
Complex Method,Router,GCodeLoader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,Cyclomatic complexity of the method is 16
Complex Method,Router.Paths,Hole,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,AddRoutPoint,Cyclomatic complexity of the method is 8
Complex Method,Router.Paths,PathTree,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GenerateToolPath,Cyclomatic complexity of the method is 14
Complex Method,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,AvoidTabs,Cyclomatic complexity of the method is 9
Long Parameter List,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,RoutAreasWithHoles,The method has 5 parameters. Parameters: polygons' toolRadius' cleanPassFactor' tabs' inside
Long Parameter List,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,RoutAreasWithHolesHelper,The method has 5 parameters. Parameters: polygons' toolRadius' cleanPassFactor' tabs' inside
Long Statement,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The length of the statement  "            boundary.Offset(toolRadius * (cleanPassFactor + 1.05f)); // Note: this is slightly larger to allow some polygon width to exist " is 126.
Long Statement,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The length of the statement  "                // Split it into polygons around the outside and inside of parts (the first two will be outside polygons' the next two inside' next two outside' ...). " is 150.
Magic Number,Router,GCodeLoader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,ExportGCode,The following statement contains a magic number: float rapidSpeed = 50.0f;
Magic Number,Router,GCodeLoader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,ExportGCode,The following statement contains a magic number: float cuttingSpeed = 25.0f;
Magic Number,Router,GCodeLoader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,ExportGCode,The following statement contains a magic number: float plungeSpeed = 10.0f;
Magic Number,Router,GCodeLoader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,ExportGCode,The following statement contains a magic number: (height + 0.001f) < lastHeight
Magic Number,Router,Router,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Router.cs,RoutPath,The following statement contains a magic number: (finalPosition.Xy - pointOffset.Xy).Length > .0001
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: float skin = 0.002f;
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: int layers = (int)((maxZ - minZ) / maxCutDepth + 0.95f);
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: float actualCutDepth = (maxZ - minZ - 2*skin) / layers;
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: actualCutDepth = Math.Min(maxZ - minZ - 2*skin' actualCutDepth);
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: height > -actualCutDepth / 2.0f
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The following statement contains a magic number: float toolRadius = router.ToolDiameter / 2.0f;
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The following statement contains a magic number: float cleanPassFactor = 0.90f;
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The following statement contains a magic number: boundary.Offset(toolRadius * (cleanPassFactor + 1.05f));
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The following statement contains a magic number: point.Z < (minZ + .005f)
Magic Number,Router.Paths,PathPlanner,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,DrawSlice,The following statement contains a magic number: GL.PointSize(2);
Magic Number,Router.Paths,Hole,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetRouts,The following statement contains a magic number: var routFirst = PathTree.ObliterateSlice(obliterate' toolRadius * 2.0f' true);
Magic Number,Router.Paths,Hole,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,AddRoutPoint,The following statement contains a magic number: larger.Offset(toolRadius * 1.05f);
Magic Number,Router.Paths,Hole,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,AddRoutPoint,The following statement contains a magic number: Slice test = new Slice(path' toolRadius * 2.0f' currentPolygon.Plane);
Magic Number,Router.Paths,PathTree,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,ObliterateSlice,The following statement contains a magic number: tree.GenerateToolPath(toolPath' tree.CreatePath()' maxShrink * 2.0f);
Magic Number,Router.Paths,PathTree,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,Draw,The following statement contains a magic number: GL.Translate(0' 0' 10);
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,Tabs,The following statement contains a magic number: this.boundary.PointsAlongLine(tabSpacing' tabSpacing / 2.0f)
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,AvoidTabs,The following statement contains a magic number: segment.Length < 0.0001f
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,AvoidTabs,The following statement contains a magic number: remainingSegments.RemoveAll(s => s.Length < 0.0001f);
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,TestAddPoint,The following statement contains a magic number: i > 1 && (points[i - 2] - point).Length < 0.0001f && (points[i - 1].Xy - point.Xy).Length < 0.0001f
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,TestAddPoint,The following statement contains a magic number: i > 1 && (points[i - 2] - point).Length < 0.0001f && (points[i - 1].Xy - point.Xy).Length < 0.0001f
Magic Number,Router.Paths,Tabs,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,TestAddPoint,The following statement contains a magic number: i > 1 && (points[i - 2] - point).Length < 0.0001f && (points[i - 1].Xy - point.Xy).Length < 0.0001f
