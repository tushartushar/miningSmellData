Implementation smell,Namespace,Class,File,Method,Description
Long Method,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The method has 129 lines of code.
Long Method,Router.Paths,PathTree,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GenerateToolPath,The method has 103 lines of code.
Complex Method,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,Cyclomatic complexity of the method is 16
Complex Method,Router.Paths,PathTree,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GenerateToolPath,Cyclomatic complexity of the method is 14
Complex Method,Router.Paths,Tabs,C:\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,AvoidTabs,Cyclomatic complexity of the method is 8
Long Parameter List,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,RoutAreasWithHoles,The method has 5 parameters. Parameters: polygons' toolRadius' cleanPassFactor' tabs' inside
Long Parameter List,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,RoutAreasWithHolesHelper,The method has 5 parameters. Parameters: polygons' toolRadius' cleanPassFactor' tabs' inside
Long Statement,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The length of the statement  "            boundary.Offset(toolRadius * (cleanPassFactor + 1.05f)); // Note: this is slightly larger to allow some polygon width to exist " is 126.
Long Statement,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,PlanPaths,The length of the statement  "                // Split it into polygons around the outside and inside of parts (the first two will be outside polygons' the next two inside' next two outside' ...). " is 150.
Magic Number,Router,GCodeLoader,C:\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,Load,The following statement contains a magic number: foreach (string s in lines)              {                  Regex r = new Regex("^G(?<G_VALUE>\\d+)");                  if (r.IsMatch (s))                  {                      Match m = r.Match(s);                      Int32 g_value = Int32.Parse (m.Groups["G_VALUE"].Value);                        if (g_value == 0 || g_value == 1)                      {                          // Rapid positioning or linear interpolation                          // Go to X' Y' Z at feedrate F.                          Vector3 fromPoint = new Vector3(x' y' z);                          GetFloat(s' "F"' ref speed);                          GetFloat(s' "X"' ref x);                          GetFloat(s' "Y"' ref y);                          GetFloat(s' "Z"' ref z);                          Vector3 toPoint = new Vector3(x' y' z);                            // If the XYZ params weren't specified or didn't change' don't do a move.                          // If only speed changed' that's ok; it has been updated for the next move.                          if ((toPoint - fromPoint).Length > 0)                          {                              var speedType = g_value == 0 ? MoveTool.SpeedType.Rapid : MoveTool.SpeedType.Cutting;                              commands.Add(new MoveTool(toPoint * scale' speedType));                          }                                                }                      else if (g_value == 4)                      {                          // Dwell Time (X' U' or P): dwell time in milliseconds                      }                      else if (g_value == 20)                      {                          // Inch Mode                          scale = 1.0f;                      }                      else if (g_value == 21)                      {                          // Metric Mode                          scale = 1.0f / (25.4f);                      }                      else if (g_value == 90)                      {                          // Absolute Programming                          //Console.WriteLine("Absolute Programming");                      }                      else                      {                          Console.WriteLine("G code is not understood: " + s);                      }                  }              }
Magic Number,Router,GCodeLoader,C:\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,Load,The following statement contains a magic number: foreach (string s in lines)              {                  Regex r = new Regex("^G(?<G_VALUE>\\d+)");                  if (r.IsMatch (s))                  {                      Match m = r.Match(s);                      Int32 g_value = Int32.Parse (m.Groups["G_VALUE"].Value);                        if (g_value == 0 || g_value == 1)                      {                          // Rapid positioning or linear interpolation                          // Go to X' Y' Z at feedrate F.                          Vector3 fromPoint = new Vector3(x' y' z);                          GetFloat(s' "F"' ref speed);                          GetFloat(s' "X"' ref x);                          GetFloat(s' "Y"' ref y);                          GetFloat(s' "Z"' ref z);                          Vector3 toPoint = new Vector3(x' y' z);                            // If the XYZ params weren't specified or didn't change' don't do a move.                          // If only speed changed' that's ok; it has been updated for the next move.                          if ((toPoint - fromPoint).Length > 0)                          {                              var speedType = g_value == 0 ? MoveTool.SpeedType.Rapid : MoveTool.SpeedType.Cutting;                              commands.Add(new MoveTool(toPoint * scale' speedType));                          }                                                }                      else if (g_value == 4)                      {                          // Dwell Time (X' U' or P): dwell time in milliseconds                      }                      else if (g_value == 20)                      {                          // Inch Mode                          scale = 1.0f;                      }                      else if (g_value == 21)                      {                          // Metric Mode                          scale = 1.0f / (25.4f);                      }                      else if (g_value == 90)                      {                          // Absolute Programming                          //Console.WriteLine("Absolute Programming");                      }                      else                      {                          Console.WriteLine("G code is not understood: " + s);                      }                  }              }
Magic Number,Router,GCodeLoader,C:\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,Load,The following statement contains a magic number: foreach (string s in lines)              {                  Regex r = new Regex("^G(?<G_VALUE>\\d+)");                  if (r.IsMatch (s))                  {                      Match m = r.Match(s);                      Int32 g_value = Int32.Parse (m.Groups["G_VALUE"].Value);                        if (g_value == 0 || g_value == 1)                      {                          // Rapid positioning or linear interpolation                          // Go to X' Y' Z at feedrate F.                          Vector3 fromPoint = new Vector3(x' y' z);                          GetFloat(s' "F"' ref speed);                          GetFloat(s' "X"' ref x);                          GetFloat(s' "Y"' ref y);                          GetFloat(s' "Z"' ref z);                          Vector3 toPoint = new Vector3(x' y' z);                            // If the XYZ params weren't specified or didn't change' don't do a move.                          // If only speed changed' that's ok; it has been updated for the next move.                          if ((toPoint - fromPoint).Length > 0)                          {                              var speedType = g_value == 0 ? MoveTool.SpeedType.Rapid : MoveTool.SpeedType.Cutting;                              commands.Add(new MoveTool(toPoint * scale' speedType));                          }                                                }                      else if (g_value == 4)                      {                          // Dwell Time (X' U' or P): dwell time in milliseconds                      }                      else if (g_value == 20)                      {                          // Inch Mode                          scale = 1.0f;                      }                      else if (g_value == 21)                      {                          // Metric Mode                          scale = 1.0f / (25.4f);                      }                      else if (g_value == 90)                      {                          // Absolute Programming                          //Console.WriteLine("Absolute Programming");                      }                      else                      {                          Console.WriteLine("G code is not understood: " + s);                      }                  }              }
Magic Number,Router,GCodeLoader,C:\repos\xenovacivus_PathCAM\Router\GCodeLoader.cs,Load,The following statement contains a magic number: foreach (string s in lines)              {                  Regex r = new Regex("^G(?<G_VALUE>\\d+)");                  if (r.IsMatch (s))                  {                      Match m = r.Match(s);                      Int32 g_value = Int32.Parse (m.Groups["G_VALUE"].Value);                        if (g_value == 0 || g_value == 1)                      {                          // Rapid positioning or linear interpolation                          // Go to X' Y' Z at feedrate F.                          Vector3 fromPoint = new Vector3(x' y' z);                          GetFloat(s' "F"' ref speed);                          GetFloat(s' "X"' ref x);                          GetFloat(s' "Y"' ref y);                          GetFloat(s' "Z"' ref z);                          Vector3 toPoint = new Vector3(x' y' z);                            // If the XYZ params weren't specified or didn't change' don't do a move.                          // If only speed changed' that's ok; it has been updated for the next move.                          if ((toPoint - fromPoint).Length > 0)                          {                              var speedType = g_value == 0 ? MoveTool.SpeedType.Rapid : MoveTool.SpeedType.Cutting;                              commands.Add(new MoveTool(toPoint * scale' speedType));                          }                                                }                      else if (g_value == 4)                      {                          // Dwell Time (X' U' or P): dwell time in milliseconds                      }                      else if (g_value == 20)                      {                          // Inch Mode                          scale = 1.0f;                      }                      else if (g_value == 21)                      {                          // Metric Mode                          scale = 1.0f / (25.4f);                      }                      else if (g_value == 90)                      {                          // Absolute Programming                          //Console.WriteLine("Absolute Programming");                      }                      else                      {                          Console.WriteLine("G code is not understood: " + s);                      }                  }              }
Magic Number,Router,Router,C:\repos\xenovacivus_PathCAM\Router\Router.cs,RoutPath,The following statement contains a magic number: foreach (Vector3 point in line.Vertices)              {                  // TODO: Pick some unit and stick with it!  Inches would be fine.                  Vector3 pointOffset = point + offset;                                    MoveTool m = new MoveTool(pointOffset' MoveTool.SpeedType.Cutting);                  if (first)                  {                      first = false;                        if ((finalPosition.Xy - pointOffset.Xy).Length > .0001)                      {                          // Need to move the router up' over to new position' then down again.                          MoveTool m1 = new MoveTool(new Vector3(finalPosition.X' finalPosition.Y' move_height)' MoveTool.SpeedType.Rapid);                          MoveTool m2 = new MoveTool(new Vector3(m.Target.X' m.Target.Y' move_height)' MoveTool.SpeedType.Rapid);                          AddCommand(m1);                          AddCommand(m2);                      }                  }                  AddCommand(m);              }
Magic Number,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: float actualCutDepth = (maxZ - minZ - 2*skin) / layers;
Magic Number,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,GetSlices,The following statement contains a magic number: actualCutDepth = Math.Min(maxZ - minZ - 2*skin' actualCutDepth);
Magic Number,Router.Paths,PathPlanner,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,DrawSlice,The following statement contains a magic number: GL.PointSize(2);
Magic Number,Router.Paths,PathTree,C:\repos\xenovacivus_PathCAM\Router\Paths\PathPlanner.cs,Draw,The following statement contains a magic number: GL.Translate(0' 0' 10);
Magic Number,Router.Paths,Tabs,C:\repos\xenovacivus_PathCAM\Router\Paths\Tabs.cs,TestAddPoint,The following statement contains a magic number: if (i > 1 && (points[i - 2] - point).Length < 0.0001f && (points[i - 1].Xy - point.Xy).Length < 0.0001f)              {                  points.RemoveAt(i - 1);              }              else              {                  if (i > 0 && (points[i - 1] - point).Length < 0.0001f)                  {                      // Don't add a duplicate point                  }                  else                  {                      points.Add(point);                  }              }
