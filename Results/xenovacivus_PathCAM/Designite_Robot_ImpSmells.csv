Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Robot,SerialPacket,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessByte,Cyclomatic complexity of the method is 8
Long Statement,Robot,GrblMoveCommand,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,GenerateCommand,The length of the statement  "                String s = String.Format("F{0:F3}\r\nG1 X{1:F4} Y{2:F4} Z{3:F4}\r\n?"' target_mm_per_minute' target_mm.X' target_mm.Y' target_mm.Z); " is 132.
Long Statement,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The length of the statement  "                //Console.WriteLine("{0}' {1}' {2}' {3}' l = {4}' paused = {5}' pausing = {6}' resuming = {7}"' time' currentPosition.X' currentPosition.Y' currentPosition.Z' locations' paused' pausing' resuming); " is 197.
Long Statement,Robot,RobotDetectionCommand,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,DumpData,The length of the statement  "                var retString = "{ " + string.Join(" "' accumulator.Select(b => string.Format("{0:X2}"' b)).ToArray()) + " } " + s.TrimEnd(new char [] {'\r'' '\n'}); " is 149.
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromShort,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromShort,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  bytes[i] = (byte)((s >> (i * 8)) & 0xFF);              }
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromShort,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  bytes[i] = (byte)((s >> (i * 8)) & 0xFF);              }
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromInt,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromInt,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  bytes[i] = (byte)((value >> (i * 8)) & 0xFF);              }
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,BytesFromInt,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  bytes[i] = (byte)((value >> (i * 8)) & 0xFF);              }
Magic Number,Robot,DataConverter,C:\repos\xenovacivus_PathCAM\Robot\DataConverter.cs,IntFromBytes,The following statement contains a magic number: foreach (byte b in bytes)              {                  raw |= ((int)b) << shifter;                  shifter += 8;              }
Magic Number,Robot,GrblCommandGenerator,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessGrblByte,The following statement contains a magic number: if (response.EndsWith(">\r\n"))              {                  // Found the last character in an unbuffered command                  var start = response.IndexOf('<');                  var unbuffered_command = response.Substring(start' response.Length - (start + 2));                  dataBuffer.Remove(start' dataBuffer.Length - start);                  return unbuffered_command;              }              else if (response.EndsWith("\r\n"))              {                  var buffered_command = response.Substring(0' response.Length - 2);                  dataBuffer = new StringBuilder();                  return buffered_command;              }
Magic Number,Robot,GrblCommandGenerator,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessGrblByte,The following statement contains a magic number: if (response.EndsWith(">\r\n"))              {                  // Found the last character in an unbuffered command                  var start = response.IndexOf('<');                  var unbuffered_command = response.Substring(start' response.Length - (start + 2));                  dataBuffer.Remove(start' dataBuffer.Length - start);                  return unbuffered_command;              }              else if (response.EndsWith("\r\n"))              {                  var buffered_command = response.Substring(0' response.Length - 2);                  dataBuffer = new StringBuilder();                  return buffered_command;              }
Magic Number,Robot,GrblStatusCommand,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: if (result != null)                  {                      Console.WriteLine("Received GRBL Data: " + result);                      if (result.Equals("ok"' StringComparison.OrdinalIgnoreCase))                      {                          canAcceptMoveCommand = true;                      }                      else if (result.StartsWith("<") && result.EndsWith(">"))                      {                          // Status response will look like this:                          // <Idle'MPos:1.000'1.000'1.000'WPos:1.000'1.000'1.000>                          // TODO: more robust parsing for the GRBL status string                          string inside = result.Substring(1' result.Length - 2);                          bool mpos_found = false;                          List<float> position = new List<float>();                          foreach (var s in inside.Split(new char[] { '''' ':' }))                          {                              if (mpos_found && position.Count < 3)                              {                                  position.Add(float.Parse(s));                              }                              else if (s.Equals("mpos"' StringComparison.OrdinalIgnoreCase))                              {                                  mpos_found = true;                              }                              else if (s.Equals("idle"' StringComparison.OrdinalIgnoreCase))                              {                                  canAcceptMoveCommand = true;                              }                              else if (s.Equals("queue"' StringComparison.OrdinalIgnoreCase))                              {                                  paused = true;                              }                              else if (s.Equals("hold"' StringComparison.OrdinalIgnoreCase))                              {                                  pausing = true;                              }                          }                          if (position.Count != 3)                          {                              return false;                          }                          location.X = position[0];                          location.Y = position[1];                          location.Z = position[2];                          location = location / 25.4f;                          return true;                      }                      else                      {                          Console.WriteLine("Command Not Understood: " + result);                      }                  }
Magic Number,Robot,GrblStatusCommand,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: if (result != null)                  {                      Console.WriteLine("Received GRBL Data: " + result);                      if (result.Equals("ok"' StringComparison.OrdinalIgnoreCase))                      {                          canAcceptMoveCommand = true;                      }                      else if (result.StartsWith("<") && result.EndsWith(">"))                      {                          // Status response will look like this:                          // <Idle'MPos:1.000'1.000'1.000'WPos:1.000'1.000'1.000>                          // TODO: more robust parsing for the GRBL status string                          string inside = result.Substring(1' result.Length - 2);                          bool mpos_found = false;                          List<float> position = new List<float>();                          foreach (var s in inside.Split(new char[] { '''' ':' }))                          {                              if (mpos_found && position.Count < 3)                              {                                  position.Add(float.Parse(s));                              }                              else if (s.Equals("mpos"' StringComparison.OrdinalIgnoreCase))                              {                                  mpos_found = true;                              }                              else if (s.Equals("idle"' StringComparison.OrdinalIgnoreCase))                              {                                  canAcceptMoveCommand = true;                              }                              else if (s.Equals("queue"' StringComparison.OrdinalIgnoreCase))                              {                                  paused = true;                              }                              else if (s.Equals("hold"' StringComparison.OrdinalIgnoreCase))                              {                                  pausing = true;                              }                          }                          if (position.Count != 3)                          {                              return false;                          }                          location.X = position[0];                          location.Y = position[1];                          location.Z = position[2];                          location = location / 25.4f;                          return true;                      }                      else                      {                          Console.WriteLine("Command Not Understood: " + result);                      }                  }
Magic Number,Robot,GrblStatusCommand,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: if (result != null)                  {                      Console.WriteLine("Received GRBL Data: " + result);                      if (result.Equals("ok"' StringComparison.OrdinalIgnoreCase))                      {                          canAcceptMoveCommand = true;                      }                      else if (result.StartsWith("<") && result.EndsWith(">"))                      {                          // Status response will look like this:                          // <Idle'MPos:1.000'1.000'1.000'WPos:1.000'1.000'1.000>                          // TODO: more robust parsing for the GRBL status string                          string inside = result.Substring(1' result.Length - 2);                          bool mpos_found = false;                          List<float> position = new List<float>();                          foreach (var s in inside.Split(new char[] { '''' ':' }))                          {                              if (mpos_found && position.Count < 3)                              {                                  position.Add(float.Parse(s));                              }                              else if (s.Equals("mpos"' StringComparison.OrdinalIgnoreCase))                              {                                  mpos_found = true;                              }                              else if (s.Equals("idle"' StringComparison.OrdinalIgnoreCase))                              {                                  canAcceptMoveCommand = true;                              }                              else if (s.Equals("queue"' StringComparison.OrdinalIgnoreCase))                              {                                  paused = true;                              }                              else if (s.Equals("hold"' StringComparison.OrdinalIgnoreCase))                              {                                  pausing = true;                              }                          }                          if (position.Count != 3)                          {                              return false;                          }                          location.X = position[0];                          location.Y = position[1];                          location.Z = position[2];                          location = location / 25.4f;                          return true;                      }                      else                      {                          Console.WriteLine("Command Not Understood: " + result);                      }                  }
Magic Number,Robot,GrblStatusCommand,C:\repos\xenovacivus_PathCAM\Robot\GrblCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: if (result != null)                  {                      Console.WriteLine("Received GRBL Data: " + result);                      if (result.Equals("ok"' StringComparison.OrdinalIgnoreCase))                      {                          canAcceptMoveCommand = true;                      }                      else if (result.StartsWith("<") && result.EndsWith(">"))                      {                          // Status response will look like this:                          // <Idle'MPos:1.000'1.000'1.000'WPos:1.000'1.000'1.000>                          // TODO: more robust parsing for the GRBL status string                          string inside = result.Substring(1' result.Length - 2);                          bool mpos_found = false;                          List<float> position = new List<float>();                          foreach (var s in inside.Split(new char[] { '''' ':' }))                          {                              if (mpos_found && position.Count < 3)                              {                                  position.Add(float.Parse(s));                              }                              else if (s.Equals("mpos"' StringComparison.OrdinalIgnoreCase))                              {                                  mpos_found = true;                              }                              else if (s.Equals("idle"' StringComparison.OrdinalIgnoreCase))                              {                                  canAcceptMoveCommand = true;                              }                              else if (s.Equals("queue"' StringComparison.OrdinalIgnoreCase))                              {                                  paused = true;                              }                              else if (s.Equals("hold"' StringComparison.OrdinalIgnoreCase))                              {                                  pausing = true;                              }                          }                          if (position.Count != 3)                          {                              return false;                          }                          location.X = position[0];                          location.Y = position[1];                          location.Z = position[2];                          location = location / 25.4f;                          return true;                      }                      else                      {                          Console.WriteLine("Command Not Understood: " + result);                      }                  }
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: time = ((float)DataConverter.IntFromBytes(data_list.GetRange(15' 4))) / 10.0f;
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: time = ((float)DataConverter.IntFromBytes(data_list.GetRange(15' 4))) / 10.0f;
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: currentPosition = new Vector3(                      DataConverter.FloatFromBytes(data_list.GetRange(1' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(5' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(9' 4)));
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: currentPosition = new Vector3(                      DataConverter.FloatFromBytes(data_list.GetRange(1' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(5' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(9' 4)));
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: currentPosition = new Vector3(                      DataConverter.FloatFromBytes(data_list.GetRange(1' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(5' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(9' 4)));
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: currentPosition = new Vector3(                      DataConverter.FloatFromBytes(data_list.GetRange(1' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(5' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(9' 4)));
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: currentPosition = new Vector3(                      DataConverter.FloatFromBytes(data_list.GetRange(1' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(5' 4))'                      DataConverter.FloatFromBytes(data_list.GetRange(9' 4)));
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: byte status_bits = data[13];
Magic Number,Robot,StatusCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessResponse,The following statement contains a magic number: locations = (int)(data[14]);
Magic Number,Robot,MoveCommand,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,MoveCommand,The following statement contains a magic number: this.thousandths_per_second = (UInt16)(inches_per_second * 1000);
Magic Number,Robot,Robot,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,Robot,The following statement contains a magic number: t.Interval = 50;
Magic Number,Robot,Robot,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,t_Elapsed,The following statement contains a magic number: lock (thisLock)              {                  if (elapsedCounter > timeout_ms)                  {                      if (currentCommand != null && currentCommand is RobotDetectionCommand)                      {                          Console.WriteLine("Unexpected Response from robot detection: " + (currentCommand as RobotDetectionCommand).DumpData());                      }                      // Expected reply not received within 1 second' assume command was lost.                      Console.WriteLine("Device Timeout!");                  }                    if (serial == null || !serial.IsOpen || elapsedCounter > timeout_ms)                  {                      lastPositionKnown = false;                      commandGenerator = null;                      currentCommand = null;                      elapsedCounter = 0;                  }                  else                  {                      if (currentCommand == null)                      {                          currentCommand = new RobotDetectionCommand();                          serial.Transmit(currentCommand.GenerateCommand());                          elapsedCounter = 0;                      }                      else                      {                          elapsedCounter += 50;                      }                  }              }
Magic Number,Robot,RobotDetectionCommand,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,ProcessResponse,The following statement contains a magic number: if (binaryStatusCommand != null)                  {                      // The response will be a binary status command' just forward the data and wait until it's good.                      return binaryStatusCommand.ProcessResponse(data);                  }                  else                  {                      // Look for an ASCII communicating robot (like GRBL)                      var s = System.Text.Encoding.ASCII.GetString(accumulator.ToArray());                        if (s.EndsWith("\r\n"' StringComparison.OrdinalIgnoreCase))                      {                          if (s.StartsWith("Grbl ") && s.Length >= 9)                          {                              var version = s.Substring(5' 3);                              float version_float = 0.0f;                              if (float.TryParse(version' out version_float) && version_float >= 0.8f)                              {                                  Console.WriteLine("Compatible Grbl type robot found: " + s.Substring(0' 9));                                  commandGenerator = new GrblCommandGenerator();                                  return true;                              }                          }                          else                          {                              // Seems like a GRBL type robot' but the start of the string wasn't right.  Maybe some garbage                              // or an extra \r\n' clear it out and wait for more.                              accumulator.Clear();                          }                      }                  }
Magic Number,Robot,RobotDetectionCommand,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,ProcessResponse,The following statement contains a magic number: if (binaryStatusCommand != null)                  {                      // The response will be a binary status command' just forward the data and wait until it's good.                      return binaryStatusCommand.ProcessResponse(data);                  }                  else                  {                      // Look for an ASCII communicating robot (like GRBL)                      var s = System.Text.Encoding.ASCII.GetString(accumulator.ToArray());                        if (s.EndsWith("\r\n"' StringComparison.OrdinalIgnoreCase))                      {                          if (s.StartsWith("Grbl ") && s.Length >= 9)                          {                              var version = s.Substring(5' 3);                              float version_float = 0.0f;                              if (float.TryParse(version' out version_float) && version_float >= 0.8f)                              {                                  Console.WriteLine("Compatible Grbl type robot found: " + s.Substring(0' 9));                                  commandGenerator = new GrblCommandGenerator();                                  return true;                              }                          }                          else                          {                              // Seems like a GRBL type robot' but the start of the string wasn't right.  Maybe some garbage                              // or an extra \r\n' clear it out and wait for more.                              accumulator.Clear();                          }                      }                  }
Magic Number,Robot,RobotDetectionCommand,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,ProcessResponse,The following statement contains a magic number: if (binaryStatusCommand != null)                  {                      // The response will be a binary status command' just forward the data and wait until it's good.                      return binaryStatusCommand.ProcessResponse(data);                  }                  else                  {                      // Look for an ASCII communicating robot (like GRBL)                      var s = System.Text.Encoding.ASCII.GetString(accumulator.ToArray());                        if (s.EndsWith("\r\n"' StringComparison.OrdinalIgnoreCase))                      {                          if (s.StartsWith("Grbl ") && s.Length >= 9)                          {                              var version = s.Substring(5' 3);                              float version_float = 0.0f;                              if (float.TryParse(version' out version_float) && version_float >= 0.8f)                              {                                  Console.WriteLine("Compatible Grbl type robot found: " + s.Substring(0' 9));                                  commandGenerator = new GrblCommandGenerator();                                  return true;                              }                          }                          else                          {                              // Seems like a GRBL type robot' but the start of the string wasn't right.  Maybe some garbage                              // or an extra \r\n' clear it out and wait for more.                              accumulator.Clear();                          }                      }                  }
Magic Number,Robot,RobotDetectionCommand,C:\repos\xenovacivus_PathCAM\Robot\Robot.cs,ProcessResponse,The following statement contains a magic number: if (binaryStatusCommand != null)                  {                      // The response will be a binary status command' just forward the data and wait until it's good.                      return binaryStatusCommand.ProcessResponse(data);                  }                  else                  {                      // Look for an ASCII communicating robot (like GRBL)                      var s = System.Text.Encoding.ASCII.GetString(accumulator.ToArray());                        if (s.EndsWith("\r\n"' StringComparison.OrdinalIgnoreCase))                      {                          if (s.StartsWith("Grbl ") && s.Length >= 9)                          {                              var version = s.Substring(5' 3);                              float version_float = 0.0f;                              if (float.TryParse(version' out version_float) && version_float >= 0.8f)                              {                                  Console.WriteLine("Compatible Grbl type robot found: " + s.Substring(0' 9));                                  commandGenerator = new GrblCommandGenerator();                                  return true;                              }                          }                          else                          {                              // Seems like a GRBL type robot' but the start of the string wasn't right.  Maybe some garbage                              // or an extra \r\n' clear it out and wait for more.                              accumulator.Clear();                          }                      }                  }
Missing Default,Robot,SerialPacket,C:\repos\xenovacivus_PathCAM\Robot\PacketizedCommandGenerator.cs,ProcessByte,The following switch statement is missing a default case: switch (receive_state)                  {                      case ReceiveState.AwaitingStartByte:                          receive_next_char_is_escaped = false;                          receive_state = ReceiveState.AwaitingAddress;                          break;                                            case ReceiveState.AwaitingAddress:                          receive_address = data;                          receive_checksum = data;                          receive_state = ReceiveState.AwaitingLength;                          break;                                            case ReceiveState.AwaitingLength:                          receive_length = data;                          receive_checksum += data;                          receive_data.Clear();                          receive_state = ReceiveState.AwaitingData;                          break;                                            case ReceiveState.AwaitingData:                          receive_checksum += data;                          receive_data.Add(data);                          if (--receive_length == 0)                          {                              receive_state = ReceiveState.AwaitingChecksum;                          }                          break;                                            case ReceiveState.AwaitingChecksum:                          receive_state = ReceiveState.AwaitingStartByte;                          receive_checksum = (byte)~receive_checksum;                          if (data != receive_checksum)                          {                              Console.WriteLine("Serial Error: Checksum Mismatch");                              return null;                          }                          return receive_data.ToArray();                  }
