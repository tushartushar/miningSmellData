Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Geometry,AnalyzedTriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\AnalyzedTriangleMesh.cs,Analyze,Cyclomatic complexity of the method is 8
Complex Method,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,Cyclomatic complexity of the method is 12
Complex Method,Geometry,OBJ_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\OBJ_Loader.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Geometry,Polygon,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Polygon.cs,ToTriangles,Cyclomatic complexity of the method is 9
Complex Method,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Triangles,Cyclomatic complexity of the method is 12
Long Statement,Geometry,AnalyzedTriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\AnalyzedTriangleMesh.cs,Analyze,The length of the statement  "            Func<Triangle' bool> TopTriangleCriteria = triangle => Vector3.Dot(triangle.Plane.Normal' Vector3.UnitZ) == 1 && triangle.A.Z == MaxPoint.Z; " is 140.
Long Statement,Geometry,AnalyzedTriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\AnalyzedTriangleMesh.cs,Analyze,The length of the statement  "            Func<Triangle' bool> BottomTriangleCriteria = triangle => Vector3.Dot(triangle.Plane.Normal' Vector3.UnitZ) == -1 && triangle.A.Z == MinPoint.Z; " is 144.
Long Statement,Geometry,AnalyzedTriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\AnalyzedTriangleMesh.cs,Analyze,The length of the statement  "            Func<Triangle' bool> PocketCriteria1 = triangle => !TopTriangleCriteria(triangle) && Vector3.Dot(triangle.Plane.Normal' Vector3.UnitZ) > 0; " is 139.
Long Statement,Geometry,AnalyzedTriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\AnalyzedTriangleMesh.cs,Analyze,The length of the statement  "            Func<Triangle' bool> PocketCriteria2 = triangle => !TopTriangleCriteria(triangle) && Vector3.Dot(triangle.Plane.Normal' Vector3.UnitZ) >= 0; " is 140.
Long Statement,Geometry,OBJ_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\OBJ_Loader.cs,Load,The length of the statement  "            // Lines starting with f are a face.  The indices are <vertex>/<texture>/<normal>' where texture and normal are optional. " is 121.
Long Statement,Geometry,OBJ_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\OBJ_Loader.cs,Load,The length of the statement  "            Regex faceRegex = new Regex(@"^f(?<face_data>\s+(?<vertex>\d+)/?(?<texture_coordinate>\d+)?/?(?<vertex_normal>\d+)?)+"' RegexOptions.IgnoreCase); " is 145.
Long Statement,Geometry,Plane,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Plane.cs,Distance,The length of the statement  "            Vector3 target = ray.Start + alongRay * ray.Direction; // This should be on the plane - if not' the distance has the wrong sign. " is 128.
Long Statement,Geometry,Plane,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Plane.cs,Distance,The length of the statement  "            Vector3 target2 = ray.Start - alongRay * ray.Direction; // Rather than compare with zero' which is not deterministic' compare with the possible result if the plane were behind the ray. " is 184.
Complex Conditional,Geometry,Polygon,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Polygon.cs,ToTriangles,The conditional expression  "otherPoint != v1 && otherPoint != v2 && otherPoint != v3 && tri.IsPointInTriangle(otherPoint)"  is complex.
Complex Conditional,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,GetLines,The conditional expression  "type == LineType.All || (hole && type == LineType.Hole) || (!hole && type == LineType.Outside)"  is complex.
Complex Conditional,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,GetPairs,The conditional expression  "(outside && test < 2) || (!outside && test >= 2)"  is complex.
Magic Number,Geometry,LineSegmentCircleIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,LineSegmentCircleIntersect,The following statement contains a magic number: float along = (float)Math.Sqrt(Math.Pow(circleRadius' 2) - Math.Pow(distanceToLine' 2));
Magic Number,Geometry,LineSegmentCircleIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,LineSegmentCircleIntersect,The following statement contains a magic number: float along = (float)Math.Sqrt(Math.Pow(circleRadius' 2) - Math.Pow(distanceToLine' 2));
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: List<Vector3> vertices = new List<Vector3>(3);
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: List<float> distances = new List<float>(3);
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: float d2 = distances[(i + 1) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: float d3 = distances[(i + 2) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: float d3 = distances[(i + 2) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: Vector3 v2 = vertices[(i + 1) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: Vector3 v3 = vertices[(i + 2) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: Vector3 v3 = vertices[(i + 2) % 3];
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: i < 3
Magic Number,Geometry,TrianglePlaneIntersect,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Intersect.cs,TrianglePlaneIntersect,The following statement contains a magic number: onPlane.Count == 2
Magic Number,Geometry,DAE_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\DAE_Loader.cs,Load,The following statement contains a magic number: Vector3 v = new Vector3(floats[i]' floats[i + 1]' floats[i + 2]);
Magic Number,Geometry,DAE_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\DAE_Loader.cs,Load,The following statement contains a magic number: triMesh.AddTriangle(vertices[indices[i]]' vertices[indices[i + 1]]' vertices[indices[i + 2]]);
Magic Number,Geometry,STL_Loader,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Loaders\STL_Loader.cs,Load,The following statement contains a magic number: triMesh.AddTriangle(new Triangle(vertices[0]' vertices[1]' vertices[2]));
Magic Number,Geometry,Plane,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Plane.cs,CreateMatrix,The following statement contains a magic number: Math.Abs(Normal.Z) > 0.8
Magic Number,Geometry,Polygon,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Polygon.cs,ToTriangles,The following statement contains a magic number: vertices.Count == 3
Magic Number,Geometry,Polygon,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Polygon.cs,ToTriangles,The following statement contains a magic number: Vector3 v3 = vertices[(i + 2) % verts];
Magic Number,Geometry,Polygon,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Polygon.cs,ToTriangles,The following statement contains a magic number: vertices.Count >= 3
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Slice,The following statement contains a magic number: Vector3 offset = plane.Normal * 0.0001f * (float)i;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Slice,The following statement contains a magic number: co.ArcTolerance = scale * 0.0001f;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Slice,The following statement contains a magic number: co.Execute(ref this.polyTree' scale * width / 2.0f);
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Offset,The following statement contains a magic number: co.ArcTolerance = scale * .0001f;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Offset,The following statement contains a magic number: offsetPaths = Clipper.CleanPolygons(offsetPaths' scale * .0001f);
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Triangles,The following statement contains a magic number: double perpendicularX = ((double)longestAlong.Y * (double)scale * 0.001d) / longest;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Triangles,The following statement contains a magic number: double perpendicularY = -((double)longestAlong.X * (double)scale * 0.001d) / longest;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Triangles,The following statement contains a magic number: geometry.AddHole(perpendicularX + from.X + longestAlong.X / 2.0d'                                  perpendicularY + from.Y + longestAlong.Y / 2.0d);
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,Triangles,The following statement contains a magic number: geometry.AddHole(perpendicularX + from.X + longestAlong.X / 2.0d'                                  perpendicularY + from.Y + longestAlong.Y / 2.0d);
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,GetPairs,The following statement contains a magic number: int test = (depth - 1) % 4;
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,GetPairs,The following statement contains a magic number: (outside && test < 2) || (!outside && test >= 2)
Magic Number,Geometry,Slice,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\Slice.cs,GetPairs,The following statement contains a magic number: (outside && test < 2) || (!outside && test >= 2)
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: e.Vertices.Count() != 2
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: Vector3 oppositePoint = vertices[vertexIndices1[(longestEdgeIndex + 2) % 3]];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: Vector3 oppositePoint = vertices[vertexIndices1[(longestEdgeIndex + 2) % 3]];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int a = vertexIndices2[(splitEdgeIndex + 1) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int b = vertexIndices2[(splitEdgeIndex + 2) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int b = vertexIndices2[(splitEdgeIndex + 2) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int c = vertexIndices2[(splitEdgeIndex + 3) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int c = vertexIndices2[(splitEdgeIndex + 3) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int d = vertexIndices1[(longestEdgeIndex + 2) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: int d = vertexIndices1[(longestEdgeIndex + 2) % 3];
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,Clean,The following statement contains a magic number: edge.LineSegment.Distance(oppositePoint) < (epsilon / 2.0f)
Magic Number,Geometry,TriangleMesh,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,SetTriangleEdgePointers,The following statement contains a magic number: tri.edges[2].triangles.Add(tri);
Magic Number,Geometry,TriangleIndices,D:\research\architectureSmells\repos\xenovacivus_PathCAM\Geometry\TriangleMesh.cs,LongestEdgeIndex,The following statement contains a magic number: i < 3
