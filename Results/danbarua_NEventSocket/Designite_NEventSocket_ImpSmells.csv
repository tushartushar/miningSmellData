Implementation smell,Namespace,Class,File,Method,Description
Long Method,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,InitializeSubscriptions,The method has 103 lines of code.
Complex Method,NEventSocket.Logging.LogProviders,NLogLogger,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,Log,Cyclomatic complexity of the method is 14
Complex Method,NEventSocket.Logging.LogProviders,NLogLogger,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,LogException,Cyclomatic complexity of the method is 12
Complex Method,NEventSocket.Logging.LogProviders,SerilogLogger,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,Log,Cyclomatic complexity of the method is 14
Complex Method,NEventSocket.Logging.LogProviders,SerilogLogger,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,LogException,Cyclomatic complexity of the method is 12
Complex Method,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,Cyclomatic complexity of the method is 11
Complex Method,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,ExecuteApplication,Cyclomatic complexity of the method is 8
Long Parameter List,NEventSocket,OriginateExtensions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\OriginateExtensions.cs,Originate,The method has 6 parameters. Parameters: socket' endpoint' extension' dialplan' context' options
Long Parameter List,NEventSocket,OriginateExtensions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\OriginateExtensions.cs,Originate,The method has 5 parameters. Parameters: socket' endpoint' options' application' applicationArgs
Long Parameter List,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,ExecuteApplication,The method has 6 parameters. Parameters: uuid' application' applicationArguments' eventLock' async' loops
Long Identifier,NEventSocket.Logging,LogProvider,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,,The length of the parameter DisableLoggingEnvironmentVariable is 33.
Long Identifier,NEventSocket.Logging.LogProviders,Log4NetLogProvider,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,GetOpenNdcMethod,The length of the parameter logicalThreadContextStacksType is 30.
Long Identifier,NEventSocket.Logging.LogProviders,Log4NetLogProvider,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the parameter logicalThreadContextPropertiesType is 34.
Long Identifier,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,AttendedTransfer,The length of the parameter cAnsweredThenBPressedStarOrHungUp is 33.
Long Identifier,NEventSocket.Util.ObjectPooling,SharedPoolExtensions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Util\ObjectPooling\SharedPoolExtensions.cs,,The length of the parameter StringBuilderCapacityThreshold is 30.
Long Statement,NEventSocket.Logging.LogProviders,Log4NetLogProvider,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,GetOpenMdcMethod,The length of the statement  "            BinaryExpression setProperties = Expression.Assign(Expression.Property(propertiesExpression' propertiesIndexerProperty' keyParam)' valueParam); " is 143.
Long Statement,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,PlayUntilCancelled,The length of the statement  "            await eventSocket.SendCommand(string.Format("sendmsg {0}\ncall-command: execute\nexecute-app-name: playback\nexecute-app-arg:{1}\nloops:-1"' UUID' file)); " is 154.
Long Statement,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,AttendedTransfer,The length of the statement  "                subscriptions.Add(Observable.When(cAnsweredThenHungUp.Then((answer' hangup' execComplete) => new { answer' hangup' execComplete })) " is 131.
Long Statement,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,AttendedTransfer,The length of the statement  "                subscriptions.Add(Observable.When(cAnsweredThenBPressedStarOrHungUp.Then((answer' hangup' bridge) => new { answer' hangup' bridge })) " is 133.
Long Statement,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,AttendedTransfer,The length of the statement  "                subscriptions.Add(Observable.When(bLegHangup.And(cLegAnswer).And(aLegBridge.Where(x => x.OtherLegUUID != bLegUUID)).Then((hangup' answer' bridge) => new { answer' hangup' bridge })) " is 181.
Long Statement,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,StartRecording,The length of the statement  "                                "Channel {0} received a request to record to file {1} while currently recording to file {2}. Channel will stop recording and start recording to the new file." " is 158.
Long Statement,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,Create,The length of the statement  "            await outboundSocket.Filter(HeaderNames.UniqueId' outboundSocket.ChannelData.UUID).ConfigureAwait(false); //filter for our unique id (in case using full socket mode) " is 165.
Long Statement,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,Create,The length of the statement  "            await outboundSocket.Filter(HeaderNames.OtherLegUniqueId' outboundSocket.ChannelData.UUID).ConfigureAwait(false); //filter for channels bridging to our unique id " is 161.
Long Statement,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,Create,The length of the statement  "            await outboundSocket.Filter(HeaderNames.ChannelCallUniqueId' outboundSocket.ChannelData.UUID).ConfigureAwait(false); //filter for channels bridging to our unique id " is 164.
Long Statement,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,InitializeSubscriptions,The length of the statement  "                                Log.Error(() => "Unable to get CHANNEL_DATA info from 'api uuid_dump {0}' - received '{1}'.".Fmt(x.OtherLegUUID' apiResponse.BodyText)); " is 136.
Long Statement,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The length of the statement  "                return string.Format("{0}!digits/million.wav!{1}"' ToFileString(Math.Abs(count / 1000000))' ToFileString(count % 1000000' true)); " is 129.
Long Statement,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The length of the statement  "                return string.Format("{0}!digits/thousand.wav!{1}"' ToFileString(Math.Abs(count / 1000))' ToFileString(count % 1000' true)); " is 124.
Long Statement,NEventSocket,OriginateExtensions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\OriginateExtensions.cs,InternalOriginate,The length of the statement  "            await socket.SubscribeEvents(EventName.ChannelAnswer' EventName.ChannelHangup' EventName.ChannelProgress).ConfigureAwait(false); " is 128.
Long Statement,NEventSocket,InboundSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\InboundSocket.cs,Connect,The length of the statement  "                    throw new InboundSocketConnectionFailedException("Connection Rejected - '{0}'. Check the acl in eventsocket.conf".Fmt(firstMessage.BodyText)); " is 142.
Long Statement,NEventSocket,InboundSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\InboundSocket.cs,Connect,The length of the statement  "                throw new InboundSocketConnectionFailedException("Timeout when trying to connect to {0}:{1}.{2}".Fmt(host' port' ex.Message)' ex); " is 130.
Long Statement,NEventSocket.FreeSwitch,AttendedTransferResult,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\AttendedTransferResult.cs,Hangup,The length of the statement  "                throw new InvalidOperationException("Expected event of type ChannelHangup' got {0} instead".Fmt(hangupMessage.EventName)); " is 122.
Long Statement,NEventSocket.FreeSwitch,AttendedTransferResult,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\AttendedTransferResult.cs,Hangup,The length of the statement  "            return new AttendedTransferResult() { HangupCause = hangupMessage.HangupCause' Status = AttendedTransferResultStatus.Failed }; " is 126.
Long Statement,NEventSocket.FreeSwitch,ConferenceEvent,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\ConferenceEvent.cs,ToString,The length of the statement  "            return string.Format("Action: {1}' ConferenceUUID: {2}' CurrentEnergy: {3}' EnergyLevel: {4}' Floor: {5}' Hear: {6}' MemberId: {7}' MemberType: {8}' MuteDetect: {9}' Name: {10}' Size: {11}' Speak: {12}' Talking: {13}' Video: {14}"' base.ToString()' Action' ConferenceUUID' CurrentEnergy' EnergyLevel' Floor' Hear' MemberId' MemberType' MuteDetect' Name' Size' Speak' Talking' Video); " is 383.
Long Statement,NEventSocket.FreeSwitch,OriginateOptions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\OriginateOptions.cs,GetHashCode,The length of the statement  "                return ((ChannelVariables != null ? ChannelVariables.GetHashCode() : 0) * 397) ^ (parameters != null ? parameters.GetHashCode() : 0); " is 133.
Long Statement,NEventSocket.Util,AsyncLock,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Util\AsyncLock.cs,LockAsync,The length of the statement  "                       : wait.ContinueWith((_' state) => (IDisposable)state' releaser.Result' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 164.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,ExecuteApplication,The length of the statement  "            sb.AppendFormat("sendmsg {0}\nEvent-UUID: {1}\ncall-command: execute\nexecute-app-name: {2}\n"' uuid' applicationUUID' application); " is 132.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,ExecuteApplication,The length of the statement  "                sb.AppendFormat("content-type: text/plain\ncontent-length: {0}\n\n{1}\n"' applicationArguments.Length' applicationArguments); " is 125.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,BackgroundJob,The length of the statement  "                        .Do(result => Log.Debug(() => "BackgroundJobResult received [{0}] for [{1}]".Fmt(result.BodyText.Replace("\n"' string.Empty)' command))' " is 136.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Bridge,The length of the statement  "            /* If the bridge fails to connect we'll get a CHANNEL_EXECUTE_COMPLETE event with a failure message and the Execute task will complete. " is 135.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Bridge,The length of the statement  "             * In this case' we want to return a result as soon as the b-leg picks up and connects so we'll merge with the CHANNEL_BRIDGE event " is 130.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Bridge,The length of the statement  "                ChannelEvents.FirstOrDefaultAsync(x => x.UUID == uuid && (x.EventName == EventName.ChannelBridge || x.EventName == EventName.ChannelHangup)) " is 140.
Long Statement,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Bridge,The length of the statement  "                                            Log.Debug(() => "Bridge [{0} - {1}]  aborted' channel hangup [{2}]".Fmt(uuid' options.UUID' e.Headers[HeaderNames.HangupCause])); " is 129.
Complex Conditional,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,RunIfAnswered,The conditional expression  "disposed.Value || !eventSocket.IsConnected || !IsAnswered && (!orPreAnswered || !IsPreAnswered)"  is complex.
Magic Number,NEventSocket.Logging,ColouredConsoleLogProvider,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Logging\ColouredConsoleLogger.cs,DefaultMessageFormatter,The following statement contains a magic number: stringBuilder.Append(("[" + level.ToString().ToUpper() + "]").PadRight(8));
Magic Number,NEventSocket.Logging.LogProviders,LoupeLogger,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,LoupeLogger,The following statement contains a magic number: _skipLevel = 2;
Magic Number,NEventSocket.Logging.LogProviders,LogMessageFormatter,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\App_Packages\LibLog.4.2\LibLog.cs,SimulateStructuredLogging,The following statement contains a magic number: return () =>              {                  string targetMessage = messageBuilder();                  int argumentIndex = 0;                  foreach (Match match in Pattern.Matches(targetMessage))                  {                      int notUsed;                      if (!int.TryParse(match.Value.Substring(1' match.Value.Length -2)' out notUsed))                      {                          targetMessage = ReplaceFirst(targetMessage' match.Value'                              "{" + argumentIndex++ + "}");                      }                  }                  try                  {                      return string.Format(CultureInfo.InvariantCulture' targetMessage' formatParameters);                  }                  catch (FormatException ex)                  {                      throw new FormatException("The input string '" + targetMessage + "' could not be formatted using string.Format"' ex);                  }              };
Magic Number,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,FeatureCodes,The following statement contains a magic number: return eventSocket                         .ChannelEvents.Where(x => x.UUID == UUID && x.EventName == EventName.Dtmf)                         .Select(x => x.Headers[HeaderNames.DtmfDigit])                         .Buffer(TimeSpan.FromSeconds(2)' 2)                         .Where(x => x.Count == 2 && x[0] == prefix)                         .Select(x => string.Concat(x))                         .Do(x => Log.Debug(() => "Channel {0} detected Feature Code {1}".Fmt(UUID' x)));
Magic Number,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,FeatureCodes,The following statement contains a magic number: return eventSocket                         .ChannelEvents.Where(x => x.UUID == UUID && x.EventName == EventName.Dtmf)                         .Select(x => x.Headers[HeaderNames.DtmfDigit])                         .Buffer(TimeSpan.FromSeconds(2)' 2)                         .Where(x => x.Count == 2 && x[0] == prefix)                         .Select(x => string.Concat(x))                         .Do(x => Log.Debug(() => "Channel {0} detected Feature Code {1}".Fmt(UUID' x)));
Magic Number,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,FeatureCodes,The following statement contains a magic number: return eventSocket                         .ChannelEvents.Where(x => x.UUID == UUID && x.EventName == EventName.Dtmf)                         .Select(x => x.Headers[HeaderNames.DtmfDigit])                         .Buffer(TimeSpan.FromSeconds(2)' 2)                         .Where(x => x.Count == 2 && x[0] == prefix)                         .Select(x => string.Concat(x))                         .Do(x => Log.Debug(() => "Channel {0} detected Feature Code {1}".Fmt(UUID' x)));
Magic Number,NEventSocket.Channels,BasicChannel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\BasicChannel.cs,SendDTMF,The following statement contains a magic number: var durationMs = duration.HasValue ? duration.Value.TotalMilliseconds : 2000;
Magic Number,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,Channel,The following statement contains a magic number: LingerTime = 10;
Magic Number,NEventSocket.Channels,Channel,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Channels\Channel.cs,InitializeSubscriptions,The following statement contains a magic number: Disposables.Add(                      eventSocket.ChannelEvents.Where(x => x.UUID == UUID && x.EventName == EventName.ChannelHangupComplete)                                 .Subscribe(                                     async e =>                                     {                                         if (ExitOnHangup)                                         {                                             //give event subscribers time to complete                                             if (LingerTime > 0)                                             {                                                 Log.Debug(() => "Channel[{0}] will exit in {1} seconds...".Fmt(UUID' LingerTime));                                                 await Task.Delay(LingerTime * 1000);                                             }                                               if (eventSocket != null)                                             {                                                 Log.Info(() => "Channel [{0}] exiting".Fmt(UUID));                                                 await eventSocket.Exit().ConfigureAwait(false);                                             }                                               Dispose();                                         }                                     }));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("{0}!digits/million.wav"' ToFileString(Math.Abs(count / 1000000)));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count % 1000000 == 0
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("{0}!digits/million.wav!{1}"' ToFileString(Math.Abs(count / 1000000))' ToFileString(count % 1000000' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("{0}!digits/million.wav!{1}"' ToFileString(Math.Abs(count / 1000000))' ToFileString(count % 1000000' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count >= 1000000
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/thousand.wav"' count / 1000);
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count % 1000 == 0
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("{0}!digits/thousand.wav!{1}"' ToFileString(Math.Abs(count / 1000))' ToFileString(count % 1000' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("{0}!digits/thousand.wav!{1}"' ToFileString(Math.Abs(count / 1000))' ToFileString(count % 1000' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count >= 1000 && count < 1000000
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count >= 1000 && count < 1000000
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/hundred.wav"' count / 100);
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count % 100 == 0
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/hundred.wav!{1}"' Math.Abs(count / 100)' ToFileString(count % 100' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/hundred.wav!{1}"' Math.Abs(count / 100)' ToFileString(count % 100' true));
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count >= 100 && count < 1000
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count >= 100 && count < 1000
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/{1}.wav"' Math.Abs(count / 10) * 10' count % 10);
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/{1}.wav"' Math.Abs(count / 10) * 10' count % 10);
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: return string.Format("digits/{0}.wav!digits/{1}.wav"' Math.Abs(count / 10) * 10' count % 10);
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count > 20 && count <= 99
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count > 20 && count <= 99
Magic Number,NEventSocket,Digits,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Digits.cs,ToFileString,The following statement contains a magic number: count > 0 && count <= 20
Magic Number,NEventSocket.FreeSwitch,BridgeOptions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\BridgeOptions.cs,GetHashCode,The following statement contains a magic number: return (parameters.GetHashCode() * 397) ^ ChannelVariables.GetHashCode();
Magic Number,NEventSocket.FreeSwitch,OriginateOptions,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\OriginateOptions.cs,GetHashCode,The following statement contains a magic number: return ((ChannelVariables != null ? ChannelVariables.GetHashCode() : 0) * 397) ^ (parameters != null ? parameters.GetHashCode() : 0);
Magic Number,NEventSocket.FreeSwitch,EventMessage,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\FreeSwitch\EventMessage.cs,EventMessage,The following statement contains a magic number: delimiterIndex == -1 || delimiterIndex == basicMessage.BodyText.Length - 2
Magic Number,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,EventSocket,The following statement contains a magic number: ResponseTimeOut = responseTimeOut ?? TimeSpan.FromSeconds(5);
Magic Number,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Exit,The following statement contains a magic number: subscriptions.Add(                      Messages.Where(x => x.ContentType == ContentTypes.DisconnectNotice)                              .Take(1)                              .Timeout(                                  TimeSpan.FromSeconds(2)'                                  Observable.Throw<BasicMessage>(new TimeoutException("No Disconnect Notice received.")))                              .Subscribe(                                  x =>                                      {                                          Log.Debug(() => "Disconnect Notice received [{0}]".Fmt(x.BodyText));                                          tcs.TrySetResult(x);                                      }'                                  ex =>                                      {                                          Log.ErrorException("Error waiting for Disconnect Notice"' ex);                                          if (ex is TimeoutException)                                          {                                              tcs.TrySetResult(null);                                          }                                          else                                          {                                              tcs.TrySetException(ex);                                          }                                      }'                                  () =>                                      {                                          subscriptions.Dispose();                                          tcs.TrySetResult(null);                                      }));
Missing Default,NEventSocket.Sockets,EventSocket,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket\Sockets\EventSocket.cs,Bridge,The following switch statement is missing a default case: switch (e.EventName)                                      {                                          case EventName.ChannelBridge:                                              Log.Debug(() => "Bridge [{0} - {1}] complete - {2}".Fmt(uuid' options.UUID' e.Headers[HeaderNames.OtherLegUniqueId]));                                              break;                                          case EventName.ChannelHangup:                                              Log.Debug(() => "Bridge [{0} - {1}]  aborted' channel hangup [{2}]".Fmt(uuid' options.UUID' e.Headers[HeaderNames.HangupCause]));                                              break;                                      }
