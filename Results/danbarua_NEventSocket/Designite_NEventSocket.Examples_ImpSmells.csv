Implementation smell,Namespace,Class,File,Method,Description
Long Method,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The method has 194 lines of code.
Long Method,NEventSocket.Examples.Examples,InboundSocketExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\InboundSocketExample.cs,Run,The method has 144 lines of code.
Long Statement,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The length of the statement  "                            ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red()); " is 144.
Long Statement,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The length of the statement  "                        await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen())); " is 126.
Long Statement,NEventSocket.Examples.Examples,ConferenceExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ConferenceExample.cs,Run,The length of the statement  "                                            ColorConsole.WriteLine("Channel ".DarkRed()' channel.UUID.Red()' " Member ".DarkRed()' x.MemberId.Red()' " stopped talking".DarkRed()); " is 135.
Long Statement,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The length of the statement  "                        //let's pretend we did a database or service registry lookup to find the socket server we want to route to - localhost:8085 in this example " is 139.
Long Statement,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The length of the statement  "                        await connection.Api("sched_api +0.01 none uuid_transfer {0} 'socket:127.0.0.1:8085 async full' inline".Fmt(connection.ChannelData.UUID)); " is 138.
Long Statement,NEventSocket.Examples.Examples,PlayGetDigitsExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\PlayGetDigitsExample.cs,Run,The length of the statement  "                ColorConsole.WriteLine("{0} {1} {2}".Fmt(originate.ChannelData.EventName' originate.ChannelData.AnswerState' originate.ChannelData.ChannelState).Blue()); " is 153.
Long Statement,NEventSocket.Examples.Examples,InboundSocketExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\InboundSocketExample.cs,Run,The length of the statement  "                    //"c:/temp/recording_{0}.wav".Fmt(uuid); //"$${recordings_dir}/" + "{0}.wav".Fmt(uuid); //"c:/temp/recording_{0}.wav".Fmt(uuid); " is 128.
Long Statement,NEventSocket.Examples.Examples,LoadTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,Run,The length of the statement  "            ColorConsole.WriteLine("Spinning up ".DarkGreen()' settings.MaxClients.ToString().Green()' " InboundSockets".DarkGreen()); " is 122.
Long Statement,NEventSocket.Examples.Examples,LoadTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,Run,The length of the statement  "            ColorConsole.WriteLine("They will connect and subscribe to HeartBeat events then disconnect when the first Heartbeat has been received.".DarkGreen()); " is 150.
Empty Catch Block,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The method has an empty catch block.
Empty Catch Block,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The method has an empty catch block.
Empty Catch Block,NEventSocket.Examples.Examples,VoiceBlaster,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\VoiceBlaster.cs,Run,The method has an empty catch block.
Empty Catch Block,NEventSocket.Examples.Examples,VoiceBlaster,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\VoiceBlaster.cs,Run,The method has an empty catch block.
Empty Catch Block,NEventSocket.Examples.Examples,VoiceBlaster,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\VoiceBlaster.cs,Run,The method has an empty catch block.
Empty Catch Block,NEventSocket.Examples.Examples,LoadTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,Run,The method has an empty catch block.
Magic Number,NEventSocket.Examples,Util,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Util.cs,WaitForEnterKeyPress,The following statement contains a magic number: return                  Observable.Interval(TimeSpan.FromMilliseconds(100))                      .Where(_ => Console.KeyAvailable)                      .Select(_ => Console.ReadKey(false).Key)                      .FirstAsync(x => x == ConsoleKey.Enter)                      .ToTask(cancellation);
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener = new OutboundListener(8084);
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          channel.BridgedChannels.Subscribe(                              async bridgedChannel =>                              {                                  ColorConsole.WriteLine("New Bridged Channel  [{0}]".Fmt(bridgedChannel.UUID).DarkGreen());                                    bridgedChannel.HangupCallBack =                                      (e) =>                                          ColorConsole.WriteLine(                                              "Hangup Detected on B-Leg {0} {1}".Fmt(                                                  e.Headers[HeaderNames.CallerUniqueId]'                                                  e.Headers[HeaderNames.HangupCause]).Red());                                    ColorConsole.WriteLine("Enabling feature codes on the B-Leg: ".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#1".Yellow()' " to Play to both Legs".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#2".Yellow()' " to Play to A Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#3".Yellow()' " to Play to B Leg".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#7".Yellow()' " to Start Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#8".Yellow()' " to Stop Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#4".Yellow()' " to Pause Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#5".Yellow()' " to Resume Recording".DarkGreen());                                  ColorConsole.WriteLine("Press ".DarkGreen()' "#9".Yellow()' " for attended transfer".DarkGreen());                                    await channel.SetChannelVariable("RECORD_STEREO"' "true");                                  var recordingPath = RecordingPath + channel.UUID + ".wav";                                    bridgedChannel.FeatureCodes("#").Subscribe(                                      async x =>                                      {                                          try                                          {                                              ColorConsole.WriteLine("Detected Feature Code: ".DarkYellow()' x);                                              switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }                                          }                                          catch (OperationCanceledException ex)                                          {                                              ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                                              ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                                          }                                      });                              });                            channel.HangupCallBack = (e) =>                          {                              ColorConsole.WriteLine("Hangup Detected on A-Leg {0} {1}".Fmt(e.Headers[HeaderNames.CallerUniqueId]' e.Headers[HeaderNames.HangupCause]).Red());                              ColorConsole.WriteLine("Aleg bridge {0}".Fmt(channel.GetVariable("last_bridge_hangup_cause")).OnRed());                          };                            await channel.Answer();                            var queueHoldMusic = await channel.PlayUntilCancelled(MusicOnHold);                            await Task.Delay(5000);                            await channel.Play(new[]                                             {                                                 "ivr/ivr-you_are_number.wav"'                                                 123456.ToFileString()'                                                 "ivr/ivr-in_line.wav"                                             });                            await Task.Delay(5000);                            queueHoldMusic.Dispose();                            var bridgeOptions = new BridgeOptions()                          {                              UUID = Guid.NewGuid().ToString()'                              IgnoreEarlyMedia = true'                              RingBack = RingTone'                              ContinueOnFail = true'                              HangupAfterBridge = true'                              TimeoutSeconds = 10'                              CallerIdName = channel.GetVariable("effective_caller_id_name")'                              CallerIdNumber =                                                      channel.GetVariable("effective_caller_id_number")'                          };                              await channel.SetChannelVariable(                                         "transfer_ringback"'                                         "tone_stream://%(400'200'400'450);%(400'2000'400'450);loops=-1");                              await channel.BridgeTo(AgentEndPoint' bridgeOptions' (e) => ColorConsole.WriteLine("Bridge Progress Ringing...".DarkGreen()));                            if (!channel.IsBridged)                          {                              ColorConsole.WriteLine("Bridge Failed - {0}".Fmt(channel.Variables.BridgeHangupCause).Red());                              await channel.Play("ivr/ivr-call_rejected.wav");                              await channel.Hangup(HangupCause.NormalTemporaryFailure);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ConferenceExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ConferenceExample.cs,Run,The following statement contains a magic number: listener = new OutboundListener(8084);
Magic Number,NEventSocket.Examples.Examples,ConferenceExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ConferenceExample.cs,Run,The following statement contains a magic number: listener.Channels.Subscribe(                  async channel =>                  {                      try                      {                          var serverIpAddress = channel.GetHeader("FreeSWITCH-IPv4");                          var destinationNumber = channel.GetHeader("Channel-Destination-Number");                            ColorConsole.WriteLine("Connection from server "' serverIpAddress.Blue()' " for number"' destinationNumber.Blue());                            if (conferenceServerIp != null && conferenceServerIp != serverIpAddress)                          {                              //the conference has started on a different server' redirect to that server                              await channel.Execute("redirect"' "sip:" + destinationNumber + "@" + conferenceServerIp);                          }                          else                          {                              //either conference has not started yet or it has started on this server                                  await channel.Answer();                              await channel.Sleep(400);                              await channel.Play("ivr/ivr-welcome_to_freeswitch.wav");                                await channel.Socket.SubscribeCustomEvents(CustomEvents.Conference.Maintainence);                                if (conferenceIsStarted)                              {                                  //prompt user for their name                                    var nameFile = string.Concat(TempFolder' channel.UUID' ".wav");                                  ColorConsole.WriteLine("Recording name file to "' nameFile.Blue());                                      await channel.Play("ivr/ivr-say_name.wav");                                  await channel.Play("tone_stream://%(500'0'500)");                                  await channel.Execute("record"' nameFile + " 10 200 1");                                    //when this member enters the conference' play the announcement                                  channel.Socket.ConferenceEvents.FirstAsync(x => x.Action == ConferenceAction.AddMember)                                      .Subscribe(                                          _ => channel.Socket.Api("conference {0} play file_string://{1}!conference/conf-has_joined.wav"                                              .Fmt(ConferenceId' nameFile)));                              }                              else                              {                                  //first person in the conference' no need to record their name                                  conferenceIsStarted = true;                                  conferenceServerIp = serverIpAddress;                              }                                channel.Socket.ConferenceEvents                                  .Subscribe(x =>                                  {                                      // the channel's socket event stream is already filtered to that channel.                                      // for all other conference maintainence events' use a dedicated inbound socket                                        ColorConsole.WriteLine("Got conf event ".DarkYellow()' x.Action.ToString().Yellow());                                      switch (x.Action)                                      {                                          case ConferenceAction.StartTalking:                                              ColorConsole.WriteLine(                                                  "Channel ".DarkGreen()' channel.UUID.Green()' " Member ".Green()' x.MemberId.Green()' " started talking".DarkGreen());                                              break;                                          case ConferenceAction.StopTalking:                                              ColorConsole.WriteLine("Channel ".DarkRed()' channel.UUID.Red()' " Member ".DarkRed()' x.MemberId.Red()' " stopped talking".DarkRed());                                              break;                                      }                                        ColorConsole.WriteLine(x.ToString().DarkGray());                                  });                                //if we await the result of this' we'll get OperationCanceledException on hangup                              await channel.Socket.ExecuteApplication(channel.UUID' "conference"' ConferenceArgs);                          }                      }                      catch (OperationCanceledException ex)                      {                          ColorConsole.WriteLine("TaskCancelled - shutting down\r\n{0}".Fmt(ex.ToString()).OnRed());                          ColorConsole.WriteLine("Channel {0} is {1}".Fmt(channel.UUID' channel.Answered).OnRed());                      }                  });
Magic Number,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The following statement contains a magic number: listener = new OutboundListener(8084);
Magic Number,NEventSocket.Examples.Examples,ForwardOutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ForwardOutboundSocketTest.cs,Run,The following statement contains a magic number: listener2 = new OutboundListener(8085);
Magic Number,NEventSocket.Examples.Examples,VoiceBlaster,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\VoiceBlaster.cs,Run,The following statement contains a magic number: var checkCallCount = new Task(                          async () =>                              {                                  try                                  {                                      while (!ourCancellationToken.IsCancellationRequested)                                      {                                          var res = await client.SendApi("show calls count");                                          Console.WriteLine("Current Calls Count " + Convert.ToInt32(res.BodyText.Split(' ')[0]));                                          currentCallCount = Convert.ToInt32(res.BodyText.Split(' ')[0]);                                          await Task.Delay(2000);                                      }                                  }                                  catch (OperationCanceledException)                                  {                                      //shutdown                                  }                              });
Magic Number,NEventSocket.Examples.Examples,VoiceBlaster,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\VoiceBlaster.cs,Dialler,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,NEventSocket.Examples.Examples,PlayGetDigitsExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\PlayGetDigitsExample.cs,Run,The following statement contains a magic number: client = await InboundSocket.Connect("127.0.0.1"' 8021' "ClueCon"' TimeSpan.FromSeconds(20));
Magic Number,NEventSocket.Examples.Examples,PlayGetDigitsExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\PlayGetDigitsExample.cs,Run,The following statement contains a magic number: client = await InboundSocket.Connect("127.0.0.1"' 8021' "ClueCon"' TimeSpan.FromSeconds(20));
Magic Number,NEventSocket.Examples.Examples,PlayGetDigitsExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\PlayGetDigitsExample.cs,Run,The following statement contains a magic number: var originate =                  await                  client.Originate(                      "user/1000"'                      new OriginateOptions                      {                          CallerIdNumber = "123456789"'                          CallerIdName = "Dan Leg A"'                          HangupAfterBridge = false'                          TimeoutSeconds = 20                      });
Magic Number,NEventSocket.Examples.Examples,DtmfExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\DtmfExample.cs,Run,The following statement contains a magic number: client = await InboundSocket.Connect("127.0.0.1"' 8021' "ClueCon"' TimeSpan.FromSeconds(20));
Magic Number,NEventSocket.Examples.Examples,DtmfExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\DtmfExample.cs,Run,The following statement contains a magic number: client = await InboundSocket.Connect("127.0.0.1"' 8021' "ClueCon"' TimeSpan.FromSeconds(20));
Magic Number,NEventSocket.Examples.Examples,DtmfExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\DtmfExample.cs,Run,The following statement contains a magic number: var originate =                  await                      client.Originate(                          "user/1000"'                          new OriginateOptions                          {                              CallerIdNumber = "123456789"'                              CallerIdName = "Dan Leg A"'                              HangupAfterBridge = false'                              TimeoutSeconds = 20                          });
Magic Number,NEventSocket.Examples.Examples,InboundSocketExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\InboundSocketExample.cs,Run,The following statement contains a magic number: var originate =                      await                          client.Originate(                                "user/1000"'                              new OriginateOptions                              {                                  CallerIdNumber = "123456789"'                                  CallerIdName = "Dan Leg A"'                                  HangupAfterBridge = false'                                  TimeoutSeconds = 20'                              });
Magic Number,NEventSocket.Examples.Examples,LoadTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,Run,The following statement contains a magic number: Parallel.For(0' settings.MaxClients'                  async (_) =>                  {                      long clientId = 0;                      if (cancellationToken.IsCancellationRequested)                      {                          return;                      }                        try                      {                          using (                              InboundSocket client =                                  await                                      InboundSocket.Connect(                                          "127.0.0.1"'                                          8021'                                          "ClueCon"'                                          TimeSpan.FromSeconds(settings.ConnectionTimeoutSeconds)))                          {                              clientId = client.Id;                              await client.SubscribeEvents(EventName.Heartbeat);                                EventMessage heartbeat =                                  await client.Events.FirstOrDefaultAsync(x => x.EventName == EventName.Heartbeat).ToTask(cancellationToken);                              if (heartbeat != null)                              {                                  Interlocked.Increment(ref heartbeatsReceived);                                  ColorConsole.WriteLine("Client ".DarkCyan()' clientId.ToString()' " reporting in ".DarkCyan());                              }                          }                      }                      catch (InboundSocketConnectionFailedException ex)                      {                          if (ex.InnerException != null && ex.InnerException is TimeoutException)                          {                              ColorConsole.WriteLine("Auth Timeout".OnDarkRed());                          }                          else                          {                              ColorConsole.WriteLine("Connection failure ".OnDarkRed()' ex.Message.DarkRed());                          }                          Interlocked.Increment(ref authFailures);                      }                      catch (TaskCanceledException)                      {                        }                  });
Magic Number,NEventSocket.Examples.Examples,LoadTestSettings,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,LoadTestSettings,The following statement contains a magic number: MaxClients = 512;
Magic Number,NEventSocket.Examples.Examples,LoadTestSettings,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\LoadTest.cs,LoadTestSettings,The following statement contains a magic number: ConnectionTimeoutSeconds = 30;
Magic Number,NEventSocket.Examples.Examples,OutboundSocketTest,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\OutboundSocketTest.cs,Run,The following statement contains a magic number: listener = new OutboundListener(8084);
Missing Default,NEventSocket.Examples.Examples,ChannelExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ChannelExample.cs,Run,The following switch statement is missing a default case: switch (x)                                              {                                                  case "#1":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.Both);                                                      break;                                                  case "#2":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.ALeg);                                                      break;                                                  case "#3":                                                      await channel.Play("ivr/ivr-welcome_to_freeswitch.wav"' Leg.BLeg);                                                      break;                                                  case "#4":                                                      ColorConsole.WriteLine("Mask recording".Yellow());                                                      await channel.MaskRecording();                                                      await channel.Play("ivr/ivr-recording_paused.wav"' Leg.BLeg);                                                      break;                                                  case "#5":                                                      ColorConsole.WriteLine("Unmask recording".Yellow());                                                      await channel.UnmaskRecording();                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.BLeg);                                                      break;                                                  case "#8":                                                      ColorConsole.WriteLine("Stop recording".Yellow());                                                      await channel.StopRecording();                                                      await channel.Play("ivr/ivr-recording_stopped.wav"' Leg.Both);                                                      break;                                                  case "#7":                                                      ColorConsole.WriteLine("Start recording".Yellow());                                                      await channel.StartRecording(recordingPath);                                                      await channel.Play("ivr/ivr-begin_recording.wav"' Leg.Both);                                                      break;                                                  case "#9":                                                      ColorConsole.WriteLine("Attended x-fer".Yellow());                                                      await                                                          Task.WhenAll(                                                              channel.Play("ivr/ivr-call_being_transferred.wav")'                                                              bridgedChannel.Play("misc/transfer1.wav"));                                                        var holdMusic = await channel.PlayUntilCancelled(MusicOnHold);                                                        var digits =                                                          await                                                              bridgedChannel.Read(                                                                  new ReadOptions                                                                  {                                                                      MinDigits = 3'                                                                      MaxDigits = 4'                                                                      Prompt = DialTone'                                                                      TimeoutMs = 30000'                                                                      Terminators = "#"                                                                  });                                                        if (digits.Result != ReadResultStatus.Success || digits.Digits.Length != 4)                                                      {                                                          holdMusic.Dispose();                                                      }                                                      else                                                      {                                                          await bridgedChannel.SetChannelVariable("recording_follow_attxfer"' "true");                                                          await bridgedChannel.SetChannelVariable("origination_cancel_key"' "#");                                                          await bridgedChannel.SetChannelVariable("transfer_ringback"' RingTone);                                                            var xfer = await bridgedChannel.AttendedTransfer("user/{0}".Fmt(digits));                                                          holdMusic.Dispose();                                                            ColorConsole.WriteLine(                                                              "Xfer ".Yellow()'                                                              xfer.Status.ToString().DarkYellow()'                                                              " "'                                                              xfer.HangupCause.GetValueOrDefault().ToString());                                                              if (xfer.Status != AttendedTransferResultStatus.Failed)                                                          {                                                              await channel.Play("misc/transfer2.wav"' Leg.Both);                                                          }                                                          else                                                          {                                                              if (xfer.HangupCause == HangupCause.CallRejected)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-call_rejected.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.NoUserResponse                                                                       || xfer.HangupCause == HangupCause.NoAnswer)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-no_user_response.wav");                                                              }                                                              else if (xfer.HangupCause == HangupCause.UserBusy)                                                              {                                                                  await bridgedChannel.Play("ivr/ivr-user_busy.wav");                                                              }                                                              else                                                              {                                                                  await                                                                      bridgedChannel.Play(                                                                          "ivr/ivr-call_cannot_be_completed_as_dialed.wav");                                                              }                                                          }                                                      }                                                        break;                                              }
Missing Default,NEventSocket.Examples.Examples,ConferenceExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\ConferenceExample.cs,Run,The following switch statement is missing a default case: switch (x.Action)                                      {                                          case ConferenceAction.StartTalking:                                              ColorConsole.WriteLine(                                                  "Channel ".DarkGreen()' channel.UUID.Green()' " Member ".Green()' x.MemberId.Green()' " started talking".DarkGreen());                                              break;                                          case ConferenceAction.StopTalking:                                              ColorConsole.WriteLine("Channel ".DarkRed()' channel.UUID.Red()' " Member ".DarkRed()' x.MemberId.Red()' " stopped talking".DarkRed());                                              break;                                      }
Missing Default,NEventSocket.Examples.Examples,InboundSocketExample,D:\research\architectureSmells\repos\danbarua_NEventSocket\src\NEventSocket.Examples\Examples\InboundSocketExample.cs,Run,The following switch statement is missing a default case: switch (dtmf)                                      {                                          case "1":                                              ColorConsole.WriteLine("Mask recording".Green());                                              await client.SendApi("uuid_record {0} mask {1}".Fmt(uuid' recordingPath));                                              await                                                  client.ExecuteApplication(                                                      uuid'                                                      "displace_session"'                                                      applicationArguments: "{0} m".Fmt("ivr/ivr-recording_paused.wav"));                                              break;                                          case "2":                                              ColorConsole.WriteLine("Unmask recording".Green());                                              await client.SendApi("uuid_record {0} unmask {1}".Fmt(uuid' recordingPath));                                              await                                                  client.ExecuteApplication(                                                      uuid'                                                      "displace_session"'                                                      applicationArguments: "{0} m".Fmt("ivr/ivr-begin_recording.wav"));                                              break;                                          case "3":                                              ColorConsole.WriteLine("Stop recording".Green());                                              await client.SendApi("uuid_record {0} stop {1}".Fmt(uuid' recordingPath));                                              await                                                  client.ExecuteApplication(                                                      uuid'                                                      "displace_session"'                                                      applicationArguments: "{0} m".Fmt("ivr/ivr-recording_stopped.wav"));                                              break;                                      }
