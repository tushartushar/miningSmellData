Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Hill30.Boo.MSBuildUtilities,Booc,C:\repos\mfeingold_Boo-Plugin\MSBuildUtilities\Booc.cs,GenerateCommandLineCommands,Cyclomatic complexity of the method is 17
Magic Number,Hill30.Boo.MSBuildUtilities,Booc,C:\repos\mfeingold_Boo-Plugin\MSBuildUtilities\Booc.cs,GenerateFullPathToTool,The following statement contains a magic number: return Path.Combine(Path.GetDirectoryName(GetType().Assembly.CodeBase.Substring(8))' ToolName);
Missing Default,Hill30.Boo.MSBuildUtilities,Booc,C:\repos\mfeingold_Boo-Plugin\MSBuildUtilities\Booc.cs,GenerateCommandLineCommands,The following switch statement is missing a default case: switch (resource.GetMetadata("Type"))                  {                      case "Resx":                          commandLine.AppendSwitchIfNotNull("-resource:"' resource.ItemSpec + "'" + resource.GetMetadata("LogicalName"));                          break;                      case "Non-Resx":                          commandLine.AppendSwitchIfNotNull("-embedres:"' resource.ItemSpec + "'" + resource.GetMetadata("LogicalName"));                          break;                  }
Missing Default,Hill30.Boo.MSBuildUtilities,Booc,C:\repos\mfeingold_Boo-Plugin\MSBuildUtilities\Booc.cs,LogEventsFromTextOutput,The following switch statement is missing a default case: switch (messageImportance)              {                  case MessageImportance.Normal:                      var warningPatternMatch = warningPattern.Match(singleLine);                      var errorPatternMatch = errorPattern.Match(singleLine);                      if (warningPatternMatch.Success)                      {                          int lineNumber;                          if (!int.TryParse(warningPatternMatch.Groups["line"].Value' out lineNumber))                              lineNumber = 0;                          int columnNumber;                          if (!int.TryParse(warningPatternMatch.Groups["column"].Value' out columnNumber))                              columnNumber = 0;                          Log.LogWarning(                              null'                              warningPatternMatch.Groups["code"].Value'                              null'                              warningPatternMatch.Groups["file"].Value'                              lineNumber'                              columnNumber'                              0'                              0'                              warningPatternMatch.Groups["message"].Value                              );                      }                      else if (errorPatternMatch.Success)                      {                          var code = errorPatternMatch.Groups["code"].Value;                          if (string.IsNullOrEmpty(code))                              code = "BCE0000";                          var file = errorPatternMatch.Groups["file"].Value;                          if (string.IsNullOrEmpty(file))                              file = "BOOC";                          int lineNumber;                          if (!int.TryParse(errorPatternMatch.Groups["line"].Value' out lineNumber))                              lineNumber = 0;                          int columnNumber;                          if (!int.TryParse(errorPatternMatch.Groups["column"].Value' out columnNumber))                              columnNumber = 0;                          Log.LogError(                              errorPatternMatch.Groups["errorType"].Value.ToLower()'                              code'                              null'                              file'                              lineNumber'                              columnNumber'                              0'                              0'                              errorPatternMatch.Groups["message"].Value                              );                      }                      break;              }
