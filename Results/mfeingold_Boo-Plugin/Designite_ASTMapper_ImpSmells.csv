Implementation smell,Namespace,Class,File,Method,Description
Long Method,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,ResolveImpl,The method has 99 lines of code.
Long Method,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The method has 66 lines of code.
Long Method,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,GetTokenType,The method has 69 lines of code.
Complex Method,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,ResolveImpl,Cyclomatic complexity of the method is 43
Complex Method,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,Record,Cyclomatic complexity of the method is 8
Complex Method,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,BooDeclarations,Cyclomatic complexity of the method is 16
Complex Method,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,Cyclomatic complexity of the method is 36
Complex Method,Hill30.Boo.ASTMapper,CompilerManager,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompilerManager.cs,MapParsedNodes,Cyclomatic complexity of the method is 7
Complex Method,Hill30.Boo.ASTMapper,CompilerManager,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompilerManager.cs,MapCompleted,Cyclomatic complexity of the method is 8
Complex Method,Hill30.Boo.ASTMapper,DropdownBarsManager,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\DropdownBarsManager.cs,ProcessMembers,Cyclomatic complexity of the method is 10
Complex Method,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapTokens,Cyclomatic complexity of the method is 17
Complex Method,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,Cyclomatic complexity of the method is 33
Complex Method,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,GetTokenType,Cyclomatic complexity of the method is 58
Long Parameter List,Hill30.Boo.ASTMapper.AST,MappedNode,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\AST\MappedNode.cs,MappedNode,The method has 4 parameters.
Long Parameter List,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,The method has 5 parameters.
Long Parameter List,Hill30.Boo.ASTMapper,CompilerMessage,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompilerMessage.cs,CompilerMessage,The method has 4 parameters.
Long Parameter List,Hill30.Boo.ASTMapper,DropdownBarsManager,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\DropdownBarsManager.cs,SelectCurrent,The method has 5 parameters.
Long Parameter List,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,CalculateEndpoint,The method has 4 parameters.
Long Statement,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,Record,The length of the statement  "		var oldref = token.Nodes.Where (node => (node.Node.NodeType == NodeType.ReferenceExpression && ((ReferenceExpression)node.Node).Name == ((ReferenceExpression)Node).Name)).FirstOrDefault (); " is 189.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatField,The length of the statement  "	if (field.IsPublic || field.IsInternal && (field is InternalField) || field.IsProtected && IsContextProtected (context' field.DeclaringType) || field.IsPrivate && IsContextPrivate (context' field.DeclaringType)) { " is 213.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatEvent,The length of the statement  "			ImageIndex = GetIconForNode (NodeType.Event' @event.IsPublic' /* @event.IsInternal */false' /*@event.IsProtected*/false' !@event.IsPublic) " is 138.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatProperty,The length of the statement  "	if (property.IsPublic || property.IsInternal && (property is InternalField) || property.IsProtected && IsContextProtected (context' property.DeclaringType) || property.IsPrivate && IsContextPrivate (context' property.DeclaringType)) { " is 234.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatProperty,The length of the statement  "			ImageIndex = GetIconForNode (NodeType.Property' property.IsPublic' property.IsInternal' property.IsProtected' property.IsPrivate) " is 129.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatMethod,The length of the statement  "	if (method.IsPublic || method.IsInternal && (method is InternalField) || method.IsProtected && IsContextProtected (context' method.DeclaringType) || method.IsPrivate && IsContextPrivate (context' method.DeclaringType)) { " is 220.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapParsingMessage,The length of the statement  "	if (token != null && token.Nodes.Where (n => n.Type != MappedNodeType.TypeDefiniton && n.Type != MappedNodeType.TypeMemberDefinition).Count () == 0) " is 148.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,GetClassificationSpans,The length of the statement  "	var classificationSpans = whitespaces.Select (whitespace => new ClassificationSpan (snapshotCreator (whitespace).TranslateTo (span.Snapshot' SpanTrackingMode.EdgeNegative)' classificationRegistry.GetClassificationType (Formats.BooBlockComment))).ToList (); " is 256.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,GetClassificationSpans,The length of the statement  "				classificationSpans.Add (new ClassificationSpan (snapshotCreator (node.TextSpan).TranslateTo (span.Snapshot' SpanTrackingMode.EdgeNegative)' classificationRegistry.GetClassificationType (node.Format))); " is 202.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,GetTags,The length of the statement  "		yield return new TagSpan<ErrorTag> (GetSnapshotSpan (spans [0].Snapshot' new SourceLocation (task.LexicalInfo.Line' task.LexicalInfo.Column)' snapshotCreator)' new ErrorTag (task.ErrorCategory == TaskErrorCategory.Error ? PredefinedErrorTypeNames.SyntaxError : PredefinedErrorTypeNames.Warning' task.Message)); " is 310.
Long Statement,Hill30.Boo.ASTMapper,TextSpanExtensions,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\TextSpanExtensions.cs,Union,The length of the statement  "		iStartIndex = self.iStartLine < span.iStartLine ? self.iStartIndex : self.iStartLine > span.iStartLine ? span.iStartIndex : Math.Min (self.iStartIndex' span.iStartIndex)' " is 170.
Long Statement,Hill30.Boo.ASTMapper,TextSpanExtensions,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\TextSpanExtensions.cs,Union,The length of the statement  "		iEndIndex = self.iEndLine < span.iEndLine ? span.iEndIndex : self.iEndLine > span.iEndLine ? self.iEndIndex : Math.Max (self.iEndIndex' span.iEndIndex)' " is 152.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatField,The conditional expression  "field.IsPublic || field.IsInternal && (field is InternalField) || field.IsProtected && IsContextProtected (context' field.DeclaringType) || field.IsPrivate && IsContextPrivate (context' field.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatProperty,The conditional expression  "property.IsPublic || property.IsInternal && (property is InternalField) || property.IsProtected && IsContextProtected (context' property.DeclaringType) || property.IsPrivate && IsContextPrivate (context' property.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatMethod,The conditional expression  "method.IsPublic || method.IsInternal && (method is InternalField) || method.IsProtected && IsContextProtected (context' method.DeclaringType) || method.IsPrivate && IsContextPrivate (context' method.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,TextSpanExtensions,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\TextSpanExtensions.cs,Union,The conditional expression  "self.iEndIndex == 0 && self.iEndLine == 0 && self.iStartIndex == 0 && self.iStartLine == 0"  is complex.
Empty Catch Block,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,NextToken,The method has an empty catch block.
Magic Number,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapTokens,The following statement contains a magic number: while ((token = NextToken (tokens)).Type != BooLexer.EOF) {  	Tuple<int' int> endPoint;  	switch (token.Type) {  	case BooLexer.INDENT:  	case BooLexer.DEDENT:  	case BooLexer.EOL:  	case BooLexer.ESEPARATOR:  		continue;  	case BooLexer.SINGLE_QUOTED_STRING:  	case BooLexer.DOUBLE_QUOTED_STRING:  		endPoint = CalculateEndpoint (token' endLine' endIndex' 1);  		break;  	case BooLexer.TRIPLE_QUOTED_STRING:  		endPoint = CalculateEndpoint (token' endLine' endIndex' 3);  		break;  	default:  		endPoint = CalculateEndpoint (token' endLine' endIndex' 0);  		break;  	}  	endLine = endPoint.Item1;  	endIndex = endPoint.Item2;  }  
Magic Number,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapTokens,The following statement contains a magic number: switch (token.Type) {  case BooLexer.INDENT:  case BooLexer.DEDENT:  case BooLexer.EOL:  case BooLexer.ESEPARATOR:  	continue;  case BooLexer.SINGLE_QUOTED_STRING:  case BooLexer.DOUBLE_QUOTED_STRING:  	endPoint = CalculateEndpoint (token' endLine' endIndex' 1);  	break;  case BooLexer.TRIPLE_QUOTED_STRING:  	endPoint = CalculateEndpoint (token' endLine' endIndex' 3);  	break;  default:  	endPoint = CalculateEndpoint (token' endLine' endIndex' 0);  	break;  }  
Magic Number,Hill30.Boo.ASTMapper,CompileResults,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapTokens,The following statement contains a magic number: endPoint = CalculateEndpoint (token' endLine' endIndex' 3);  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: if (current < token.GetMappedColumn () - 1) {  	tokenInfo.StartIndex = current;  	tokenInfo.EndIndex = Math.Min (endIndex' offset + token.GetMappedColumn () - 2);  	tokenInfo.Type = TokenType.Text;  	// it has to be Text rather than Comment' otherwise there will be no notification for the typing inside the token  	tokenInfo.Color = TokenColor.Comment;  	current = tokenInfo.EndIndex + 2;  	stashedToken = token;  	return true;  }  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: if (current < token.GetMappedColumn () - 1) {  	tokenInfo.StartIndex = current;  	tokenInfo.EndIndex = Math.Min (endIndex' offset + token.GetMappedColumn () - 2);  	tokenInfo.Type = TokenType.Text;  	// it has to be Text rather than Comment' otherwise there will be no notification for the typing inside the token  	tokenInfo.Color = TokenColor.Comment;  	current = tokenInfo.EndIndex + 2;  	stashedToken = token;  	return true;  }  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: tokenInfo.EndIndex = Math.Min (endIndex' offset + token.GetMappedColumn () - 2);  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: current = tokenInfo.EndIndex + 2;  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: switch (GetTokenType (token)) {  case BooTokenType.DocumentString:  	quotes = 6;  	tokenInfo.Type = TokenType.String;  	tokenInfo.Color = TokenColor.String;  	break;  case BooTokenType.String:  	quotes = 2;  	tokenInfo.Type = TokenType.String;  	tokenInfo.Color = TokenColor.String;  	break;  case BooTokenType.MemberSelector:  	tokenInfo.Type = TokenType.Text;  	tokenInfo.Color = TokenColor.Text;  	tokenInfo.Trigger = TokenTriggers.MemberSelect;  	break;  case BooTokenType.WhiteSpace:  	tokenInfo.Type = TokenType.WhiteSpace;  	tokenInfo.Color = TokenColor.Text;  	break;  case BooTokenType.Identifier:  	tokenInfo.Type = TokenType.Identifier;  	tokenInfo.Color = TokenColor.Text;  	break;  case BooTokenType.Keyword:  	tokenInfo.Type = TokenType.Keyword;  	tokenInfo.Color = TokenColor.Keyword;  	break;  default:  	tokenInfo.Color = TokenColor.Text;  	break;  }  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: switch (GetTokenType (token)) {  case BooTokenType.DocumentString:  	quotes = 6;  	tokenInfo.Type = TokenType.String;  	tokenInfo.Color = TokenColor.String;  	break;  case BooTokenType.String:  	quotes = 2;  	tokenInfo.Type = TokenType.String;  	tokenInfo.Color = TokenColor.String;  	break;  case BooTokenType.MemberSelector:  	tokenInfo.Type = TokenType.Text;  	tokenInfo.Color = TokenColor.Text;  	tokenInfo.Trigger = TokenTriggers.MemberSelect;  	break;  case BooTokenType.WhiteSpace:  	tokenInfo.Type = TokenType.WhiteSpace;  	tokenInfo.Color = TokenColor.Text;  	break;  case BooTokenType.Identifier:  	tokenInfo.Type = TokenType.Identifier;  	tokenInfo.Color = TokenColor.Text;  	break;  case BooTokenType.Keyword:  	tokenInfo.Type = TokenType.Keyword;  	tokenInfo.Color = TokenColor.Keyword;  	break;  default:  	tokenInfo.Color = TokenColor.Text;  	break;  }  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: quotes = 6;  
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: quotes = 2;  
Missing Default,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,BooDeclarations,The following switch statement is missing a default case: switch (member.EntityType) {  case EntityType.Method:  	FormatMethod (context' (IMethod)member' instance);  	break;  case EntityType.Property:  	FormatProperty (context' (IProperty)member' instance);  	break;  case EntityType.Event:  	FormatEvent (context' (IEvent)member' instance);  	break;  case EntityType.Field:  	FormatField (context' (IField)member' instance);  	break;  }  
Missing Default,Hill30.Boo.ASTMapper,BooDeclarations,D:\newReposJune17\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,The following switch statement is missing a default case: switch (type) {  case NodeType.Module:  	result = MODULE_ICONS;  	break;  case NodeType.ClassDefinition:  	result = CLASS_ICONS;  	break;  case NodeType.EnumDefinition:  	result = ENUM_ICONS;  	break;  case NodeType.StructDefinition:  	result = STRUCT_ICONS;  	break;  case NodeType.InterfaceDefinition:  	result = INTERFACE_ICONS;  	break;  case NodeType.EnumMember:  	result = ENUM_MEMBER_ICONS;  	break;  case NodeType.Method:  case NodeType.Constructor:  case NodeType.Destructor:  	result = METHOD_ICONS;  	break;  case NodeType.Property:  	result = PROPERTY_ICONS;  	break;  case NodeType.Field:  	result = FIELD_ICONS;  	break;  case NodeType.Event:  	result = EVENT_ICONS;  	break;  }  
