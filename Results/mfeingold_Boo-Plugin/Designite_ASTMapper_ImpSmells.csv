Implementation smell,Namespace,Class,File,Method,Description
Long Method,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,ResolveImpl,The method has 117 lines of code.
Complex Method,Hill30.Boo.ASTMapper.AST.Nodes,MappedReferenceExpression,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\AST\Nodes\MappedReferenceExpression.cs,ResolveImpl,Cyclomatic complexity of the method is 21
Complex Method,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,BooDeclarations,Cyclomatic complexity of the method is 8
Complex Method,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,Cyclomatic complexity of the method is 14
Complex Method,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,Cyclomatic complexity of the method is 10
Long Parameter List,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,The method has 5 parameters. Parameters: type' isPublic' isInternal' isProtected' isPrivate
Long Parameter List,Hill30.Boo.ASTMapper,DropdownBarsManager,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\DropdownBarsManager.cs,SelectCurrent,The method has 5 parameters. Parameters: line' col' selectedType' selectedMember' memberHighlight
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatEvent,The length of the statement  "                        ImageIndex = GetIconForNode(NodeType.Event' @event.IsPublic' /* @event.IsInternal */ false' /*@event.IsProtected*/ false' !@event.IsPublic) " is 139.
Long Statement,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatProperty,The length of the statement  "                            ImageIndex = GetIconForNode(NodeType.Property' property.IsPublic' property.IsInternal' property.IsProtected' property.IsPrivate) " is 128.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,CalculateEndpoint,The length of the statement  "                whitespaces.Add(new TextSpan { iStartLine = endLine' iStartIndex = endIndex' iEndLine = startLine' iEndIndex = startIndex }); " is 125.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,GetTags,The length of the statement  "                    GetSnapshotSpan(spans[0].Snapshot' new SourceLocation(task.LexicalInfo.Line' task.LexicalInfo.Column)' snapshotCreator)' " is 120.
Long Statement,Hill30.Boo.ASTMapper,CompileResults,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,GetTags,The length of the statement  "                        task.ErrorCategory == TaskErrorCategory.Error ? PredefinedErrorTypeNames.SyntaxError : PredefinedErrorTypeNames.Warning' " is 120.
Long Statement,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The length of the statement  "                    tokenInfo.Type = TokenType.Text;  // it has to be Text rather than Comment' otherwise there will be no notification for the typing inside the token " is 147.
Long Statement,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The length of the statement  "                tokenInfo.Type = TokenType.Text;  // it has to be Text rather than Comment' otherwise there will be no notification for the typing inside the token " is 147.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatField,The conditional expression  "field.IsPublic ||                  field.IsInternal && (field is InternalField) ||                  field.IsProtected && IsContextProtected(context' field.DeclaringType) ||                  field.IsPrivate && IsContextPrivate(context' field.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatProperty,The conditional expression  "property.IsPublic ||                  property.IsInternal && (property is InternalField) ||                  property.IsProtected && IsContextProtected(context' property.DeclaringType) ||                  property.IsPrivate && IsContextPrivate(context' property.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,FormatMethod,The conditional expression  "method.IsPublic ||                  method.IsInternal && (method is InternalField) ||                  method.IsProtected && IsContextProtected(context' method.DeclaringType) ||                  method.IsPrivate && IsContextPrivate(context' method.DeclaringType)"  is complex.
Complex Conditional,Hill30.Boo.ASTMapper,TextSpanExtensions,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\TextSpanExtensions.cs,Union,The conditional expression  "self.iEndIndex == 0 && self.iEndLine == 0 && self.iStartIndex == 0 && self.iStartLine == 0"  is complex.
Empty Catch Block,Hill30.Boo.ASTMapper,CompileResults,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,NextToken,The method has an empty catch block.
Magic Number,Hill30.Boo.ASTMapper,CompileResults,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\CompileResults.cs,MapTokens,The following statement contains a magic number: switch (token.Type)                  {                      case BooLexer.INDENT:                      case BooLexer.DEDENT:                      case BooLexer.EOL:                      case BooLexer.ESEPARATOR:                          continue;                      case BooLexer.SINGLE_QUOTED_STRING:                      case BooLexer.DOUBLE_QUOTED_STRING:                          endPoint = CalculateEndpoint(token' endLine' endIndex' 1);                          break;                      case BooLexer.TRIPLE_QUOTED_STRING:                          endPoint = CalculateEndpoint(token' endLine' endIndex' 3);                          break;                      default:                          endPoint = CalculateEndpoint(token' endLine' endIndex' 0);                          break;                  }
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: tokenInfo.EndIndex = Math.Min(endIndex' offset + token.GetMappedColumn() - 2);
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: current = tokenInfo.EndIndex + 2;
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: switch (GetTokenType(token))              {                  case BooTokenType.DocumentString:                      quotes = 6;                      tokenInfo.Type = TokenType.String;                      tokenInfo.Color = TokenColor.String;                      break;                    case BooTokenType.String:                      quotes = 2;                      tokenInfo.Type = TokenType.String;                      tokenInfo.Color = TokenColor.String;                      break;                    case BooTokenType.MemberSelector:                      tokenInfo.Type = TokenType.Text;                      tokenInfo.Color = TokenColor.Text;                      tokenInfo.Trigger = TokenTriggers.MemberSelect;                      break;                    case BooTokenType.WhiteSpace:                      tokenInfo.Type = TokenType.WhiteSpace;                      tokenInfo.Color = TokenColor.Text;                      break;                    case BooTokenType.Identifier:                      tokenInfo.Type = TokenType.Identifier;                      tokenInfo.Color = TokenColor.Text;                      break;                    case BooTokenType.Keyword:                      tokenInfo.Type = TokenType.Keyword;                      tokenInfo.Color = TokenColor.Keyword;                      break;                    default:                      tokenInfo.Color = TokenColor.Text;                      break;              }
Magic Number,Hill30.Boo.ASTMapper.Scanner,Scanner,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\Scanner\Scanner.cs,ScanTokenAndProvideInfoAboutIt,The following statement contains a magic number: switch (GetTokenType(token))              {                  case BooTokenType.DocumentString:                      quotes = 6;                      tokenInfo.Type = TokenType.String;                      tokenInfo.Color = TokenColor.String;                      break;                    case BooTokenType.String:                      quotes = 2;                      tokenInfo.Type = TokenType.String;                      tokenInfo.Color = TokenColor.String;                      break;                    case BooTokenType.MemberSelector:                      tokenInfo.Type = TokenType.Text;                      tokenInfo.Color = TokenColor.Text;                      tokenInfo.Trigger = TokenTriggers.MemberSelect;                      break;                    case BooTokenType.WhiteSpace:                      tokenInfo.Type = TokenType.WhiteSpace;                      tokenInfo.Color = TokenColor.Text;                      break;                    case BooTokenType.Identifier:                      tokenInfo.Type = TokenType.Identifier;                      tokenInfo.Color = TokenColor.Text;                      break;                    case BooTokenType.Keyword:                      tokenInfo.Type = TokenType.Keyword;                      tokenInfo.Color = TokenColor.Keyword;                      break;                    default:                      tokenInfo.Color = TokenColor.Text;                      break;              }
Missing Default,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,BooDeclarations,The following switch statement is missing a default case: switch (member.EntityType)                      {                          case EntityType.Method:                              FormatMethod(context' (IMethod) member' instance);                              break;                          case EntityType.Property:                              FormatProperty(context' (IProperty) member' instance);                              break;                          case EntityType.Event:                              FormatEvent(context' (IEvent) member' instance);                              break;                          case EntityType.Field:                              FormatField(context' (IField) member' instance);                              break;                      }
Missing Default,Hill30.Boo.ASTMapper,BooDeclarations,D:\research\architectureSmells\repos\mfeingold_Boo-Plugin\ASTMapper\BooDeclarations.cs,GetIconForNode,The following switch statement is missing a default case: switch (type)              {                  case NodeType.Module:                      result = MODULE_ICONS;                      break;                  case NodeType.ClassDefinition:                      result = CLASS_ICONS;                      break;                  case NodeType.EnumDefinition:                      result = ENUM_ICONS;                      break;                  case NodeType.StructDefinition:                      result = STRUCT_ICONS;                      break;                  case NodeType.InterfaceDefinition:                      result = INTERFACE_ICONS;                      break;                    case NodeType.EnumMember:                      result = ENUM_MEMBER_ICONS;                      break;                  case NodeType.Method:                  case NodeType.Constructor:                  case NodeType.Destructor:                      result = METHOD_ICONS;                      break;                  case NodeType.Property:                      result = PROPERTY_ICONS;                      break;                  case NodeType.Field:                      result = FIELD_ICONS;                      break;                  case NodeType.Event:                      result = EVENT_ICONS;                      break;              }
