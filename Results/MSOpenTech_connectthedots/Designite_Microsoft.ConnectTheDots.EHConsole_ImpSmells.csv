Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,Run,The method has 137 lines of code.
Complex Method,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,Run,Cyclomatic complexity of the method is 9
Long Statement,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,Run,The length of the statement  "            MessagingFactory factory = MessagingFactory.Create(ServiceBusEnvironment.CreateServiceUri( "sb"' serviceNamespace' "" )'" is 120.
Long Statement,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,Run,The length of the statement  "                                //var eventBody = Newtonsoft.Json.JsonConvert.DeserializeObject<TemperatureEvent>(Encoding.Default.GetString(message.GetBytes()));" is 130.
Magic Number,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,GetInputs,The following statement contains a magic number: result.NamePrefix = result.NamePrefix.Substring( 0' result.NamePrefix.Length - 3 );
Magic Number,Microsoft.ConnectTheDots.EHConsole,Program,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Azure\EHConsole\EHConsole\Program.cs,Run,The following statement contains a magic number: Task.Factory.StartNew( ( state ) =>                 {                     try                     {                         _ConsoleBuffer.Add( string.Format( "Starting worker to process partition: {0}"' state ) );                          var receiver = eventHubConsumerGroup.CreateReceiver( state.ToString( )' DateTime.UtcNow );                          _ConsoleBuffer.Add( string.Format( "Waiting for start receiving messages: {0} ..."' state ) );                          while( true )                         {                             // Receive could fail' I would need a retry policy etc...                             var messages = receiver.Receive( 10 );                             foreach( var message in messages )                             {                                 //var eventBody = Newtonsoft.Json.JsonConvert.DeserializeObject<TemperatureEvent>(Encoding.Default.GetString(message.GetBytes()));                                 //Console.WriteLine("{0} [{1}] Temperature: {2}"' DateTime.Now' message.PartitionKey' eventBody.Temperature);                                 _ConsoleBuffer.Add( message.PartitionKey + " sent message:" + Encoding.Default.GetString( message.GetBytes( ) ) );                             }                              if( cts.IsCancellationRequested )                             {                                 Console.WriteLine( "Stopping: {0}"' state );                                 receiver.Close( );                                 if( Interlocked.Increment( ref closedReceivers ) >= partitionCount )                                 {                                     receiversStopped.Set();                                 }                                 break;                             }                         }                     }                     catch( Exception ex )                     {                         _ConsoleBuffer.Add( ex.Message );                     }                 }' i );
