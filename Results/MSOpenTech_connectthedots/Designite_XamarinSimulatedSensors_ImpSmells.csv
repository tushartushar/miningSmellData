Implementation smell,Namespace,Class,File,Method,Description
Long Method,ConnectTheDotsHelper,ConnectTheDots,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\Common\csharp\ConnectTheDotsHelper.cs,Connect,The method has 104 lines of code.
Long Statement,ConnectTheDotsHelper,ConnectTheDots,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\Common\csharp\ConnectTheDotsHelper.cs,ExtractDeviceIdFromConnectionString,The length of the statement  "            Regex pattern = new Regex(@"HostName=(?<hostName>[^\s/]*);DeviceId=(?<deviceId>[^\s/]*);SharedAccessKey=(?<shareAccessKey>[^\s/]*)");" is 133.
Complex Conditional,XamarinSimulatedSensors,MyClass,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\XamarinSimulatedSensors\XamarinSimulatedSensors\XamarinSimulatedSensors\MyClass.cs,checkConfig,The conditional expression  "((this.DisplayName != null) && (this.ConnectionString != null) &&                         (this.DisplayName != "") && (this.ConnectionString != ""))"  is complex.
Magic Number,ConnectTheDotsHelper,ConnectTheDots,C:\research\architectureSmells\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\Common\csharp\ConnectTheDotsHelper.cs,Connect,The following statement contains a magic number: Task.Factory.StartNew(async() =>                 {                     while (true)                     {                         if (deviceClient != null)                         {                             Message message = null;                             try                             {                                 // Receive message from Cloud (for now this is a pull because only HTTP is available for UWP applications)                                 message = await deviceClient.ReceiveAsync();                             }                             catch (Exception e)                             {                                 // Something went wrong. Indicate the backend that we coudn't accept the message                                 Debug.WriteLine("Something went wrong when receiving message from IoT Hub: " + e.Message);                             }                              if (message != null)                             {                                 try                                 {                                     // Read message and deserialize                                     C2DMessage command = DeSerialize(message.GetBytes());                                     // Invoke message received callback                                     OnReceivedMessage(new ReceivedMessageEventArgs(command));                                      // We received the message' indicate IoTHub we treated it                                     await deviceClient.CompleteAsync(message);                                 }                                 catch (Exception e)                                 {                                     Debug.WriteLine("Something went wrong when receiving message from IoT Hub: " + e.Message);                                     // Something went wrong. Indicate the backend that we coudn't accept the message                                     await deviceClient.RejectAsync(message);                                 }                             }                         } else                         {                             await Task.Delay(200);                         }                          if (ct.IsCancellationRequested)                         {                             // Cancel was called                             Debug.WriteLine("Receiving task canceled");                             break;                         }                     }                 }' ct);
