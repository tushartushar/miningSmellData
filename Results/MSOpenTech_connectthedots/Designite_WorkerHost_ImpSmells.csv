Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,WorkerHost,Analyzer,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Analyzer.cs,Analyzer,The method has 6 parameters. Parameters: anomalyDetectionApiUrl' anomalyDetectionAuthKey' liveId' useMarketApi' tukeyThresh' zscoreThresh
Long Statement,WorkerHost,Analyzer,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Analyzer.cs,GetAlertsFromRRS,The length of the statement  "                string jsonData = "{\"Id\":\"scoring0001\"' \"Instance\": {\"FeatureVector\": {" + featureVector + "}' \"GlobalParameters\":{\"level_mhist\": 300' \"level_shist\": 100' \"trend_mhist\": 300' \"trend_shist\": 100 }}}"; " is 217.
Long Statement,WorkerHost,EventHubReader,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\EventHubReader.cs,Run,The length of the statement  "            ConsumerGroupDescription consumerGroupDesc = nsmgr.CreateConsumerGroupIfNotExists(new ConsumerGroupDescription(hubName' consumerGroupName)); " is 140.
Empty Catch Block,WorkerHost,EventHubReader,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\EventHubReader.cs,Process,The method has an empty catch block.
Empty Catch Block,WorkerHost,WorkerHost,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Program.cs,Process,The method has an empty catch block.
Empty Catch Block,WorkerHost.Data.Outputs,BlobWriter,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Data.Outputs\BlobWriter.cs,WriteLine,The method has an empty catch block.
Empty Catch Block,WorkerHost.Data.Outputs,BlobWriter,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Data.Outputs\BlobWriter.cs,Flush,The method has an empty catch block.
Empty Catch Block,WorkerHost.Data.Outputs,SQLOutputRepository,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Data.Outputs\SQLOutputRepository.cs,ProcessEvents,The method has an empty catch block.
Magic Number,WorkerHost,Analyzer,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Analyzer.cs,FindMaxValue,The following statement contains a magic number: var sd = Math.Sqrt(values.Average(v => Math.Pow(v - avg' 2)));
Magic Number,WorkerHost,Analyzer,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Analyzer.cs,FindMaxValue,The following statement contains a magic number: return avg + 5 * sd;
Magic Number,WorkerHost,Analyzer,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\Analyzer.cs,filterAnomaly,The following statement contains a magic number: return analyzedRecords.Where(ar => ar.Spike1 == 1 || ar.Spike2 == 1 || ar.LevelScore > 3).ToArray();
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: if (values.Length < 8)                  throw new ArgumentException("Anomaly Record expects 8 values.");
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,AnomalyRecord,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\AnomalyRecord.cs,Parse,The following statement contains a magic number: return new AnomalyRecord()              {                    Time = DateTime.Parse(values[0])'                  Data = double.Parse(values[1])'                  Spike1 = int.Parse(values[2])'                  Spike2 = int.Parse(values[3])'                  LevelScore = double.Parse(values[4])'                  LevelAlert = int.Parse(values[5])'                  TrendScore = double.Parse(values[6])'                  TrendAlert = int.Parse(values[7])'              };
Magic Number,WorkerHost,EventHubReader,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\EventHubReader.cs,Run,The following statement contains a magic number: for (int iPart = 0; iPart < desc.PartitionCount; iPart++)              {                  EventHubReceiver receiver = client.GetConsumerGroup(consumerGroupName).CreateReceiver(                      desc.PartitionIds[iPart]' DateTime.UtcNow - TimeSpan.FromMinutes(2));                  _receivers[iPart] = receiver;                    Task<IEnumerable<EventData>> task = receiver.ReceiveAsync(1000' TimeSpan.FromSeconds(1));                    int thisPart = iPart;                  task.ContinueWith(new Action<Task<IEnumerable<EventData>>>((t) => OnTaskComplete(t' thisPart)));                  _tasks[iPart] = task;              }
Magic Number,WorkerHost,EventHubReader,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\EventHubReader.cs,Run,The following statement contains a magic number: for (int iPart = 0; iPart < desc.PartitionCount; iPart++)              {                  EventHubReceiver receiver = client.GetConsumerGroup(consumerGroupName).CreateReceiver(                      desc.PartitionIds[iPart]' DateTime.UtcNow - TimeSpan.FromMinutes(2));                  _receivers[iPart] = receiver;                    Task<IEnumerable<EventData>> task = receiver.ReceiveAsync(1000' TimeSpan.FromSeconds(1));                    int thisPart = iPart;                  task.ContinueWith(new Action<Task<IEnumerable<EventData>>>((t) => OnTaskComplete(t' thisPart)));                  _tasks[iPart] = task;              }
Magic Number,WorkerHost,EventHubReader,C:\repos\MSOpenTech_connectthedots\Azure\MachineLearning\WorkerHost\EventHubReader.cs,OnTaskComplete,The following statement contains a magic number: try              {                  if (task.IsCompleted)                  {                      IEnumerable<EventData> batch = task.Result;                        if (batch != null && batch.Count() != 0)                      {  #if DEBUG_LOG                          Debug.WriteLine("Partition {0}' {1} events"' iPart' batch.Count());  #endif                          Process(iPart' false' batch);                      }                      else                      {                          //ProcessNoData();                      }                  }                  else                  {  #if DEBUG_LOG                      Trace.TraceError("Event hub reader {0} did not complete successfully : {1}"' iPart'                          task.Exception == null ? "" : task.Exception.ToString());  #endif                      FailureEvent.Set();                  }                    Task<IEnumerable<EventData>> newTask = _receivers[iPart].ReceiveAsync(1000' TimeSpan.FromSeconds(1));                  int thisPart = iPart;                  newTask.ContinueWith(new Action<Task<IEnumerable<EventData>>>((t) => OnTaskComplete(t' thisPart)));                  this._tasks[iPart] = newTask;              }              catch (Exception e)              {  #if DEBUG_LOG                  Trace.TraceError(e.ToString());  #endif                  FailureEvent.Set();              }
