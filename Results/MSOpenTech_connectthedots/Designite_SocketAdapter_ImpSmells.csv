Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,SensorDataClient,The length of the statement  "                // USBSPLSOCKET.PY uses "<" and ">" to terminate JSON string at each end' so built Regex to find strings surrounded by angle brackets " is 133.
Long Statement,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,SensorDataClient,The length of the statement  "                // You can test Regex extractor against a known string using a variety of online tools' such as http://regexhero.net/tester/ for C#. " is 132.
Long Statement,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,SensorDataClient,The length of the statement  "                                    //jsonBuilder.Append("{\"dspl\":\"Wensn Digital Sound Level Meter\"'\"Subject\":\"sound\"'\"DeviceGUID\":\"81E79059-A393-4797-8A7E-526C3EF9D64B\"'\"decibels\":"); " is 162.
Empty Catch Block,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,Stop,The method has an empty catch block.
Magic Number,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,ProcessClient,The following statement contains a magic number: try              {                  StringBuilder jsonBuilder = new StringBuilder( );                  Regex dataExtractor = new Regex( "<([\\w\\s\\d:\"'-{}.][^<>]+)>" );                  NetworkStream networkStream = clientSocket.GetStream( );                    //ReceiveBufferSize could change during execution                  int receiveBufferSize = clientSocket.ReceiveBufferSize;                    byte[ ] buffer = new byte[ receiveBufferSize + 1 ];                  string data = string.Empty;                    for( ;; )                  {                      int partSize = networkStream.Read( buffer' 0' receiveBufferSize );                      string dataPart = Encoding.ASCII.GetString( buffer' 0' partSize );                      data += dataPart;                        // Read string from buffer                      if( data.Length > 0 )                      {                          // Parse string into angle bracket surrounded JSON strings                          var matches = dataExtractor.Matches( data );                                                    if( matches.Count >= 1 )                          {                              foreach( Match m in matches )                              {                                  jsonBuilder.Clear( );                                  jsonBuilder.Append( m.Captures[0].Value.Trim( ).Substring( 1' m.Captures[ 0 ].Value.Trim( ).Length - 2 ) );                                    string jsonString = jsonBuilder.ToString( );                                  _enqueue(jsonString);                              }                              //remove matched substrings from buffer                              data = dataExtractor.Replace( data' "" );                          }                      }                  }              }              catch( StackOverflowException ex )              {                  _logger.LogError( "Stack Overflow while processing data from socket: " + ex.StackTrace );                    throw;              }              catch( OutOfMemoryException ex )              {                  _logger.LogError( "Out of memory while processing data from socket: " + ex.StackTrace );                    throw;              }              catch( SocketException ex )              {                  _logger.LogError( "Socket exception processing data from socket: " + ex.StackTrace + ex.Message );                  _logger.LogError( "Continuing..." );              }              catch( Exception ex )              {                  _logger.LogError( ex.ToString( ) );              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,SensorDataClient,The following statement contains a magic number: try              {                  StringBuilder jsonBuilder = new StringBuilder( );                  byte[] buffer = new Byte[ 1024 ];                  // Use Regular Expressions (Regex) to parse incoming data' which may contain multiple JSON strings                   // USBSPLSOCKET.PY uses "<" and ">" to terminate JSON string at each end' so built Regex to find strings surrounded by angle brackets                  // You can test Regex extractor against a known string using a variety of online tools' such as http://regexhero.net/tester/ for C#.                  //Regex dataExtractor = new Regex(@"<(\d+.?\d*)>");                  Regex dataExtractor = new Regex( "<([\\w\\s\\d:\"'-{}.]+)>" );                    while( _doWorkSwitch )                  {                      try                      {                          if( !client.Connected )                          {                              client.Close( );                              break;                          }                          int bytesRec = client.Receive( buffer );                          int matchCount = 1;                          // Read string from buffer                          string data = Encoding.ASCII.GetString( buffer' 0' bytesRec );                          //logger.Info("Read string: " + data);                          if( data.Length > 0 )                          {                              // Parse string into angle bracket surrounded JSON strings                              var matches = dataExtractor.Matches( data );                              if( matches.Count >= 1 )                              {                                  foreach( Match m in matches )                                  {                                      jsonBuilder.Clear( );                                      // Remove angle brackets                                      //jsonBuilder.Append("{\"dspl\":\"Wensn Digital Sound Level Meter\"'\"Subject\":\"sound\"'\"DeviceGUID\":\"81E79059-A393-4797-8A7E-526C3EF9D64B\"'\"decibels\":");                                      jsonBuilder.Append( m.Captures[ 0 ].Value.Trim( ).Substring( 1' m.Captures[ 0 ].Value.Trim( ).Length - 2 ) );                                      //jsonBuilder.Append("}");                                      string jsonString = jsonBuilder.ToString( );                                      //logger.Info("About to send message with JSON string: " + jsonString);                                      _enqueue( jsonString );                                        matchCount++;                                  }                              }                          }                      }                      catch( Exception ex )                      {                          _logger.LogError( "Exception processing data from socket: " + ex.StackTrace );                          _logger.LogError( "Continuing..." );                      }                  }              }              catch( StackOverflowException ex )              {                  _logger.LogError( "Stack Overflow while processing data from socket: " + ex.StackTrace );                  _logger.LogError( "Closing program..." );                    throw;              }              catch( OutOfMemoryException ex )              {                  _logger.LogError( "Stack Overflow while processing data from socket: " + ex.StackTrace );                  _logger.LogError( "Closing program..." );                    throw;              }              catch( SocketException ex )              {                  _logger.LogError( "Socket exception processing data from socket: " + ex.StackTrace + ex.Message );                  _logger.LogError( "Continuing..." );                    // Dinar: this will raise every time when sensor stopped connection                  // wont throw to not stop service                  //throw;              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SocketAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\Socket\SocketAdapter.cs,SensorDataClient,The following statement contains a magic number: try              {                  StringBuilder jsonBuilder = new StringBuilder( );                  byte[] buffer = new Byte[ 1024 ];                  // Use Regular Expressions (Regex) to parse incoming data' which may contain multiple JSON strings                   // USBSPLSOCKET.PY uses "<" and ">" to terminate JSON string at each end' so built Regex to find strings surrounded by angle brackets                  // You can test Regex extractor against a known string using a variety of online tools' such as http://regexhero.net/tester/ for C#.                  //Regex dataExtractor = new Regex(@"<(\d+.?\d*)>");                  Regex dataExtractor = new Regex( "<([\\w\\s\\d:\"'-{}.]+)>" );                    while( _doWorkSwitch )                  {                      try                      {                          if( !client.Connected )                          {                              client.Close( );                              break;                          }                          int bytesRec = client.Receive( buffer );                          int matchCount = 1;                          // Read string from buffer                          string data = Encoding.ASCII.GetString( buffer' 0' bytesRec );                          //logger.Info("Read string: " + data);                          if( data.Length > 0 )                          {                              // Parse string into angle bracket surrounded JSON strings                              var matches = dataExtractor.Matches( data );                              if( matches.Count >= 1 )                              {                                  foreach( Match m in matches )                                  {                                      jsonBuilder.Clear( );                                      // Remove angle brackets                                      //jsonBuilder.Append("{\"dspl\":\"Wensn Digital Sound Level Meter\"'\"Subject\":\"sound\"'\"DeviceGUID\":\"81E79059-A393-4797-8A7E-526C3EF9D64B\"'\"decibels\":");                                      jsonBuilder.Append( m.Captures[ 0 ].Value.Trim( ).Substring( 1' m.Captures[ 0 ].Value.Trim( ).Length - 2 ) );                                      //jsonBuilder.Append("}");                                      string jsonString = jsonBuilder.ToString( );                                      //logger.Info("About to send message with JSON string: " + jsonString);                                      _enqueue( jsonString );                                        matchCount++;                                  }                              }                          }                      }                      catch( Exception ex )                      {                          _logger.LogError( "Exception processing data from socket: " + ex.StackTrace );                          _logger.LogError( "Continuing..." );                      }                  }              }              catch( StackOverflowException ex )              {                  _logger.LogError( "Stack Overflow while processing data from socket: " + ex.StackTrace );                  _logger.LogError( "Closing program..." );                    throw;              }              catch( OutOfMemoryException ex )              {                  _logger.LogError( "Stack Overflow while processing data from socket: " + ex.StackTrace );                  _logger.LogError( "Closing program..." );                    throw;              }              catch( SocketException ex )              {                  _logger.LogError( "Socket exception processing data from socket: " + ex.StackTrace + ex.Message );                  _logger.LogError( "Continuing..." );                    // Dinar: this will raise every time when sensor stopped connection                  // wont throw to not stop service                  //throw;              }
