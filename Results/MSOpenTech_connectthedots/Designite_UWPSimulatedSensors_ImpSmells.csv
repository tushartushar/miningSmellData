Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ConnectTheDotsHelper,ConnectTheDots,C:\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\Common\csharp\ConnectTheDotsHelper.cs,ExtractDeviceIdFromConnectionString,The length of the statement  "            Regex pattern = new Regex(@"HostName=(?<hostName>[^\s/]*);DeviceId=(?<deviceId>[^\s/]*);SharedAccessKey=(?<shareAccessKey>[^\s/]*)"); " is 133.
Long Statement,UWPSimulatedSensors,MainPage,C:\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\UWPSimulatedSensors\UWPSimulatedSensors\MainPage.xaml.cs,CTD_ReceivedMessage,The length of the statement  "                var textToDisplay = message.timecreated + " - Alert received:" + message.message + ": " + message.value + " " + message.unitofmeasure + "\r\n"; " is 143.
Long Statement,UWPSimulatedSensors,MainPage,C:\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\UWPSimulatedSensors\UWPSimulatedSensors\MainPage.xaml.cs,updateLocation,The length of the statement  "                    CTD.Location = pos.Coordinate.Point.Position.Longitude.ToString() + "'" + pos.Coordinate.Point.Position.Latitude.ToString(); " is 124.
Magic Number,ConnectTheDotsHelper,ConnectTheDots,C:\repos\MSOpenTech_connectthedots\Devices\DirectlyConnectedDevices\Common\csharp\ConnectTheDotsHelper.cs,Connect,The following statement contains a magic number: try              {                  // Create Azure IoT Hub Client and open messaging channel                  deviceClient = DeviceClient.CreateFromConnectionString(this.ConnectionString' TransportType.Http1);                    deviceClient.OpenAsync();                  IsConnected = true;                    // Create send and receive tasks                  CancellationToken ct = TokenSource.Token;                  Task.Factory.StartNew(async()=> {                      while (true)                      {                          if (SendTelemetryData)                          {                              // Create message to be sent                              D2CMessage[] dataToSend = new D2CMessage[Sensors.Count];                              int index = 0;                                foreach (KeyValuePair<string' CTDSensor> sensor in Sensors)                              {                                  // Update the values that                                   sensor.Value.message.guid = this.Guid;                                  sensor.Value.message.displayname = DisplayName;                                  sensor.Value.message.location = Location;                                  sensor.Value.message.timecreated = DateTime.UtcNow.ToString("o");                                  if (sensor.Value.send)                                      dataToSend[index++] = sensor.Value.message;                              }                              // Send message                              sendDeviceTelemetryData(dataToSend);                          }                          await Task.Delay(SendTelemetryFreq);                            if (ct.IsCancellationRequested)                          {                              // Cancel was called                              Debug.WriteLine("Sending task canceled");                              break;                          }                        }                  }' ct);                    Task.Factory.StartNew(async() =>                  {                      while (true)                      {                          if (deviceClient != null)                          {                              Message message = null;                              try                              {                                  // Receive message from Cloud (for now this is a pull because only HTTP is available for UWP applications)                                  message = await deviceClient.ReceiveAsync();                              }                              catch (Exception e)                              {                                  // Something went wrong. Indicate the backend that we coudn't accept the message                                  Debug.WriteLine("Something went wrong when receiving message from IoT Hub: " + e.Message);                              }                                if (message != null)                              {                                  try                                  {                                      // Read message and deserialize                                      C2DMessage command = DeSerialize(message.GetBytes());                                      // Invoke message received callback                                      OnReceivedMessage(new ReceivedMessageEventArgs(command));                                        // We received the message' indicate IoTHub we treated it                                      await deviceClient.CompleteAsync(message);                                  }                                  catch (Exception e)                                  {                                      Debug.WriteLine("Something went wrong when receiving message from IoT Hub: " + e.Message);                                      // Something went wrong. Indicate the backend that we coudn't accept the message                                      await deviceClient.RejectAsync(message);                                  }                              }                          } else                          {                              await Task.Delay(200);                          }                            if (ct.IsCancellationRequested)                          {                              // Cancel was called                              Debug.WriteLine("Receiving task canceled");                              break;                          }                      }                  }' ct);              }              catch (Exception e)              {                  Debug.WriteLine("Error while trying to connect to IoT Hub: " + e.Message);                  deviceClient = null;                  return false;              }
