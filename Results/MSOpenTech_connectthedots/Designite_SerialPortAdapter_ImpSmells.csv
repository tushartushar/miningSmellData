Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,ListeningForSensors,The length of the statement  "                            _logger.LogError( "Error Reading from Serial Portand sending data from serial port " + serialPortName + ":" + e.Message ); " is 122.
Long Statement,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,ListeningForSensors,The length of the statement  "                // When we are reaching this point' that means whether the COM port reading failled or the sensors has been disconnected " is 120.
Magic Number,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,ListeningForSensors,The following statement contains a magic number: while( _doWorkSwitch )              {  #if DEBUG_LOG                  _logger.LogInfo( "Starting listening loop for serial port " + serialPortName );  #endif                  try                  {  #if !SIMULATEDATA                      serialPort = new SerialPort( serialPortName' 9600 );                      serialPort.DtrEnable = true;                      serialPort.Open( );  #if DEBUG_LOG                      _logger.LogInfo( "Opened Serial Port " + serialPortName );  #endif  #endif                      do                      {                          // When simulating data' we will generate random data                          // when not simulating' we read the serial port                          string valuesJson = "";  #if !SIMULATEDATA                          try                          {                              valuesJson = serialPort.ReadLine( );                          }                          catch( Exception e )                          {                              _logger.LogError( "Error Reading from Serial Portand sending data from serial port " + serialPortName + ":" + e.Message );                                serialPort.Close( );                              serialPortAlive = false;                          }  #else                          Random r = new Random ();                          valuesJson = String.Format("{{ \"temp\" : {0}' \"hmdt\" : {1}' \"lght\" : {2}}}"'                               (r.NextDouble() * 120) - 10'                              (r.NextDouble() * 100)'                              (r.NextDouble() * 100));  #endif                            if( serialPortAlive )                          {                              try                              {                                  // Show serialPort string that will be sent via IoT Hub                                  //_Logger.Info(valuesJson);                                    // Send JSON message to the Cloud                                  _enqueue( valuesJson );                              }                              catch( Exception e )                              {                                  _logger.LogError( "Error sending message: " + e.Message );                              }                          }                      } while( serialPortAlive );                    }                  catch( Exception e )                  {                      _logger.LogError( "Error processing data from serial port: " + e.Message );                  }                    // When we are reaching this point' that means whether the COM port reading failled or the sensors has been disconnected                  // we will try to close the port properly' but if the device has been disconnected' this will trigger an exception                  try                  {                      if( serialPort != null )                      {                          if( serialPort.IsOpen )                          {                              serialPort.Close( );                          }                            serialPort = null;                      }                  }                  catch( Exception e )                  {                      _logger.LogError( "Error when trying to close the serial port: " + e.Message );                  }                  // We restart the thread if there has been some failure when reading from serial port                  Thread.Sleep( 800 );              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,ListeningForSensors,The following statement contains a magic number: while( _doWorkSwitch )              {  #if DEBUG_LOG                  _logger.LogInfo( "Starting listening loop for serial port " + serialPortName );  #endif                  try                  {  #if !SIMULATEDATA                      serialPort = new SerialPort( serialPortName' 9600 );                      serialPort.DtrEnable = true;                      serialPort.Open( );  #if DEBUG_LOG                      _logger.LogInfo( "Opened Serial Port " + serialPortName );  #endif  #endif                      do                      {                          // When simulating data' we will generate random data                          // when not simulating' we read the serial port                          string valuesJson = "";  #if !SIMULATEDATA                          try                          {                              valuesJson = serialPort.ReadLine( );                          }                          catch( Exception e )                          {                              _logger.LogError( "Error Reading from Serial Portand sending data from serial port " + serialPortName + ":" + e.Message );                                serialPort.Close( );                              serialPortAlive = false;                          }  #else                          Random r = new Random ();                          valuesJson = String.Format("{{ \"temp\" : {0}' \"hmdt\" : {1}' \"lght\" : {2}}}"'                               (r.NextDouble() * 120) - 10'                              (r.NextDouble() * 100)'                              (r.NextDouble() * 100));  #endif                            if( serialPortAlive )                          {                              try                              {                                  // Show serialPort string that will be sent via IoT Hub                                  //_Logger.Info(valuesJson);                                    // Send JSON message to the Cloud                                  _enqueue( valuesJson );                              }                              catch( Exception e )                              {                                  _logger.LogError( "Error sending message: " + e.Message );                              }                          }                      } while( serialPortAlive );                    }                  catch( Exception e )                  {                      _logger.LogError( "Error processing data from serial port: " + e.Message );                  }                    // When we are reaching this point' that means whether the COM port reading failled or the sensors has been disconnected                  // we will try to close the port properly' but if the device has been disconnected' this will trigger an exception                  try                  {                      if( serialPort != null )                      {                          if( serialPort.IsOpen )                          {                              serialPort.Close( );                          }                            serialPort = null;                      }                  }                  catch( Exception e )                  {                      _logger.LogError( "Error when trying to close the serial port: " + e.Message );                  }                  // We restart the thread if there has been some failure when reading from serial port                  Thread.Sleep( 800 );              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,GetPortNames,The following statement contains a magic number: if( p == 4 || p == 128 || p == 6 )              {                  string[] ttys = System.IO.Directory.GetFiles( "/dev/"' "tty*" );                  foreach( string dev in ttys )                  {                      //Arduino MEGAs show up as ttyACM due to their different USB<->RS232 chips                      if( dev.StartsWith( "/dev/ttyS" ) || dev.StartsWith( "/dev/ttyUSB" ) || dev.StartsWith( "/dev/ttyACM" ) )                      {                          serial_ports.Add( dev );                      }                  }              }              else              {                  serial_ports.AddRange( SerialPort.GetPortNames( ) );              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,GetPortNames,The following statement contains a magic number: if( p == 4 || p == 128 || p == 6 )              {                  string[] ttys = System.IO.Directory.GetFiles( "/dev/"' "tty*" );                  foreach( string dev in ttys )                  {                      //Arduino MEGAs show up as ttyACM due to their different USB<->RS232 chips                      if( dev.StartsWith( "/dev/ttyS" ) || dev.StartsWith( "/dev/ttyUSB" ) || dev.StartsWith( "/dev/ttyACM" ) )                      {                          serial_ports.Add( dev );                      }                  }              }              else              {                  serial_ports.AddRange( SerialPort.GetPortNames( ) );              }
Magic Number,Microsoft.ConnectTheDots.Adapters,SerialPortAdapter,C:\repos\MSOpenTech_connectthedots\Devices\Gateways\GatewayService\DeviceAdapters\SerialPort\SerialPortAdapter.cs,GetPortNames,The following statement contains a magic number: if( p == 4 || p == 128 || p == 6 )              {                  string[] ttys = System.IO.Directory.GetFiles( "/dev/"' "tty*" );                  foreach( string dev in ttys )                  {                      //Arduino MEGAs show up as ttyACM due to their different USB<->RS232 chips                      if( dev.StartsWith( "/dev/ttyS" ) || dev.StartsWith( "/dev/ttyUSB" ) || dev.StartsWith( "/dev/ttyACM" ) )                      {                          serial_ports.Add( dev );                      }                  }              }              else              {                  serial_ports.AddRange( SerialPort.GetPortNames( ) );              }
