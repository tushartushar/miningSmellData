Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Mono.JavaScript.Debugger,Entry,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,Entry,The method has 5 parameters. Parameters: generatedPosition' source' sourceLine' sourceColumn' name
Long Parameter List,Mono.JavaScript.Debugger,RawEntry,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,RawEntry,The method has 6 parameters. Parameters: rawString' generatedPosition' sourceIndex' sourceLine' sourceColumn' nameIndex
Long Parameter List,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClientExtensions,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClientExtensions.cs,SetBreakpoint,The method has 8 parameters. Parameters: debugger' type' target' enabled' line' column' condition' ignoreCount
Long Statement,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,OnUncaughtException,The length of the statement  "				throw new InvalidOperationException ("V8 debugger returned uncaught exception message"' new JavaScriptException (evt.Instance' 0' null)); " is 137.
Long Statement,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,SetBreakpoint,The length of the statement  "			return (SetBreakpointResponseBody) Process (new DebuggerRequest () { Arguments = args' Command = "setBreakpoint" }).Body; " is 121.
Long Statement,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,ClearBreakpoint,The length of the statement  "			return (ClearBreakpointResponseBody) Process (new DebuggerRequest () { Arguments = args' Command = "clearBreakpoint" }).Body; " is 125.
Long Statement,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,SetExceptionBreak,The length of the statement  "			return (SetExceptionBreakResponseBody) Process (new DebuggerRequest () { Arguments = args' Command = "setExceptionBreak" }).Body; " is 129.
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,ParseVlq,The following statement contains a magic number: for (int i = 0; i < vlq.Length; i++) {  				var v = FromBase64Char (vlq [i]);  				if (v < 32) {  					yield return (sum << 5) + v;  					sum = 0;  				}  				else  					sum = (sum << 5) + v - 32;  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,ParseVlq,The following statement contains a magic number: for (int i = 0; i < vlq.Length; i++) {  				var v = FromBase64Char (vlq [i]);  				if (v < 32) {  					yield return (sum << 5) + v;  					sum = 0;  				}  				else  					sum = (sum << 5) + v - 32;  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,ParseVlq,The following statement contains a magic number: for (int i = 0; i < vlq.Length; i++) {  				var v = FromBase64Char (vlq [i]);  				if (v < 32) {  					yield return (sum << 5) + v;  					sum = 0;  				}  				else  					sum = (sum << 5) + v - 32;  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,ParseVlq,The following statement contains a magic number: for (int i = 0; i < vlq.Length; i++) {  				var v = FromBase64Char (vlq [i]);  				if (v < 32) {  					yield return (sum << 5) + v;  					sum = 0;  				}  				else  					sum = (sum << 5) + v - 32;  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,FromBase64Char,The following statement contains a magic number: if ('A' <= c && c <= 'Z')  				return c - 'A';  			else if ('a' <= c && c <= 'z')  				return c - 'a' + 26;  			else if ('0' <= c && c <= '9')  				return c - '0' + 52;  			else {  				switch (c) {  				case '+': return 62;  				case '/': return 63;  				}  				throw new ArgumentException (string.Format ("Invalid BASE64 character: 0x{0:X}"' (int) c));  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,FromBase64Char,The following statement contains a magic number: if ('A' <= c && c <= 'Z')  				return c - 'A';  			else if ('a' <= c && c <= 'z')  				return c - 'a' + 26;  			else if ('0' <= c && c <= '9')  				return c - '0' + 52;  			else {  				switch (c) {  				case '+': return 62;  				case '/': return 63;  				}  				throw new ArgumentException (string.Format ("Invalid BASE64 character: 0x{0:X}"' (int) c));  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,FromBase64Char,The following statement contains a magic number: if ('A' <= c && c <= 'Z')  				return c - 'A';  			else if ('a' <= c && c <= 'z')  				return c - 'a' + 26;  			else if ('0' <= c && c <= '9')  				return c - '0' + 52;  			else {  				switch (c) {  				case '+': return 62;  				case '/': return 63;  				}  				throw new ArgumentException (string.Format ("Invalid BASE64 character: 0x{0:X}"' (int) c));  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,FromBase64Char,The following statement contains a magic number: if ('A' <= c && c <= 'Z')  				return c - 'A';  			else if ('a' <= c && c <= 'z')  				return c - 'a' + 26;  			else if ('0' <= c && c <= '9')  				return c - '0' + 52;  			else {  				switch (c) {  				case '+': return 62;  				case '/': return 63;  				}  				throw new ArgumentException (string.Format ("Invalid BASE64 character: 0x{0:X}"' (int) c));  			}
Magic Number,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,Read,The following statement contains a magic number: if (Version != 3)  				throw new ArgumentException ("sourcemap version 3 is expected' but was " + (obj ["version"] ?? "empty"));
Magic Number,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,Dispose,The following statement contains a magic number: reader_finished.Wait (5000);
Magic Number,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,EventLoop,The following statement contains a magic number: while (reader_loop) {  				Thread.Sleep (50);  				if (!stream.DataAvailable)  					continue;  				lock (reader_lock) {  					if (!reader_loop)  						break;  					var line = reader.ReadLine ();  					if (line == null) {  						Console.WriteLine ("no input");  						continue;  					}  					line = line_remaining + line;  					line_remaining = null;  					ProcessInputLine (line);  				}  			}
Missing Default,Mono.JavaScript.Debugger,SourceMap,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Debugger\SourceMap.cs,FromBase64Char,The following switch statement is missing a default case: switch (c) {  				case '+': return 62;  				case '/': return 63;  				}
Missing Default,Mono.JavaScript.Node.Debugger,V8DebuggerProtocolClient,C:\repos\atsushieno_md-typescript\Mono.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\V8DebuggerProtocolClient.cs,ProcessInputLine,The following switch statement is missing a default case: switch (line.Substring (0' idx)) {  				case "Type":  				case "V8-Version":  				case "Protocol-Version":  				case "Embedding-Host":  					return;  				case "Content-Length":  					current_size = int.Parse (line.Substring (idx + 1));  					return;  				}
