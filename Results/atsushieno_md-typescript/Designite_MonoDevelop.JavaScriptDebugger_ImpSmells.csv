Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.JavaScript.Node.Debugger,NodeBacktrace,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,GetExpressionCompletionData,Cyclomatic complexity of the method is 13
Long Statement,MonoDevelop.JavaScript.Node.Debugger,NodeDebuggerSessionFactory,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\MonoDevelop.JavaScript.Node.Debugger\NodeDebuggerSessionFactory.cs,CreateDebuggerStartInfo,The length of the statement  "			// FIXME: there is some issue in SourceMap parser or TypeScript map output that results in ArgumentOutOfRangeException... " is 121.
Long Statement,MonoDevelop.JavaScript.Node.Debugger,NodeDebuggerSessionFactory,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\MonoDevelop.JavaScript.Node.Debugger\NodeDebuggerSessionFactory.cs,CreateDebuggerStartInfo,The length of the statement  "			startInfo.SourceMap.Read (File.ReadAllText (Path.Combine (pec.WorkingDirectory' Path.GetFileName (pec.ScriptPath + ".map")))); " is 126.
Long Statement,Mono.JavaScript.Node.Debugger,NodeDebuggerSession,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeDebuggerSession.cs,OnInsertBreakEvent,The length of the statement  "							var ret = debugger.SetBreakpoint ("function"' bf.FunctionName' be.Enabled' -1' -1' bp.ConditionExpression' bp.HitCount); " is 120.
Long Statement,Mono.JavaScript.Node.Debugger,NodeDebuggerSession,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeDebuggerSession.cs,OnEnableBreakEvent,The length of the statement  "					debugger.ChangeBreakpoint (new ChangeBreakpointRequestArguments () { Breakpoint = (double) binfo.Handle' Enabled = enable }); " is 125.
Long Statement,Mono.JavaScript.Node.Debugger,NodeBacktrace,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,GetParameters,The length of the statement  "			NodeCommandResult res = session.RunCommand ("-stack-list-arguments"' "0"' frameIndex.ToString ()' frameIndex.ToString ()); " is 122.
Long Statement,Mono.JavaScript.Node.Debugger,NodeDissassemblyBuffer,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,GetLines,The length of the statement  "				ResultData data = session.RunCommand ("-data-disassemble"' "-s"' startAddr.ToString ()' "-e"' endAddr.ToString ()' "--"' "0"); " is 126.
Magic Number,Mono.JavaScript.Node.Debugger,NodeDebuggerSession,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeDebuggerSession.cs,StartNodeDebugger,The following statement contains a magic number: lock (nodeLock) {  				proc.Start ();  			  				sin = proc.StandardInput;  				proc.BeginOutputReadLine ();  				proc.BeginErrorReadLine ();    				if (!bootstrap_lock.Wait (8000))  					throw new InvalidOperationException ("Debugger did not start");  				if (logNode)  					LogWriter (false' "connected to node debugger");  			}
Magic Number,Mono.JavaScript.Node.Debugger,NodeDebuggerSession,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeDebuggerSession.cs,ProcessError,The following statement contains a magic number: if (bootstrap_step < 2) {  				if (bootstrap_step < 1 && line == "debugger listening on port 5858") {  					bootstrap_step++;  					input_contd = null;  					bootstrap_lock.Set ();  					return;  				}  				input_contd += line;  				return;  			}
Magic Number,Mono.JavaScript.Node.Debugger,ResultData,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\ResultData.cs,ReadTuple,The following statement contains a magic number: while (pos < str.Length && str [pos] != '}') {  				string name;  				object val;  				ReadResult (str' ref pos' out name' out val);  				if (data.props.ContainsKey (name)) {  					object ob = data.props [name];  					ResultData rd = ob as ResultData;  					if (rd != null && rd.isArrayProperty) {  						object[] newArr = new object [rd.array.Length + 1];  						Array.Copy (rd.array' newArr' rd.array.Length);  						newArr [rd.array.Length] = val;  						rd.array = newArr;  					} else {  						rd = new ResultData ();  						rd.isArrayProperty = true;  						rd.array = new object [2];  						rd.array [0] = ob;  						rd.array [1] = val;  						data.props [name] = rd;  					}  				} else {  					data.props [name] = val;  				}  				TryReadChar (str' ref pos' ''');  			}
Magic Number,Mono.JavaScript.Node.Debugger,NodeBacktrace,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,GetExpressionCompletionData,The following statement contains a magic number: if (pointer || exp.EndsWith (".")) {  				exp = exp.Substring (0' exp.Length - (pointer ? 2 : 1));  				i = 0;  				while (i < exp.Length) {  					ObjectValue val = CreateVarObject (exp);  					if (!val.IsUnknown && !val.IsError) {  						CompletionData data = new CompletionData ();  						foreach (ObjectValue cv in val.GetAllChildren ())  							data.Items.Add (new CompletionItem (cv.Name' cv.Flags));  						data.ExpressionLenght = 0;  						return data;  					}  					i++;  				}  				return null;  			}
Magic Number,Mono.JavaScript.Node.Debugger,NodeBacktrace,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,CreateFrame,The following statement contains a magic number: if (!string.IsNullOrEmpty (sadr))  				addr = long.Parse (sadr.Substring (2)' NumberStyles.HexNumber);  			else  				addr = 0;
Magic Number,Mono.JavaScript.Node.Debugger,NodeBacktrace,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,Disassemble,The following statement contains a magic number: if (buffer == null) {  				ResultData data = session.RunCommand ("-stack-info-frame");  				long addr = long.Parse (data.GetObject ("frame").GetValue ("addr").Substring (2)' NumberStyles.HexNumber);  				buffer = new NodeDissassemblyBuffer (session' addr);  				disBuffers [frameIndex] = buffer;  			}
Magic Number,Mono.JavaScript.Node.Debugger,NodeDissassemblyBuffer,C:\repos\atsushieno_md-typescript\MonoDevelop.JavaScriptDebugger\Mono.JavaScript.Node.Debugger\NodeBacktrace.cs,GetLines,The following statement contains a magic number: try {  				ResultData data = session.RunCommand ("-data-disassemble"' "-s"' startAddr.ToString ()' "-e"' endAddr.ToString ()' "--"' "0");  				ResultData ins = data.GetObject ("asm_insns");  				  				AssemblyLine[] alines = new AssemblyLine [ins.Count];  				for (int n=0; n<ins.Count; n++) {  					ResultData aline = ins.GetObject (n);  					long addr = long.Parse (aline.GetValue ("address").Substring (2)' NumberStyles.HexNumber);  					AssemblyLine line = new AssemblyLine (addr' aline.GetValue ("inst"));  					alines [n] = line;  				}  				return alines;  			} catch {  				return new AssemblyLine [0];  			}
