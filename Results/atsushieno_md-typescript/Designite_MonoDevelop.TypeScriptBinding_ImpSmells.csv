Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptAmbience,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptAmbience.cs,GetTypeString,The method has 148 lines of code.
Long Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptFormattingOptionsFactory,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptFormattingOptionsFactory.cs,CreateDefault,The method has 107 lines of code.
Long Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,Push,The method has 112 lines of code.
Long Method,MonoDevelop.TypeScriptBinding.Formatting,IndentStack,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,Push,The method has 112 lines of code.
Long Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The method has 128 lines of code.
Complex Method,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,CompileWithTsc,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptAmbience,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptAmbience.cs,GetTypeString,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptAmbience,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptAmbience.cs,GetPropertyString,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptFormattingPolicy,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptFormattingPolicy.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,PushColon,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,PushOpenBrace,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,PushCloseBrace,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,Push,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,Debug,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,IndentStack,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,Push,Cyclomatic complexity of the method is 30
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,GuessSemicolonInsertionOffset,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,HandleStringConcatinationDeletion,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,FixLineStart,Cyclomatic complexity of the method is 13
Long Parameter List,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptTextEditorResolverProvider,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptTextEditorResolverProvider.cs,CreateTooltip,The method has 5 parameters. Parameters: document' offset' result' errorInformations' modifierState
Long Parameter List,MonoDevelop.TypeScriptBinding.Languages,TypeScriptReferenceFinder,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\TypeScriptReferenceFinder.cs,FindReferences,The method has 5 parameters. Parameters: project' content' files' monitor' searchedMembers
Long Parameter List,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,RunTool,The method has 5 parameters. Parameters: cmd' args' workingDirectory' monitor' err
Long Parameter List,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptFormatter,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptFormatter.cs,FormatText,The method has 6 parameters. Parameters: policy' textPolicy' mimeType' input' startOffset' endOffset
Long Parameter List,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptFormatter,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptFormatter.cs,FormatText,The method has 5 parameters. Parameters: policyParent' mimeTypeChain' input' startOffset' endOffset
Long Parameter List,MonoDevelop.TypeScriptBinding.Formatting,IndentStack,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,Push,The method has 5 parameters. Parameters: inside' keyword' lineNumber' nSpaces' indent
Long Statement,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptCompletionTextEditorExtension,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptCompletionTextEditorExtension.cs,HandleCodeCompletion,The length of the statement  "					if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2))) " is 130.
Long Statement,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptCompletionTextEditorExtension,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptCompletionTextEditorExtension.cs,HandleCodeCompletion,The length of the statement  "				                         "Position: line=" + completionContext.TriggerLine + " col=" + completionContext.TriggerLineOffset + Environment.NewLine +  " is 121.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,DoBuild,The length of the statement  "			TypeScriptProjectConfiguration TypeScriptConfig = (TypeScriptProjectConfiguration)GetConfiguration (configurationSelector); " is 123.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,DoExecute,The length of the statement  "			TypeScriptProjectConfiguration TypeScriptConfig = (TypeScriptProjectConfiguration)GetConfiguration (configurationSelector); " is 123.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,ExecuteWithNode,The length of the statement  "					monitor.ReportError ("Cannot execute \"" + exe + "\". The selected execution mode is not supported for TypeScript projects."' null); " is 132.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,OnFileAddedToProject,The length of the statement  "			// FIXME: make sure that adding' removing and then adding the same file still works (as "remove" does not really remove it). " is 124.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,OnFileAddedToProject,The length of the statement  "					typescript.ShimHost.AddScript (typescript.GetFilePath (item.ProjectFile)' File.ReadAllText (typescript.GetFilePath (item.ProjectFile))); " is 136.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,OnFileRenamedInProject,The length of the statement  "			// FIXME: make sure that adding' removing and then adding the same file still works (as "remove" does not really remove it). " is 124.
Long Statement,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,OnFileRenamedInProject,The length of the statement  "					typescript.ShimHost.AddScript (typescript.GetFilePath (item.NewName)' File.ReadAllText (typescript.GetFilePath (item.NewName))); " is 128.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptAmbience,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptAmbience.cs,GetPropertyString,The length of the statement  "				result.Append (GetTypeReferenceString (property.DeclaringTypeDefinition' new OutputSettings (OutputFlags.UseFullName))); " is 120.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptFormatter,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptFormatter.cs,FormatText,The length of the statement  "			string result = data.GetTextBetween (startOffset' originalVersion.MoveOffsetTo (currentVersion' endOffset' ICSharpCode.NRefactory.Editor.AnchorMovementType.Default)); " is 166.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,Node,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,ToString,The length of the statement  "					return string.Format ("[Node: inside={0}' keyword={1}' indent={2}' nSpaces={3}' lineNr={4}]"' inside' keyword' indent' nSpaces' lineNumber); " is 140.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,InitTracker,The length of the statement  "			stateTracker = new DocumentStateTracker<TypeScriptIndentEngine> (new TypeScriptIndentEngine (policy' textStylePolicy)' Editor); " is 127.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The length of the statement  "					var lexer = new CSharpCompletionEngineBase.MiniLexer (textEditorData.Document.GetTextAt (0' textEditorData.Caret.Offset)); " is 122.
Long Statement,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The length of the statement  "						if (!(oldLine == Editor.Caret.Line + 1 && lastCharInserted == '\n') && (oldBufLen != Editor.Length || lastCharInserted != '\0')) " is 128.
Complex Conditional,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The conditional expression  "keyChar == ';' && smartSemicolonPlacement &&  			    !(editorMode is TextLinkEditMode) && !DoInsertTemplate () &&  			    !isSomethingSelected"  is complex.
Complex Conditional,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The conditional expression  "key == Gdk.Key.Tab && isTabReindent && !CompletionWindowManager.IsVisible &&  			    !(editorMode is TextLinkEditMode) && !DoInsertTemplate () &&  			    !isSomethingSelected"  is complex.
Complex Conditional,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The conditional expression  "!(oldLine == Editor.Caret.Line + 1 && lastCharInserted == '\n') && (oldBufLen != Editor.Length || lastCharInserted != '\0')"  is complex.
Complex Conditional,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The conditional expression  "isInDQuotedString || isInSQuotedString || isInLineComment || isInBlockComment"  is complex.
Magic Number,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptCompletionTextEditorExtension,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptCompletionTextEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2))
Magic Number,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptLanguageItemWindow,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptLanguageItemWindow.cs,TypeScriptLanguageItemWindow,The following statement contains a magic number: var label = new MonoDevelop.Components.FixedWidthWrapLabel () {  				Wrap = Pango.WrapMode.WordChar'  				Indent = -20'  				BreakOnCamelCasing = true'  				BreakOnPunctuation = true'  				Markup = tooltip'  			};
Magic Number,MonoDevelop.TypeScriptBinding.Languages.Gui,TypeScriptLanguageItemWindow,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Languages\Gui\TypeScriptLanguageItemWindow.cs,TypeScriptLanguageItemWindow,The following statement contains a magic number: this.BorderWidth = 3;
Magic Number,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,ParseOutput,The following statement contains a magic number: error.Line = int.Parse (match.Groups [2].ToString ());
Magic Number,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,ParseOutput,The following statement contains a magic number: error.Column = int.Parse (match.Groups [3].ToString ());
Magic Number,MonoDevelop.TypeScriptBinding.Projects,TypeScriptProject,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Projects\TypeScriptProject.cs,ParseOutput,The following statement contains a magic number: error.ErrorText = match.Groups [4].ToString ();
Magic Number,MonoDevelop.TypeScriptBinding.Formatting,IndentStack,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,Push,The following statement contains a magic number: Array.Resize <Node> (ref stack' 2 * count);
Magic Number,MonoDevelop.TypeScriptBinding.Formatting,IndentStack,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngineStack.cs,Push,The following statement contains a magic number: Array.Resize <Node> (ref stack' 2 * count);
Magic Number,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,KeyPress,The following statement contains a magic number: delta < 2 && delta > 0
Magic Number,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The following statement contains a magic number: caretOffset - 2 >= currLine.Offset && data.Document.GetCharAt (caretOffset - 2) == ')'
Magic Number,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The following statement contains a magic number: caretOffset - 2 >= currLine.Offset && data.Document.GetCharAt (caretOffset - 2) == ')'
Missing Default,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptAmbience,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptAmbience.cs,AppendModifiers,The following switch statement is missing a default case: switch (entity.Accessibility) {  			/*  			case Accessibility.Internal:  				result.Append (settings.EmitModifiers ("internal"));  				break;  			case Accessibility.ProtectedAndInternal:  				result.Append (settings.EmitModifiers ("protected internal"));  				break;  			case Accessibility.ProtectedOrInternal:  				result.Append (settings.EmitModifiers ("internal protected"));  				break;  			case Accessibility.Protected:  				result.Append (settings.EmitModifiers ("protected"));  				break;  			*/  			case Accessibility.Private:  				result.Append (settings.EmitModifiers ("private"));  				break;  			case Accessibility.Public:  				result.Append (settings.EmitModifiers ("public"));  				break;  			}
Missing Default,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptIndentEngine,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptIndentEngine.cs,Debug,The following switch statement is missing a default case: switch (stack.PeekInside (i)) {  				case Inside.MultiLineComment:  					Console.WriteLine ("\t/* */ comment block");  					break;  				case Inside.LineComment:  					Console.WriteLine ("\t// comment");  					break;  				case Inside.DoubleQuotedString:  					Console.WriteLine ("\tdouble quoted string");  					break;  				case Inside.SingleQuotedString:  					Console.WriteLine ("\tsingle quoted string");  					break;  				case Inside.ParenList:  					Console.WriteLine ("\t( ) paren list");  					break;  				case Inside.FoldedStatement:  					if (stack.PeekKeyword (i) != String.Empty)  						Console.WriteLine ("\t{0}-statement"' stack.PeekKeyword (i));  					else  						Console.WriteLine ("\tfolded statement?");  					break;  				case Inside.Case:  					Console.WriteLine ("\tcase statement");  					break;  				case Inside.Block:  					if (stack.PeekKeyword (i) != String.Empty)  						Console.WriteLine ("\t{0} {1} block"' stack.PeekKeyword (i)' "{ }");  					else  						Console.WriteLine ("\tmethod {0} block?"' "{ }");  					break;  				}
Missing Default,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The following switch statement is missing a default case: switch (ch) {  				case '/':  					if (isInBlockComment) {  						if (pos > 0 && data.Document.GetCharAt (pos - 1) == '*')   							isInBlockComment = false;    					} else if (!(isInDQuotedString || isInSQuotedString) && pos + 1 < max) {  						char nextChar = data.Document.GetCharAt (pos + 1);  						if (nextChar == '/') {  							isInLineComment = true;  							return lastNonWsOffset;  						}  						if (!isInLineComment && nextChar == '*') {  							isInBlockComment = true;  							return lastNonWsOffset;  						}  					}    					break;  				case '\\':  					if (isInSQuotedString || isInDQuotedString)  						pos++;    					break;  				case '"':  					if (!(isInSQuotedString || isInLineComment || isInBlockComment)) {  						if (isInDQuotedString && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"')  							pos++;  						else  							isInDQuotedString = !isInDQuotedString;  					}    					break;  				case '\'':  					if (!(isInDQuotedString || isInLineComment || isInBlockComment))   						isInSQuotedString = !isInSQuotedString;    					break;  				}
Missing Default,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,DoPreInsertionSmartIndent,The following switch statement is missing a default case: switch (key) {  			case Gdk.Key.BackSpace:  				stateTracker.UpdateEngine ();  				HandleStringConcatinationDeletion (Editor.Caret.Offset - 1' 0);  				break;  			case Gdk.Key.Delete:  				stateTracker.UpdateEngine ();  				HandleStringConcatinationDeletion (Editor.Caret.Offset' Editor.Length);  				break;  			}
Missing Default,MonoDevelop.TypeScriptBinding.Formatting,TypeScriptTextEditorIndentation,D:\research\architectureSmells\repos\atsushieno_md-typescript\TypeScriptBinding\Formatting\TypeScriptTextEditorIndentation.cs,DoPostInsertionSmartIndent,The following switch statement is missing a default case: switch (charInserted) {  			case '}':  			case ';':  				reIndent = true;  				break;  			case '\n':  				if (FixLineStart (Editor' stateTracker' stateTracker.Engine.LineNumber))   					return;    				// newline always reindents unless it's had special handling  				reIndent = true;  				break;  			}
