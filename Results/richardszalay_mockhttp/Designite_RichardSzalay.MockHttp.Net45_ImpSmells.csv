Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RichardSzalay.MockHttp.Matchers,UrlMatcher,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\Matchers\UrlMatcher.cs,Matches,Cyclomatic complexity of the method is 8
Long Statement,RichardSzalay.MockHttp,MockHttpMessageHandler,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\MockHttpMessageHandler.cs,VerifyNoOutstandingRequest,The length of the statement  "                throw new InvalidOperationException("There are " + outstandingRequests + " oustanding requests. Call Flush() to complete them"); " is 128.
Long Statement,RichardSzalay.MockHttp,UriUtil,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\UriUtil.cs,TryParse,The length of the statement  "            bool isAndroidFalsePositive = systemResult && output.Scheme == "file" && !url.StartsWith("file://"' StringComparison.Ordinal); " is 126.
Magic Number,RichardSzalay.MockHttp,MockedRequest,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\MockedRequest.cs,MockedRequest,The following statement contains a magic number: string[] urlParts = StringUtil.Split(url' '?'' 2);
Magic Number,RichardSzalay.MockHttp,MockedRequest,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\MockedRequest.cs,MockedRequest,The following statement contains a magic number: if (urlParts.Length == 2)                  url = urlParts[0];
Magic Number,RichardSzalay.MockHttp,MockedRequest,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\MockedRequest.cs,MockedRequest,The following statement contains a magic number: if (urlParts.Length == 2)                  this.With(new QueryStringMatcher(urlParts[1]));
Magic Number,RichardSzalay.MockHttp.Matchers,HeadersMatcher,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\Matchers\HeadersMatcher.cs,ParseHeaders,The following statement contains a magic number: using (StringReader reader = new StringReader(headers))              {                  string line = reader.ReadLine();                    while (line != null)                  {                      if (line.Trim().Length == 0)                          break;                        string[] parts = StringUtil.Split(line' ':'' 2);                        if (parts.Length != 2)                          throw new ArgumentException("Invalid header: " + line);                        headerPairs.Add(new KeyValuePair<string' string>(parts[0]' parts[1].TrimStart(' ')));                        line = reader.ReadLine();                  }              }
Magic Number,RichardSzalay.MockHttp.Matchers,HeadersMatcher,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\Matchers\HeadersMatcher.cs,ParseHeaders,The following statement contains a magic number: using (StringReader reader = new StringReader(headers))              {                  string line = reader.ReadLine();                    while (line != null)                  {                      if (line.Trim().Length == 0)                          break;                        string[] parts = StringUtil.Split(line' ':'' 2);                        if (parts.Length != 2)                          throw new ArgumentException("Invalid header: " + line);                        headerPairs.Add(new KeyValuePair<string' string>(parts[0]' parts[1].TrimStart(' ')));                        line = reader.ReadLine();                  }              }
Magic Number,RichardSzalay.MockHttp.Matchers,QueryStringMatcher,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\Matchers\QueryStringMatcher.cs,ParseQueryString,The following statement contains a magic number: return input.TrimStart('?').Split('&')                  .Select(pair => StringUtil.Split(pair' '='' 2))                  .Select(pair => new KeyValuePair<string' string>(                      UrlDecode(pair[0])'                      pair.Length == 2 ? UrlDecode(pair[1]) : ""                      ))                  .ToList();
Magic Number,RichardSzalay.MockHttp.Matchers,QueryStringMatcher,C:\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Shared\Matchers\QueryStringMatcher.cs,ParseQueryString,The following statement contains a magic number: return input.TrimStart('?').Split('&')                  .Select(pair => StringUtil.Split(pair' '='' 2))                  .Select(pair => new KeyValuePair<string' string>(                      UrlDecode(pair[0])'                      pair.Length == 2 ? UrlDecode(pair[1]) : ""                      ))                  .ToList();
