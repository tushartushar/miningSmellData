Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RichardSzalay.MockHttp.Tests.Matchers,FormDataMatcherTests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Matchers\FormDataMatcherTests.cs,Should_support_matching_dictionary_data_with_url_encoded_values1,The length of the statement  "            Assert.True(actualMatch' "FormDataMatcher.Matches() should match dictionary data with URL encoded query string values.");" is 121.
Long Statement,RichardSzalay.MockHttp.Tests.Matchers,FormDataMatcherTests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Matchers\FormDataMatcherTests.cs,Should_support_matching_dictionary_data_with_url_encoded_values2,The length of the statement  "            Assert.True(actualMatch' "FormDataMatcher.Matches() should match dictionary data with URL encoded query string values.");" is 121.
Long Statement,RichardSzalay.MockHttp.Tests.Matchers,QueryStringMatcherTests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Matchers\QueryStringMatcherTests.cs,Should_support_matching_dictionary_data_with_url_encoded_values,The length of the statement  "            Assert.True(actualMatch' "QueryStringMatcher.Matches() should match dictionary data with URL encoded query string values.");" is 124.
Empty Catch Block,RichardSzalay.MockHttp.Tests.Issues,Issue29Tests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Issues\Issue29Tests.cs,Can_simulate_timeout,The method has an empty catch block.
Magic Number,RichardSzalay.MockHttp.Tests.Infrastructure,HttpHelpers,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Infrastructure\HttpHelpers.cs,ParseQueryString,The following statement contains a magic number: return input.TrimStart('?').Split('&')                 .Select(pair => pair.Split(new [] { '=' }' 2))                 .Select(pair => new KeyValuePair<string' string>(                     Uri.UnescapeDataString(pair[0])'                     pair.Length == 2 ? Uri.UnescapeDataString(pair[1]) : null                     ))                 .ToList();
Magic Number,RichardSzalay.MockHttp.Tests.Infrastructure,HttpHelpers,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Infrastructure\HttpHelpers.cs,ParseQueryString,The following statement contains a magic number: return input.TrimStart('?').Split('&')                 .Select(pair => pair.Split(new [] { '=' }' 2))                 .Select(pair => new KeyValuePair<string' string>(                     Uri.UnescapeDataString(pair[0])'                     pair.Length == 2 ? Uri.UnescapeDataString(pair[1]) : null                     ))                 .ToList();
Magic Number,RichardSzalay.MockHttp.Tests.Issues,Issue29Tests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Issues\Issue29Tests.cs,Can_simulate_timeout,The following statement contains a magic number: handler.Fallback.Respond(async () =>             {                 await Task.Delay(10000);                  return new HttpResponseMessage(HttpStatusCode.OK);             });
Magic Number,RichardSzalay.MockHttp.Tests.Issues,Issue29Tests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\Issues\Issue29Tests.cs,Can_simulate_timeout,The following statement contains a magic number: client.Timeout = TimeSpan.FromMilliseconds(1000);
Magic Number,RichardSzalay.MockHttp.Tests,MockHttpMessageHandlerTests,C:\research\architectureSmells\repos\richardszalay_mockhttp\RichardSzalay.MockHttp.Tests\MockHttpMessageHandlerTests.cs,GetMatchCount_returns_call_count,The following statement contains a magic number: Assert.Equal(2' mockHandler.GetMatchCount(testARequest));
