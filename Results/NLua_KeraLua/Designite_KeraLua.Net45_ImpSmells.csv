Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KeraLua,DynamicLibraryPath,C:\repos\NLua_KeraLua\src\KeraLua\DynamicLibraryPath.cs,RegisterLibrarySearchPath,The length of the statement  "					string newLdLibraryPath = string.IsNullOrEmpty (currentLdLibraryPath) ? path : currentLdLibraryPath + Path.PathSeparator + path; " is 128.
Long Statement,KeraLua,Lua,C:\repos\NLua_KeraLua\src\KeraLua\Lua.cs,LuaToCFunction,The length of the statement  "			LuaNativeFunction function = Marshal.GetDelegateForFunctionPointer (ptr' typeof (LuaNativeFunction)) as LuaNativeFunction;" is 122.
Complex Conditional,KeraLua,CharPtr,C:\repos\NLua_KeraLua\src\KeraLua\CharPtr.cs,ToString,The conditional expression  "length > 3 && buff [0] == 0x1B && buff [1] == 0x4C && buff [2] == 0x75 && buff [3] == 0x61"  is complex.
Magic Number,KeraLua,CharPtr,C:\repos\NLua_KeraLua\src\KeraLua\CharPtr.cs,ToString,The following statement contains a magic number: if (length > 3 && buff [0] == 0x1B && buff [1] == 0x4C && buff [2] == 0x75 && buff [3] == 0x61) {  				// It is a binary chunk  				StringBuilder s = new StringBuilder (length);  				foreach (byte b in buff)  					s.Append ((char)b);  				return s.ToString ();  			} else  #if WSTRING  #if WINDOWS_PHONE || NETFX_CORE  				return Encoding.UTF8.GetString (buff' 0' buff.Length);  #else  				return Encoding.UTF8.GetString (buff);  #endif  #else  				return PointerToString(str' length);
Magic Number,KeraLua,CharPtr,C:\repos\NLua_KeraLua\src\KeraLua\CharPtr.cs,ToString,The following statement contains a magic number: if (length > 3 && buff [0] == 0x1B && buff [1] == 0x4C && buff [2] == 0x75 && buff [3] == 0x61) {  				// It is a binary chunk  				StringBuilder s = new StringBuilder (length);  				foreach (byte b in buff)  					s.Append ((char)b);  				return s.ToString ();  			} else  #if WSTRING  #if WINDOWS_PHONE || NETFX_CORE  				return Encoding.UTF8.GetString (buff' 0' buff.Length);  #else  				return Encoding.UTF8.GetString (buff);  #endif  #else  				return PointerToString(str' length);
Magic Number,KeraLua,CharPtr,C:\repos\NLua_KeraLua\src\KeraLua\CharPtr.cs,ToString,The following statement contains a magic number: if (length > 3 && buff [0] == 0x1B && buff [1] == 0x4C && buff [2] == 0x75 && buff [3] == 0x61) {  				// It is a binary chunk  				StringBuilder s = new StringBuilder (length);  				foreach (byte b in buff)  					s.Append ((char)b);  				return s.ToString ();  			} else  #if WSTRING  #if WINDOWS_PHONE || NETFX_CORE  				return Encoding.UTF8.GetString (buff' 0' buff.Length);  #else  				return Encoding.UTF8.GetString (buff);  #endif  #else  				return PointerToString(str' length);
Magic Number,KeraLua,DynamicLibraryPath,C:\repos\NLua_KeraLua\src\KeraLua\DynamicLibraryPath.cs,RegisterPathForDll,The following statement contains a magic number: if (IntPtr.Size == 8)  				Register64bitPath (assemblyPath' dllName);  			else  				Register32bitPath (assemblyPath' dllName);
Missing Default,KeraLua,DynamicLibraryPath,C:\repos\NLua_KeraLua\src\KeraLua\DynamicLibraryPath.cs,GetDllExtension,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform) {  				case PlatformID.Win32NT:  				case PlatformID.Win32S:  				case PlatformID.Win32Windows:  					return ".dll";  				case PlatformID.Unix:  					return ".so";  				case PlatformID.MacOSX:  					return ".dylib";  			}
Missing Default,KeraLua,DynamicLibraryPath,C:\repos\NLua_KeraLua\src\KeraLua\DynamicLibraryPath.cs,RegisterLibrarySearchPath,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform) {  				case PlatformID.Win32NT:  				case PlatformID.Win32S:  				case PlatformID.Win32Windows:  					SetDllDirectory (path);  					break;  				case PlatformID.Unix:  				case PlatformID.MacOSX:  					string currentLdLibraryPath = Environment.GetEnvironmentVariable (LD_LIBRARY_PATH) ?? string.Empty;  					string newLdLibraryPath = string.IsNullOrEmpty (currentLdLibraryPath) ? path : currentLdLibraryPath + Path.PathSeparator + path;  					Environment.SetEnvironmentVariable (LD_LIBRARY_PATH' newLdLibraryPath);  					break;  			}
