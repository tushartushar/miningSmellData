Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.WPF.CoreSettings,SettingViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,Apply,Cyclomatic complexity of the method is 11
Complex Method,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 13
Long Parameter List,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,OnWindowMessage,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Statement,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/coresettings/bandwidthcheckdialog.xaml"' System.UriKind.Relative); " is 142.
Long Statement,PeerCastStation.WPF.CoreSettings,RelaySettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\RelaySettingControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/coresettings/relaysettingcontrol.xaml"' System.UriKind.Relative); " is 141.
Long Statement,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/coresettings/settingcontrol.xaml"' System.UriKind.Relative); " is 136.
Long Statement,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click); " is 123.
Long Statement,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click); " is 123.
Long Statement,PeerCastStation.WPF,IntegerUpDown,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\IntegerUpDown.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/integerupdown.xaml"' System.UriKind.Relative); " is 122.
Long Statement,PeerCastStation.WPF,SettingsDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\SettingsDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/settingsdialog.xaml"' System.UriKind.Relative); " is 123.
Long Statement,PeerCastStation.WPF.ChannelLists.ConnectionLists,ConnectionListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ConnectionLists\ConnectionListControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/channellists/connectionlists/connectionlistcontrol" + " is 129.
Long Statement,PeerCastStation.WPF.ChannelLists.Dialogs,BroadcastWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\Dialogs\BroadcastWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/channellists/dialogs/broadcastwindow.xaml"' System.UriKind.Relative); " is 145.
Long Statement,PeerCastStation.WPF.ChannelLists.ChannelInfos,ChannelInfoControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelInfos\ChannelInfoControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/channellists/channelinfos/channelinfocontrol.xaml"' System.UriKind.Relative); " is 153.
Long Statement,PeerCastStation.WPF.ChannelLists,ChannelListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelListControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/channellists/channellistcontrol.xaml"' System.UriKind.Relative); " is 140.
Long Statement,PeerCastStation.WPF.ChannelLists,ChannelListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelListControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.TabControl_SelectionChanged); " is 158.
Long Statement,PeerCastStation.WPF.ChannelLists.RelayTrees,RelayTreeControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\RelayTrees\RelayTreeControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/channellists/relaytrees/relaytreecontrol.xaml"' System.UriKind.Relative); " is 149.
Long Statement,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/dialogs/updaterwindow.xaml"' System.UriKind.Relative); " is 130.
Long Statement,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,Connect,The length of the statement  "            ((PeerCastStation.WPF.Dialogs.UpdaterWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded); " is 122.
Long Statement,PeerCastStation.WPF.Dialogs,VersionInfoWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\VersionInfoWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/dialogs/versioninfowindow.xaml"' System.UriKind.Relative); " is 134.
Long Statement,PeerCastStation.WPF.Logs,LogControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Logs\LogControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PeerCastStation.WPF;component/logs/logcontrol.xaml"' System.UriKind.Relative); " is 124.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Virtual Method Call from Constructor,PeerCastStation.WPF.ChannelLists.ConnectionLists,ConnectionListViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ConnectionLists\ConnectionListViewModel.cs,ConnectionListViewModel,The constructor "ConnectionListViewModel" calls a virtual method "Disconnect".
Virtual Method Call from Constructor,PeerCastStation.WPF.ChannelLists.ConnectionLists,ConnectionListViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ConnectionLists\ConnectionListViewModel.cs,ConnectionListViewModel,The constructor "ConnectionListViewModel" calls a virtual method "Reconnect".
Virtual Method Call from Constructor,PeerCastStation.WPF.Logs,LogViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Logs\LogViewModel.cs,LogViewModel,The constructor "LogViewModel" calls a virtual method "OnPropertyChanged".
Empty Catch Block,PeerCastStation.WPF.CoreSettings,SettingViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,AddPort,The method has an empty catch block.
Empty Catch Block,PeerCastStation.WPF.ChannelLists,ChannelListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelListControl.xaml.cs,OnCopyContactUrlExecuted,The method has an empty catch block.
Empty Catch Block,PeerCastStation.WPF.ChannelLists,ChannelListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelListControl.xaml.cs,OnCopyStreamUrlExecuted,The method has an empty catch block.
Empty Catch Block,PeerCastStation.WPF.Dialogs,UpdaterViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterViewModel.cs,DoInstall,The method has an empty catch block.
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {          Result = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;          Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'            args.Bitrate/1000'            (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);        }        else {          Status = "帯域測定失敗。接続できませんでした";        }
Magic Number,PeerCastStation.WPF.CoreSettings,SettingViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,SettingViewModel,The following statement contains a magic number: channelCleanupInactiveLimit = ChannelCleaner.InactiveLimit/60000;
Magic Number,PeerCastStation.WPF.CoreSettings,SettingViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,AddPort,The following statement contains a magic number: var new_port = 7144;
Magic Number,PeerCastStation.WPF.CoreSettings,SettingViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,Apply,The following statement contains a magic number: ChannelCleaner.InactiveLimit = channelCleanupInactiveLimit*60000;
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,CheckBandwidthCommand,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingViewModel.cs,checker_BandwidthCheckCompleted,The following statement contains a magic number: if (args.Success) {            owner.MaxUpstreamRate = (int)((args.Bitrate / 1000) * 0.8 / 100) * 100;            Status = String.Format("帯域測定完了: {0}kbps' 設定推奨値: {1}kbps"'              args.Bitrate/1000'              (int)((args.Bitrate / 1000) * 0.8 / 100) * 100);          }          else {            Status = "帯域測定失敗。接続できませんでした";          }
Magic Number,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 127 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 146 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 240 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 294 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 5:              this.advancedSettings = ((System.Windows.Controls.RadioButton)(target));              return;              }
Magic Number,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 127 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 146 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 240 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 294 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 5:              this.advancedSettings = ((System.Windows.Controls.RadioButton)(target));              return;              }
Magic Number,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 127 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 146 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 240 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 294 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 5:              this.advancedSettings = ((System.Windows.Controls.RadioButton)(target));              return;              }
Magic Number,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 127 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 146 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 240 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 294 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 5:              this.advancedSettings = ((System.Windows.Controls.RadioButton)(target));              return;              }
Magic Number,PeerCastStation.WPF,IntegerUpDown,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\IntegerUpDown.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.valueTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_KeyDown);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.LostFocus += new System.Windows.RoutedEventHandler(this.valueTextBox_Validate);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.MouseWheel += new System.Windows.Input.MouseWheelEventHandler(this.valueTextBox_MouseWheel);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.upButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 18 "..\..\IntegerUpDown.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 3:              this.downButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 21 "..\..\IntegerUpDown.xaml"              this.downButton.Click += new System.Windows.RoutedEventHandler(this.downButton_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF,IntegerUpDown,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\IntegerUpDown.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.valueTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_KeyDown);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.LostFocus += new System.Windows.RoutedEventHandler(this.valueTextBox_Validate);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.MouseWheel += new System.Windows.Input.MouseWheelEventHandler(this.valueTextBox_MouseWheel);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.upButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 18 "..\..\IntegerUpDown.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 3:              this.downButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 21 "..\..\IntegerUpDown.xaml"              this.downButton.Click += new System.Windows.RoutedEventHandler(this.downButton_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF,NotifyIconManager,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\NotifyIconManager.cs,NotifyNewVersions,The following statement contains a magic number: notifyIcon.ShowBalloonTip(          60000'          "新しいバージョンがあります"'          newVersionInfo.First().Title'          ToolTipIcon.Info);
Magic Number,PeerCastStation.WPF,NotifyIconManager,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\NotifyIconManager.cs,ShowNotificationMessage,The following statement contains a magic number: var timeout = 5000;
Magic Number,PeerCastStation.WPF,SettingsDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\SettingsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 19 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 20 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 21 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ApplyButton_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF,SettingsDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\SettingsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 19 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 20 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 21 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ApplyButton_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF,UISettingsViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\UISettingsViewModel.cs,AddBroadcastHistory,The following statement contains a magic number: BroadcastHistory = new ObservableCollection<BroadcastInfoViewModel>(          fav.Concat(Enumerable.Repeat(info' 1))             .Concat(others.Take(19))        );
Magic Number,PeerCastStation.WPF,UserInterface,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\UserInterface.cs,OnStart,The following statement contains a magic number: versionCheckTimer = new Timer(OnVersionCheckTimer' null' 1000' 1000*3600*24);
Magic Number,PeerCastStation.WPF,UserInterface,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\UserInterface.cs,OnStart,The following statement contains a magic number: versionCheckTimer = new Timer(OnVersionCheckTimer' null' 1000' 1000*3600*24);
Magic Number,PeerCastStation.WPF,UserInterface,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\UserInterface.cs,OnStart,The following statement contains a magic number: versionCheckTimer = new Timer(OnVersionCheckTimer' null' 1000' 1000*3600*24);
Magic Number,PeerCastStation.WPF,UserInterface,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\UserInterface.cs,OnStart,The following statement contains a magic number: versionCheckTimer = new Timer(OnVersionCheckTimer' null' 1000' 1000*3600*24);
Magic Number,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (IsFinite(this.Left) && IsFinite(this.Width)) {          if (this.Width>SystemParameters.VirtualScreenWidth) {            this.Width = SystemParameters.VirtualScreenWidth;          }          if (this.Left+this.Width/2<SystemParameters.VirtualScreenLeft) {            this.Left = SystemParameters.VirtualScreenLeft;          }          if (this.Left+this.Width/2>SystemParameters.VirtualScreenWidth+SystemParameters.VirtualScreenLeft) {            this.Left = SystemParameters.VirtualScreenWidth+SystemParameters.VirtualScreenLeft - this.Width;          }        }
Magic Number,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (IsFinite(this.Left) && IsFinite(this.Width)) {          if (this.Width>SystemParameters.VirtualScreenWidth) {            this.Width = SystemParameters.VirtualScreenWidth;          }          if (this.Left+this.Width/2<SystemParameters.VirtualScreenLeft) {            this.Left = SystemParameters.VirtualScreenLeft;          }          if (this.Left+this.Width/2>SystemParameters.VirtualScreenWidth+SystemParameters.VirtualScreenLeft) {            this.Left = SystemParameters.VirtualScreenWidth+SystemParameters.VirtualScreenLeft - this.Width;          }        }
Magic Number,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (IsFinite(this.Top) && IsFinite(this.Height)) {          if (this.Height>SystemParameters.VirtualScreenHeight) {            this.Height = SystemParameters.VirtualScreenHeight;          }          if (this.Top<SystemParameters.VirtualScreenTop) {            this.Top = SystemParameters.VirtualScreenTop;          }          if (this.Top+this.Height/2>SystemParameters.VirtualScreenHeight+SystemParameters.VirtualScreenTop) {            this.Top = SystemParameters.VirtualScreenHeight+SystemParameters.VirtualScreenTop - this.Height;          }        }
Magic Number,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 56 "..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCheck_Click);                            #line default              #line hidden              return;              case 2:              this.ChannelList = ((PeerCastStation.WPF.ChannelLists.ChannelListControl)(target));              return;              }
Magic Number,PeerCastStation.WPF.ChannelLists.Dialogs,BroadcastWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\Dialogs\BroadcastWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 193 "..\..\..\..\ChannelLists\Dialogs\BroadcastWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:                            #line 194 "..\..\..\..\ChannelLists\Dialogs\BroadcastWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF.Dialogs,UpdaterViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterViewModel.cs,DoDownload,The following statement contains a magic number: client.DownloadProgressChanged += (sender' args) => {          this.Progress = args.ProgressPercentage/100.0;        };
Magic Number,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((PeerCastStation.WPF.Dialogs.UpdaterWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:              this.FormsHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              case 3:              this.UpdateButton = ((System.Windows.Controls.Button)(target));                            #line 87 "..\..\..\Dialogs\UpdaterWindow.xaml"              this.UpdateButton.Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 118 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((PeerCastStation.WPF.Dialogs.UpdaterWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:              this.FormsHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              case 3:              this.UpdateButton = ((System.Windows.Controls.Button)(target));                            #line 87 "..\..\..\Dialogs\UpdaterWindow.xaml"              this.UpdateButton.Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 118 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((PeerCastStation.WPF.Dialogs.UpdaterWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:              this.FormsHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              case 3:              this.UpdateButton = ((System.Windows.Controls.Button)(target));                            #line 87 "..\..\..\Dialogs\UpdaterWindow.xaml"              this.UpdateButton.Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 118 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,PeerCastStation.WPF.Logs,LogControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Logs\LogControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 46 "..\..\..\Logs\LogControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.outputFileName = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,PeerCastStation.WPF.CoreSettings,BandwidthCheckDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\BandwidthCheckDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 21 "..\..\..\CoreSettings\BandwidthCheckDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF.CoreSettings,SettingControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\CoreSettings\SettingControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 127 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 146 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 240 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PortCheckButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 294 "..\..\..\CoreSettings\SettingControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BandwidthCheckButton_Click);                            #line default              #line hidden              return;              case 5:              this.advancedSettings = ((System.Windows.Controls.RadioButton)(target));              return;              }
Missing Default,PeerCastStation.WPF,IntegerUpDown,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\IntegerUpDown.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.valueTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_KeyDown);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.LostFocus += new System.Windows.RoutedEventHandler(this.valueTextBox_Validate);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.MouseWheel += new System.Windows.Input.MouseWheelEventHandler(this.valueTextBox_MouseWheel);                            #line default              #line hidden                            #line 17 "..\..\IntegerUpDown.xaml"              this.valueTextBox.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.valueTextBox_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.upButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 18 "..\..\IntegerUpDown.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 3:              this.downButton = ((System.Windows.Controls.Primitives.RepeatButton)(target));                            #line 21 "..\..\IntegerUpDown.xaml"              this.downButton.Click += new System.Windows.RoutedEventHandler(this.downButton_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF,NotifyIconManager,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\NotifyIconManager.cs,ShowNotificationMessage,The following switch statement is missing a default case: switch (msg.Type) {        case NotificationMessageType.Normal:  icon = ToolTipIcon.None; break;        case NotificationMessageType.Info:    icon = ToolTipIcon.Info; break;        case NotificationMessageType.Warning: icon = ToolTipIcon.Warning; break;        case NotificationMessageType.Error:   icon = ToolTipIcon.Error; break;        }
Missing Default,PeerCastStation.WPF,SettingsDialog,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\SettingsDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 19 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 2:                            #line 20 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 21 "..\..\SettingsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ApplyButton_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF,MainWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 56 "..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCheck_Click);                            #line default              #line hidden              return;              case 2:              this.ChannelList = ((PeerCastStation.WPF.ChannelLists.ChannelListControl)(target));              return;              }
Missing Default,PeerCastStation.WPF.ChannelLists.Dialogs,BroadcastWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\Dialogs\BroadcastWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 193 "..\..\..\..\ChannelLists\Dialogs\BroadcastWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:                            #line 194 "..\..\..\..\ChannelLists\Dialogs\BroadcastWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF.ChannelLists,ChannelListControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\ChannelLists\ChannelListControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 138 "..\..\..\ChannelLists\ChannelListControl.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.TabControl_SelectionChanged);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF.Dialogs,UpdaterViewModel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterViewModel.cs,Execute,The following switch statement is missing a default case: switch (this.State) {  			case UpdateActionState.Idle:  			case UpdateActionState.NoUpdates:  				await DoCheckUpdate();  				break;  			case UpdateActionState.NewVersionFound:  			case UpdateActionState.Aborted:  				await DoDownload();  				break;  			case UpdateActionState.Checking:  			case UpdateActionState.Downloading:  				cancelSource.Cancel();  				break;  			case UpdateActionState.Downloaded:  				DoInstall();  				break;  			}
Missing Default,PeerCastStation.WPF.Dialogs,UpdaterWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\UpdaterWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 26 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((PeerCastStation.WPF.Dialogs.UpdaterWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden              return;              case 2:              this.FormsHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              case 3:              this.UpdateButton = ((System.Windows.Controls.Button)(target));                            #line 87 "..\..\..\Dialogs\UpdaterWindow.xaml"              this.UpdateButton.Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 118 "..\..\..\Dialogs\UpdaterWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF.Dialogs,VersionInfoWindow,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Dialogs\VersionInfoWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 45 "..\..\..\Dialogs\VersionInfoWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,PeerCastStation.WPF.Logs,LogControl,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.WPF\Logs\LogControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 46 "..\..\..\Logs\LogControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 2:              this.outputFileName = ((System.Windows.Controls.TextBox)(target));              return;              }
