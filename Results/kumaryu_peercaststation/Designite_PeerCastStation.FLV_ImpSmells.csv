Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadValue,Cyclomatic complexity of the method is 19
Complex Method,PeerCastStation.FLV.AMF,AMF0Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Writer.cs,WriteValue,Cyclomatic complexity of the method is 16
Complex Method,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadValue,Cyclomatic complexity of the method is 14
Complex Method,PeerCastStation.FLV.AMF,AMF3Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Writer.cs,WriteValue,Cyclomatic complexity of the method is 16
Complex Method,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,Cyclomatic complexity of the method is 18
Complex Method,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.FLV,FLVToTSContentFilterSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ProcessMessagesAsync,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ProcessMessage,Cyclomatic complexity of the method is 15
Complex Method,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommand,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,ProcessMessage,Cyclomatic complexity of the method is 15
Complex Method,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommand,Cyclomatic complexity of the method is 8
Long Parameter List,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ADTSHeader,The method has 16 parameters. Parameters: sync' id' layer' crc_absent' profile' sampling_freq_index' is_private' channel_configuration' is_original' is_home' copyright_id_bit' copyright_id_start' frame_length' buffer_fullness' raw_data_blocks' crc
Long Parameter List,PeerCastStation.FLV.RTMP,RTMPMessageBuilder,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RTMPMessageBuilder,The method has 5 parameters. Parameters: x' timestamp' type_id' chunk_message_stream_id' body_length
Long Parameter List,PeerCastStation.FLV.RTMP,RTMPMessageBuilder,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RTMPMessageBuilder,The method has 5 parameters. Parameters: x' timestamp' type_id' chunk_message_stream_id' body_length
Long Parameter List,PeerCastStation.FLV.RTMP,CommandMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,Create,The method has 7 parameters. Parameters: version' timestamp' stream_id' command_name' transaction_id' command_object' arguments
Long Parameter List,PeerCastStation.FLV.RTMP,CommandAMF3Message,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,CommandAMF3Message,The method has 6 parameters. Parameters: timestamp' stream_id' command_name' transaction_id' command_object' arguments
Long Parameter List,PeerCastStation.FLV.RTMP,CommandAMF0Message,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,CommandAMF0Message,The method has 6 parameters. Parameters: timestamp' stream_id' command_name' transaction_id' command_object' arguments
Long Parameter List,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,SendOnStatus,The method has 6 parameters. Parameters: stream_id' transaction' level' code' description' cancel_token
Long Statement,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,OnContentChanged,The length of the statement  "        ContentSink.OnContent(new Content(streamIndex' DateTime.Now-streamOrigin' position' bodyBuffer.ToArray()' GetContentFlags(content))); " is 133.
Long Statement,PeerCastStation.FLV,FLVToTSContentFilterSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnChannelInfo,The length of the statement  "        msgQueue.Enqueue(new ContentMessage { Type=ContentMessage.MessageType.ChannelInfo' ChannelInfo=new ChannelInfo(info) }); " is 120.
Long Statement,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The length of the statement  "      await SendMessage(2' new SetPeerBandwidthMessage(this.Now' 0' sendWindowSize' PeerBandwidthLimitType.Hard)' cancel_token).ConfigureAwait(false); " is 144.
Long Statement,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The length of the statement  "        await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' msg.StreamId)' cancel_token).ConfigureAwait(false); " is 127.
Long Statement,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The length of the statement  "      await SendMessage(2' new SetPeerBandwidthMessage(this.Now' 0' sendWindowSize' PeerBandwidthLimitType.Hard)' cancel_token).ConfigureAwait(false); " is 144.
Long Statement,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandPublish,The length of the statement  "      await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' msg.StreamId)' cancel_token).ConfigureAwait(false); " is 127.
Complex Conditional,PeerCastStation.FLV,FLVContentReaderFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentReader.cs,TryParseContentType,The conditional expression  "header.Length>=13 && header[0]=='F' && header[1]=='L' && header[2]=='V'"  is complex.
Complex Conditional,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The conditional expression  "(b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)"  is complex.
Complex Conditional,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The conditional expression  "(b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)"  is complex.
Complex Conditional,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The conditional expression  "data.Position<data.Length &&                (avc_profile_indication==100 ||                 avc_profile_indication==110 ||                 avc_profile_indication==122 ||                 avc_profile_indication==144)"  is complex.
Empty Catch Block,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvAndProcessMessages,The method has an empty catch block.
Empty Catch Block,PeerCastStation.FLV.RTMP,RTMPOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPOutputStream.cs,CheckAuthotization,The method has an empty catch block.
Empty Catch Block,PeerCastStation.FLV.RTMP,RTMPOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPOutputStream.cs,CheckAuthotization,The method has an empty catch block.
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadUI32,The following statement contains a magic number: var buf = new byte[4];
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadUI32,The following statement contains a magic number: BaseStream.Read(buf' 0' 4);
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadUI16,The following statement contains a magic number: var buf = new byte[2];
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadUI16,The following statement contains a magic number: BaseStream.Read(buf' 0' 2);
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadDouble,The following statement contains a magic number: var buf = new byte[8];
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadDouble,The following statement contains a magic number: BaseStream.Read(buf' 0' 8);
Magic Number,PeerCastStation.FLV.AMF,AMF0Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Reader.cs,ReadDate,The following statement contains a magic number: return (new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddMilliseconds(time);
Magic Number,PeerCastStation.FLV.AMF,AMF0Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Writer.cs,WriteUI32,The following statement contains a magic number: BaseStream.Write(buf' 0' 4);
Magic Number,PeerCastStation.FLV.AMF,AMF0Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Writer.cs,WriteUI16,The following statement contains a magic number: BaseStream.Write(buf' 0' 2);
Magic Number,PeerCastStation.FLV.AMF,AMF0Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Writer.cs,WriteDouble,The following statement contains a magic number: BaseStream.Write(buf' 0' 8);
Magic Number,PeerCastStation.FLV.AMF,AMF0Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF0Writer.cs,WriteDate,The following statement contains a magic number: var org = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Local);
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadUI29,The following statement contains a magic number: v = (v<<8) | b;
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadUI29,The following statement contains a magic number: i==3
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadUI29,The following statement contains a magic number: i<4
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadDouble,The following statement contains a magic number: var buf = new byte[8];
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadDouble,The following statement contains a magic number: BaseStream.Read(buf' 0' 8);
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadObject,The following statement contains a magic number: klass = classes[idx>>2];
Magic Number,PeerCastStation.FLV.AMF,AMF3Reader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Reader.cs,ReadDate,The following statement contains a magic number: return RegisterObject(new AMFValue(new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Local).AddMilliseconds(time)));
Magic Number,PeerCastStation.FLV.AMF,AMF3Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Writer.cs,WriteDouble,The following statement contains a magic number: BaseStream.Write(buf' 0' 8);
Magic Number,PeerCastStation.FLV.AMF,AMF3Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Writer.cs,WriteDate,The following statement contains a magic number: var org = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Local);
Magic Number,PeerCastStation.FLV.AMF,AMF3Writer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\AMF\AMF3Writer.cs,WriteObject,The following statement contains a magic number: WriteUI29((idx.Value << 2) | 0x01);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,IsAVCHeader,The following statement contains a magic number: return           msg.MessageType==RTMPMessageType.Video &&           msg.Body.Length>3 &&          (msg.Body[0]==0x17 &&           msg.Body[1]==0x00 &&           msg.Body[2]==0x00 &&           msg.Body[3]==0x00);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,IsAVCHeader,The following statement contains a magic number: return           msg.MessageType==RTMPMessageType.Video &&           msg.Body.Length>3 &&          (msg.Body[0]==0x17 &&           msg.Body[1]==0x00 &&           msg.Body[2]==0x00 &&           msg.Body[3]==0x00);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,IsAVCHeader,The following statement contains a magic number: return           msg.MessageType==RTMPMessageType.Video &&           msg.Body.Length>3 &&          (msg.Body[0]==0x17 &&           msg.Body[1]==0x00 &&           msg.Body[2]==0x00 &&           msg.Body[3]==0x00);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,WriteMessage,The following statement contains a magic number: writer.Write((byte)((timestamp>>24) & 0xFF));
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,WriteMessage,The following statement contains a magic number: writer.Write(msg.Body.Length+11);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,OnHeaderChanged,The following statement contains a magic number: writer.Write((byte)5);
Magic Number,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,OnHeaderChanged,The following statement contains a magic number: writer.WriteUInt32(9);
Magic Number,PeerCastStation.FLV,FLVContentReaderFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentReader.cs,TryParseContentType,The following statement contains a magic number: header.Length>=13 && header[0]=='F' && header[1]=='L' && header[2]=='V'
Magic Number,PeerCastStation.FLV,FLVContentReaderFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentReader.cs,TryParseContentType,The following statement contains a magic number: header.Length>=13 && header[0]=='F' && header[1]=='L' && header[2]=='V'
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Signature  = new byte[] { binary[0]' binary[1]' binary[2] };
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Version    = binary[3];
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.HasAudio   = (binary[4] & 0x4)!=0;
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.HasVideo   = (binary[4] & 0x1)!=0;
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.DataOffset = (binary[5]<<24) | (binary[ 6]<<16) | (binary[ 7]<<8) | (binary[ 8]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVFileHeader,The following statement contains a magic number: this.Size       = (binary[9]<<24) | (binary[10]<<16) | (binary[11]<<8) | (binary[12]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,GetUInt32,The following statement contains a magic number: return (bin[0]<<24) | (bin[1]<<16) | (bin[2]<<8) | (bin[3]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,GetUInt32,The following statement contains a magic number: return (bin[0]<<24) | (bin[1]<<16) | (bin[2]<<8) | (bin[3]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,GetUInt32,The following statement contains a magic number: return (bin[0]<<24) | (bin[1]<<16) | (bin[2]<<8) | (bin[3]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,GetUInt32,The following statement contains a magic number: return (bin[0]<<24) | (bin[1]<<16) | (bin[2]<<8) | (bin[3]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,GetUInt32,The following statement contains a magic number: return (bin[0]<<24) | (bin[1]<<16) | (bin[2]<<8) | (bin[3]<<0);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following statement contains a magic number: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: var bin = new byte[13];
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: len += await stream.ReadBytesAsync(bin' len' 13-len' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: len += await stream.ReadBytesAsync(bin' len' 11-len' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: (b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: (b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)
Magic Number,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following statement contains a magic number: (b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.DataSize  =                   (binary[1]<<16) | (binary[2]<<8) | (binary[3]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.DataSize  =                   (binary[1]<<16) | (binary[2]<<8) | (binary[3]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.DataSize  =                   (binary[1]<<16) | (binary[2]<<8) | (binary[3]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.DataSize  =                   (binary[1]<<16) | (binary[2]<<8) | (binary[3]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.Timestamp = (binary[7]<<24) | (binary[4]<<16) | (binary[5]<<8) | (binary[6]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.StreamID  =                   (binary[8]<<16) | (binary[9]<<8) | (binary[10]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.StreamID  =                   (binary[8]<<16) | (binary[9]<<8) | (binary[10]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.StreamID  =                   (binary[8]<<16) | (binary[9]<<8) | (binary[10]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.StreamID  =                   (binary[8]<<16) | (binary[9]<<8) | (binary[10]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,FLVTag,The following statement contains a magic number: this.StreamID  =                   (binary[8]<<16) | (binary[9]<<8) | (binary[10]);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadFooter,The following statement contains a magic number: this.Footer = owner.ReadBytes(stream' 4' out eos);
Magic Number,PeerCastStation.FLV,FLVTag,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadTagBodyAsync,The following statement contains a magic number: this.Footer = await stream.ReadBytesAsync(4' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,RTMPMessageExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,GetPacketType,The following statement contains a magic number: switch (msg.MessageType) {        case RTMPMessageType.Audio:          if (msg.Body.Length<2) return FLVPacketType.AudioData;          switch ((msg.Body[0] & 0xF0)>>4) {          case 10:            if (msg.Body[1]==0) {              return FLVPacketType.AACSequenceHeader;            }            else {              return FLVPacketType.AACRawData;            }          default:            return FLVPacketType.AudioData;          }        case RTMPMessageType.Video:          if (msg.Body.Length<2) return FLVPacketType.VideoData;          switch (msg.Body[0] & 0x0F) {          case 7:            switch (msg.Body[1]) {            case 0:              return FLVPacketType.AVCSequenceHeader;            case 1:              switch ((msg.Body[0] & 0xF0)>>4) {              case 1:              case 4:                return FLVPacketType.AVCNALUnitKeyFrame;              default:                return FLVPacketType.AVCNALUnitInterFrame;              }            case 2:              return FLVPacketType.AVCEOS;            default:              return FLVPacketType.VideoData;            }          default:            return FLVPacketType.VideoData;          }        default:          return FLVPacketType.Unknown;        }
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,CRC32,The following statement contains a magic number: return bytes.Aggregate(crc' (c'b) => CRC32Table[(c & 0xFF) ^ b] ^ (c >> 8));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePAT,The following statement contains a magic number: body.WriteByte((3<<6) | (pat.Version << 1) | (pat.CurrentNextIndicator ? 1 : 0));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePAT,The following statement contains a magic number: body.WriteByte((3<<6) | (pat.Version << 1) | (pat.CurrentNextIndicator ? 1 : 0));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePAT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | kv.Key);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePAT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | kv.Key);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteByte((3<<6) | (pmt.Version << 1) | (pmt.CurrentNextIndicator ? 1 : 0));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteByte((3<<6) | (pmt.Version << 1) | (pmt.CurrentNextIndicator ? 1 : 0));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | (pmt.PCRPID & 0x1FFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | (pmt.PCRPID & 0x1FFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((15<<12) | program_info_ary.Length);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((15<<12) | program_info_ary.Length);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | (entry.PID & 0x1FFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((7<<13) | (entry.PID & 0x1FFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((15<<12) | (entry.ESInfo.Length & 0xFFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WritePMT,The following statement contains a magic number: body.WriteUInt16BE((15<<12) | (entry.ESInfo.Length & 0xFFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteSection,The following statement contains a magic number: var section_syntax_indicator = (1<<15);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteSection,The following statement contains a magic number: var reserved                 = (3<<12);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteSection,The following statement contains a magic number: var reserved                 = (3<<12);
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteSection,The following statement contains a magic number: var section_length           = body.Length+4;
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: var maxlen = 184;
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: adaptation_field.WriteByte((byte)(                ((random_access ? 1 : 0)<<6) | ((pcr.HasValue ? 1 : 0)<<4)              ));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: adaptation_field.WriteByte((byte)(                ((random_access ? 1 : 0)<<6) | ((pcr.HasValue ? 1 : 0)<<4)              ));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: var pcr_base = pcr.Value.Tick / 300;
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: var pcr_ext  = pcr.Value.Tick % 300;
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: adaptation_field.WriteUInt16BE((int)(((pcr_base & 1) << 15) | (63 << 9) | pcr_ext));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: adaptation_field.WriteUInt16BE((int)(((pcr_base & 1) << 15) | (63 << 9) | pcr_ext));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: adaptation_field.WriteUInt16BE((int)(((pcr_base & 1) << 15) | (63 << 9) | pcr_ext));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: BaseStream.WriteUInt16BE(((payload_unit_start_indicator ? 1 : 0)<<14) | (pid & 0x1FFF));
Magic Number,PeerCastStation.FLV,TSWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTSPackets,The following statement contains a magic number: BaseStream.WriteByte((byte)((adaptation_field_control << 4) | (continuity_counter & 0xF)));
Magic Number,PeerCastStation.FLV,TSTimeStamp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,FromMilliseconds,The following statement contains a magic number: return new TSTimeStamp(ms * 27000);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var pts_dts_flags             = (pkt.PTS.HasValue ? (pkt.DTS.HasValue ? 3 : 2) : 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var pts_dts_flags             = (pkt.PTS.HasValue ? (pkt.DTS.HasValue ? 3 : 2) : 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var pts = pkt.PTS.Value.Tick / 300;
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var dts = pkt.DTS.Value.Tick / 300;
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: pes_header_data = new byte[10] {              (byte)((0x3 << 4) | (((pts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((pts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((0x1 << 4) | (((dts >> 30) & 0x0007)<<1) | 1)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >> 15) & 0x7FFF)<<1) | 1)&0xFF)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)>>8)'              (byte)((            (((dts >>  0) & 0x7FFF)<<1) | 1)&0xFF)'            };
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var packet_length = pkt.Payload.Length + 3 + pes_header_data.Length;
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data1 =            (0x2 << 6) |            ((pes_scrambling_control & 0x3) << 4) |            ((pes_priority             ? 1 : 0) << 3) |            ((data_alignment_indicator ? 1 : 0) << 2) |            ((copyright                ? 1 : 0) << 1) |            ((original_or_copy         ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data1 =            (0x2 << 6) |            ((pes_scrambling_control & 0x3) << 4) |            ((pes_priority             ? 1 : 0) << 3) |            ((data_alignment_indicator ? 1 : 0) << 2) |            ((copyright                ? 1 : 0) << 1) |            ((original_or_copy         ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data1 =            (0x2 << 6) |            ((pes_scrambling_control & 0x3) << 4) |            ((pes_priority             ? 1 : 0) << 3) |            ((data_alignment_indicator ? 1 : 0) << 2) |            ((copyright                ? 1 : 0) << 1) |            ((original_or_copy         ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data1 =            (0x2 << 6) |            ((pes_scrambling_control & 0x3) << 4) |            ((pes_priority             ? 1 : 0) << 3) |            ((data_alignment_indicator ? 1 : 0) << 2) |            ((copyright                ? 1 : 0) << 1) |            ((original_or_copy         ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data2 =            ((pts_dts_flags & 0x3) << 6) |            ((escr_flag                 ? 1 : 0) << 5) |            ((es_rate_flag              ? 1 : 0) << 4) |            ((dsm_trick_mode_flag       ? 1 : 0) << 3) |            ((additional_copy_info_flag ? 1 : 0) << 2) |            ((pes_crc_flag              ? 1 : 0) << 1) |            ((pes_extension_flag        ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data2 =            ((pts_dts_flags & 0x3) << 6) |            ((escr_flag                 ? 1 : 0) << 5) |            ((es_rate_flag              ? 1 : 0) << 4) |            ((dsm_trick_mode_flag       ? 1 : 0) << 3) |            ((additional_copy_info_flag ? 1 : 0) << 2) |            ((pes_crc_flag              ? 1 : 0) << 1) |            ((pes_extension_flag        ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data2 =            ((pts_dts_flags & 0x3) << 6) |            ((escr_flag                 ? 1 : 0) << 5) |            ((es_rate_flag              ? 1 : 0) << 4) |            ((dsm_trick_mode_flag       ? 1 : 0) << 3) |            ((additional_copy_info_flag ? 1 : 0) << 2) |            ((pes_crc_flag              ? 1 : 0) << 1) |            ((pes_extension_flag        ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data2 =            ((pts_dts_flags & 0x3) << 6) |            ((escr_flag                 ? 1 : 0) << 5) |            ((es_rate_flag              ? 1 : 0) << 4) |            ((dsm_trick_mode_flag       ? 1 : 0) << 3) |            ((additional_copy_info_flag ? 1 : 0) << 2) |            ((pes_crc_flag              ? 1 : 0) << 1) |            ((pes_extension_flag        ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,PESPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: var header_data2 =            ((pts_dts_flags & 0x3) << 6) |            ((escr_flag                 ? 1 : 0) << 5) |            ((es_rate_flag              ? 1 : 0) << 4) |            ((dsm_trick_mode_flag       ? 1 : 0) << 3) |            ((additional_copy_info_flag ? 1 : 0) << 2) |            ((pes_crc_flag              ? 1 : 0) << 1) |            ((pes_extension_flag        ? 1 : 0) << 0);
Magic Number,PeerCastStation.FLV,NALUnit,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ReadFrom,The following statement contains a magic number: var nal_ref_idc   = (data & 0x60)>>5;
Magic Number,PeerCastStation.FLV,NALUnit,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteToByteStream,The following statement contains a magic number: s.WriteByte((byte)((unit.NALRefIdc << 5) | (unit.NALUnitType & 0x1F)));
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Flush,The following statement contains a magic number: BaseStream.WriteByte((byte)((buffer<<(8-bufferLen)) | (padding & ((1<<(8-bufferLen))-1))));
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Flush,The following statement contains a magic number: BaseStream.WriteByte((byte)((buffer<<(8-bufferLen)) | (padding & ((1<<(8-bufferLen))-1))));
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Write,The following statement contains a magic number: BaseStream.WriteByte((byte)(buffer >> (bufferLen-8)));
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Write,The following statement contains a magic number: buffer = buffer & ((1<<(bufferLen-8))-1);
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Write,The following statement contains a magic number: bufferLen -= 8;
Magic Number,PeerCastStation.FLV,BitWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,Write,The following statement contains a magic number: bufferLen>=8
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(12' header.Sync);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(2' header.Layer);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(2' header.Profile);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(4' header.SamplingFreqIndex);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(3' header.ChannelConfigurtion);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(13' header.FrameLength);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(11' header.BufferFullness);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(2' header.RawDataBlocks);
Magic Number,PeerCastStation.FLV,ADTSHeader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,WriteTo,The following statement contains a magic number: s.Write(16' header.CRC);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: s.Seek(2' SeekOrigin.Current);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: var type = bs.ReadBits(5);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: type = bs.ReadBits(6)+32;
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: type = bs.ReadBits(6)+32;
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: type==31
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: var sampling_freq_idx = bs.ReadBits(4);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: var sampling_freq = sampling_freq_idx==0x0F ? bs.ReadBits(24) : sampling_freq_idx;
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACHeader,The following statement contains a magic number: var channel_configuration = bs.ReadBits(4);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACBody,The following statement contains a magic number: var raw_length = msg.Body.Length-2;
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAACBody,The following statement contains a magic number: pes_payload.Write(msg.Body' 2' raw_length);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The following statement contains a magic number: data.Seek(5' SeekOrigin.Current);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The following statement contains a magic number: data.Position<data.Length &&                (avc_profile_indication==100 ||                 avc_profile_indication==110 ||                 avc_profile_indication==122 ||                 avc_profile_indication==144)
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The following statement contains a magic number: data.Position<data.Length &&                (avc_profile_indication==100 ||                 avc_profile_indication==110 ||                 avc_profile_indication==122 ||                 avc_profile_indication==144)
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The following statement contains a magic number: data.Position<data.Length &&                (avc_profile_indication==100 ||                 avc_profile_indication==110 ||                 avc_profile_indication==122 ||                 avc_profile_indication==144)
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCHeader,The following statement contains a magic number: data.Position<data.Length &&                (avc_profile_indication==100 ||                 avc_profile_indication==110 ||                 avc_profile_indication==122 ||                 avc_profile_indication==144)
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,The following statement contains a magic number: var cts = msg.Body.Skip(2).Take(3).Aggregate(0' (r'v) => (r<<8) | v);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,The following statement contains a magic number: var cts = msg.Body.Skip(2).Take(3).Aggregate(0' (r'v) => (r<<8) | v);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,The following statement contains a magic number: var cts = msg.Body.Skip(2).Take(3).Aggregate(0' (r'v) => (r<<8) | v);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,The following statement contains a magic number: body.Seek(5' SeekOrigin.Begin);
Magic Number,PeerCastStation.FLV,Context,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,OnAVCBody,The following statement contains a magic number: var len = body.ReadBytes(nalSizeLen).Aggregate(0' (r'v) => (r<<8) | v);
Magic Number,PeerCastStation.FLV,BitReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ReadBits,The following statement contains a magic number: buffer = (buffer<<8) | b;
Magic Number,PeerCastStation.FLV,BitReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ReadBits,The following statement contains a magic number: bufferLen += 8;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,GetDigestOffset,The following statement contains a magic number: switch (pos) {        case DigestPosition.First:          return (vec[8]+vec[9]+vec[10]+vec[11]) % 728 + 12;        case DigestPosition.Second:          return (vec[772]+vec[773]+vec[774]+vec[775]) % 728 + 776;        default:          throw new ArgumentException();        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ComputeHandshakeDigest1,The following statement contains a magic number: var msg = new byte[vec.Length-32];
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ComputeHandshakeDigest1,The following statement contains a magic number: Array.Copy(vec' doffset+32' msg' doffset' vec.Length-32-doffset);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ComputeHandshakeDigest1,The following statement contains a magic number: Array.Copy(vec' doffset+32' msg' doffset' vec.Length-32-doffset);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ComputeHandshakeDigest2,The following statement contains a magic number: var key2 = hasher1.ComputeHash(keyvec' doffset' 32);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ComputeHandshakeDigest2,The following statement contains a magic number: return hasher2.ComputeHash(vec' 0' vec.Length-32);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SetServerHandshakeDigest1,The following statement contains a magic number: var key = new byte[36];
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SetServerHandshakeDigest1,The following statement contains a magic number: Array.Copy(GenuineFMSKey' key' 36);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SetServerHandshakeDigest1,The following statement contains a magic number: Array.Copy(hash' 0' vec' doffset' 32);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SetServerHandshakeDigest2,The following statement contains a magic number: Array.Copy(hash' 0' c1' c1.Length-32' 32);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SetServerHandshakeDigest2,The following statement contains a magic number: Array.Copy(hash' 0' c1' c1.Length-32' 32);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ValidateClientHandshakeDigest,The following statement contains a magic number: var key = new byte[30];
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ValidateClientHandshakeDigest,The following statement contains a magic number: Array.Copy(GenuineFPKey' key' 30);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ValidateClientHandshakeDigest,The following statement contains a magic number: return Enumerable.Range(doffset' 32).Select(i => vec[i]).SequenceEqual(hash);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ValidateClientHandshakeDigest2,The following statement contains a magic number: return Enumerable.Range(vec.Length-32' 32).Select(i => vec[i]).SequenceEqual(hash);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,ValidateClientHandshakeDigest2,The following statement contains a magic number: return Enumerable.Range(vec.Length-32' 32).Select(i => vec[i]).SequenceEqual(hash);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: var s1 = new byte[1536];
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[0] = s1[1] = s1[2] = s1[3] = 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[0] = s1[1] = s1[2] = s1[3] = 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[4] = 3;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[4] = 3;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[5] = 5;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[5] = 5;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[6] = 1;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: s1[7] = 1;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: var c1 = c1reader.ReadBytes(1536);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeNew,The following statement contains a magic number: var c2 = c2reader.ReadBytes(1536);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeOld,The following statement contains a magic number: var s1vec = new byte[1528];
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeOld,The following statement contains a magic number: var c1vec  = c1reader.ReadBytes(1528);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,HandshakeOld,The following statement contains a magic number: var c2vec = reader.ReadBytes(1528);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,Handshake,The following statement contains a magic number: c0!=3
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvStream,The following statement contains a magic number: await SendMessage(2' new AckMessage(this.Now' 0' sequenceNumber)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: chunk_stream_id = (await RecvStream(1' cancel_token).ConfigureAwait(false))[0] + 64;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: objectEncoding = ((int)msg.CommandObject["objectEncoding"])==3 ? 3 : 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: objectEncoding = ((int)msg.CommandObject["objectEncoding"])==3 ? 3 : 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new SetChunkSizeMessage(this.Now' 0' sendChunkSize)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new SetWindowSizeMessage(this.Now' 0' recvWindowSize)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new SetPeerBandwidthMessage(this.Now' 0' sendWindowSize' PeerBandwidthLimitType.Hard)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' 0)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: var response = CommandMessage.Create(          objectEncoding'          this.Now'          msg.StreamId'          "_result"'          msg.TransactionId'          new AMF.AMFValue(new AMF.AMFObject {            { "fmsVer"'       "FMS/3'5'5'2004" }'            { "capabilities"' 31 }'            { "mode"'         1 }'          })'          new AMF.AMFValue(new AMF.AMFObject {            { "level"'          "status" }'            { "code"'           "NetConnection.Connect.Success" }'            { "description"'    "Connection succeeded" }'            { "data"'           new AMF.AMFObject { { "version"' "3'5'5'2004" } } }'            { "clientId"'       nextClientId++ }'            { "objectEncoding"' objectEncoding }'          })        );
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(3' response' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommandCreateStream,The following statement contains a magic number: await SendMessage(3' response' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,UserControlMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,UserControlMessage,The following statement contains a magic number: UserControlMessagePayload = reader.ReadBytes(x.Body.Length-2);
Magic Number,PeerCastStation.FLV.RTMP,CommandMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,Create,The following statement contains a magic number: switch (version) {        case 0:          return new CommandAMF0Message(timestamp' stream_id' command_name' transaction_id' command_object' arguments);        case 3:          return new CommandAMF3Message(timestamp' stream_id' command_name' transaction_id' command_object' arguments);        default:          throw new ArgumentException("Unsupported serialize version"' "version");        }
Magic Number,PeerCastStation.FLV.RTMP,AggregateMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,AggregateMessage,The following statement contains a magic number: prevlen==body.Length+11
Magic Number,PeerCastStation.FLV.RTMP,AggregateMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,CreateBody,The following statement contains a magic number: writer.Write((byte)((t>>24) & 0xFF));
Magic Number,PeerCastStation.FLV.RTMP,AggregateMessage,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPMessage.cs,CreateBody,The following statement contains a magic number: writer.Write(msg.Body.Length+11);
Magic Number,PeerCastStation.FLV.RTMP,RTMPOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPOutputStream.cs,RTMPOutputStream,The following statement contains a magic number: connection.WriteTimeout = 10000;
Magic Number,PeerCastStation.FLV.RTMP,RTMPOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPOutputStream.cs,CheckAuthotization,The following statement contains a magic number: authorization.Length>=2
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,RequestChannel,The following statement contains a magic number: await Task.WhenAny(          Task.Delay(10000)'          channel.WaitForReadyContentTypeAsync(cancel_token)).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,SendOnStatus,The following statement contains a magic number: await SendMessage(3' status_command' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: var start       = msg.Arguments.Count>1 ? (int)msg.Arguments[1] : -2;
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: var duration    = msg.Arguments.Count>2 ? (int)msg.Arguments[2] : -1;
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: var duration    = msg.Arguments.Count>2 ? (int)msg.Arguments[2] : -1;
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: var reset       = msg.Arguments.Count>3 ? (bool)msg.Arguments[3] : false;
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: var reset       = msg.Arguments.Count>3 ? (bool)msg.Arguments[3] : false;
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' msg.StreamId)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPPlayConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnCommandPlay,The following statement contains a magic number: await SendMessage(3' result' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPContentSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnData,The following statement contains a magic number: this.connection.PostMessage(3'            new RTMPMessage(              msg.MessageType'              msg.Timestamp'              this.connection.StreamId'              msg.Body)          );
Magic Number,PeerCastStation.FLV.RTMP,RTMPContentSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnVideo,The following statement contains a magic number: this.connection.PostMessage(3'            new RTMPMessage(              msg.MessageType'              msg.Timestamp - Math.Max(timestampBase' 0)'              this.connection.StreamId'              msg.Body)          );
Magic Number,PeerCastStation.FLV.RTMP,RTMPContentSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPPlayConnection.cs,OnAudio,The following statement contains a magic number: this.connection.PostMessage(3'            new RTMPMessage(              msg.MessageType'              msg.Timestamp - Math.Max(timestampBase' 0)'              this.connection.StreamId'              msg.Body)          );
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RTMPSourceConnection,The following statement contains a magic number: sink =          System.Text.RegularExpressions.Regex.Matches(source_uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")            .Cast<System.Text.RegularExpressions.Match>()            .Where(param => Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()=="filters")            .SelectMany(param => Uri.UnescapeDataString(param.Groups[3].Value).Split('''))            .Select(name => PeerCast.ContentFilters.FirstOrDefault(filter => filter.Name.ToLowerInvariant()==name.ToLowerInvariant()))            .Where(filter => filter!=null)            .Aggregate(sink' (r'filter) => filter.Activate(r));
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RTMPSourceConnection,The following statement contains a magic number: sink =          System.Text.RegularExpressions.Regex.Matches(source_uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")            .Cast<System.Text.RegularExpressions.Match>()            .Where(param => Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()=="filters")            .SelectMany(param => Uri.UnescapeDataString(param.Groups[3].Value).Split('''))            .Select(name => PeerCast.ContentFilters.FirstOrDefault(filter => filter.Name.ToLowerInvariant()==name.ToLowerInvariant()))            .Where(filter => filter!=null)            .Aggregate(sink' (r'filter) => filter.Activate(r));
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,GetBindAddresses,The following statement contains a magic number: return addresses.Select(addr => new IPEndPoint(addr' uri.Port<0 ? 1935 : uri.Port));
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,Handshake,The following statement contains a magic number: var s1vec = new byte[1528];
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,Handshake,The following statement contains a magic number: await SendAsync(writer => {            writer.Write(reader.ReadInt32());            writer.Write(reader.ReadInt32());            writer.Write(reader.ReadBytes(1528));          }' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,Handshake,The following statement contains a magic number: !s1vec.SequenceEqual(reader.ReadBytes(1528))
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvStream,The following statement contains a magic number: await SendMessage(2' new AckMessage(this.Now' 0' sequenceNumber)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: chunk_stream_id = (await RecvStream(1' cancel_token).ConfigureAwait(false))[0] + 64;
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following statement contains a magic number: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,SendMessage,The following statement contains a magic number: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: objectEncoding = ((int)msg.CommandObject["objectEncoding"])==3 ? 3 : 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: objectEncoding = ((int)msg.CommandObject["objectEncoding"])==3 ? 3 : 0;
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new SetWindowSizeMessage(this.Now' 0' recvWindowSize)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new SetPeerBandwidthMessage(this.Now' 0' sendWindowSize' PeerBandwidthLimitType.Hard)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' 0)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: var response = CommandMessage.Create(          objectEncoding'          this.Now'          msg.StreamId'          "_result"'          msg.TransactionId'          new AMF.AMFValue(new AMF.AMFObject {            { "fmsVer"'       "FMS/3'5'5'2004" }'            { "capabilities"' 31 }'            { "mode"'         1 }'          })'          new AMF.AMFValue(new AMF.AMFObject {            { "level"'          "status" }'            { "code"'           "NetConnection.Connect.Success" }'            { "description"'    "Connection succeeded" }'            { "data"'           new AMF.AMFObject { { "version"' "3'5'5'2004" } } }'            { "clientId"'       nextClientId++ }'            { "objectEncoding"' objectEncoding }'          })        );
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandConnect,The following statement contains a magic number: await SendMessage(3' response' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandCreateStream,The following statement contains a magic number: await SendMessage(3' response' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandPublish,The following statement contains a magic number: await SendMessage(2' new UserControlMessage.StreamBeginMessage(this.Now' 0' msg.StreamId)' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandPublish,The following statement contains a magic number: await SendMessage(3' status' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommandPublish,The following statement contains a magic number: await SendMessage(3' result' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.FLV.RTMP,RTMPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnConnectionStopped,The following statement contains a magic number: switch (args.Reason) {        case StopReason.UserReconnect:        case StopReason.UserShutdown:        case StopReason.NoHost:          break;        default:          args.Delay = 3000;          args.Reconnect = true;          break;        }
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt16,The following statement contains a magic number: var bytes = new byte[2];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt16,The following statement contains a magic number: BaseStream.Read(bytes' 0' 2);
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadInt32,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadInt32,The following statement contains a magic number: BaseStream.Read(bytes' 0' 4);
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt24,The following statement contains a magic number: var bytes = new byte[3];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt24,The following statement contains a magic number: BaseStream.Read(bytes' 0' 3);
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt24,The following statement contains a magic number: return (bytes[0]<<16) | (bytes[1]<<8) | bytes[2];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt24,The following statement contains a magic number: return (bytes[0]<<16) | (bytes[1]<<8) | bytes[2];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt24,The following statement contains a magic number: return (bytes[0]<<16) | (bytes[1]<<8) | bytes[2];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt32,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt32,The following statement contains a magic number: BaseStream.Read(bytes' 0' 4);
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt32LE,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryReader.cs,ReadUInt32LE,The following statement contains a magic number: BaseStream.Read(bytes' 0' 4);
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryWriter.cs,WriteUInt24,The following statement contains a magic number: BaseStream.WriteByte((byte)((value>>16)&0xFF));
Magic Number,PeerCastStation.FLV.RTMP,RTMPBinaryWriter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPBinaryWriter.cs,WriteUInt24,The following statement contains a magic number: BaseStream.WriteByte((byte)((value>>8)&0xFF));
Missing Default,PeerCastStation.FLV,FLVContentBuffer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVContentBuffer.cs,ClearDataFrame,The following switch statement is missing a default case: switch (name) {        case "onMetaData":          metadata = null;          break;        }
Missing Default,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following switch statement is missing a default case: switch (state) {  					case ReaderState.Header:  						{  							var bin = ReadBytes(stream' 13' out eos);  							if (eos) goto error;  							var header = new FLVFileHeader(bin);  							if (header.IsValid) {  								sink.OnFLVHeader(header);  								state = ReaderState.Body;  							}  							else {  								throw new BadDataException();  							}  						}  						break;  					case ReaderState.Body:  						{  							var bin = ReadBytes(stream' 11' out eos);  							if (eos) goto error;  							var read_valid = false;  							var body = new FLVTag(this' bin);  							if (body.IsValidHeader) {  								if (!body.ReadBody(stream)) { eos = true; goto error; }  								if (!body.ReadFooter(stream)) {  eos = true; goto error; }  								if (body.IsValidFooter) {  									read_valid = true;  									switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}  								}  							}  							else {  								stream.Position = start_pos;  								var headerbin = ReadBytes(stream' 13' out eos);  								if (eos) goto error;  								var header = new FLVFileHeader(headerbin);  								if (header.IsValid) {  									read_valid = true;  									sink.OnFLVHeader(header);  								}  							}  							if (!read_valid) {  								stream.Position = start_pos+1;  								var b = stream.ReadByte();  								while (true) {  									if (b<0) {  										eos = true;  										goto error;  									}  									if ((b & 0xC0)==0 && ((b & 0x1F)==8 || (b & 0x1F)==9 || (b & 0x1F)==18)) {  										break;  									}  									b = stream.ReadByte();  								}  								stream.Position = stream.Position-1;  								goto retry;  							}  						}  						break;  					}
Missing Default,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,Read,The following switch statement is missing a default case: switch (body.Type) {  									case FLVTag.TagType.Audio:  										sink.OnAudio(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Video:  										sink.OnVideo(body.ToRTMPMessage());  										break;  									case FLVTag.TagType.Script:  										sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));  										break;  									}
Missing Default,PeerCastStation.FLV,FLVFileParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVFileParser.cs,ReadAsync,The following switch statement is missing a default case: switch (body.Type) {                case FLVTag.TagType.Audio:                  sink.OnAudio(body.ToRTMPMessage());                  break;                case FLVTag.TagType.Video:                  sink.OnVideo(body.ToRTMPMessage());                  break;                case FLVTag.TagType.Script:                  sink.OnData(new DataAMF0Message(body.ToRTMPMessage()));                  break;                }
Missing Default,PeerCastStation.FLV,FLVToTSContentFilterSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\FLVToMPEG2TS.cs,ProcessMessagesAsync,The following switch statement is missing a default case: switch (msg.Type) {            case ContentMessage.MessageType.ChannelInfo:              targetSink.OnChannelInfo(msg.ChannelInfo);              break;            case ContentMessage.MessageType.ChannelTrack:              targetSink.OnChannelTrack(msg.ChannelTrack);              break;            case ContentMessage.MessageType.ContentHeader:              {                var buffer = contentBuffer;                var pos = buffer.Position;                buffer.Seek(0' SeekOrigin.End);                buffer.Write(msg.Content.Data' 0' msg.Content.Data.Length);                buffer.Position = pos;                fileParser.Read(buffer' context);                if (buffer.Position!=0) {                  var new_buf = new MemoryStream();                  var trim_pos = buffer.Position;                  buffer.Close();                  var buf = buffer.ToArray();                  new_buf.Write(buf' (int)trim_pos' (int)(buf.Length-trim_pos));                  new_buf.Position = 0;                  contentBuffer = new_buf;                }                if (bufferStream.Position!=0) {                  targetSink.OnContentHeader(                    new Content(                      msg.Content.Stream'                      msg.Content.Timestamp'                      msg.Content.Position'                      bufferStream.ToArray()'                      msg.Content.ContFlag                    )                  );                  bufferStream.SetLength(0);                }              }              break;            case ContentMessage.MessageType.ContentBody:              {                var buffer = contentBuffer;                var pos = buffer.Position;                buffer.Seek(0' SeekOrigin.End);                buffer.Write(msg.Content.Data' 0' msg.Content.Data.Length);                buffer.Position = pos;                fileParser.Read(buffer' context);                if (buffer.Position!=0) {                  var new_buf = new MemoryStream();                  var trim_pos = buffer.Position;                  buffer.Close();                  var buf = buffer.ToArray();                  new_buf.Write(buf' (int)trim_pos' (int)(buf.Length-trim_pos));                  new_buf.Position = 0;                  contentBuffer = new_buf;                }                if (bufferStream.Position!=0) {                  targetSink.OnContent(                    new Content(                      msg.Content.Stream'                      msg.Content.Timestamp'                      msg.Content.Position'                      bufferStream.ToArray()'                      msg.Content.ContFlag                    )                  );                  bufferStream.SetLength(0);                }              }              break;            }
Missing Default,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvAndProcessMessages,The following switch statement is missing a default case: switch (msg.Direction) {              case QueuedMessage.MessageDirection.In:                await ProcessMessage(msg.Message' local_cancel.Token).ConfigureAwait(false);                FlushBuffer();                break;              case QueuedMessage.MessageDirection.Out:                await SendMessage(msg.ChunkStreamId' msg.Message' local_cancel.Token).ConfigureAwait(false);                break;              }
Missing Default,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,RecvMessage,The following switch statement is missing a default case: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Missing Default,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,SendMessage,The following switch statement is missing a default case: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Missing Default,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnSetPeerBandwidth,The following switch statement is missing a default case: switch (msg.LimitType) {        case PeerBandwidthLimitType.Hard:          sendWindowSize = msg.PeerBandwidth;          sendWindowLimitType = msg.LimitType;          break;        case PeerBandwidthLimitType.Soft:          sendWindowSize = Math.Min(sendWindowSize' msg.PeerBandwidth);          sendWindowLimitType = msg.LimitType;          break;        case PeerBandwidthLimitType.Dynamic:          if (sendWindowLimitType==PeerBandwidthLimitType.Hard) {            sendWindowSize = msg.PeerBandwidth;            sendWindowLimitType = msg.LimitType;          }          break;        }
Missing Default,PeerCastStation.FLV.RTMP,RTMPConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPConnection.cs,OnCommand,The following switch statement is missing a default case: switch (msg.CommandName) {          case "connect":      await OnCommandConnect(msg' cancel_token).ConfigureAwait(false); break;          case "call":         await OnCommandCall(msg' cancel_token).ConfigureAwait(false); break;          case "close":        await OnCommandClose(msg' cancel_token).ConfigureAwait(false); break;          case "createStream": await OnCommandCreateStream(msg' cancel_token).ConfigureAwait(false); break;          case "deleteStream": await OnCommandDeleteStream(msg' cancel_token).ConfigureAwait(false); break;          }
Missing Default,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,RecvMessage,The following switch statement is missing a default case: switch ((basic_header & 0xC0)>>6) {        case 0:          using (var reader=new RTMPBinaryReader(await RecvStream(11' cancel_token).ConfigureAwait(false))) {            long timestamp  = reader.ReadUInt24();            var body_length = reader.ReadUInt24();            var type_id     = reader.ReadByte();            var stream_id   = reader.ReadUInt32LE();            if (timestamp==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp'              type_id'              stream_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 1:          using (var reader=new RTMPBinaryReader(await RecvStream(7' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            var body_length      = reader.ReadUInt24();            var type_id          = reader.ReadByte();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(              last_msg'              timestamp_delta'              type_id'              body_length);            lastMessages[chunk_stream_id] = msg;          }          break;        case 2:          using (var reader=new RTMPBinaryReader(await RecvStream(3' cancel_token).ConfigureAwait(false))) {            long timestamp_delta = reader.ReadUInt24();            if (timestamp_delta==0xFFFFFF) {              using (var ext_reader=new RTMPBinaryReader(await RecvStream(4' cancel_token).ConfigureAwait(false))) {                timestamp_delta = ext_reader.ReadUInt32();              }            }            msg = new RTMPMessageBuilder(last_msg' timestamp_delta);            lastMessages[chunk_stream_id] = msg;          }          break;        case 3:          msg = last_msg;          if (msg.ReceivedLength>=msg.BodyLength) {            msg = new RTMPMessageBuilder(last_msg);            lastMessages[chunk_stream_id] = msg;          }          break;        }
Missing Default,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,SendMessage,The following switch statement is missing a default case: switch (fmt) {          case 0:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt24(0xFFFFFF);              }              else {                writer.WriteUInt24((int)msg.Timestamp);              }              writer.WriteUInt24(msg.Body.Length);              writer.Write((byte)msg.MessageType);              writer.WriteUInt32LE(msg.StreamId);              if (msg.Timestamp>0xFFFFFF) {                writer.WriteUInt32(msg.Timestamp);              }              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            fmt = 3;            break;          case 3:            await SendAsync(writer => {              writer.Write((byte)((fmt<<6) | chunk_stream_id));              int chunk_len = Math.Min(sendChunkSize' msg.Body.Length-offset);              writer.Write(msg.Body' offset' chunk_len);              offset += chunk_len;            }' cancel_token).ConfigureAwait(false);            break;          }
Missing Default,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnSetPeerBandwidth,The following switch statement is missing a default case: switch (msg.LimitType) {        case PeerBandwidthLimitType.Hard:          sendWindowSize = msg.PeerBandwidth;          sendWindowLimitType = msg.LimitType;          break;        case PeerBandwidthLimitType.Soft:          sendWindowSize = Math.Min(sendWindowSize' msg.PeerBandwidth);          sendWindowLimitType = msg.LimitType;          break;        case PeerBandwidthLimitType.Dynamic:          if (sendWindowLimitType==PeerBandwidthLimitType.Hard) {            sendWindowSize = msg.PeerBandwidth;            sendWindowLimitType = msg.LimitType;          }          break;        }
Missing Default,PeerCastStation.FLV.RTMP,RTMPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.FLV\RTMP\RTMPSourceStream.cs,OnCommand,The following switch statement is missing a default case: switch (msg.CommandName) {          case "connect":      await OnCommandConnect(msg' cancel_token).ConfigureAwait(false); break;          case "call":         await OnCommandCall(msg' cancel_token).ConfigureAwait(false); break;          case "close":        await OnCommandClose(msg' cancel_token).ConfigureAwait(false); break;          case "createStream": await OnCommandCreateStream(msg' cancel_token).ConfigureAwait(false); break;          case "deleteStream": await OnCommandDeleteStream(msg' cancel_token).ConfigureAwait(false); break;          }
