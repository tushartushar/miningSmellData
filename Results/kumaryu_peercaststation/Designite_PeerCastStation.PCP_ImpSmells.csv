Implementation smell,Namespace,Class,File,Method,Description
Long Method,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The method has 129 lines of code.
Complex Method,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendRelayBody,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPHelo,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadHosts,Cyclomatic complexity of the method is 8
Long Parameter List,PeerCastStation.PCP,PCPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PCPOutputStream,The method has 7 parameters. Parameters: peercast' input_stream' output_stream' remote_endpoint' access_control' channel' request
Long Parameter List,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.PCP,PCPPongOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,PCPPongOutputStream,The method has 6 parameters. Parameters: peercast' input_stream' output_stream' endpoint' access_control' header
Long Statement,PeerCastStation.PCP,PCPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Create,The length of the statement  "        return new PCPOutputStream(this.PeerCast' input_stream' output_stream' remote_endpoint' access_control' channel' request); " is 122.
Long Statement,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPHelo,The length of the statement  "        Logger.Debug("Handshake succeeded {0}({1}) but relay is full"' Downhost.GlobalEndPoint' Downhost.SessionID.ToString("N")); " is 122.
Long Statement,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,Create,The length of the statement  "      return new PCPPongOutputStream(PeerCast' input_stream' output_stream' (IPEndPoint)remote_endpoint' access_control' header); " is 123.
Long Statement,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PostHostInfo,The length of the statement  "      var playable  = PeerCast.AccessController.IsChannelPlayable(channel) && PeerCast.FindListener(remoteEndPoint.Address' OutputStreamType.Play)!=null; " is 147.
Long Statement,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PostHostInfo,The length of the statement  "      var firewalled = !PeerCast.IsFirewalled.HasValue || PeerCast.IsFirewalled.Value || PeerCast.FindListener(remoteEndPoint.Address' OutputStreamType.Relay)==null; " is 159.
Long Statement,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The length of the statement  "						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも " is 124.
Complex Conditional,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPBcst,The conditional expression  "ttl != null &&            hops != null &&            group != null &&            from != null &&            dest != PeerCast.SessionID &&            ttl>0"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The conditional expression  "header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,OnPCPBcst,The conditional expression  "ttl != null &&            hops != null &&            group != null &&            from != null &&            dest != PeerCast.SessionID &&            ttl>1"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,OnPCPBcst,The conditional expression  "channel!=null && group!=null && from!=null && ttl!=null && ttl.Value>0"  is complex.
Empty Catch Block,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The method has an empty catch block.
Magic Number,PeerCastStation.PCP,RelayRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,RelayRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,RelayRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PCPOutputStream,The following statement contains a magic number: this.Connection.ReadTimeout = 180000;
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,CreateBroadcastPacket,The following statement contains a magic number: bcst.SetBcstTTL(11);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,DoProcess,The following statement contains a magic number: try {          var handshake_timeout = new CancellationTokenSource(5000);          var unified_cancel = CancellationTokenSource.CreateLinkedTokenSource(cancel_token' handshake_timeout.Token);          while (!IsHandshaked) {            //Handshakeが5秒以内に完了しなければ切る            //HELOでセッションIDを受け取るまでは他のパケットは無視            try {              var atom = await Connection.ReadAtomAsync(unified_cancel.Token);              if (atom.Name==Atom.PCP_HELO) {                await OnPCPHelo(atom' unified_cancel.Token);              }            }            catch (OperationCanceledException) {              if (handshake_timeout.IsCancellationRequested) {                Logger.Info("Handshake timed out.");                return StopReason.BadAgentError;              }              else {                throw;              }            }          }          if (IsRelayFull) {            return StopReason.UnavailableError;          }          else {            await Task.WhenAll(              ReadAndProcessAtom(cancel_token)'              SendRelayBody(cancel_token)            );          }          return StopReason.OffAir;        }        catch (InvalidDataException e) {          await OnError(e' cancel_token);          return StopReason.NotIdentifiedError;        }        catch (IOException e) {          await OnError(e' cancel_token);          return StopReason.ConnectionError;        }
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PingHost,The following statement contains a magic number: try {          var client = new System.Net.Sockets.TcpClient();          client.ReceiveTimeout = 2000;          client.SendTimeout    = 2000;          await client.ConnectAsync(target.Address' target.Port);          var stream = client.GetStream();          await stream.WriteAsync(new Atom(Atom.PCP_CONNECT' 1)' cancel_token);          var helo = new AtomCollection();          helo.SetHeloSessionID(PeerCast.SessionID);          await stream.WriteAsync(new Atom(Atom.PCP_HELO' helo)' cancel_token);          var res = await stream.ReadAtomAsync(cancel_token);          if (res.Name==Atom.PCP_OLEH) {            var session_id = res.Children.GetHeloSessionID();            if (session_id.HasValue && session_id.Value==remote_session_id) {              Logger.Debug("Ping succeeded");              result = true;            }            else {              Logger.Debug("Ping failed. Remote SessionID mismatched");            }          }          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT)' cancel_token);          stream.Close();          client.Close();        }        catch (InvalidDataException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (System.Net.Sockets.SocketException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (EndOfStreamException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (System.IO.IOException io_error) {          Logger.Debug("Ping failed");          Logger.Debug(io_error);          if (!(io_error.InnerException is System.Net.Sockets.SocketException)) {            throw;          }        }
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PingHost,The following statement contains a magic number: try {          var client = new System.Net.Sockets.TcpClient();          client.ReceiveTimeout = 2000;          client.SendTimeout    = 2000;          await client.ConnectAsync(target.Address' target.Port);          var stream = client.GetStream();          await stream.WriteAsync(new Atom(Atom.PCP_CONNECT' 1)' cancel_token);          var helo = new AtomCollection();          helo.SetHeloSessionID(PeerCast.SessionID);          await stream.WriteAsync(new Atom(Atom.PCP_HELO' helo)' cancel_token);          var res = await stream.ReadAtomAsync(cancel_token);          if (res.Name==Atom.PCP_OLEH) {            var session_id = res.Children.GetHeloSessionID();            if (session_id.HasValue && session_id.Value==remote_session_id) {              Logger.Debug("Ping succeeded");              result = true;            }            else {              Logger.Debug("Ping failed. Remote SessionID mismatched");            }          }          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT)' cancel_token);          stream.Close();          client.Close();        }        catch (InvalidDataException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (System.Net.Sockets.SocketException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (EndOfStreamException e) {          Logger.Debug("Ping failed");          Logger.Debug(e);        }        catch (System.IO.IOException io_error) {          Logger.Debug("Ping failed");          Logger.Debug(io_error);          if (!(io_error.InnerException is System.Net.Sockets.SocketException)) {            throw;          }        }
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return Channel.Nodes.OrderByDescending(n =>          ( n.GlobalEndPoint!=null ? 16000 : 0) +          ( n.GlobalEndPoint!=null &&            n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +          (!n.IsRelayFull ? 4000 : 0) +          ( n.IsReceiving ? 2000 : 0) +          (Math.Max(10-n.Hops' 0)*100) +          (n.RelayCount*10) +          rnd.NextDouble()        ).Take(8);
Magic Number,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPHelo,The following statement contains a magic number: if (Downhost==null) {          Logger.Info("Helo has no SessionID");          //セッションIDが無かった          Stop(StopReason.NotIdentifiedError);        }        else if ((Downhost.Extra.GetHeloVersion() ?? 0)<1200) {          Logger.Info("Helo version {0} is too old"' Downhost.Extra.GetHeloVersion() ?? 0);          //クライアントバージョンが無かった、もしくは古すぎ          Stop(StopReason.BadAgentError);        }        else if (IsRelayFull) {          Logger.Debug("Handshake succeeded {0}({1}) but relay is full"' Downhost.GlobalEndPoint' Downhost.SessionID.ToString("N"));          Stop(StopReason.UnavailableError);        }        else {          Logger.Debug("Handshake succeeded {0}({1})"' Downhost.GlobalEndPoint' Downhost.SessionID.ToString("N"));          await Connection.WriteAsync(new Atom(Atom.PCP_OK' (int)1)' cancel_token);        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0) {          return Guid.Empty;        }        else {          return null;        }
Magic Number,PeerCastStation.PCP,PCPPongOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,DoProcess,The following statement contains a magic number: var timeout_source = CancellationTokenSource.CreateLinkedTokenSource(          new CancellationTokenSource(3000).Token'          cancel_token);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          client = new TcpClient();          var connection = new SourceConnectionClient(client);          await client.ConnectAsync(endpoint.Address' endpoint.Port);          connection.Stream.ReadTimeout  = 30000;          connection.Stream.WriteTimeout = 8000;          remoteHost = endpoint;          Logger.Debug("Connected: {0}"' endpoint);          return connection;        }        catch (SocketException e) {          Logger.Debug("Connection Failed: {0}"' endpoint);          Logger.Debug(e);          return null;        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          client = new TcpClient();          var connection = new SourceConnectionClient(client);          await client.ConnectAsync(endpoint.Address' endpoint.Port);          connection.Stream.ReadTimeout  = 30000;          connection.Stream.WriteTimeout = 8000;          remoteHost = endpoint;          Logger.Debug("Connected: {0}"' endpoint);          return connection;        }        catch (SocketException e) {          Logger.Debug("Connection Failed: {0}"' endpoint);          Logger.Debug(e);          return null;        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          var port = source.Port<0 ? PCPVersion.DefaultPort : source.Port;          client = new TcpClient();          if (source.HostNameType==UriHostNameType.IPv4 ||              source.HostNameType==UriHostNameType.IPv6) {            await client.ConnectAsync(IPAddress.Parse(source.Host)' port);          }          else {            await client.ConnectAsync(source.DnsSafeHost' port);          }          var connection = new SourceConnectionClient(client);          connection.Stream.ReadTimeout  = 30000;          connection.Stream.WriteTimeout = 8000;          remoteHost = new DnsEndPoint(source.Host' port);          Logger.Debug("Connected: {0}"' source);          return connection;        }        catch (SocketException e) {          Logger.Debug("Connection Failed: {0}"' source);          Logger.Debug(e);          return null;        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          var port = source.Port<0 ? PCPVersion.DefaultPort : source.Port;          client = new TcpClient();          if (source.HostNameType==UriHostNameType.IPv4 ||              source.HostNameType==UriHostNameType.IPv6) {            await client.ConnectAsync(IPAddress.Parse(source.Host)' port);          }          else {            await client.ConnectAsync(source.DnsSafeHost' port);          }          var connection = new SourceConnectionClient(client);          connection.Stream.ReadTimeout  = 30000;          connection.Stream.WriteTimeout = 8000;          remoteHost = new DnsEndPoint(source.Host' port);          Logger.Debug("Connected: {0}"' source);          return connection;        }        catch (SocketException e) {          Logger.Debug("Connection Failed: {0}"' source);          Logger.Debug(e);          return null;        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoProcess,The following statement contains a magic number: if (relayResponse.StatusCode==503) {          await ProcessHosts(cancel_token);        }        else {          this.Status = ConnectionStatus.Connected;          await ProcessBody(cancel_token);        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) throw new IOException();          buf.Add((byte)value);          if (buf.Count>=2 && buf[buf.Count-2] == '\r' && buf[buf.Count-1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") responses.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) throw new IOException();          buf.Add((byte)value);          if (buf.Count>=2 && buf[buf.Count-2] == '\r' && buf[buf.Count-1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") responses.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) throw new IOException();          buf.Add((byte)value);          if (buf.Count>=2 && buf[buf.Count-2] == '\r' && buf[buf.Count-1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") responses.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessRelayRequest,The following statement contains a magic number: try {          await connection.Stream.WriteAsync(req' cancel_token);          relayResponse = await ReadRequestResponseAsync(connection.Stream' cancel_token);          Logger.Debug("Relay response: {0}"' relayResponse.StatusCode);          if (relayResponse.StatusCode==200 || relayResponse.StatusCode==503) {            return;          }          else {            Logger.Info("Server responses {0} to GET {1}"' relayResponse.StatusCode' SourceUri.PathAndQuery);            Stop(relayResponse.StatusCode==404 ? StopReason.OffAir : StopReason.UnavailableError);          }        }        catch (IOException e) {          Logger.Info(e);          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessRelayRequest,The following statement contains a magic number: try {          await connection.Stream.WriteAsync(req' cancel_token);          relayResponse = await ReadRequestResponseAsync(connection.Stream' cancel_token);          Logger.Debug("Relay response: {0}"' relayResponse.StatusCode);          if (relayResponse.StatusCode==200 || relayResponse.StatusCode==503) {            return;          }          else {            Logger.Info("Server responses {0} to GET {1}"' relayResponse.StatusCode' SourceUri.PathAndQuery);            Stop(relayResponse.StatusCode==404 ? StopReason.OffAir : StopReason.UnavailableError);          }        }        catch (IOException e) {          Logger.Info(e);          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessRelayRequest,The following statement contains a magic number: try {          await connection.Stream.WriteAsync(req' cancel_token);          relayResponse = await ReadRequestResponseAsync(connection.Stream' cancel_token);          Logger.Debug("Relay response: {0}"' relayResponse.StatusCode);          if (relayResponse.StatusCode==200 || relayResponse.StatusCode==503) {            return;          }          else {            Logger.Info("Server responses {0} to GET {1}"' relayResponse.StatusCode' SourceUri.PathAndQuery);            Stop(relayResponse.StatusCode==404 ? StopReason.OffAir : StopReason.UnavailableError);          }        }        catch (IOException e) {          Logger.Info(e);          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,CreatePCPBCST,The following statement contains a magic number: bcst.SetBcstTTL(11);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,CheckHostInfoUpdate,The following statement contains a magic number: lock (hostInfoUpdateTimer) {          if (!hostInfoUpdateTimer.IsRunning) {            hostInfoUpdateTimer.Reset();            hostInfoUpdateTimer.Start();          }          return hostInfoUpdateTimer.ElapsedMilliseconds>=120000;        }
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadResponse,The following statement contains a magic number: do {          int b = s.ReadByte();          if (b>=0) res.Add((byte)b);          else {            return null;          }        } while (          res.Count<4 ||          res[res.Count-4]!='\r' ||          res[res.Count-3]!='\n' ||          res[res.Count-2]!='\r' ||          res[res.Count-1]!='\n');
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadResponse,The following statement contains a magic number: do {          int b = s.ReadByte();          if (b>=0) res.Add((byte)b);          else {            return null;          }        } while (          res.Count<4 ||          res[res.Count-4]!='\r' ||          res[res.Count-3]!='\n' ||          res[res.Count-2]!='\r' ||          res[res.Count-1]!='\n');
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadResponse,The following statement contains a magic number: do {          int b = s.ReadByte();          if (b>=0) res.Add((byte)b);          else {            return null;          }        } while (          res.Count<4 ||          res[res.Count-4]!='\r' ||          res[res.Count-3]!='\n' ||          res[res.Count-2]!='\r' ||          res[res.Count-1]!='\n');
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadResponse,The following statement contains a magic number: do {          int b = s.ReadByte();          if (b>=0) res.Add((byte)b);          else {            return null;          }        } while (          res.Count<4 ||          res[res.Count-4]!='\r' ||          res[res.Count-3]!='\n' ||          res[res.Count-2]!='\r' ||          res[res.Count-1]!='\n');
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The following statement contains a magic number: try {          var client = new TcpClient(host' port);          var stream = client.GetStream();          var request = System.Text.Encoding.UTF8.GetBytes(            String.Format("GET /channel/{0} HTTP/1.0\r\n"' channel_id.ToString("N")) +            "x-peercast-pcp:1\r\n" +            "\r\n");          stream.Write(request' 0' request.Length);          var response = ReadResponse(stream);          if (response!=null) {            var md = System.Text.RegularExpressions.Regex.Match(response' @"^HTTP/1.\d (\d+) ");            if (md.Success) {              var status = md.Groups[1].Value;              switch (status) {              case "503":                var helo = new AtomCollection();                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloPort(0);                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                var hosts = ReadHosts(stream' channel_id);                res = HostToUri(hosts.FirstOrDefault(h => h.IsTracker)' channel_id);                break;              case "200":                //なぜかリレー可能だったのでYP自体をトラッカーとみなしてしまうことにする                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));                res = AnnounceUri;                break;              default:                //エラーだったのでトラッカーのアドレスを貰えず終了                break;              }            }          }          AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));          client.Close();        }        catch (SocketException)        {        }        catch (IOException)        {        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The following statement contains a magic number: while (!IsStopped) {          int next_update = Environment.TickCount;          try {            Logger.Debug("Connecting to YP");            AnnouncingStatus = AnnouncingStatus.Connecting;            RemoteSessionID = null;            using (var client = new TcpClient(host' port)) {              remoteEndPoint = (IPEndPoint)client.Client.RemoteEndPoint;              using (var stream = client.GetStream()) {                AtomWriter.Write(stream' new Atom(new ID4("pcp\n")' (int)1));                var helo = new AtomCollection();                Logger.Debug("Sending Handshake");                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloBCID(PeerCast.BroadcastID);                if (PeerCast.IsFirewalled.HasValue) {                  if (PeerCast.IsFirewalled.Value) {                    //Do nothing                  }                  else {                    var listener = PeerCast.FindListener(                      ((IPEndPoint)client.Client.RemoteEndPoint).Address'                      OutputStreamType.Relay | OutputStreamType.Metadata);                    if (listener!=null) {                      helo.SetHeloPort(listener.LocalEndPoint.Port);                    }                  }                }                else {                  var listener = PeerCast.FindListener(                    ((IPEndPoint)client.Client.RemoteEndPoint).Address'                    OutputStreamType.Relay | OutputStreamType.Metadata);                  if (listener!=null) {                    helo.SetHeloPing(listener.LocalEndPoint.Port);                  }                }                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                while (!IsStopped) {                  var atom = AtomReader.Read(stream);                  if (atom.Name==Atom.PCP_OLEH) {                    OnPCPOleh(atom);                    break;                  }                  else if (atom.Name==Atom.PCP_QUIT) {                    Logger.Debug("Handshake aborted by PCP_QUIT ({0})"' atom.GetInt32());                    throw new QuitException();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                Logger.Debug("Handshake succeeded");                AnnouncingStatus = AnnouncingStatus.Connected;                while (!IsStopped) {                  if (next_update-Environment.TickCount<=0) {                    Logger.Debug("Sending channel info");                    lock (announcingChannels) {                      foreach (var announcing in announcingChannels) {                        UpdateChannelInfo(announcing.Channel' true);                      }                    }                    next_update = Environment.TickCount+30000;                  }                  if (stream.DataAvailable) {                    Atom atom = AtomReader.Read(stream);                    ProcessAtom(atom);                  }                  lock (updatedChannels) {                    foreach (var updated in updatedChannels) {                      AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                    }                    updatedChannels.Clear();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                lock (updatedChannels) {                  foreach (var updated in updatedChannels) {                    AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                  }                  updatedChannels.Clear();                }                Logger.Debug("Closing connection");                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));              }            }          }          catch (RestartException) {            Logger.Debug("Connection retrying");            AnnouncingStatus = AnnouncingStatus.Connecting;          }          catch (BannedException) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error("Your BCID is banned");            break;          }          catch (QuitException) {            AnnouncingStatus = AnnouncingStatus.Error;          }          catch (InvalidDataException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error(e);            break;          }          catch (SocketException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          catch (IOException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          finally {            remoteEndPoint = null;            RemoteSessionID = null;          }          Logger.Debug("Connection closed");          if (!IsStopped) {            restartEvent.WaitOne(10000);          }          else {            AnnouncingStatus = AnnouncingStatus.Idle;          }        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The following statement contains a magic number: while (!IsStopped) {          int next_update = Environment.TickCount;          try {            Logger.Debug("Connecting to YP");            AnnouncingStatus = AnnouncingStatus.Connecting;            RemoteSessionID = null;            using (var client = new TcpClient(host' port)) {              remoteEndPoint = (IPEndPoint)client.Client.RemoteEndPoint;              using (var stream = client.GetStream()) {                AtomWriter.Write(stream' new Atom(new ID4("pcp\n")' (int)1));                var helo = new AtomCollection();                Logger.Debug("Sending Handshake");                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloBCID(PeerCast.BroadcastID);                if (PeerCast.IsFirewalled.HasValue) {                  if (PeerCast.IsFirewalled.Value) {                    //Do nothing                  }                  else {                    var listener = PeerCast.FindListener(                      ((IPEndPoint)client.Client.RemoteEndPoint).Address'                      OutputStreamType.Relay | OutputStreamType.Metadata);                    if (listener!=null) {                      helo.SetHeloPort(listener.LocalEndPoint.Port);                    }                  }                }                else {                  var listener = PeerCast.FindListener(                    ((IPEndPoint)client.Client.RemoteEndPoint).Address'                    OutputStreamType.Relay | OutputStreamType.Metadata);                  if (listener!=null) {                    helo.SetHeloPing(listener.LocalEndPoint.Port);                  }                }                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                while (!IsStopped) {                  var atom = AtomReader.Read(stream);                  if (atom.Name==Atom.PCP_OLEH) {                    OnPCPOleh(atom);                    break;                  }                  else if (atom.Name==Atom.PCP_QUIT) {                    Logger.Debug("Handshake aborted by PCP_QUIT ({0})"' atom.GetInt32());                    throw new QuitException();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                Logger.Debug("Handshake succeeded");                AnnouncingStatus = AnnouncingStatus.Connected;                while (!IsStopped) {                  if (next_update-Environment.TickCount<=0) {                    Logger.Debug("Sending channel info");                    lock (announcingChannels) {                      foreach (var announcing in announcingChannels) {                        UpdateChannelInfo(announcing.Channel' true);                      }                    }                    next_update = Environment.TickCount+30000;                  }                  if (stream.DataAvailable) {                    Atom atom = AtomReader.Read(stream);                    ProcessAtom(atom);                  }                  lock (updatedChannels) {                    foreach (var updated in updatedChannels) {                      AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                    }                    updatedChannels.Clear();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                lock (updatedChannels) {                  foreach (var updated in updatedChannels) {                    AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                  }                  updatedChannels.Clear();                }                Logger.Debug("Closing connection");                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));              }            }          }          catch (RestartException) {            Logger.Debug("Connection retrying");            AnnouncingStatus = AnnouncingStatus.Connecting;          }          catch (BannedException) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error("Your BCID is banned");            break;          }          catch (QuitException) {            AnnouncingStatus = AnnouncingStatus.Error;          }          catch (InvalidDataException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error(e);            break;          }          catch (SocketException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          catch (IOException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          finally {            remoteEndPoint = null;            RemoteSessionID = null;          }          Logger.Debug("Connection closed");          if (!IsStopped) {            restartEvent.WaitOne(10000);          }          else {            AnnouncingStatus = AnnouncingStatus.Idle;          }        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The following statement contains a magic number: while (!IsStopped) {          int next_update = Environment.TickCount;          try {            Logger.Debug("Connecting to YP");            AnnouncingStatus = AnnouncingStatus.Connecting;            RemoteSessionID = null;            using (var client = new TcpClient(host' port)) {              remoteEndPoint = (IPEndPoint)client.Client.RemoteEndPoint;              using (var stream = client.GetStream()) {                AtomWriter.Write(stream' new Atom(new ID4("pcp\n")' (int)1));                var helo = new AtomCollection();                Logger.Debug("Sending Handshake");                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloBCID(PeerCast.BroadcastID);                if (PeerCast.IsFirewalled.HasValue) {                  if (PeerCast.IsFirewalled.Value) {                    //Do nothing                  }                  else {                    var listener = PeerCast.FindListener(                      ((IPEndPoint)client.Client.RemoteEndPoint).Address'                      OutputStreamType.Relay | OutputStreamType.Metadata);                    if (listener!=null) {                      helo.SetHeloPort(listener.LocalEndPoint.Port);                    }                  }                }                else {                  var listener = PeerCast.FindListener(                    ((IPEndPoint)client.Client.RemoteEndPoint).Address'                    OutputStreamType.Relay | OutputStreamType.Metadata);                  if (listener!=null) {                    helo.SetHeloPing(listener.LocalEndPoint.Port);                  }                }                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                while (!IsStopped) {                  var atom = AtomReader.Read(stream);                  if (atom.Name==Atom.PCP_OLEH) {                    OnPCPOleh(atom);                    break;                  }                  else if (atom.Name==Atom.PCP_QUIT) {                    Logger.Debug("Handshake aborted by PCP_QUIT ({0})"' atom.GetInt32());                    throw new QuitException();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                Logger.Debug("Handshake succeeded");                AnnouncingStatus = AnnouncingStatus.Connected;                while (!IsStopped) {                  if (next_update-Environment.TickCount<=0) {                    Logger.Debug("Sending channel info");                    lock (announcingChannels) {                      foreach (var announcing in announcingChannels) {                        UpdateChannelInfo(announcing.Channel' true);                      }                    }                    next_update = Environment.TickCount+30000;                  }                  if (stream.DataAvailable) {                    Atom atom = AtomReader.Read(stream);                    ProcessAtom(atom);                  }                  lock (updatedChannels) {                    foreach (var updated in updatedChannels) {                      AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                    }                    updatedChannels.Clear();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                lock (updatedChannels) {                  foreach (var updated in updatedChannels) {                    AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                  }                  updatedChannels.Clear();                }                Logger.Debug("Closing connection");                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));              }            }          }          catch (RestartException) {            Logger.Debug("Connection retrying");            AnnouncingStatus = AnnouncingStatus.Connecting;          }          catch (BannedException) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error("Your BCID is banned");            break;          }          catch (QuitException) {            AnnouncingStatus = AnnouncingStatus.Error;          }          catch (InvalidDataException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error(e);            break;          }          catch (SocketException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          catch (IOException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          finally {            remoteEndPoint = null;            RemoteSessionID = null;          }          Logger.Debug("Connection closed");          if (!IsStopped) {            restartEvent.WaitOne(10000);          }          else {            AnnouncingStatus = AnnouncingStatus.Idle;          }        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The following statement contains a magic number: while (!IsStopped) {          int next_update = Environment.TickCount;          try {            Logger.Debug("Connecting to YP");            AnnouncingStatus = AnnouncingStatus.Connecting;            RemoteSessionID = null;            using (var client = new TcpClient(host' port)) {              remoteEndPoint = (IPEndPoint)client.Client.RemoteEndPoint;              using (var stream = client.GetStream()) {                AtomWriter.Write(stream' new Atom(new ID4("pcp\n")' (int)1));                var helo = new AtomCollection();                Logger.Debug("Sending Handshake");                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloBCID(PeerCast.BroadcastID);                if (PeerCast.IsFirewalled.HasValue) {                  if (PeerCast.IsFirewalled.Value) {                    //Do nothing                  }                  else {                    var listener = PeerCast.FindListener(                      ((IPEndPoint)client.Client.RemoteEndPoint).Address'                      OutputStreamType.Relay | OutputStreamType.Metadata);                    if (listener!=null) {                      helo.SetHeloPort(listener.LocalEndPoint.Port);                    }                  }                }                else {                  var listener = PeerCast.FindListener(                    ((IPEndPoint)client.Client.RemoteEndPoint).Address'                    OutputStreamType.Relay | OutputStreamType.Metadata);                  if (listener!=null) {                    helo.SetHeloPing(listener.LocalEndPoint.Port);                  }                }                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                while (!IsStopped) {                  var atom = AtomReader.Read(stream);                  if (atom.Name==Atom.PCP_OLEH) {                    OnPCPOleh(atom);                    break;                  }                  else if (atom.Name==Atom.PCP_QUIT) {                    Logger.Debug("Handshake aborted by PCP_QUIT ({0})"' atom.GetInt32());                    throw new QuitException();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                Logger.Debug("Handshake succeeded");                AnnouncingStatus = AnnouncingStatus.Connected;                while (!IsStopped) {                  if (next_update-Environment.TickCount<=0) {                    Logger.Debug("Sending channel info");                    lock (announcingChannels) {                      foreach (var announcing in announcingChannels) {                        UpdateChannelInfo(announcing.Channel' true);                      }                    }                    next_update = Environment.TickCount+30000;                  }                  if (stream.DataAvailable) {                    Atom atom = AtomReader.Read(stream);                    ProcessAtom(atom);                  }                  lock (updatedChannels) {                    foreach (var updated in updatedChannels) {                      AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                    }                    updatedChannels.Clear();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                lock (updatedChannels) {                  foreach (var updated in updatedChannels) {                    AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                  }                  updatedChannels.Clear();                }                Logger.Debug("Closing connection");                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));              }            }          }          catch (RestartException) {            Logger.Debug("Connection retrying");            AnnouncingStatus = AnnouncingStatus.Connecting;          }          catch (BannedException) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error("Your BCID is banned");            break;          }          catch (QuitException) {            AnnouncingStatus = AnnouncingStatus.Error;          }          catch (InvalidDataException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error(e);            break;          }          catch (SocketException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          catch (IOException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          finally {            remoteEndPoint = null;            RemoteSessionID = null;          }          Logger.Debug("Connection closed");          if (!IsStopped) {            restartEvent.WaitOne(10000);          }          else {            AnnouncingStatus = AnnouncingStatus.Idle;          }        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,AnnounceThreadProc,The following statement contains a magic number: while (!IsStopped) {          int next_update = Environment.TickCount;          try {            Logger.Debug("Connecting to YP");            AnnouncingStatus = AnnouncingStatus.Connecting;            RemoteSessionID = null;            using (var client = new TcpClient(host' port)) {              remoteEndPoint = (IPEndPoint)client.Client.RemoteEndPoint;              using (var stream = client.GetStream()) {                AtomWriter.Write(stream' new Atom(new ID4("pcp\n")' (int)1));                var helo = new AtomCollection();                Logger.Debug("Sending Handshake");                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloBCID(PeerCast.BroadcastID);                if (PeerCast.IsFirewalled.HasValue) {                  if (PeerCast.IsFirewalled.Value) {                    //Do nothing                  }                  else {                    var listener = PeerCast.FindListener(                      ((IPEndPoint)client.Client.RemoteEndPoint).Address'                      OutputStreamType.Relay | OutputStreamType.Metadata);                    if (listener!=null) {                      helo.SetHeloPort(listener.LocalEndPoint.Port);                    }                  }                }                else {                  var listener = PeerCast.FindListener(                    ((IPEndPoint)client.Client.RemoteEndPoint).Address'                    OutputStreamType.Relay | OutputStreamType.Metadata);                  if (listener!=null) {                    helo.SetHeloPing(listener.LocalEndPoint.Port);                  }                }                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                while (!IsStopped) {                  var atom = AtomReader.Read(stream);                  if (atom.Name==Atom.PCP_OLEH) {                    OnPCPOleh(atom);                    break;                  }                  else if (atom.Name==Atom.PCP_QUIT) {                    Logger.Debug("Handshake aborted by PCP_QUIT ({0})"' atom.GetInt32());                    throw new QuitException();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                Logger.Debug("Handshake succeeded");                AnnouncingStatus = AnnouncingStatus.Connected;                while (!IsStopped) {                  if (next_update-Environment.TickCount<=0) {                    Logger.Debug("Sending channel info");                    lock (announcingChannels) {                      foreach (var announcing in announcingChannels) {                        UpdateChannelInfo(announcing.Channel' true);                      }                    }                    next_update = Environment.TickCount+30000;                  }                  if (stream.DataAvailable) {                    Atom atom = AtomReader.Read(stream);                    ProcessAtom(atom);                  }                  lock (updatedChannels) {                    foreach (var updated in updatedChannels) {                      AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                    }                    updatedChannels.Clear();                  }                  if (restartEvent.WaitOne(10)) throw new RestartException();                }                lock (updatedChannels) {                  foreach (var updated in updatedChannels) {                    AtomWriter.Write(stream' CreateChannelBcst(updated.Channel' updated.Playing));                  }                  updatedChannels.Clear();                }                Logger.Debug("Closing connection");                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));              }            }          }          catch (RestartException) {            Logger.Debug("Connection retrying");            AnnouncingStatus = AnnouncingStatus.Connecting;          }          catch (BannedException) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error("Your BCID is banned");            break;          }          catch (QuitException) {            AnnouncingStatus = AnnouncingStatus.Error;          }          catch (InvalidDataException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Error(e);            break;          }          catch (SocketException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          catch (IOException e) {            AnnouncingStatus = AnnouncingStatus.Error;            Logger.Info(e);          }          finally {            remoteEndPoint = null;            RemoteSessionID = null;          }          Logger.Debug("Connection closed");          if (!IsStopped) {            restartEvent.WaitOne(10000);          }          else {            AnnouncingStatus = AnnouncingStatus.Idle;          }        }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: try {  				using (var reader=new StringReader(await client.DownloadStringTaskAsync(this.ChannelsUri))) {  					var results = new List<IYellowPageChannel>();  					var line = reader.ReadLine();  					while (line!=null) {  						var tokens = line.Split(new string[] { "<>" }' StringSplitOptions.None);  						var channel = new PCPYellowPageChannel(this);  						if (tokens.Length> 0) channel.Name        = ParseStr(tokens[0]);  //1 CHANNEL_NAME チャンネル名  						if (tokens.Length> 1) channel.ChannelId   = ParseGuid(tokens[1]);  //2 ID ID ユニーク値16進数32桁、制限チャンネルは全て0埋め  						if (tokens.Length> 2) channel.Tracker     = ParseStr(tokens[2]);  //3 TIP TIP ポートも含む。Push配信時はブランク、制限チャンネルは127.0.0.1  						if (tokens.Length> 3) channel.ContactUrl  = ParseStr(tokens[3]);  //4 CONTACT_URL コンタクトURL 基本的にURL、任意の文字列も可 CONTACT_URL  						if (tokens.Length> 4) channel.Genre       = ParseStr(tokens[4]);  //5 GENRE ジャンル  						if (tokens.Length> 5) channel.Description = ParseStr(tokens[5]);  //6 DETAIL 詳細  						if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも  						if (tokens.Length> 7) channel.Relays      = ParseInt(tokens[7]);  //8 RELAY_NUM Relay数 同上   						if (tokens.Length> 8) channel.Bitrate     = ParseInt(tokens[8]);  //9 BITRATE Bitrate 単位は kbps   						if (tokens.Length> 9) channel.ContentType = ParseStr(tokens[9]);  //10 TYPE Type たぶん大文字   						if (tokens.Length>10) channel.Artist      = ParseStr(tokens[10]); //11 TRACK_ARTIST トラック アーティスト   						if (tokens.Length>11) channel.Album       = ParseStr(tokens[11]); //12 TRACK_ALBUM トラック アルバム   						if (tokens.Length>12) channel.TrackTitle  = ParseStr(tokens[12]); //13 TRACK_TITLE トラック タイトル   						if (tokens.Length>13) channel.TrackUrl    = ParseStr(tokens[13]); //14 TRACK_CONTACT_URL トラック コンタクトURL 基本的にURL、任意の文字列も可   						if (tokens.Length>15) channel.Uptime      = ParseUptime(tokens[15]); //16 BROADCAST_TIME 配信時間 000〜99999   						if (tokens.Length>17) channel.Comment     = ParseStr(tokens[17]); //18 COMMENT コメント   						results.Add(channel);  						line = reader.ReadLine();  					}  					return results;  				}  			}  			catch (Exception e) {  				Logger.Error(e);  				return Enumerable.Empty<IYellowPageChannel>();  			}
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: if (times.Length<2) return ParseInt(times[0]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: return (hours*60 + minutes)*60;
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: return (hours*60 + minutes)*60;
Missing Default,PeerCastStation.PCP,PCPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnStopped,The following switch statement is missing a default case: switch (StoppedReason) {        case StopReason.None:          break;        case StopReason.Any:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));          break;        case StopReason.SendTimeoutError:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SKIP));          break;        case StopReason.BadAgentError:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_BADAGENT));          break;        case StopReason.ConnectionError:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_READ));          break;        case StopReason.NotIdentifiedError:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_NOTIDENTIFIED));          break;        case StopReason.UnavailableError:          {            //次に接続するホストを送ってQUIT            foreach (var node in SelectSourceHosts((IPEndPoint)RemoteEndPoint)) {              if (Downhost!=null && Downhost.SessionID==node.SessionID) continue;              var host_atom = new AtomCollection(node.Extra);              Atom ip = host_atom.FindByName(Atom.PCP_HOST_IP);              while (ip!=null) {                host_atom.Remove(ip);                ip = host_atom.FindByName(Atom.PCP_HOST_IP);              }              Atom port = host_atom.FindByName(Atom.PCP_HOST_PORT);              while (port!=null) {                host_atom.Remove(port);                port = host_atom.FindByName(Atom.PCP_HOST_PORT);              }              host_atom.SetHostSessionID(node.SessionID);              var globalendpoint = node.GlobalEndPoint ?? new IPEndPoint(IPAddress.Any' 0);              host_atom.AddHostIP(globalendpoint.Address);              host_atom.AddHostPort(globalendpoint.Port);              var localendpoint  = node.LocalEndPoint ?? new IPEndPoint(IPAddress.Any' 0);              host_atom.AddHostIP(localendpoint.Address);              host_atom.AddHostPort(localendpoint.Port);              host_atom.SetHostNumRelays(node.RelayCount);              host_atom.SetHostNumListeners(node.DirectCount);              host_atom.SetHostChannelID(Channel.ChannelID);              host_atom.SetHostFlags1(                (node.IsFirewalled ? PCPHostFlags1.Firewalled : PCPHostFlags1.None) |                (node.IsTracker ? PCPHostFlags1.Tracker : PCPHostFlags1.None) |                (node.IsRelayFull ? PCPHostFlags1.None : PCPHostFlags1.Relay) |                (node.IsDirectFull ? PCPHostFlags1.None : PCPHostFlags1.Direct) |                (node.IsReceiving ? PCPHostFlags1.Receiving : PCPHostFlags1.None) |                (node.IsControlFull ? PCPHostFlags1.None : PCPHostFlags1.ControlIn));              Connection.WriteAsync(new Atom(Atom.PCP_HOST' host_atom));              Logger.Debug("Sending Node: {0}({1})"' globalendpoint' node.SessionID.ToString("N"));            }          }          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_UNAVAILABLE));          break;        case StopReason.OffAir:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_OFFAIR));          break;        case StopReason.UserShutdown:          Connection.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SHUTDOWN));          break;        }
Missing Default,PeerCastStation.PCP,PCPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,OnPCPOleh,The following switch statement is missing a default case: switch (rip.AddressFamily) {          case AddressFamily.InterNetwork:            if (PeerCast.GlobalAddress==null ||                PeerCast.GlobalAddress.GetAddressLocality()<=rip.GetAddressLocality()) {              PeerCast.GlobalAddress = rip;            }            break;          case AddressFamily.InterNetworkV6:            if (PeerCast.GlobalAddress6==null ||                PeerCast.GlobalAddress6.GetAddressLocality()<=rip.GetAddressLocality()) {              PeerCast.GlobalAddress6 = rip;            }            break;          }
Missing Default,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,OnPCPOleh,The following switch statement is missing a default case: switch (rip.AddressFamily) {          case AddressFamily.InterNetwork:            if (PeerCast.GlobalAddress==null ||                PeerCast.GlobalAddress.GetAddressLocality()<=rip.GetAddressLocality()) {              PeerCast.GlobalAddress = rip;            }            break;          case AddressFamily.InterNetworkV6:            if (PeerCast.GlobalAddress6==null ||                PeerCast.GlobalAddress6.GetAddressLocality()<=rip.GetAddressLocality()) {              PeerCast.GlobalAddress6 = rip;            }            break;          }
Missing Default,PeerCastStation.PCP,PCPYellowPageClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetConnectionInfo,The following switch statement is missing a default case: switch (AnnouncingStatus) {        case Core.AnnouncingStatus.Connected:  status = ConnectionStatus.Connected; break;        case Core.AnnouncingStatus.Connecting: status = ConnectionStatus.Connecting; break;        case Core.AnnouncingStatus.Error:      status = ConnectionStatus.Error; break;        case Core.AnnouncingStatus.Idle:       status = ConnectionStatus.Idle; break;        }
