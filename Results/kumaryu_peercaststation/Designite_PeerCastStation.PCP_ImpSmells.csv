Implementation smell,Namespace,Class,File,Method,Description
Long Method,PeerCastStation.PCP,PCPYellowPageClientFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ValidateUriAsync,The method has 113 lines of code.
Complex Method,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnHandshakePCPHelo,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,DoHandshake,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,ProcessAtom,Cyclomatic complexity of the method is 11
Complex Method,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendRelayBody,Cyclomatic complexity of the method is 13
Complex Method,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessAtom,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.PCP,PCPYellowPageClientFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ValidateUriAsync,Cyclomatic complexity of the method is 22
Complex Method,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PCPHandshake,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ReadHosts,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,Cyclomatic complexity of the method is 19
Long Parameter List,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PCPYellowPageConnection,The method has 5 parameters. Parameters: peercast' owner' networkType' name' host
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnHandshakePCPHelo,The length of the statement  "                await PingHostAsync(new IPEndPoint(remoteEndPoint.Address' ping.Value)' session_id.Value' cancel_token).ConfigureAwait(false)) { " is 128.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SKIP)' cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_BADAGENT)' cancellationToken).ConfigureAwait(false); " is 137.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_READ)' cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_NOTIDENTIFIED)' cancellationToken).ConfigureAwait(false); " is 142.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_UNAVAILABLE)' cancellationToken).ConfigureAwait(false); " is 140.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_OFFAIR)' cancellationToken).ConfigureAwait(false); " is 135.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The length of the statement  "          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SHUTDOWN)' cancellationToken).ConfigureAwait(false); " is 137.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,DoHandshake,The length of the statement  "              logger.Debug("Handshake succeeded {0}({1}) but relay is full"' peer.Host.GlobalEndPoint' peer.Host.SessionID.ToString("N")); " is 124.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPHost,The length of the statement  "            sink.Peer = new PeerInfo { Host=host.ToHost()' UserAgent=sink.Peer.UserAgent' RemoteEndPoint=sink.Peer.RemoteEndPoint }; " is 120.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Invoke,The length of the statement  "            !(channel.Network==NetworkType.IPv6 && ctx.Request.GetPCPVersion()==PCPVersion.ProtocolVersionIPv6 && remoteEndPoint.Address.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6) && " is 191.
Long Statement,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Invoke,The length of the statement  "            !(channel.Network==NetworkType.IPv4 && ctx.Request.GetPCPVersion()==PCPVersion.ProtocolVersionIPv4 && remoteEndPoint.Address.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork)) { " is 189.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,OnPCPOleh,The length of the statement  "        PeerCast.SetPortStatus(((IPEndPoint)connection.Client.Client.LocalEndPoint).Address' rip' port.Value!=0 ? PortStatus.Open : PortStatus.Firewalled); " is 147.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SKIP)' cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_BADAGENT)' cancellationToken).ConfigureAwait(false); " is 137.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_READ)' cancellationToken).ConfigureAwait(false); " is 133.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_NOTIDENTIFIED)' cancellationToken).ConfigureAwait(false); " is 142.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_UNAVAILABLE)' cancellationToken).ConfigureAwait(false); " is 140.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_OFFAIR)' cancellationToken).ConfigureAwait(false); " is 135.
Long Statement,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The length of the statement  "        await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SHUTDOWN)' cancellationToken).ConfigureAwait(false); " is 137.
Long Statement,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PCPHandshake,The length of the statement  "        await stream.WriteAsync(new Atom(new ID4("pcp\n")' PCPVersion.GetPCPVersionForNetworkType(networkType))' ct).ConfigureAwait(false); " is 131.
Long Statement,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ConnectionProc,The length of the statement  "                    CancelIfCompletedTask(DequeueAndUpdateChannelAsync(stream' subCancellationSource.Token)' subCancellationSource)).ConfigureAwait(false); " is 135.
Long Statement,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The length of the statement  "          if (tokens.Length> 6) channel.Listeners   = ParseInt(tokens[6]);  //7 LISTENER_NUM Listener数 -1は非表示、-1未満はサーバのメッセージ。ブランクもあるかも " is 124.
Complex Conditional,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,OnPCPBcst,The conditional expression  "ttl != null &&              hops != null &&              group != null &&              from != null &&              dest != peerCast.SessionID &&              ttl>0"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Invoke,The conditional expression  "remoteEndPoint!=null &&              !(channel.Network==NetworkType.IPv6 && ctx.Request.GetPCPVersion()==PCPVersion.ProtocolVersionIPv6 && remoteEndPoint.Address.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6) &&              !(channel.Network==NetworkType.IPv4 && ctx.Request.GetPCPVersion()==PCPVersion.ProtocolVersionIPv4 && remoteEndPoint.Address.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork)"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The conditional expression  "header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0"  is complex.
Complex Conditional,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,OnPCPBcst,The conditional expression  "ttl != null &&            hops != null &&            group != null &&            from != null &&            dest != PeerCast.SessionID &&            ttl>1"  is complex.
Complex Conditional,PeerCastStation.PCP,YPConnectionPool,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,OnPCPBcst,The conditional expression  "channel!=null && group!=null && from!=null && ttl!=null && ttl.Value>0"  is complex.
Empty Catch Block,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,ProcessStream,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoProcess,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessBody,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ConnectionProc,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,YPConnectionPool,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,YPConnectionPool,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,YPConnectionPool,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,Dispose,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The method has an empty catch block.
Empty Catch Block,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The method has an empty catch block.
Magic Number,PeerCastStation.PCP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Parse,The following statement contains a magic number: components.Length>2
Magic Number,PeerCastStation.PCP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Parse,The following statement contains a magic number: var ext = md.Groups[2].Success ? md.Groups[2].Value : null;
Magic Number,PeerCastStation.PCP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Parse,The following statement contains a magic number: var ext = md.Groups[2].Success ? md.Groups[2].Value : null;
Magic Number,PeerCastStation.PCP,ChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,Enqueue,The following statement contains a magic number: !queue.TryPeek(out var nxtMsg) || (msg.Timestamp-nxtMsg.Timestamp).TotalMilliseconds<=5000
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PingHostAsync,The following statement contains a magic number: client.ReceiveTimeout = 2000;
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,PingHostAsync,The following statement contains a magic number: client.SendTimeout    = 2000;
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SelectSourceHosts,The following statement contains a magic number: return channel.Nodes.OrderByDescending(n =>            ( n.GlobalEndPoint!=null ? 16000 : 0) +            ( n.GlobalEndPoint!=null &&              n.GlobalEndPoint.Address.Equals(endpoint.Address) ? 8000 : 0) +            (!n.IsRelayFull ? 4000 : 0) +            ( n.IsReceiving ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10) +            rnd.NextDouble()          ).Take(8);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,BcstChannelInfo,The following statement contains a magic number: bcst.SetBcstTTL(11);
Magic Number,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,ProcessStream,The following statement contains a magic number: handshakeCT.CancelAfter(5000);
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStreamFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,ParseChannelID,The following statement contains a magic number: header.Length>=12 &&             header[0]=='p' &&             header[1]=='c' &&             header[2]=='p' &&             header[3]=='\n' &&            header[4]==4 &&             header[5]==0 &&             header[6]==0 &&             header[7]==0 &&            header[8]==1 &&             header[9]==0 &&             header[10]==0 &&             header[11]==0
Magic Number,PeerCastStation.PCP,PCPPongOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPPongOutputStream.cs,DoProcess,The following statement contains a magic number: var timeout_source = CancellationTokenSource.CreateLinkedTokenSource(          new CancellationTokenSource(3000).Token'          cancel_token);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.ReadTimeout  = 30000;
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.WriteTimeout = 8000;
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.ReadTimeout  = 30000;
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.WriteTimeout = 8000;
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessPost,The following statement contains a magic number: delay = Math.Min(delay+10' 90);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessPost,The following statement contains a magic number: delay = Math.Min(delay+10' 90);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,DoProcess,The following statement contains a magic number: relayResponse.StatusCode==503
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2] == '\r' && buf[buf.Count-1] == '\n'
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ReadRequestResponseAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2] == '\r' && buf[buf.Count-1] == '\n'
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessRelayRequest,The following statement contains a magic number: relayResponse.StatusCode==200 || relayResponse.StatusCode==503
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,ProcessRelayRequest,The following statement contains a magic number: relayResponse.StatusCode==200 || relayResponse.StatusCode==503
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,CreatePCPBCST,The following statement contains a magic number: bcst.SetBcstTTL(11);
Magic Number,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,CheckHostInfoUpdate,The following statement contains a magic number: return lastHostInfo.LocalDirects!=Channel.LocalDirects ||               lastHostInfo.LocalRelays!=Channel.LocalRelays ||               (Timestamp.Now-lastHostInfo.Timestamp).TotalMilliseconds>=120000;
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SelectSourceHost,The following statement contains a magic number: var res = GetConnectableNodes().OrderByDescending(n =>          (IsSiteLocal(n) ? 8000 : 0) +          rnd.NextDouble() * (            ( n.IsReceiving ? 4000 : 0) +            (!n.IsRelayFull ? 2000 : 0) +            (Math.Max(10-n.Hops' 0)*100) +            (n.RelayCount*10)          )        ).DefaultIfEmpty().First();
Magic Number,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,CheckConnection,The following statement contains a magic number: int retryWait = 1000;
Magic Number,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,CheckConnection,The following statement contains a magic number: switch (result) {            case ConnectionResult.Banned:            case ConnectionResult.ServerQuit:              disposedCancellation.Cancel();              break;            case ConnectionResult.Stopped:              break;            case ConnectionResult.Error:              if (refCount>0 && !disposedCancellation.IsCancellationRequested) {                await Task.Delay(retryWait' disposedCancellation.Token).ConfigureAwait(false);                retryWait = Math.Min(retryWait * 3 / 2' 30000);                goto retry;              }              break;            }
Magic Number,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,CheckConnection,The following statement contains a magic number: switch (result) {            case ConnectionResult.Banned:            case ConnectionResult.ServerQuit:              disposedCancellation.Cancel();              break;            case ConnectionResult.Stopped:              break;            case ConnectionResult.Error:              if (refCount>0 && !disposedCancellation.IsCancellationRequested) {                await Task.Delay(retryWait' disposedCancellation.Token).ConfigureAwait(false);                retryWait = Math.Min(retryWait * 3 / 2' 30000);                goto retry;              }              break;            }
Magic Number,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,CheckConnection,The following statement contains a magic number: switch (result) {            case ConnectionResult.Banned:            case ConnectionResult.ServerQuit:              disposedCancellation.Cancel();              break;            case ConnectionResult.Stopped:              break;            case ConnectionResult.Error:              if (refCount>0 && !disposedCancellation.IsCancellationRequested) {                await Task.Delay(retryWait' disposedCancellation.Token).ConfigureAwait(false);                retryWait = Math.Min(retryWait * 3 / 2' 30000);                goto retry;              }              break;            }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,FindTracker,The following statement contains a magic number: switch (status) {              case "503":                var helo = new AtomCollection();                helo.SetHeloAgent(PeerCast.AgentName);                helo.SetHeloVersion(1218);                helo.SetHeloSessionID(PeerCast.SessionID);                helo.SetHeloPort(0);                AtomWriter.Write(stream' new Atom(Atom.PCP_HELO' helo));                var hosts = ReadHosts(stream' channel_id);                res = HostToUri(hosts.FirstOrDefault(h => h.IsTracker)' channel_id);                break;              case "200":                //なぜかリレー可能だったのでYP自体をトラッカーとみなしてしまうことにする                AtomWriter.Write(stream' new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT));                res = AnnounceUri;                break;              default:                //エラーだったのでトラッカーのアドレスを貰えず終了                break;              }
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Tracker     = ParseStr(tokens[2]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 2
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.ContactUrl  = ParseStr(tokens[3]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 3
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Genre       = ParseStr(tokens[4]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 4
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Description = ParseStr(tokens[5]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 5
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Listeners   = ParseInt(tokens[6]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 6
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Relays      = ParseInt(tokens[7]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 7
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Bitrate     = ParseInt(tokens[8]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 8
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.ContentType = ParseStr(tokens[9]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length> 9
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Artist      = ParseStr(tokens[10]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>10
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Album       = ParseStr(tokens[11]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>11
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.TrackTitle  = ParseStr(tokens[12]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>12
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.TrackUrl    = ParseStr(tokens[13]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>13
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Uptime      = ParseUptime(tokens[15]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>15
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: channel.Comment     = ParseStr(tokens[17]);
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,GetChannelsAsync,The following statement contains a magic number: tokens.Length>17
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: times.Length<2
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: return (hours*60 + minutes)*60;
Magic Number,PeerCastStation.PCP,PCPYellowPageClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,ParseUptime,The following statement contains a magic number: return (hours*60 + minutes)*60;
Missing Default,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendQuit,The following switch statement is missing a default case: switch (code) {          case StopReason.None:            break;          case StopReason.Any:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.SendTimeoutError:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SKIP)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.BadAgentError:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_BADAGENT)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.ConnectionError:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_READ)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.NotIdentifiedError:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_NOTIDENTIFIED)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.UnavailableError:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_UNAVAILABLE)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.OffAir:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_OFFAIR)' cancellationToken).ConfigureAwait(false);            break;          case StopReason.UserShutdown:            await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SHUTDOWN)' cancellationToken).ConfigureAwait(false);            break;          }
Missing Default,PeerCastStation.PCP,PCPRelayHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPOutputStream.cs,SendRelayBody,The following switch statement is missing a default case: switch (msg.Type) {            case ChannelSink.ChannelMessage.MessageType.Broadcast:              foreach (var atom in msg.Data) {                await stream.WriteAsync(atom' cancellationToken).ConfigureAwait(false);              }              break;            case ChannelSink.ChannelMessage.MessageType.ChannelInfo:              channelInfo = msg.Data;              if (channel.IsBroadcasting && lastHeader!=null) {                await BcstChannelInfo(stream' channelInfo' channelTrack' cancellationToken).ConfigureAwait(false);              }              break;            case ChannelSink.ChannelMessage.MessageType.ChannelTrack:              channelTrack = msg.Data;              if (channel.IsBroadcasting && lastHeader!=null) {                await BcstChannelInfo(stream' channelInfo' channelTrack' cancellationToken).ConfigureAwait(false);              }              break;            case ChannelSink.ChannelMessage.MessageType.ContentHeader:              {                lastHeader = msg.Content;                var chan = new AtomCollection();                chan.SetChanID(channel.ChannelID);                var chan_pkt = new AtomCollection();                chan_pkt.SetChanPktType(Atom.PCP_CHAN_PKT_HEAD);                chan_pkt.SetChanPktPos((uint)(msg.Content.Position & 0xFFFFFFFFU));                chan_pkt.SetChanPktData(msg.Content.Data);                chan.SetChanPkt(chan_pkt);                if (channelInfo!=null) chan.SetChanInfo(channelInfo);                if (channelTrack!=null) chan.SetChanTrack(channelTrack);                logger.Debug("Sending Header: {0}"' msg.Content.Position);                await stream.WriteAsync(new Atom(Atom.PCP_CHAN' chan)' cancellationToken).ConfigureAwait(false);              }              break;            case ChannelSink.ChannelMessage.MessageType.ContentBody:              foreach (var atom in CreateContentBodyPacket(channel.ChannelID' msg.Content)) {                await stream.WriteAsync(atom' cancellationToken).ConfigureAwait(false);              }              break;            case ChannelSink.ChannelMessage.MessageType.Overflow:              logger.Debug("Send Timedout");              sink.OnStop(StopReason.SendTimeoutError);              break;            }
Missing Default,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,CreatePCPHelo,The following switch statement is missing a default case: switch (PeerCast.GetPortStatus(Channel.NetworkAddressFamily)) {        case PortStatus.Open:          {            var listener = PeerCast.FindListener(              connection.RemoteEndPoint.Address'              OutputStreamType.Relay | OutputStreamType.Metadata);            helo.SetHeloPort(listener.LocalEndPoint.Port);          }          break;        case PortStatus.Firewalled:          break;        case PortStatus.Unknown:          {            var listener = PeerCast.FindListener(              connection.RemoteEndPoint.Address'              OutputStreamType.Relay | OutputStreamType.Metadata);            if (listener!=null) {              helo.SetHeloPing(listener.LocalEndPoint.Port);            }          }          break;        }
Missing Default,PeerCastStation.PCP,PCPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,SendQuit,The following switch statement is missing a default case: switch (code) {        case StopReason.None:          break;        case StopReason.Any:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.SendTimeoutError:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SKIP)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.BadAgentError:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_BADAGENT)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.ConnectionError:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_READ)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.NotIdentifiedError:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_NOTIDENTIFIED)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.UnavailableError:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_UNAVAILABLE)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.OffAir:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_OFFAIR)' cancellationToken).ConfigureAwait(false);          break;        case StopReason.UserShutdown:          await stream.WriteAsync(new Atom(Atom.PCP_QUIT' Atom.PCP_ERROR_QUIT + Atom.PCP_ERROR_SHUTDOWN)' cancellationToken).ConfigureAwait(false);          break;        }
Missing Default,PeerCastStation.PCP,PCPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPSourceStream.cs,OnConnectionStopped,The following switch statement is missing a default case: switch (args.Reason) {        case StopReason.UnavailableError:          args.IgnoreSource = connection.SourceUri;          args.Reconnect = true;          break;        case StopReason.ConnectionError:        case StopReason.OffAir:          if (connection.SourceUri!=this.SourceUri) {            args.IgnoreSource = connection.SourceUri;            args.Reconnect = true;          }          break;        }
Missing Default,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,PCPHandshake,The following switch statement is missing a default case: switch (peerCast.GetPortStatus(networkType)) {          case PortStatus.Open:            {              var listener = peerCast.FindListener(                networkType.GetAddressFamily()'                stream.RemoteEndPoint.Address'                OutputStreamType.Relay | OutputStreamType.Metadata);              if (listener!=null) {                helo.SetHeloPort(listener.LocalEndPoint.Port);              }            }            break;          case PortStatus.Firewalled:            break;          case PortStatus.Unknown:            {              var listener = peerCast.FindListener(                networkType.GetAddressFamily()'                stream.RemoteEndPoint.Address'                OutputStreamType.Relay | OutputStreamType.Metadata);              if (listener!=null) {                helo.SetHeloPing(listener.LocalEndPoint.Port);              }            }            break;          }
Missing Default,PeerCastStation.PCP,PCPYellowPageConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.PCP\PCPYellowPageClient.cs,CheckConnection,The following switch statement is missing a default case: switch (result) {            case ConnectionResult.Banned:            case ConnectionResult.ServerQuit:              disposedCancellation.Cancel();              break;            case ConnectionResult.Stopped:              break;            case ConnectionResult.Error:              if (refCount>0 && !disposedCancellation.IsCancellationRequested) {                await Task.Delay(retryWait' disposedCancellation.Token).ConfigureAwait(false);                retryWait = Math.Min(retryWait * 3 / 2' 30000);                goto retry;              }              break;            }
