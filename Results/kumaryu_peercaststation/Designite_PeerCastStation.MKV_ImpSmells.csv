Implementation smell,Namespace,Class,File,Method,Description
Long Method,PeerCastStation.MKV,MKVContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadAsync,The method has 236 lines of code.
Complex Method,PeerCastStation.MKV,EBML,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,EBML,Cyclomatic complexity of the method is 9
Complex Conditional,PeerCastStation.MKV,MKVContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadAsync,The conditional expression  "(elt.ID.BinaryEquals(Elements.SimpleBlock) ||                        elt.ID.BinaryEquals(Elements.BlockGroup)) &&                       (clusters.Last.Value.BlockID==null ||                        elt.ID.BinaryEquals(clusters.Last.Value.BlockID))"  is complex.
Empty Catch Block,PeerCastStation.MKV,MKVContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadAsync,The method has an empty catch block.
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadUIntAsync,The following statement contains a magic number: long res = bin.Aggregate(0L' (r' b) => (r<<8) | b);
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadUIntAsync,The following statement contains a magic number: res &= (1<<(7*len))-1;
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadUInt,The following statement contains a magic number: res = (res<<8) | (byte)b;
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadUInt,The following statement contains a magic number: res &= (1<<(7*len))-1;
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,CheckLength,The following statement contains a magic number: return Enumerable.Range(0' 8).First(i => ((1<<(7-i)) & v)!=0)+1;
Magic Number,PeerCastStation.MKV,VInt,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,CheckLength,The following statement contains a magic number: return Enumerable.Range(0' 8).First(i => ((1<<(7-i)) & v)!=0)+1;
Magic Number,PeerCastStation.MKV,Element,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadUInt,The following statement contains a magic number: return s.ReadBytes((int)len).Aggregate(0L' (r'v) => (r<<8) | v);
Magic Number,PeerCastStation.MKV,EBML,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,EBML,The following statement contains a magic number: this.MaxIDLength        = 4;
Magic Number,PeerCastStation.MKV,EBML,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,EBML,The following statement contains a magic number: this.MaxSizeLength      = 8;
Magic Number,PeerCastStation.MKV,MKVContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadAsync,The following statement contains a magic number: var timecode_scale = 1000000.0;
Magic Number,PeerCastStation.MKV,MKVContentReaderFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,TryParseContentType,The following statement contains a magic number: 4<elt.ID.Length || 8<elt.Size.Length ||                !elt.ID.BinaryEquals(Elements.EBML)
Magic Number,PeerCastStation.MKV,MKVContentReaderFactory,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,TryParseContentType,The following statement contains a magic number: 4<elt.ID.Length || 8<elt.Size.Length ||                !elt.ID.BinaryEquals(Elements.EBML)
Missing Default,PeerCastStation.MKV,MKVContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.MKV\MKVContentReader.cs,ReadAsync,The following switch statement is missing a default case: switch (state) {            case ReaderState.EBML:              if (elt.ID.BinaryEquals(Elements.EBML)) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                headers.Clear();                headers.Add(elt);                ebml = new EBML(elt);                state = ReaderState.Segment;              }              else {                throw new BadDataException();              }              break;            case ReaderState.Segment:              if (elt.ID.BinaryEquals(Elements.Segment)) {                headers.Add(elt);                state = ReaderState.EndOfHeader;              }              else if (elt.ID.BinaryEquals(Elements.EBML)) {                state = ReaderState.EBML;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Void) ||                       elt.ID.BinaryEquals(Elements.CRC32)) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                headers.Add(elt);              }              else {                throw new BadDataException();              }              break;            case ReaderState.EndOfHeader:              if (elt.ID.BinaryEquals(Elements.Segment)) {                state = ReaderState.Segment;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.EBML)) {                state = ReaderState.EBML;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Cluster)) {                clusters.Clear();                MemoryStream header;                using (header=new MemoryStream()) {                  foreach (var c in headers) {                    c.Write(header);                  }                }                headers.Clear();                  stream_index  = Channel.GenerateStreamID();                stream_origin = DateTime.Now;                position = 0;                sink.OnContentHeader(                  new Content(stream_index' TimeSpan.Zero' 0' header.ToArray()' PCPChanPacketContinuation.None)                );                position += header.ToArray().LongLength;                var info = new AtomCollection();                if (ebml.DocType=="webm") {                  info.SetChanInfoType("WEBM");                  info.SetChanInfoStreamType("video/webm");                  info.SetChanInfoStreamExt(".webm");                }                else {                  info.SetChanInfoType("MKV");                  info.SetChanInfoStreamType("video/x-matroska");                  info.SetChanInfoStreamExt(".mkv");                }                sink.OnChannelInfo(new ChannelInfo(info));                  state = ReaderState.Cluster;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Info)) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                var s = new MemoryStream(elt.Data);                while (s.Position<s.Length) {                  var child = Element.ReadHeader(s);                  if (child.ID.BinaryEquals(Elements.TimecodeScale)) {                    timecode_scale = Element.ReadUInt(s' child.Size.Value) * 1.0;                  }                  else {                    child.ReadBody(s);                  }                }                headers.Add(elt);              }              else {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                headers.Add(elt);              }              break;            case ReaderState.Cluster:              if (elt.ID.BinaryEquals(Elements.Segment)) {                state = ReaderState.Segment;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.EBML)) {                state = ReaderState.EBML;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Cluster)) {                if (clusters.Count>0) {                  var timespan = clusters.Sum(c => c.Timespan);                  if (timespan>=30.0) {                    var sz = clusters.Sum(c => c.Timespan>0 ? c.BlockSize : 0);                    var kbps = (int)((sz*8/timespan+900) / 1000.0);                    var info = new AtomCollection();                    info.SetChanInfoBitrate(kbps);                    sink.OnChannelInfo(new ChannelInfo(info));                    while (clusters.Count>1) clusters.RemoveFirst();                  }                }                var cluster = new Cluster(elt);                clusters.AddLast(cluster);                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;                state = ReaderState.Timecode;              }              else if (elt.ID.BinaryEquals(Elements.Void) ||                       elt.ID.BinaryEquals(Elements.CRC32)) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;              }              else {                throw new BadDataException();              }              break;            case ReaderState.Timecode:              if (elt.ID.BinaryEquals(Elements.Segment)) {                state = ReaderState.Segment;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.EBML)) {                state = ReaderState.EBML;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Cluster)) {                state = ReaderState.Cluster;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.SimpleBlock) ||                       elt.ID.BinaryEquals(Elements.BlockGroup)) {                state = ReaderState.Block;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Timecode)) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                if (clusters.Last!=null) {                  clusters.Last.Value.Timecode =                    Element.ReadUInt(new MemoryStream(elt.Data)' elt.Data.Length)*(timecode_scale/1000000000.0);                  if (clusters.Count>1) {                    clusters.Last.Previous.Value.Timespan = clusters.Last.Value.Timecode - clusters.Last.Previous.Value.Timecode;                  }                }                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;                state = ReaderState.Block;              }              else {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;              }              break;            case ReaderState.Block:              if (elt.ID.BinaryEquals(Elements.Segment)) {                state = ReaderState.Segment;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.EBML)) {                state = ReaderState.EBML;                goto parse_retry;              }              else if (elt.ID.BinaryEquals(Elements.Cluster)) {                state = ReaderState.Cluster;                goto parse_retry;              }              else if ((elt.ID.BinaryEquals(Elements.SimpleBlock) ||                        elt.ID.BinaryEquals(Elements.BlockGroup)) &&                       (clusters.Last.Value.BlockID==null ||                        elt.ID.BinaryEquals(clusters.Last.Value.BlockID))) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                clusters.Last.Value.BlockSize += elt.Size.Value;                clusters.Last.Value.BlockID    = elt.ID.Binary;                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;              }              else if (clusters.Last.Value.BlockID==null) {                await elt.ReadBodyAsync(stream' cancel_token).ConfigureAwait(false);                sink.OnContent(                  new Content(stream_index' DateTime.Now-stream_origin' position' elt.ToArray()' PCPChanPacketContinuation.None)                );                position += elt.ByteSize;              }              else {                state = ReaderState.Cluster;                goto parse_retry;              }              break;            }
