Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,PeerCastStation.ASF,ASFChunk,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ASFChunk,The method has 6 parameters. Parameters: type' length' sequence_number' v1' v2' data
Empty Catch Block,PeerCastStation.ASF,ASFContentReaderFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,TryParseContentType,The method has an empty catch block.
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt16LE,The following statement contains a magic number: return BitConverter.ToInt16(ReadBytesLE(s' 2)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt16LEAsync,The following statement contains a magic number: return BitConverter.ToInt16(await ReadBytesLEAsync(s' 2' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt16LE,The following statement contains a magic number: return BitConverter.ToUInt16(ReadBytesLE(s' 2)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt16LEAsync,The following statement contains a magic number: return BitConverter.ToUInt16(await ReadBytesLEAsync(s' 2' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt32LE,The following statement contains a magic number: return BitConverter.ToInt32(ReadBytesLE(s' 4)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt32LEAsync,The following statement contains a magic number: return BitConverter.ToInt32(await ReadBytesLEAsync(s' 4' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt32LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt32(bytes' offset);        }        else {          return BitConverter.ToInt32(new byte[] {            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt32LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt32(bytes' offset);        }        else {          return BitConverter.ToInt32(new byte[] {            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt32LE,The following statement contains a magic number: return BitConverter.ToUInt32(ReadBytesLE(s' 4)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt32LEAsync,The following statement contains a magic number: return BitConverter.ToUInt32(await ReadBytesLEAsync(s' 4' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt32LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt32(bytes' offset);        }        else {          return BitConverter.ToUInt32(new byte[] {            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt32LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt32(bytes' offset);        }        else {          return BitConverter.ToUInt32(new byte[] {            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt64LE,The following statement contains a magic number: return BitConverter.ToInt64(ReadBytesLE(s' 8)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadInt64LEAsync,The following statement contains a magic number: return BitConverter.ToInt64(await ReadBytesLEAsync(s' 8' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToInt64(bytes' offset);        }        else {          return BitConverter.ToInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt64LE,The following statement contains a magic number: return BitConverter.ToUInt64(ReadBytesLE(s' 8)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadUInt64LEAsync,The following statement contains a magic number: return BitConverter.ToUInt64(await ReadBytesLEAsync(s' 8' cancel_token)' 0);
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,BinaryReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,GetUInt64LE,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          return BitConverter.ToUInt64(bytes' offset);        }        else {          return BitConverter.ToUInt64(new byte[] {            bytes[offset+7]' bytes[offset+6]' bytes[offset+5]' bytes[offset+4]'            bytes[offset+3]' bytes[offset+2]' bytes[offset+1]' bytes[offset+0]          }' 0);        }
Magic Number,PeerCastStation.ASF,ASFChunk,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: try {          var type    = BinaryReader.ReadUInt16LE(stream);          var len     = BinaryReader.ReadUInt16LE(stream);          if (len<8) {            var data  = BinaryReader.ReadBytes(stream' len);            return new ASFChunk(type' len' 0' 0' 0' data);          }          else {            var seq_num = BinaryReader.ReadUInt32LE(stream);            var v1      = BinaryReader.ReadUInt16LE(stream);            var v2      = BinaryReader.ReadUInt16LE(stream);            var data    = BinaryReader.ReadBytes(stream' len-8);            return new ASFChunk(type' len' seq_num' v1' v2' data);          }        }        catch (EndOfStreamException) {          stream.Position = pos;          throw;        }
Magic Number,PeerCastStation.ASF,ASFChunk,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: try {          var type    = BinaryReader.ReadUInt16LE(stream);          var len     = BinaryReader.ReadUInt16LE(stream);          if (len<8) {            var data  = BinaryReader.ReadBytes(stream' len);            return new ASFChunk(type' len' 0' 0' 0' data);          }          else {            var seq_num = BinaryReader.ReadUInt32LE(stream);            var v1      = BinaryReader.ReadUInt16LE(stream);            var v2      = BinaryReader.ReadUInt16LE(stream);            var data    = BinaryReader.ReadBytes(stream' len-8);            return new ASFChunk(type' len' seq_num' v1' v2' data);          }        }        catch (EndOfStreamException) {          stream.Position = pos;          throw;        }
Magic Number,PeerCastStation.ASF,ASFChunk,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadAsync,The following statement contains a magic number: if (len<8) {          var data = await BinaryReader.ReadBytesAsync(stream' len' cancel_token);          return new ASFChunk(type' len' 0' 0' 0' data);        }        else {          var seq_num = await BinaryReader.ReadUInt32LEAsync(stream' cancel_token);          var v1      = await BinaryReader.ReadUInt16LEAsync(stream' cancel_token);          var v2      = await BinaryReader.ReadUInt16LEAsync(stream' cancel_token);          var data    = await BinaryReader.ReadBytesAsync(stream' len-8' cancel_token);          return new ASFChunk(type' len' seq_num' v1' v2' data);        }
Magic Number,PeerCastStation.ASF,ASFChunk,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadAsync,The following statement contains a magic number: if (len<8) {          var data = await BinaryReader.ReadBytesAsync(stream' len' cancel_token);          return new ASFChunk(type' len' 0' 0' 0' data);        }        else {          var seq_num = await BinaryReader.ReadUInt32LEAsync(stream' cancel_token);          var v1      = await BinaryReader.ReadUInt16LEAsync(stream' cancel_token);          var v2      = await BinaryReader.ReadUInt16LEAsync(stream' cancel_token);          var data    = await BinaryReader.ReadBytesAsync(stream' len-8' cancel_token);          return new ASFChunk(type' len' seq_num' v1' v2' data);        }
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: s.Seek(2' SeekOrigin.Current);
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: for (var i=0; i<sub_headers; i++) {          var obj = ASFObject.Read(s);          switch (obj.Type) {          case ASFObject.KnownType.FileProperty: {            var objdata = new MemoryStream(obj.Data' false);            objdata.Seek(32' SeekOrigin.Current);            BinaryReader.ReadInt64LE(objdata); //packets            objdata.Seek(28' SeekOrigin.Current);            BinaryReader.ReadInt32LE(objdata); //packetsize_min            BinaryReader.ReadInt32LE(objdata); //packetsize_max            bitrate = (BinaryReader.ReadInt32LE(objdata)+999) / 1000;            }            break;          case ASFObject.KnownType.StreamProperty: {            var objdata = new MemoryStream(obj.Data' false);            var stream_type = new Guid(BinaryReader.ReadBytes(objdata' 16));            if (stream_type==ASFObject.StreamIDAudio) {              streams.Add(StreamType.Audio);            }            else if (stream_type==ASFObject.StreamIDVideo) {              streams.Add(StreamType.Video);            }            else {              streams.Add(StreamType.Unknown);            }            }            break;          default:            break;          }        }
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: for (var i=0; i<sub_headers; i++) {          var obj = ASFObject.Read(s);          switch (obj.Type) {          case ASFObject.KnownType.FileProperty: {            var objdata = new MemoryStream(obj.Data' false);            objdata.Seek(32' SeekOrigin.Current);            BinaryReader.ReadInt64LE(objdata); //packets            objdata.Seek(28' SeekOrigin.Current);            BinaryReader.ReadInt32LE(objdata); //packetsize_min            BinaryReader.ReadInt32LE(objdata); //packetsize_max            bitrate = (BinaryReader.ReadInt32LE(objdata)+999) / 1000;            }            break;          case ASFObject.KnownType.StreamProperty: {            var objdata = new MemoryStream(obj.Data' false);            var stream_type = new Guid(BinaryReader.ReadBytes(objdata' 16));            if (stream_type==ASFObject.StreamIDAudio) {              streams.Add(StreamType.Audio);            }            else if (stream_type==ASFObject.StreamIDVideo) {              streams.Add(StreamType.Video);            }            else {              streams.Add(StreamType.Unknown);            }            }            break;          default:            break;          }        }
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: for (var i=0; i<sub_headers; i++) {          var obj = ASFObject.Read(s);          switch (obj.Type) {          case ASFObject.KnownType.FileProperty: {            var objdata = new MemoryStream(obj.Data' false);            objdata.Seek(32' SeekOrigin.Current);            BinaryReader.ReadInt64LE(objdata); //packets            objdata.Seek(28' SeekOrigin.Current);            BinaryReader.ReadInt32LE(objdata); //packetsize_min            BinaryReader.ReadInt32LE(objdata); //packetsize_max            bitrate = (BinaryReader.ReadInt32LE(objdata)+999) / 1000;            }            break;          case ASFObject.KnownType.StreamProperty: {            var objdata = new MemoryStream(obj.Data' false);            var stream_type = new Guid(BinaryReader.ReadBytes(objdata' 16));            if (stream_type==ASFObject.StreamIDAudio) {              streams.Add(StreamType.Audio);            }            else if (stream_type==ASFObject.StreamIDVideo) {              streams.Add(StreamType.Video);            }            else {              streams.Add(StreamType.Unknown);            }            }            break;          default:            break;          }        }
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: for (var i=0; i<sub_headers; i++) {          var obj = ASFObject.Read(s);          switch (obj.Type) {          case ASFObject.KnownType.FileProperty: {            var objdata = new MemoryStream(obj.Data' false);            objdata.Seek(32' SeekOrigin.Current);            BinaryReader.ReadInt64LE(objdata); //packets            objdata.Seek(28' SeekOrigin.Current);            BinaryReader.ReadInt32LE(objdata); //packetsize_min            BinaryReader.ReadInt32LE(objdata); //packetsize_max            bitrate = (BinaryReader.ReadInt32LE(objdata)+999) / 1000;            }            break;          case ASFObject.KnownType.StreamProperty: {            var objdata = new MemoryStream(obj.Data' false);            var stream_type = new Guid(BinaryReader.ReadBytes(objdata' 16));            if (stream_type==ASFObject.StreamIDAudio) {              streams.Add(StreamType.Audio);            }            else if (stream_type==ASFObject.StreamIDVideo) {              streams.Add(StreamType.Video);            }            else {              streams.Add(StreamType.Unknown);            }            }            break;          default:            break;          }        }
Magic Number,PeerCastStation.ASF,ASFHeader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: for (var i=0; i<sub_headers; i++) {          var obj = ASFObject.Read(s);          switch (obj.Type) {          case ASFObject.KnownType.FileProperty: {            var objdata = new MemoryStream(obj.Data' false);            objdata.Seek(32' SeekOrigin.Current);            BinaryReader.ReadInt64LE(objdata); //packets            objdata.Seek(28' SeekOrigin.Current);            BinaryReader.ReadInt32LE(objdata); //packetsize_min            BinaryReader.ReadInt32LE(objdata); //packetsize_max            bitrate = (BinaryReader.ReadInt32LE(objdata)+999) / 1000;            }            break;          case ASFObject.KnownType.StreamProperty: {            var objdata = new MemoryStream(obj.Data' false);            var stream_type = new Guid(BinaryReader.ReadBytes(objdata' 16));            if (stream_type==ASFObject.StreamIDAudio) {              streams.Add(StreamType.Audio);            }            else if (stream_type==ASFObject.StreamIDVideo) {              streams.Add(StreamType.Video);            }            else {              streams.Add(StreamType.Unknown);            }            }            break;          default:            break;          }        }
Magic Number,PeerCastStation.ASF,ASFObject,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: var id = new Guid(BinaryReader.ReadBytes(stream' 16));
Magic Number,PeerCastStation.ASF,ASFObject,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,Read,The following statement contains a magic number: var data = BinaryReader.ReadBytes(stream' (int)len-24);
Magic Number,PeerCastStation.ASF,ASFObject,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadHeader,The following statement contains a magic number: var id = new Guid(BinaryReader.ReadBytes(stream' 16));
Magic Number,PeerCastStation.ASF,ASFContentReaderFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,TryParseContentType,The following statement contains a magic number: using (var stream=new MemoryStream(header_bytes)) {          try {            for (var chunks=0; chunks<8; chunks++) {              var chunk = ASFChunk.Read(stream);              if (chunk.KnownType!=ASFChunk.ChunkType.Header) continue;              var header = ASFHeader.Read(chunk);              if (header.Streams.Any(type => type==ASFHeader.StreamType.Video)) {                content_type = "WMV";                mime_type = "video/x-ms-wmv";              }              else if (header.Streams.Any(type => type==ASFHeader.StreamType.Audio)) {                content_type = "WMA";                mime_type = "audio/x-ms-wma";              }              else {                content_type = "ASF";                mime_type = "video/x-ms-asf";              }              return true;            }          }          catch (EndOfStreamException) {          }        }
Missing Default,PeerCastStation.ASF,ASFContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.ASF\ASFContentReader.cs,ReadAsync,The following switch statement is missing a default case: switch (chunk.KnownType) {          case ASFChunk.ChunkType.Header:            {              var header = ASFHeader.Read(chunk);              var info = new AtomCollection(Channel.ChannelInfo.Extra);              info.SetChanInfoBitrate(header.Bitrate);              if (header.Streams.Any(type => type==ASFHeader.StreamType.Video)) {                info.SetChanInfoType("WMV");                info.SetChanInfoStreamType("video/x-ms-wmv");                info.SetChanInfoStreamExt(".wmv");              }              else if (header.Streams.Any(type => type==ASFHeader.StreamType.Audio)) {                info.SetChanInfoType("WMA");                info.SetChanInfoStreamType("audio/x-ms-wma");                info.SetChanInfoStreamExt(".wma");              }              else {                info.SetChanInfoType("ASF");                info.SetChanInfoStreamType("video/x-ms-asf");                info.SetChanInfoStreamExt(".asf");              }              sink.OnChannelInfo(new ChannelInfo(info));              streamIndex = Channel.GenerateStreamID();              streamOrigin = DateTime.Now;              contentPosition = 0;              var data = chunk.ToByteArray();              sink.OnContentHeader(new Content(streamIndex' TimeSpan.Zero' contentPosition' data));              contentPosition += data.Length;              break;            }          case ASFChunk.ChunkType.Data:            {              var data = chunk.ToByteArray();              sink.OnContent(                new Content(streamIndex' DateTime.Now-streamOrigin' contentPosition' chunk.ToByteArray())              );              contentPosition += data.Length;            }            break;          case ASFChunk.ChunkType.Unknown:            break;          }
