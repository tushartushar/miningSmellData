Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.App,AppBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,Cyclomatic complexity of the method is 9
Long Statement,PeerCastStation.App,AppBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadPluginAssembly,The length of the statement  "        foreach (var settingtype in asm.GetTypes().Where(type => type.GetCustomAttributes(typeof(PecaSettingsAttribute)' true).Length>0)) { " is 131.
Long Statement,PeerCastStation.App,AppBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadPluginAssembly,The length of the statement  "          foreach (var attr in settingtype.GetCustomAttributes(typeof(PecaSettingsAttribute)' true).Cast<PecaSettingsAttribute>()) { " is 122.
Empty Catch Block,PeerCastStation.App,AppBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,The method has an empty catch block.
Magic Number,PeerCastStation.App,AppBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,The following statement contains a magic number: try {          if (s.Logger!=null) {            Logger.Level        = s.Logger.Level;            Logger.LogFileName  = s.Logger.LogFileName;            Logger.OutputTarget = s.Logger.OutputTarget;          }          if (s.AccessController!=null) {            peerCast.AccessController.MaxPlays                  = s.AccessController.MaxDirects;            peerCast.AccessController.MaxRelays                 = s.AccessController.MaxRelays;            peerCast.AccessController.MaxPlaysPerChannel        = s.AccessController.MaxDirectsPerChannel;            peerCast.AccessController.MaxRelaysPerChannel       = s.AccessController.MaxRelaysPerChannel;            peerCast.AccessController.MaxUpstreamRate           = s.AccessController.MaxUpstreamRate;            peerCast.AccessController.MaxUpstreamRatePerChannel = s.AccessController.MaxUpstreamRatePerChannel;          }          if ( s.BroadcastID!=Guid.Empty &&              (AtomCollectionExtensions.IDToByteArray(s.BroadcastID)[0] & 0x01)==0) {            peerCast.BroadcastID = s.BroadcastID;          }          if (s.Listeners!=null) {            foreach (var listener in s.Listeners) {              try {                var ol = peerCast.StartListen(listener.EndPoint' listener.LocalAccepts' listener.GlobalAccepts);                ol.GlobalAuthorizationRequired = listener.GlobalAuthRequired;                ol.LocalAuthorizationRequired  = listener.LocalAuthRequired;                ol.AuthenticationKey = new AuthenticationKey(listener.AuthId' listener.AuthPassword);              }              catch (System.Net.Sockets.SocketException e) {                logger.Error(e);              }            }          }          if (peerCast.OutputListeners.Count==0) {            var endpoint =              new System.Net.IPEndPoint(                AppSettingsReader.GetIPAddress("DefaultListenAddress"' System.Net.IPAddress.Any)'                AppSettingsReader.GetInt("DefaultListenPort"' 7144)              );            try {              peerCast.StartListen(                endpoint'                OutputStreamType.All'                OutputStreamType.Metadata | OutputStreamType.Relay);            }            catch (System.Net.Sockets.SocketException e) {              logger.Error(e);              try {                peerCast.StartListen(                  new System.Net.IPEndPoint(endpoint.Address' 0)'                  OutputStreamType.All'                  OutputStreamType.None);              }              catch (System.Net.Sockets.SocketException e2) {                logger.Error(e2);              }            }          }          if (s.YellowPages!=null) {            foreach (var yellowpage in s.YellowPages) {              try {                peerCast.AddYellowPage(yellowpage.Protocol' yellowpage.Name' yellowpage.Uri' yellowpage.ChannelsUri);              }              catch (ArgumentException e) {                logger.Error(e);              }            }          }        }        catch (FormatException)        {        }
Magic Number,PeerCastStation.App,ChannelCleanerSettings,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\PeerCastStationSettings.cs,ChannelCleanerSettings,The following statement contains a magic number: this.InactiveLimit = 1800000;
Missing Default,PeerCastStation.App,ChannelNotifier,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\ChannelNotifier.cs,OnChannelClosed,The following switch statement is missing a default case: switch (args.StopReason) {        case StopReason.OffAir: {            var msg = new NotificationMessage(              channel.ChannelInfo.Name'              "チャンネルが終了しました"'              NotificationMessageType.Info);            NotifyMessage(msg);          }          break;        case StopReason.NoHost:        case StopReason.ConnectionError: {            var msg = new NotificationMessage(              channel.ChannelInfo.Name'              "チャンネルに接続できませんでした"'              NotificationMessageType.Error);            NotifyMessage(msg);          }          break;        }
