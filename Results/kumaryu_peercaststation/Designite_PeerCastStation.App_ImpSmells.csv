Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.App,OptionParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\OptionParser.cs,Parse,Cyclomatic complexity of the method is 11
Long Statement,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadPluginAssembly,The length of the statement  "        foreach (var settingtype in asm.GetTypes().Where(type => type.GetCustomAttributes(typeof(PecaSettingsAttribute)' true).Length>0)) { " is 131.
Long Statement,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadPluginAssembly,The length of the statement  "          foreach (var attr in settingtype.GetCustomAttributes(typeof(PecaSettingsAttribute)' true).Cast<PecaSettingsAttribute>()) { " is 122.
Empty Catch Block,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,AppBase,The method has an empty catch block.
Empty Catch Block,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,The method has an empty catch block.
Magic Number,PeerCastStation.App,AppBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\AppBase.cs,LoadSettings,The following statement contains a magic number: var endpoint =              new System.Net.IPEndPoint(                AppSettingsReader.GetIPAddress("DefaultListenAddress"' System.Net.IPAddress.Any)'                AppSettingsReader.GetInt("DefaultListenPort"' 7144)              );
Magic Number,PeerCastStation.App,ChannelCleanerSettings,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\PeerCastStationSettings.cs,ChannelCleanerSettings,The following statement contains a magic number: this.InactiveLimit = 1800000;
Missing Default,PeerCastStation.App,ChannelNotifier,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\ChannelNotifier.cs,OnChannelClosed,The following switch statement is missing a default case: switch (args.StopReason) {        case StopReason.OffAir: {            var msg = new NotificationMessage(              channel.ChannelInfo.Name'              "チャンネルが終了しました"'              NotificationMessageType.Info);            NotifyMessage(msg);          }          break;        case StopReason.NoHost:        case StopReason.ConnectionError: {            var msg = new NotificationMessage(              channel.ChannelInfo.Name'              "チャンネルに接続できませんでした"'              NotificationMessageType.Error);            NotifyMessage(msg);          }          break;        }
Missing Default,PeerCastStation.App,OptionDesc,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\OptionParser.cs,OptionDesc,The following switch statement is missing a default case: switch (Argument) {        case OptionArg.None:          Regex = new System.Text.RegularExpressions.Regex($"^(?:{ShortName}|{LongName})$");          break;        case OptionArg.Optional:        case OptionArg.Required:          Regex = new System.Text.RegularExpressions.Regex($"^(?:{ShortName}|{LongName})(?:=(.*))?$");          break;        }
Missing Default,PeerCastStation.App,OptionParser,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.App\OptionParser.cs,Parse,The following switch statement is missing a default case: switch (opt.Argument) {            case OptionArg.None:              results.Add(new ParsedOption(opt.LongName));              break;            case OptionArg.Optional:              if (md.Groups[1].Success) {                results.Add(new ParsedOption(opt.LongName' md.Groups[1].Value));              }              else if (pos+1<args.Length && !args[pos+1].StartsWith("-")) {                results.Add(new ParsedOption(opt.LongName' args[pos+1]));                pos += 1;              }              else {                results.Add(new ParsedOption(opt.LongName));              }              break;            case OptionArg.Required:              if (md.Groups[1].Success) {                results.Add(new ParsedOption(opt.LongName' md.Groups[1].Value));              }              else if (pos+1<args.Length && !args[pos+1].StartsWith("-")) {                results.Add(new ParsedOption(opt.LongName' args[pos+1]));                pos += 1;              }              else {                throw new OptionParseErrorException($"{opt.LongName}:Argument required");              }              break;            }
