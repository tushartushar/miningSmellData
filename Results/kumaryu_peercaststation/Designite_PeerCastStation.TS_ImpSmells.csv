Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,Cyclomatic complexity of the method is 14
Complex Method,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,Cyclomatic complexity of the method is 12
Complex Conditional,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The conditional expression  "packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0"  is complex.
Complex Conditional,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The conditional expression  "packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0"  is complex.
Empty Catch Block,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The method has an empty catch block.
Empty Catch Block,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The method has an empty catch block.
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: byte[] bytes188 = new byte[188];
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: try        {          while (!cancel_token.IsCancellationRequested)          {            bytes188 = await stream.ReadBytesAsync(188' cancel_token);            TSPacket packet = new TSPacket(bytes188);            if (packet.sync_byte != 0x47) throw new Exception();            if (packet.payload_unit_start_indicator > 0)            {              if (packet.PID == patID)              {                pmtID = packet.PMTID;                head = new MemoryStream();                if(!addHead(bytes188)) throw new Exception();                continue;              }              if (packet.PID == pmtID)              {                var pmt = new ProgramMapTable(packet' bytes188);                pcrPID = pmt.PCRPID;                if(!addHead(bytes188)) throw new Exception();                head.Close();                byte[] newHead = head.ToArray();                if(!Enumerable.SequenceEqual(newHead' latestHead))                {                  streamIndex = Channel.GenerateStreamID();                  contentPosition = 0;                  sink.OnContentHeader(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' newHead));                  contentPosition += newHead.Length;                  latestHead = newHead;                }                continue;              }              if (packet.PID==pcrPID && packet.program_clock_reference>0.0) {                if (packet.program_clock_reference<rateCounter.lastPCR) {                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                  recvRate = 0.0;                }                else if (rateCounter.lastPCR+10.0<packet.program_clock_reference) {                  var bitrate = 8*rateCounter.byteCount / (packet.program_clock_reference - rateCounter.lastPCR);                  UpdateRecvRate(sink' bitrate);                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                }              }              if ((DateTime.Now - latestContentTime).Milliseconds > 50) {                TryParseContent(packet' out contentData);                if(contentData!=null) {                  sink.OnContent(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' contentData));                  contentPosition += contentData.Length;                  latestContentTime = DateTime.Now;                }              }            }            if (!addCache(bytes188)) throw new Exception();            rateCounter.byteCount += 188;          }        }        catch (EndOfStreamException)        { }        catch (Exception)        { }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: try        {          while (!cancel_token.IsCancellationRequested)          {            bytes188 = await stream.ReadBytesAsync(188' cancel_token);            TSPacket packet = new TSPacket(bytes188);            if (packet.sync_byte != 0x47) throw new Exception();            if (packet.payload_unit_start_indicator > 0)            {              if (packet.PID == patID)              {                pmtID = packet.PMTID;                head = new MemoryStream();                if(!addHead(bytes188)) throw new Exception();                continue;              }              if (packet.PID == pmtID)              {                var pmt = new ProgramMapTable(packet' bytes188);                pcrPID = pmt.PCRPID;                if(!addHead(bytes188)) throw new Exception();                head.Close();                byte[] newHead = head.ToArray();                if(!Enumerable.SequenceEqual(newHead' latestHead))                {                  streamIndex = Channel.GenerateStreamID();                  contentPosition = 0;                  sink.OnContentHeader(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' newHead));                  contentPosition += newHead.Length;                  latestHead = newHead;                }                continue;              }              if (packet.PID==pcrPID && packet.program_clock_reference>0.0) {                if (packet.program_clock_reference<rateCounter.lastPCR) {                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                  recvRate = 0.0;                }                else if (rateCounter.lastPCR+10.0<packet.program_clock_reference) {                  var bitrate = 8*rateCounter.byteCount / (packet.program_clock_reference - rateCounter.lastPCR);                  UpdateRecvRate(sink' bitrate);                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                }              }              if ((DateTime.Now - latestContentTime).Milliseconds > 50) {                TryParseContent(packet' out contentData);                if(contentData!=null) {                  sink.OnContent(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' contentData));                  contentPosition += contentData.Length;                  latestContentTime = DateTime.Now;                }              }            }            if (!addCache(bytes188)) throw new Exception();            rateCounter.byteCount += 188;          }        }        catch (EndOfStreamException)        { }        catch (Exception)        { }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: try        {          while (!cancel_token.IsCancellationRequested)          {            bytes188 = await stream.ReadBytesAsync(188' cancel_token);            TSPacket packet = new TSPacket(bytes188);            if (packet.sync_byte != 0x47) throw new Exception();            if (packet.payload_unit_start_indicator > 0)            {              if (packet.PID == patID)              {                pmtID = packet.PMTID;                head = new MemoryStream();                if(!addHead(bytes188)) throw new Exception();                continue;              }              if (packet.PID == pmtID)              {                var pmt = new ProgramMapTable(packet' bytes188);                pcrPID = pmt.PCRPID;                if(!addHead(bytes188)) throw new Exception();                head.Close();                byte[] newHead = head.ToArray();                if(!Enumerable.SequenceEqual(newHead' latestHead))                {                  streamIndex = Channel.GenerateStreamID();                  contentPosition = 0;                  sink.OnContentHeader(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' newHead));                  contentPosition += newHead.Length;                  latestHead = newHead;                }                continue;              }              if (packet.PID==pcrPID && packet.program_clock_reference>0.0) {                if (packet.program_clock_reference<rateCounter.lastPCR) {                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                  recvRate = 0.0;                }                else if (rateCounter.lastPCR+10.0<packet.program_clock_reference) {                  var bitrate = 8*rateCounter.byteCount / (packet.program_clock_reference - rateCounter.lastPCR);                  UpdateRecvRate(sink' bitrate);                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                }              }              if ((DateTime.Now - latestContentTime).Milliseconds > 50) {                TryParseContent(packet' out contentData);                if(contentData!=null) {                  sink.OnContent(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' contentData));                  contentPosition += contentData.Length;                  latestContentTime = DateTime.Now;                }              }            }            if (!addCache(bytes188)) throw new Exception();            rateCounter.byteCount += 188;          }        }        catch (EndOfStreamException)        { }        catch (Exception)        { }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: try        {          while (!cancel_token.IsCancellationRequested)          {            bytes188 = await stream.ReadBytesAsync(188' cancel_token);            TSPacket packet = new TSPacket(bytes188);            if (packet.sync_byte != 0x47) throw new Exception();            if (packet.payload_unit_start_indicator > 0)            {              if (packet.PID == patID)              {                pmtID = packet.PMTID;                head = new MemoryStream();                if(!addHead(bytes188)) throw new Exception();                continue;              }              if (packet.PID == pmtID)              {                var pmt = new ProgramMapTable(packet' bytes188);                pcrPID = pmt.PCRPID;                if(!addHead(bytes188)) throw new Exception();                head.Close();                byte[] newHead = head.ToArray();                if(!Enumerable.SequenceEqual(newHead' latestHead))                {                  streamIndex = Channel.GenerateStreamID();                  contentPosition = 0;                  sink.OnContentHeader(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' newHead));                  contentPosition += newHead.Length;                  latestHead = newHead;                }                continue;              }              if (packet.PID==pcrPID && packet.program_clock_reference>0.0) {                if (packet.program_clock_reference<rateCounter.lastPCR) {                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                  recvRate = 0.0;                }                else if (rateCounter.lastPCR+10.0<packet.program_clock_reference) {                  var bitrate = 8*rateCounter.byteCount / (packet.program_clock_reference - rateCounter.lastPCR);                  UpdateRecvRate(sink' bitrate);                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                }              }              if ((DateTime.Now - latestContentTime).Milliseconds > 50) {                TryParseContent(packet' out contentData);                if(contentData!=null) {                  sink.OnContent(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' contentData));                  contentPosition += contentData.Length;                  latestContentTime = DateTime.Now;                }              }            }            if (!addCache(bytes188)) throw new Exception();            rateCounter.byteCount += 188;          }        }        catch (EndOfStreamException)        { }        catch (Exception)        { }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ReadAsync,The following statement contains a magic number: try        {          while (!cancel_token.IsCancellationRequested)          {            bytes188 = await stream.ReadBytesAsync(188' cancel_token);            TSPacket packet = new TSPacket(bytes188);            if (packet.sync_byte != 0x47) throw new Exception();            if (packet.payload_unit_start_indicator > 0)            {              if (packet.PID == patID)              {                pmtID = packet.PMTID;                head = new MemoryStream();                if(!addHead(bytes188)) throw new Exception();                continue;              }              if (packet.PID == pmtID)              {                var pmt = new ProgramMapTable(packet' bytes188);                pcrPID = pmt.PCRPID;                if(!addHead(bytes188)) throw new Exception();                head.Close();                byte[] newHead = head.ToArray();                if(!Enumerable.SequenceEqual(newHead' latestHead))                {                  streamIndex = Channel.GenerateStreamID();                  contentPosition = 0;                  sink.OnContentHeader(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' newHead));                  contentPosition += newHead.Length;                  latestHead = newHead;                }                continue;              }              if (packet.PID==pcrPID && packet.program_clock_reference>0.0) {                if (packet.program_clock_reference<rateCounter.lastPCR) {                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                  recvRate = 0.0;                }                else if (rateCounter.lastPCR+10.0<packet.program_clock_reference) {                  var bitrate = 8*rateCounter.byteCount / (packet.program_clock_reference - rateCounter.lastPCR);                  UpdateRecvRate(sink' bitrate);                  rateCounter.lastPCR = packet.program_clock_reference;                  rateCounter.byteCount = 0;                }              }              if ((DateTime.Now - latestContentTime).Milliseconds > 50) {                TryParseContent(packet' out contentData);                if(contentData!=null) {                  sink.OnContent(new Content(streamIndex' DateTime.Now - streamOrigin' contentPosition' contentData));                  contentPosition += contentData.Length;                  latestContentTime = DateTime.Now;                }              }            }            if (!addCache(bytes188)) throw new Exception();            rateCounter.byteCount += 188;          }        }        catch (EndOfStreamException)        { }        catch (Exception)        { }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,UpdateRecvRate,The following statement contains a magic number: if (recvRate==0.0 || (recvRate*1.2<bitrate && bitrate<recvRate*10.0)) {          recvRate = bitrate;            var info = new AtomCollection(Channel.ChannelInfo.Extra);          info.SetChanInfoType("TS");          info.SetChanInfoStreamType("video/mp2t");          info.SetChanInfoStreamExt(".ts");          info.SetChanInfoBitrate((int)bitrate/1000);          sink.OnChannelInfo(new ChannelInfo(info));        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,UpdateRecvRate,The following statement contains a magic number: if (recvRate==0.0 || (recvRate*1.2<bitrate && bitrate<recvRate*10.0)) {          recvRate = bitrate;            var info = new AtomCollection(Channel.ChannelInfo.Extra);          info.SetChanInfoType("TS");          info.SetChanInfoStreamType("video/mp2t");          info.SetChanInfoStreamExt(".ts");          info.SetChanInfoBitrate((int)bitrate/1000);          sink.OnChannelInfo(new ChannelInfo(info));        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,UpdateRecvRate,The following statement contains a magic number: if (recvRate==0.0 || (recvRate*1.2<bitrate && bitrate<recvRate*10.0)) {          recvRate = bitrate;            var info = new AtomCollection(Channel.ChannelInfo.Extra);          info.SetChanInfoType("TS");          info.SetChanInfoStreamType("video/mp2t");          info.SetChanInfoStreamExt(".ts");          info.SetChanInfoBitrate((int)bitrate/1000);          sink.OnChannelInfo(new ChannelInfo(info));        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addHead,The following statement contains a magic number: if (head.Length < 1024 * 1024) {          //continuity_counter = 0          bytes[3] = (byte)(bytes[3] & 0xF0);           head.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addHead,The following statement contains a magic number: if (head.Length < 1024 * 1024) {          //continuity_counter = 0          bytes[3] = (byte)(bytes[3] & 0xF0);           head.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addHead,The following statement contains a magic number: if (head.Length < 1024 * 1024) {          //continuity_counter = 0          bytes[3] = (byte)(bytes[3] & 0xF0);           head.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addHead,The following statement contains a magic number: if (head.Length < 1024 * 1024) {          //continuity_counter = 0          bytes[3] = (byte)(bytes[3] & 0xF0);           head.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addCache,The following statement contains a magic number: if (cache.Length < 8 * 1024 * 1024) {          cache.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addCache,The following statement contains a magic number: if (cache.Length < 8 * 1024 * 1024) {          cache.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,TSContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,addCache,The following statement contains a magic number: if (cache.Length < 8 * 1024 * 1024) {          cache.Write(bytes' 0' bytes.Length);          return true;        }        else {          return false;        }
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: int section_length = ((packet[pkt.payload_offset+1] & 0x0F)<<8 | packet[pkt.payload_offset+2]);
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: int section_length = ((packet[pkt.payload_offset+1] & 0x0F)<<8 | packet[pkt.payload_offset+2]);
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: if (section_length<13) {            PCRPID = -1;          }          else {            PCRPID = ((packet[pkt.payload_offset+8] & 0x1F)<<8 | packet[pkt.payload_offset+9]);          }
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: if (section_length<13) {            PCRPID = -1;          }          else {            PCRPID = ((packet[pkt.payload_offset+8] & 0x1F)<<8 | packet[pkt.payload_offset+9]);          }
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: if (section_length<13) {            PCRPID = -1;          }          else {            PCRPID = ((packet[pkt.payload_offset+8] & 0x1F)<<8 | packet[pkt.payload_offset+9]);          }
Magic Number,PeerCastStation.TS,ProgramMapTable,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,ProgramMapTable,The following statement contains a magic number: if (section_length<13) {            PCRPID = -1;          }          else {            PCRPID = ((packet[pkt.payload_offset+8] & 0x1F)<<8 | packet[pkt.payload_offset+9]);          }
Magic Number,PeerCastStation.TS,TSContentReaderFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TSContentReader.cs,TryParseContentType,The following statement contains a magic number: if (header.Length>=188 && header[0]==0x47) {          content_type = "TS";          mime_type    = "video/mp2t";          return true;        }        else {          content_type = null;          mime_type    = null;          return false;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_error_indicator = (packet[1] & 0x80) >> 7;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.payload_unit_start_indicator = (packet[1] & 0x40) >> 6;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_priority = (packet[1] & 0x20) >> 5;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.PID = ((packet[1] & 0x1F) << 8) | packet[2];
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.PID = ((packet[1] & 0x1F) << 8) | packet[2];
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_scrambling_control = (packet[3] & 0x60) >> 6;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_scrambling_control = (packet[3] & 0x60) >> 6;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.adaptation_field_control = (packet[3] & 0x30) >> 4;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.adaptation_field_control = (packet[3] & 0x30) >> 4;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.continuity_counter = (packet[3] & 0x0F);
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: this.payload_offset = 4;
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if((adaptation_field_control & 0x02)!=0) {          this.adaptation_field_length = packet[4];          this.payload_offset += 1+this.adaptation_field_length;          if (this.adaptation_field_length > 0)          {            this.random_access_indicator = packet[5] & 0x40;            var pcr_flag = (packet[5] & 0x10)!=0;            if (pcr_flag) {              var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);              var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];              this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;            }            int i = 5 + adaptation_field_length;            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0)            {              this.audio_block = true;            }            if (packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0)            {              this.video_block = true;            }            if (this.video_block && this.random_access_indicator > 0)            {              this.keyframe = true;            }          }        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
Magic Number,PeerCastStation.TS,TSPacket,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.TS\TsPacket.cs,TSPacket,The following statement contains a magic number: if ((adaptation_field_control & 0x01)!=0) {          if (this.payload_unit_start_indicator!=0) {            int pointer_field = packet[this.payload_offset++];            this.payload_offset += pointer_field;            //PAT            if (PID==0) {              int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);              //section_length-5byte[transport_stream_id ... last_section_number]-4byte[CRC_32]              for(int i=0;i<section_length-5-4;i+=4)              {                byte[] pmts = new byte[4];                Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);//8byte[table_id ... last_section_number]                int program_number = pmts[0] << 8 | pmts[1];                int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];                if(program_number>0) {                  this.PMTID = pmtid;                }              }            }          }        }        else {          this.payload_offset = -1;        }
