Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.Core,Channel,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Channel.cs,MakeRelayable,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,GetAddressLocality,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.Core,Logger,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Logger.cs,SetOutputListeners,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.Core,RingbufferStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RingbufferStream.cs,ReadAsync,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.Core,RingbufferStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RingbufferStream.cs,WriteAsync,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.Core,PecaSerializer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PecaSettings.cs,SerializeValue,Cyclomatic complexity of the method is 21
Complex Method,PeerCastStation.Core,PecaSerializer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PecaSettings.cs,TryDeserialize,Cyclomatic complexity of the method is 18
Complex Method,PeerCastStation.Core,PecaSerializer,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PecaSettings.cs,ChangeType,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation,ChannelCleaner,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ChannelCleaner.cs,CleanupChannels,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.Core.Http,ChunkedRequestStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\ChunkedRequestStream.cs,ReadAsync,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,Cyclomatic complexity of the method is 42
Complex Method,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,ParseHeaderFieldValueList,Cyclomatic complexity of the method is 22
Complex Method,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetTransferEncoding,Cyclomatic complexity of the method is 9
Long Parameter List,PeerCastStation.Core,BroadcastChannel,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BroadcastChannel.cs,BroadcastChannel,The method has 6 parameters. Parameters: peercast' network' channel_id' channel_info' source_stream_factory' content_reader_factory
Long Parameter List,PeerCastStation.Core,BroadcastChannel,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BroadcastChannel.cs,CreateChannelID,The method has 5 parameters. Parameters: bcid' network' channel_name' genre' source
Long Parameter List,PeerCastStation.Core,Content,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Content,The method has 5 parameters. Parameters: stream' timestamp' pos' data' cont
Long Parameter List,PeerCastStation.Core,Content,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Content,The method has 7 parameters. Parameters: stream' timestamp' pos' data' offset' length' cont
Long Parameter List,PeerCastStation.Core,ConnectionInfo,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Core.cs,ConnectionInfo,The method has 13 parameters. Parameters: protocol_name' type' status' remote_name' remote_endpoint' remote_host_status' remote_session_id' content_position' recv_rate' send_rate' local_relays' local_directs' agent_name
Long Parameter List,PeerCastStation.Core,Host,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Host.cs,Host,The method has 14 parameters. Parameters: sessionID' broadcastID' localEndPoint' globalEndPoint' relayCount' directCount' isFirewalled' isTracker' isRelayFull' isDirectFull' isReceiving' isControlFull' extensions' extra
Long Parameter List,PeerCastStation.Core,OutputListener,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,OutputListener,The method has 5 parameters. Parameters: peercast' connection_handler' ip' local_accepts' global_accepts
Long Parameter List,PeerCastStation.Core,PeerCast,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,BroadcastChannel,The method has 7 parameters. Parameters: network' yp' channel_id' channel_info' source' source_stream_factory' content_reader_factory
Long Parameter List,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadBytesAsync,The method has 5 parameters. Parameters: stream' buffer' offset' length' cancel_token
Long Parameter List,PeerCastStation.Core.Http,OwinContext,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinContext.cs,OwinContext,The method has 6 parameters. Parameters: peerCast' req' stream' localEndPoint' remoteEndPoint' accessControlInfo
Long Parameter List,PeerCastStation.Core.Http,OwinHost,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHost.cs,Invoke,The method has 6 parameters. Parameters: req' stream' localEndPoint' remoteEndPoint' accessControlInfo' cancellationToken
Long Parameter List,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,OwinHostOutputStream,The method has 5 parameters. Parameters: peercast' host' connection' access_control' channel
Long Identifier,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,,The length of the parameter maxUpstreamRatePerBroadcastChannel is 34.
Long Identifier,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,,The length of the parameter maxUpstreamRatePerRelayChannel is 30.
Long Identifier,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,,The length of the parameter CommaSeparatedFieldValuePattern is 31.
Long Identifier,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,,The length of the parameter SpaceSeparatedFieldValuePattern is 31.
Long Statement,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelRelayableIPv4,The length of the statement  "          (this.MaxUpstreamRatePerBroadcastChannel<=0 || this.MaxUpstreamRatePerBroadcastChannel>=channel_upstream_rate+channel_bitrate); " is 127.
Long Statement,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelRelayableIPv6,The length of the statement  "          (this.MaxUpstreamRatePerBroadcastChannel<=0 || this.MaxUpstreamRatePerBroadcastChannel>=channel_upstream_rate+channel_bitrate); " is 127.
Long Statement,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelPlayableIPv4,The length of the statement  "          (this.MaxUpstreamRatePerBroadcastChannel<=0 || this.MaxUpstreamRatePerBroadcastChannel>=channel_upstream_rate+channel_bitrate); " is 127.
Long Statement,PeerCastStation.Core,AccessController,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelPlayableIPv6,The length of the statement  "          (this.MaxUpstreamRatePerBroadcastChannel<=0 || this.MaxUpstreamRatePerBroadcastChannel>=channel_upstream_rate+channel_bitrate); " is 127.
Long Statement,PeerCastStation.Core,AppSettingsReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AppSettingsReader.cs,TryGetDate,The length of the statement  "        return DateTime.TryParse(v' System.Globalization.DateTimeFormatInfo.InvariantInfo' System.Globalization.DateTimeStyles.None' out value); " is 136.
Long Statement,PeerCastStation.Core,Channel,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Channel.cs,ReplaceCollection,The length of the statement  "        replaced = Object.ReferenceEquals(System.Threading.Interlocked.CompareExchange(ref collection' new_collection' orig)' orig); " is 124.
Long Statement,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The length of the statement  "      var hostport = System.Text.RegularExpressions.Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*):(\d{1'5})\z"); " is 178.
Long Statement,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The length of the statement  "      var hostaddr = System.Text.RegularExpressions.Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*)\z"); " is 168.
Long Statement,PeerCastStation.Core,PeerCast,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,BroadcastChannel,The length of the statement  "      var channel = new BroadcastChannel(this' network' channel_id' channel_info' source_stream_factory' content_reader_factory); " is 123.
Long Statement,PeerCastStation.Core,PluginBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Plugin.cs,GetVersionInfo,The length of the statement  "      var info_version = asm.GetCustomAttributes(typeof(System.Reflection.AssemblyInformationalVersionAttribute)' false).FirstOrDefault() as System.Reflection.AssemblyInformationalVersionAttribute; " is 191.
Long Statement,PeerCastStation.Core,RawContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RawContentReader.cs,ReadAsync,The length of the statement  "          sink.OnContent(new Content(streamIndex' DateTime.Now-streamOrigin' pos' buf.Take(sz).ToArray()' PCPChanPacketContinuation.None)); " is 129.
Long Statement,PeerCastStation.Core.Http,ChunkedRequestStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\ChunkedRequestStream.cs,ReadAsync,The length of the statement  "        int len = await BaseStream.ReadAsync(buffer' offset' Math.Min(count' currentChunkSize)' cancellationToken).ConfigureAwait(false); " is 129.
Long Statement,PeerCastStation.Core.Http,MapMethodExtentions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\MapMethodMiddleware.cs,MapMethod,The length of the statement  "      return appBuilder.Use<MapMethodMiddleware>(new MapMethodOptions { MethodMatch=methods' Branch=(Func<IDictionary<string'object>' Task>)branchBuilder.Build(typeof(Func<IDictionary<string'object>' Task>)) }); " is 205.
Long Statement,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetRequestCookies,The length of the statement  "            return new string [] { Uri.UnescapeDataString(pair.Substring(0'idx).Trim())' Uri.UnescapeDataString(pair.Substring(idx+1).Trim()) }; " is 132.
Long Statement,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetTransferEncoding,The length of the statement  "        else if (StringComparer.OrdinalIgnoreCase.Equals("gzip"' enc) || StringComparer.OrdinalIgnoreCase.Equals("x-gzip"' enc)) { " is 122.
Long Statement,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetTransferEncoding,The length of the statement  "        else if (StringComparer.OrdinalIgnoreCase.Equals("compress"' enc) || StringComparer.OrdinalIgnoreCase.Equals("x-compress"' enc)) { " is 130.
Long Statement,PeerCastStation.Core.Http,OwinRequestBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinRequestBodyStream.cs,SendContinue,The length of the statement  "        var response_protocol = Environment.Get(OwinEnvironment.Owin.ResponseProtocol' Environment.Get(OwinEnvironment.Owin.RequestProtocol' "HTTP/1.0")); " is 146.
Long Statement,PeerCastStation.Core.Http,OwinResponseBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,SendResponseHeaderAsync,The length of the statement  "      var response_protocol = Environment.Get(OwinEnvironment.Owin.ResponseProtocol' Environment.Get(OwinEnvironment.Owin.RequestProtocol' "HTTP/1.0")); " is 146.
Long Statement,PeerCastStation.Core.Http,OwinResponseBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,SendResponseHeaderAsync,The length of the statement  "      var reason_phrase = Environment.Get(OwinEnvironment.Owin.ResponseReasonPhrase' HttpReasonPhrase.GetReasonPhrase(status_code)); " is 126.
Long Statement,PeerCastStation.Core.Http,OwinResponseBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,GetBodyStreamAsync,The length of the statement  "      else if (!Environment.IsKeepAlive() || Environment.ResponseHeaderContainsKey("Content-Length") || encoding!=OwinEnvironment.TransferEncoding.Identity) { " is 152.
Long Statement,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,GetConnectionInfo,The length of the statement  "      return new ConnectionInfo("HTTP"' ConnectionType.Interface' ConnectionStatus.Connected' RemoteEndPoint.ToString()' RemoteEndPoint as IPEndPoint' RemoteHostStatus.None' null' null' null' null' null' null' "Owin"); " is 212.
Long Statement,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,DoProcess,The length of the statement  "          var ctx = new OwinContext(PeerCast' req' Connection' LocalEndPoint as IPEndPoint' RemoteEndPoint as IPEndPoint' AccessControlInfo); " is 131.
Complex Conditional,PeerCastStation.Core,ContentCollection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Add,The conditional expression  "list.Count>1 &&            (             (list.First().Key.Stream<item.Stream) ||             (list.First().Key.Stream==item.Stream &&              item.Timestamp-list.First().Key.Timestamp>PacketTimeLimit)            )"  is complex.
Complex Conditional,PeerCastStation.Core,ContentBuilder,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ContentSink.cs,Append,The conditional expression  "stream!=content.Stream ||                   contFlag!=content.ContFlag ||                   position+dataBuffer.Length!=content.Position ||                   Math.Abs((content.Timestamp-lastTimestamp).TotalMilliseconds)>100.0 ||                   dataBuffer.Length+content.Data.Length>8*1024"  is complex.
Complex Conditional,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Complex Conditional,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Complex Conditional,PeerCastStation.Core,PeerCast,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,IsIPAddressMatch,The conditional expression  "a.Equals(IPAddress.Any) || b.Equals(IPAddress.Any) ||            a.Equals(IPAddress.IPv6Any) || b.Equals(IPAddress.IPv6Any)"  is complex.
Complex Conditional,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetHttpHeader,The conditional expression  "TryGetValue<IDictionary<string'string[]>>(envKey' out var headers) &&            headers.TryGetValue(key' out var values) &&            values!=null && values.Length>0"  is complex.
Complex Conditional,PeerCastStation.Core.Http,OwinEnvironment,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinEnvironment.cs,GetHttpHeader,The conditional expression  "TryGetValue<IDictionary<string'string[]>>(envKey' out var headers) &&            headers.TryGetValue(key' out var values) &&            values!=null && values.Length>0"  is complex.
Complex Conditional,PeerCastStation.Core.Http,OwinResponseBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,GetBodyStreamAsync,The conditional expression  "encoding.HasFlag(OwinEnvironment.TransferEncoding.Compress) ||            encoding.HasFlag(OwinEnvironment.TransferEncoding.Brotli) ||            encoding.HasFlag(OwinEnvironment.TransferEncoding.Exi) ||            encoding.HasFlag(OwinEnvironment.TransferEncoding.Unsupported)"  is complex.
Empty Catch Block,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetString,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ContentCollection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Add,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,Logger,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Logger.cs,DoOutputThread,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,Start,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,Start,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,PeerCast,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,StartMonitor,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,SourceConnectionBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,Run,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ProcessRead,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,Dispose,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,CloseAsync,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core.Http,AuthMiddleware,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\AuthMiddleware.cs,CheckAuthorization,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core.Http,AuthMiddleware,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\AuthMiddleware.cs,CheckAuthorization,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,DoProcess,The method has an empty catch block.
Magic Number,PeerCastStation.Core,AuthenticationKey,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,Generate,The following statement contains a magic number: return new AuthenticationKey(          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())'          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())        );
Magic Number,PeerCastStation.Core,AuthenticationKey,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,Generate,The following statement contains a magic number: return new AuthenticationKey(          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())'          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())        );
Magic Number,PeerCastStation.Core,ID4,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: nameb.Length > 4
Magic Number,PeerCastStation.Core,ID4,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: value.Length > 4
Magic Number,PeerCastStation.Core,ID4,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: Array.Copy(value' index' v' 0' 4);
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Atom,The following statement contains a magic number: Encodings = new[] {          new UTF8Encoding(false' true)'          Encoding.GetEncoding(932'            new EncoderExceptionFallback()'            new DecoderExceptionFallback())'          Encoding.GetEncoding(            0'            new EncoderExceptionFallback()'            new DecoderExceptionFallback())'          Encoding.UTF8'        };
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetInt16,The following statement contains a magic number: value != null && value.Length == 2
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetUInt16,The following statement contains a magic number: value != null && value.Length == 2
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetInt32,The following statement contains a magic number: value != null && value.Length == 4
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetUInt32,The following statement contains a magic number: value != null && value.Length == 4
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetIPAddress,The following statement contains a magic number: value!=null && (value.Length==4 || value.Length==16)
Magic Number,PeerCastStation.Core,Atom,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetIPAddress,The following statement contains a magic number: value!=null && (value.Length==4 || value.Length==16)
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,AtomReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: (len&0x7FFFFFFF)>1024
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,GetIDFrom,The following statement contains a magic number: atom != null && atom.TryGetBytes(out value) && value.Length==16
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,GetID4From,The following statement contains a magic number: atom != null && atom.TryGetBytes(out value) && value.Length==4
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: value.Length<16
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: client.ReceiveBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: client.ReceiveBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: client.SendBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: client.SendBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: var buf = new List<byte>(8192);
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: line = System.Text.Encoding.ASCII.GetString(buf.ToArray()' 0' buf.Count-2);
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n'
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n'
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,PostAsync,The following statement contains a magic number: status!=200
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,RunAsync,The following statement contains a magic number: var data = new byte[250*1024];
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,RunAsync,The following statement contains a magic number: var data = new byte[250*1024];
Magic Number,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,RunAsync,The following statement contains a magic number: await PostAsync(async (s' ct) => {            while (stopwatch.ElapsedMilliseconds<10000) {              await s.WriteBytesAsync(data' ct).ConfigureAwait(false);              sz += data.Length;            }          }' cancellationToken).ConfigureAwait(false);
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr.IsIPv6UniqueLocal() ||            addr.IsIPv6Teredo ||            addr.Equals(IPAddress.IPv6Loopback);        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,GetAddressLocality,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          if (addr.Equals(IPAddress.Any) || addr.Equals(IPAddress.None) || addr.Equals(IPAddress.Broadcast)) return -1;          if (addr.Equals(IPAddress.Loopback)) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          if (addr.Equals(IPAddress.IPv6Any) || addr.Equals(IPAddress.IPv6None)) return -1;          if (addr.Equals(IPAddress.IPv6Loopback)) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        default:          return -1;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,GetAddressLocality,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          if (addr.Equals(IPAddress.Any) || addr.Equals(IPAddress.None) || addr.Equals(IPAddress.Broadcast)) return -1;          if (addr.Equals(IPAddress.Loopback)) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          if (addr.Equals(IPAddress.IPv6Any) || addr.Equals(IPAddress.IPv6None)) return -1;          if (addr.Equals(IPAddress.IPv6Loopback)) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        default:          return -1;        }
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.ReceiveBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.ReceiveBufferSize = 256*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.SendBufferSize    = 256*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.SendBufferSize    = 256*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: stream.WriteTimeout = 3000;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: stream.ReadTimeout  = 3000;
Magic Number,PeerCastStation.Core,ConnectionHandler,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The following statement contains a magic number: var header = new byte[4096];
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,OutputStreamBase,The following statement contains a magic number: this.Connection.ReadTimeout = 10000;
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,OutputStreamBase,The following statement contains a magic number: this.Connection.WriteTimeout = 10000;
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535
Magic Number,PeerCastStation.Core,OutputStreamBase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535
Magic Number,PeerCastStation.Core,PeerCast,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,StartMonitor,The following statement contains a magic number: await Task.Delay(5000' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.Core,RawContentReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RawContentReader.cs,ReadAsync,The following statement contains a magic number: var buf = new byte[8192];
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Client.ReceiveBufferSize = 256 * 1024;
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Client.ReceiveBufferSize = 256 * 1024;
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Client.SendBufferSize = 256 * 1024;
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Client.SendBufferSize = 256 * 1024;
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Stream.ReadTimeout = 10000;
Magic Number,PeerCastStation.Core,SourceConnectionClient,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Stream.WriteTimeout = 10000;
Magic Number,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ProcessRead,The following statement contains a magic number: var buf = new byte[64*1024];
Magic Number,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ProcessRead,The following statement contains a magic number: var buf = new byte[64*1024];
Magic Number,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ProcessWrite,The following statement contains a magic number: var buf = new byte[64*1024];
Magic Number,PeerCastStation.Core,ConnectionStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ProcessWrite,The following statement contains a magic number: var buf = new byte[64*1024];
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadUInt16BE,The following statement contains a magic number: var bytes = stream.ReadBytes(2);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadUInt16BE,The following statement contains a magic number: return (bytes[0]<<8) | bytes[1];
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt16BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>24)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>16)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>16)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>24)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: (len&0x7FFFFFFF)>1024
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: var header = await stream.ReadBytesAsync(8' cancel_token).ConfigureAwait(false);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,StreamExtension,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: (len&0x7FFFFFFF)>1024
Magic Number,PeerCastStation.Core,RateCounter,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RateCounter.cs,Check,The following statement contains a magic number: rate = count*1000 / (float)d;
Magic Number,PeerCastStation.Core.Http,ChunkedRequestStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\ChunkedRequestStream.cs,ReadLineAsync,The following statement contains a magic number: bytes.Count<2 || bytes[bytes.Count-2]!='\r' || bytes[bytes.Count-1]!='\n'
Magic Number,PeerCastStation.Core.Http,ChunkedRequestStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\ChunkedRequestStream.cs,ReadLineAsync,The following statement contains a magic number: bytes.Count<2 || bytes[bytes.Count-2]!='\r' || bytes[bytes.Count-1]!='\n'
Magic Number,PeerCastStation.Core.Http,ChunkedRequestStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\ChunkedRequestStream.cs,ReadAsync,The following statement contains a magic number: var line = System.Text.Encoding.ASCII.GetString(bytes.ToArray()' 0' bytes.Count-2);
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpReasonPhrase,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpReasonPhrase.cs,GetReasonPhrase,The following statement contains a magic number: switch (statusCode) {        case 100: return Continue;        case 101: return SwitchingProtocols;        case 200: return OK;        case 201: return Created;        case 202: return Accepted;        case 203: return NonAuthoritativeInformation;        case 204: return NoContent;        case 205: return ResetContent;        case 206: return PartialContent;        case 300: return MultipleChoices;        case 301: return MovedPermanently;        case 302: return Found;        case 303: return SeeOther;        case 304: return NotModified;        case 305: return UseProxy;        case 307: return TemporaryRedirect;        case 400: return BadRequest;        case 401: return Unauthorized;        case 402: return PaymentRequired;        case 403: return Forbidden;        case 404: return NotFound;        case 405: return MethodNotAllowed;        case 406: return NotAcceptable;        case 407: return ProxyAuthenticationRequired;        case 408: return RequestTimeout;        case 409: return Conflict;        case 410: return Gone;        case 411: return LengthRequired;        case 412: return PreconditionFailed;        case 413: return PayloadTooLarge;        case 414: return URITooLong;        case 415: return UnsupportedMediaType;        case 416: return RangeNotSatisfiable;        case 417: return ExpectationFailed;        case 426: return UpgradeRequired;        case 500: return InternalServerError;        case 501: return NotImplemented;        case 502: return BadGateway;        case 503: return ServiceUnavailable;        case 504: return GatewayTimeout;        case 505: return HTTPVersionNotSupported;        default: throw new ArgumentOutOfRangeException(nameof(statusCode));        }
Magic Number,PeerCastStation.Core.Http,HttpRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequestReader.cs,ReadAsync,The following statement contains a magic number: requests.Add(buf.ToString(0' buf.Length-2));
Magic Number,PeerCastStation.Core.Http,HttpRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequestReader.cs,ReadAsync,The following statement contains a magic number: buf.Length>2 && buf[buf.Length-2]=='\r' && buf[buf.Length-1]=='\n'
Magic Number,PeerCastStation.Core.Http,HttpRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequestReader.cs,ReadAsync,The following statement contains a magic number: buf.Length>2 && buf[buf.Length-2]=='\r' && buf[buf.Length-1]=='\n'
Magic Number,PeerCastStation.Core.Http,OwinRequestBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinRequestBodyStream.cs,SendContinue,The following statement contains a magic number: var status_code = 100;
Magic Number,PeerCastStation.Core.Http,OwinRequestBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinRequestBodyStream.cs,SendContinue,The following statement contains a magic number: var reason_phrase = HttpReasonPhrase.GetReasonPhrase(100);
Magic Number,PeerCastStation.Core.Http,OwinResponseBodyStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,SendResponseHeaderAsync,The following statement contains a magic number: var status_code = Environment.Get(OwinEnvironment.Owin.ResponseStatusCode' 200);
Magic Number,PeerCastStation.Core.Http,DeferredResponseStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinResponseBodyStream.cs,CompleteAsync,The following statement contains a magic number: await bufferStream.CopyToAsync(BaseStream' 2048' cancellationToken).ConfigureAwait(false);
Magic Number,PeerCastStation.Core.Http,HttpRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequest.cs,HttpRequest,The following statement contains a magic number: headers.Add(match.Groups[1].Value' match.Groups[2].Value.Trim());
Magic Number,PeerCastStation.Core.Http,HttpRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequest.cs,ParseRequestLine,The following statement contains a magic number: return new HttpRequestLine(            match.Groups[1].Value.ToUpperInvariant()'            match.Groups[2].Value'            match.Groups[3].Value.ToUpperInvariant());
Magic Number,PeerCastStation.Core.Http,HttpRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\HttpRequest.cs,ParseRequestLine,The following statement contains a magic number: return new HttpRequestLine(            match.Groups[1].Value.ToUpperInvariant()'            match.Groups[2].Value'            match.Groups[3].Value.ToUpperInvariant());
Magic Number,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,DoProcess,The following statement contains a magic number: var keep_count = 1000;
Magic Number,PeerCastStation.Core.Http,OwinHostOutputStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Http\OwinHostOutputStream.cs,DoProcess,The following statement contains a magic number: requestTimeout.CancelAfter(7000);
Missing Default,PeerCastStation.Core,BandwidthChecker,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,BandwidthChecker,The following switch statement is missing a default case: switch (networkType) {        case NetworkType.IPv4:          this.AddressFamily = AddressFamily.InterNetwork;            break;        case NetworkType.IPv6:          this.AddressFamily = AddressFamily.InterNetworkV6;          break;        }
Missing Default,PeerCastStation,ChannelCleaner,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ChannelCleaner.cs,OnTimer,The following switch statement is missing a default case: switch (mode) {        case CleanupMode.None:          break;        case CleanupMode.Disconnected:          CleanupChannels(channel => {            return channel.Status==SourceStreamStatus.Idle ||                   channel.Status==SourceStreamStatus.Error;          });          break;        case CleanupMode.NotRelaying:          CleanupChannels(channel => {            return channel.LocalDirects==0 &&                   channel.LocalRelays==0;          });          break;        case CleanupMode.NotPlaying:          CleanupChannels(channel => {            return channel.LocalDirects==0;          });          break;        }
