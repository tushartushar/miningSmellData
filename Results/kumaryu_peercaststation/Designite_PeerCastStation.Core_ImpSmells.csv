Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.Core,Logger,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Logger.cs,SetOutputListeners,Cyclomatic complexity of the method is 10
Complex Method,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.Core,RingbufferStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RingbufferStream.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,PeerCastStation.Core,RingbufferStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RingbufferStream.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation,ChannelCleaner,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ChannelCleaner.cs,CleanupChannels,Cyclomatic complexity of the method is 9
Long Parameter List,PeerCastStation.Core,BroadcastChannel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BroadcastChannel.cs,BroadcastChannel,The method has 5 parameters. Parameters: peercast' channel_id' channel_info' source_stream_factory' content_reader_factory
Long Parameter List,PeerCastStation.Core,Content,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Content,The method has 6 parameters. Parameters: stream' timestamp' pos' data' offset' length
Long Parameter List,PeerCastStation.Core,ConnectionInfo,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Core.cs,ConnectionInfo,The method has 13 parameters. Parameters: protocol_name' type' status' remote_name' remote_endpoint' remote_host_status' remote_session_id' content_position' recv_rate' send_rate' local_relays' local_directs' agent_name
Long Parameter List,PeerCastStation.Core,IOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Core.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.Core,Host,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Host.cs,Host,The method has 14 parameters. Parameters: sessionID' broadcastID' localEndPoint' globalEndPoint' relayCount' directCount' isFirewalled' isTracker' isRelayFull' isDirectFull' isReceiving' isControlFull' extensions' extra
Long Parameter List,PeerCastStation.Core,OutputListener,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,OutputListener,The method has 5 parameters. Parameters: peercast' connection_handler' ip' local_accepts' global_accepts
Long Parameter List,PeerCastStation.Core,OutputStreamFactoryBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,OutputStreamBase,The method has 7 parameters. Parameters: peercast' input_stream' output_stream' remote_endpoint' access_control' channel' header
Long Parameter List,PeerCastStation.Core,PeerCast,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,BroadcastChannel,The method has 6 parameters. Parameters: yp' channel_id' channel_info' source' source_stream_factory' content_reader_factory
Long Parameter List,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadBytesAsync,The method has 5 parameters. Parameters: stream' buffer' offset' length' cancel_token
Long Statement,PeerCastStation.Core,AccessController,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelRelayable,The length of the statement  "        (this.MaxUpstreamRate<0 || this.MaxUpstreamRate>=total_upstream_rate+(output_stream.IsLocal ? 0 : output_stream.UpstreamRate)) && " is 129.
Long Statement,PeerCastStation.Core,AccessController,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelRelayable,The length of the statement  "        (this.MaxUpstreamRatePerChannel<=0 || this.MaxUpstreamRatePerChannel>=channel_upstream_rate+(output_stream.IsLocal ? 0 : output_stream.UpstreamRate)); " is 150.
Long Statement,PeerCastStation.Core,AccessController,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelPlayable,The length of the statement  "        (this.MaxUpstreamRate<0 || this.MaxUpstreamRate>=total_upstream_rate+(output_stream.IsLocal ? 0 : output_stream.UpstreamRate)) && " is 129.
Long Statement,PeerCastStation.Core,AccessController,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,IsChannelPlayable,The length of the statement  "        (this.MaxUpstreamRatePerChannel<=0 || this.MaxUpstreamRatePerChannel>=channel_upstream_rate+(output_stream.IsLocal ? 0 : output_stream.UpstreamRate)); " is 150.
Long Statement,PeerCastStation.Core,AppSettingsReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AppSettingsReader.cs,TryGetDate,The length of the statement  "        return DateTime.TryParse(v' System.Globalization.DateTimeFormatInfo.InvariantInfo' System.Globalization.DateTimeStyles.None' out value); " is 136.
Long Statement,PeerCastStation.Core,BandwidthChecker,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\BandwidthChecker.cs,Run,The length of the statement  "        BandwidthCheckCompleted(this' new BandwidthCheckCompletedEventArgs(success' DataSize' TimeSpan.FromSeconds(average_seconds))); " is 126.
Long Statement,PeerCastStation.Core,Channel,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Channel.cs,ReplaceCollection,The length of the statement  "        replaced = Object.ReferenceEquals(System.Threading.Interlocked.CompareExchange(ref collection' new_collection' orig)' orig); " is 124.
Long Statement,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The length of the statement  "      var hostport = System.Text.RegularExpressions.Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*):(\d{1'5})\z"); " is 178.
Long Statement,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The length of the statement  "      var hostaddr = System.Text.RegularExpressions.Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*)\z"); " is 168.
Long Statement,PeerCastStation.Core,PluginBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Plugin.cs,GetVersionInfo,The length of the statement  "      var info_version = asm.GetCustomAttributes(typeof(System.Reflection.AssemblyInformationalVersionAttribute)' false).FirstOrDefault() as System.Reflection.AssemblyInformationalVersionAttribute; " is 191.
Long Statement,PeerCastStation.Core,ConnectionStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ConnectionStream.cs,ReadAsync,The length of the statement  "          var len = await WaitOrCancelTask(ReadStream.ReadAsync(buf' offset' length-offset' cancelsource.Token)' cancelsource.Token); " is 123.
Complex Conditional,PeerCastStation.Core,ContentCollection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Add,The conditional expression  "list.Count>1 &&            (             (list.First().Key.Stream<item.Stream) ||             (list.First().Key.Stream==item.Stream &&              item.Timestamp-list.First().Key.Timestamp>PacketTimeLimit)            )"  is complex.
Complex Conditional,PeerCastStation.Core,ContentBuilder,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ContentSink.cs,Append,The conditional expression  "stream!=content.Stream ||                   position+dataBuffer.Length!=content.Position ||                   Math.Abs((content.Timestamp-lastTimestamp).TotalMilliseconds)>100.0 ||                   dataBuffer.Length+content.Data.Length>15*1024"  is complex.
Complex Conditional,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Complex Conditional,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Empty Catch Block,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetString,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ContentCollection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,Add,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,Logger,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Logger.cs,Output,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,OutputListener,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,StartListen,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,Start,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,Start,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,PeerCast,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,StartMonitor,The method has an empty catch block.
Empty Catch Block,PeerCastStation.Core,SourceConnectionBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,Run,The method has an empty catch block.
Magic Number,PeerCastStation.Core,AuthenticationKey,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,Generate,The following statement contains a magic number: return new AuthenticationKey(          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())'          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())        );
Magic Number,PeerCastStation.Core,AuthenticationKey,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AccessController.cs,Generate,The following statement contains a magic number: return new AuthenticationKey(          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())'          new String(Enumerable.Range(0' 16).Select(i => KeyCharTable[random.Next(KeyCharTable.Length)]).ToArray())        );
Magic Number,PeerCastStation.Core,ID4,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: if (nameb.Length > 4) {          throw new ArgumentException("ID4 length must be 4 or less.");        }
Magic Number,PeerCastStation.Core,ID4,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: if (value.Length > 4) {          throw new ArgumentException("ID4 length must be 4 or less.");        }
Magic Number,PeerCastStation.Core,ID4,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,ID4,The following statement contains a magic number: Array.Copy(value' index' v' 0' 4);
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Atom,The following statement contains a magic number: Encodings = new[] {          new UTF8Encoding(false' true)'          Encoding.GetEncoding(932'            new EncoderExceptionFallback()'            new DecoderExceptionFallback())'          Encoding.GetEncoding(            0'            new EncoderExceptionFallback()'            new DecoderExceptionFallback())'          Encoding.UTF8'        };
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetInt16,The following statement contains a magic number: if (value != null && value.Length == 2) {          res = BitConverter.ToInt16(value' 0);          return true;        }        else {          res = 0;          return false;        }
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetUInt16,The following statement contains a magic number: if (value != null && value.Length == 2) {          res = BitConverter.ToUInt16(value' 0);          return true;        }        else {          res = 0;          return false;        }
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetInt32,The following statement contains a magic number: if (value != null && value.Length == 4) {          res = BitConverter.ToInt32(value' 0);          return true;        }        else {          res = 0;          return false;        }
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetUInt32,The following statement contains a magic number: if (value != null && value.Length == 4) {          res = BitConverter.ToUInt32(value' 0);          return true;        }        else {          res = 0;          return false;        }
Magic Number,PeerCastStation.Core,Atom,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,TryGetIPv4Address,The following statement contains a magic number: if (value != null && value.Length==4) {          var ip_ary = new byte[value.Length];          value.CopyTo(ip_ary' 0);          Array.Reverse(ip_ary);          res = new IPAddress(ip_ary);          return true;        }        else {          res = null;          return false;        }
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(Read(stream));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(Read(stream));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,AtomReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Atom.cs,Read,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(Read(stream));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,GetIDFrom,The following statement contains a magic number: if (atom != null && atom.TryGetBytes(out value) && value.Length==16) {          return ByteArrayToID(value);        }        else {          return null;        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,GetID4From,The following statement contains a magic number: if (atom != null && atom.TryGetBytes(out value) && value.Length==4) {          return new ID4(value);        }        else {          return null;        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,IDToByteArray,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = value.ToByteArray();          var value_be = new byte[16] {            value_le[3]' value_le[2]' value_le[1]' value_le[0]'            value_le[5]' value_le[4]'            value_le[7]' value_le[6]'            value_le[8]'            value_le[9]'            value_le[10]'            value_le[11]'            value_le[12]'            value_le[13]'            value_le[14]'            value_le[15]'          };          return value_be;        }        else {          return value.ToByteArray();        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (value.Length<16) throw new ArgumentException("value");
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,AtomCollectionExtensions,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\AtomCollectionExtensions.cs,ByteArrayToID,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {          var value_le = new byte[16] {            value[3]' value[2]' value[1]' value[0]'            value[5]' value[4]'            value[7]' value[6]'            value[8]'            value[9]'            value[10]'            value[11]'            value[12]'            value[13]'            value[14]'            value[15]'          };          return new Guid(value_le);        }        else {          return new Guid(value);        }
Magic Number,PeerCastStation.Core,ContentCollection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\Content.cs,ContentCollection,The following statement contains a magic number: PacketTimeLimit = TimeSpan.FromSeconds(5);
Magic Number,PeerCastStation.Core,ContentBuilder,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ContentSink.cs,Append,The following statement contains a magic number: if (empty) {            stream = content.Stream;            position = content.Position;            timestamp = content.Timestamp;            lastTimestamp = timestamp;            dataBuffer.SetLength(0);            dataBuffer.Write(content.Data' 0' content.Data.Length);            empty = false;            return true;          }          else if (stream!=content.Stream ||                   position+dataBuffer.Length!=content.Position ||                   Math.Abs((content.Timestamp-lastTimestamp).TotalMilliseconds)>100.0 ||                   dataBuffer.Length+content.Data.Length>15*1024) {            return false;          }          else {            lastTimestamp = content.Timestamp;            dataBuffer.Write(content.Data' 0' content.Data.Length);            return true;          }
Magic Number,PeerCastStation.Core,ContentBuilder,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ContentSink.cs,Append,The following statement contains a magic number: if (empty) {            stream = content.Stream;            position = content.Position;            timestamp = content.Timestamp;            lastTimestamp = timestamp;            dataBuffer.SetLength(0);            dataBuffer.Write(content.Data' 0' content.Data.Length);            empty = false;            return true;          }          else if (stream!=content.Stream ||                   position+dataBuffer.Length!=content.Position ||                   Math.Abs((content.Timestamp-lastTimestamp).TotalMilliseconds)>100.0 ||                   dataBuffer.Length+content.Data.Length>15*1024) {            return false;          }          else {            lastTimestamp = content.Timestamp;            dataBuffer.Write(content.Data' 0' content.Data.Length);            return true;          }
Magic Number,PeerCastStation.Core,ContentBuilder,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ContentSink.cs,Append,The following statement contains a magic number: if (empty) {            stream = content.Stream;            position = content.Position;            timestamp = content.Timestamp;            lastTimestamp = timestamp;            dataBuffer.SetLength(0);            dataBuffer.Write(content.Data' 0' content.Data.Length);            empty = false;            return true;          }          else if (stream!=content.Stream ||                   position+dataBuffer.Length!=content.Position ||                   Math.Abs((content.Timestamp-lastTimestamp).TotalMilliseconds)>100.0 ||                   dataBuffer.Length+content.Data.Length>15*1024) {            return false;          }          else {            lastTimestamp = content.Timestamp;            dataBuffer.Write(content.Data' 0' content.Data.Length);            return true;          }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,IsSiteLocal,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          var addr_bytes = addr.GetAddressBytes();          return            addr_bytes[0] == 10 ||            addr_bytes[0] == 127 ||            addr_bytes[0] == 169 && addr_bytes[1] == 254 ||            addr_bytes[0] == 172 && (addr_bytes[1]&0xF0) == 16 ||            addr_bytes[0] == 192 && addr_bytes[1] == 168;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          return            addr.IsIPv6LinkLocal ||            addr.IsIPv6SiteLocal ||            addr==IPAddress.IPv6Loopback;        default:          return false;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,GetAddressLocality,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          if (addr==IPAddress.Any || addr==IPAddress.None || addr==IPAddress.Broadcast) return -1;          if (addr==IPAddress.Loopback) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          if (addr==IPAddress.IPv6Any || addr==IPAddress.IPv6None) return -1;          if (addr==IPAddress.IPv6Loopback) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        default:          return -1;        }
Magic Number,PeerCastStation.Core,IPAddressExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\IPAddressExtension.cs,GetAddressLocality,The following statement contains a magic number: switch (addr.AddressFamily) {        case System.Net.Sockets.AddressFamily.InterNetwork:          if (addr==IPAddress.Any || addr==IPAddress.None || addr==IPAddress.Broadcast) return -1;          if (addr==IPAddress.Loopback) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        case System.Net.Sockets.AddressFamily.InterNetworkV6:          if (addr==IPAddress.IPv6Any || addr==IPAddress.IPv6None) return -1;          if (addr==IPAddress.IPv6Loopback) return 0;          if (IsSiteLocal(addr)) return 1;          return 2;        default:          return -1;        }
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.ReceiveBufferSize = 16*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.ReceiveBufferSize = 16*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.SendBufferSize    = 16*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: client.SendBufferSize    = 16*1024;
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: try {          retry:          stream.WriteTimeout = 3000;          stream.ReadTimeout  = 3000;          var remote_endpoint = (IPEndPoint)client.Client.RemoteEndPoint;          var handler = await CreateMatchedHandler(remote_endpoint' stream' acinfo);          if (handler!=null) {            logger.Debug("Output stream started {0}"' trying);            var result = await handler.Start();            switch (result) {            case HandlerResult.Continue:              trying++;              goto retry;            case HandlerResult.Close:            case HandlerResult.Error:            default:              break;            }          }          else {            logger.Debug("No protocol handler matched");          }        }        finally {          logger.Debug("Closing client connection");          stream.Close();          client.Close();        }
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,HandleClient,The following statement contains a magic number: try {          retry:          stream.WriteTimeout = 3000;          stream.ReadTimeout  = 3000;          var remote_endpoint = (IPEndPoint)client.Client.RemoteEndPoint;          var handler = await CreateMatchedHandler(remote_endpoint' stream' acinfo);          if (handler!=null) {            logger.Debug("Output stream started {0}"' trying);            var result = await handler.Start();            switch (result) {            case HandlerResult.Continue:              trying++;              goto retry;            case HandlerResult.Close:            case HandlerResult.Error:            default:              break;            }          }          else {            logger.Debug("No protocol handler matched");          }        }        finally {          logger.Debug("Closing client connection");          stream.Close();          client.Close();        }
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The following statement contains a magic number: var header = new byte[4096];
Magic Number,PeerCastStation.Core,ConnectionHandler,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputListener.cs,CreateMatchedHandler,The following statement contains a magic number: using (var cancel_source=new CancellationTokenSource(TimeSpan.FromMilliseconds(3000))) {          var cancel_token = cancel_source.Token;          cancel_token.Register(() => stream.Close());          try {            while (offset<header.Length) {              var len = await stream.ReadAsync(header' offset' header.Length-offset);              if (len==0) break;              offset += len;              var header_ary = header.Take(offset).ToArray();              foreach (var factory in output_factories) {                if ((acinfo.Accepts & factory.OutputStreamType) == 0) continue;                var channel_id = factory.ParseChannelID(header_ary);                if (channel_id.HasValue) {                  return factory.Create(                    stream'                    stream'                    remote_endpoint'                    acinfo'                    channel_id.Value'                    header_ary);                }              }            }          }          catch (System.ObjectDisposedException) {          }          catch (System.IO.IOException) {          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,OutputStreamBase,The following statement contains a magic number: this.connection.ReadTimeout = 10000;
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,OutputStreamBase,The following statement contains a magic number: this.connection.WriteTimeout = 10000;
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (ipv4port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (ipv4port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (ipv6port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (ipv6port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (hostport.Success) {          string host = hostport.Groups[1].Value;          int port;          if (Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535) {            return String.Format("{0}:{1}"' host' port);          }        }
Magic Number,PeerCastStation.Core,OutputStreamBase,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\OutputStreamBase.cs,ParseEndPoint,The following statement contains a magic number: if (hostport.Success) {          string host = hostport.Groups[1].Value;          int port;          if (Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535) {            return String.Format("{0}:{1}"' host' port);          }        }
Magic Number,PeerCastStation.Core,PeerCast,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\PeerCast.cs,StartMonitor,The following statement contains a magic number: try {          while (!cancel_token.IsCancellationRequested) {            foreach (var monitor in ChannelMonitors) {              monitor.OnTimer();            }            await Task.Delay(5000' cancel_token);          }        }        catch (OperationCanceledException) {        }
Magic Number,PeerCastStation.Core,RawContentReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RawContentReader.cs,ReadAsync,The following statement contains a magic number: do {          var buf = new byte[8192];          var sz = await stream.ReadAsync(buf' 0' buf.Length' cancel_token);          if (sz>0) {            sink.OnContent(new Content(streamIndex' DateTime.Now-streamOrigin' pos' buf.Take(sz).ToArray()));            pos += sz;          }          else {            eof = true;          }        } while (!eof);
Magic Number,PeerCastStation.Core,SourceConnectionClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Stream.ReadTimeout = 10000;
Magic Number,PeerCastStation.Core,SourceConnectionClient,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\SourceConnectionBase.cs,SourceConnectionClient,The following statement contains a magic number: this.Stream.WriteTimeout = 10000;
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadUInt16BE,The following statement contains a magic number: var bytes = stream.ReadBytes(2);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadUInt16BE,The following statement contains a magic number: return (bytes[0]<<8) | bytes[1];
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt16BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>24)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>16)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32BE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>8)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>16)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,WriteUInt32LE,The following statement contains a magic number: stream.WriteByte((byte)((value>>24)&0xFF));
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: var header = stream.ReadBytes(8);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(stream.ReadAtom());          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(stream.ReadAtom());          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtom,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(stream.ReadAtom());          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = stream.ReadBytes((int)len);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: var header = await stream.ReadBytesAsync(8' cancel_token);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) Array.Reverse(header' 4' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: uint len = BitConverter.ToUInt32(header' 4);
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(await stream.ReadAtomAsync(cancel_token));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = await stream.ReadBytesAsync((int)len' cancel_token);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(await stream.ReadAtomAsync(cancel_token));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = await stream.ReadBytesAsync((int)len' cancel_token);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,StreamExtension,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\StreamExtension.cs,ReadAtomAsync,The following statement contains a magic number: if ((len & 0x80000000U)!=0) {          if ((len&0x7FFFFFFF)>1024) {            throw new InvalidDataException("Atom has too many children");          }          var children = new AtomCollection();          for (var i=0; i<(len&0x7FFFFFFF); i++) {            children.Add(await stream.ReadAtomAsync(cancel_token));          }          return new Atom(name' children);        }        else {          if (len>1024*1024) {            throw new InvalidDataException("Atom length too long");          }          var value = await stream.ReadBytesAsync((int)len' cancel_token);          return new Atom(name' value);        }
Magic Number,PeerCastStation.Core,RateCounter,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RateCounter.cs,Check,The following statement contains a magic number: if (d>Duration) {          rate = count*1000 / (float)d;          count = 0;          begin = Environment.TickCount;        }
Missing Default,PeerCastStation.Core,RingbufferStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\RingbufferStream.cs,Seek,The following switch statement is missing a default case: switch (origin) {  			case System.IO.SeekOrigin.Begin:  				Seek(-position+offset' System.IO.SeekOrigin.Current);  				break;  			case System.IO.SeekOrigin.End:  				Seek(length-position+offset' System.IO.SeekOrigin.Current);  				break;  			case System.IO.SeekOrigin.Current:  				if (offset>0) {  					offset    = Math.Min(length' offset);  					readPos   = (readPos+(int)offset) % Capacity;  					length   -= offset;  					position += offset;  				}  				if (offset<0) {  					offset = Math.Min(Capacity-length' -offset);  					readPos -= offset;  					if (readPos<0) readPos += Capacity;  					length   += offset;  					position -= offset;  				}  				break;  			}
Missing Default,PeerCastStation,ChannelCleaner,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.Core\ChannelCleaner.cs,OnTimer,The following switch statement is missing a default case: switch (mode) {        case CleanupMode.None:          break;        case CleanupMode.Disconnected:          CleanupChannels(channel => {            return channel.Status==SourceStreamStatus.Idle ||                   channel.Status==SourceStreamStatus.Error;          });          break;        case CleanupMode.NotRelaying:          CleanupChannels(channel => {            return channel.LocalDirects==0 &&                   channel.LocalRelays==0;          });          break;        case CleanupMode.NotPlaying:          CleanupChannels(channel => {            return channel.LocalDirects==0;          });          break;        }
