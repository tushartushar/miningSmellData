Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.HTTP,HTTPChunkedContentStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPChunkedContentStream.cs,ReadAsync,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.HTTP,HTTPChunkedContentStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPChunkedContentStream.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,Cyclomatic complexity of the method is 12
Long Parameter List,PeerCastStation.HTTP,HTTPDummyOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPDummyOutputStream.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.HTTP,HTTPDummyOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPDummyOutputStream.cs,HTTPDummyOutputStream,The method has 6 parameters. Parameters: peercast' input_stream' output_stream' remote_endpoint' access_control' req
Long Parameter List,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,Create,The method has 6 parameters. Parameters: input_stream' output_stream' remote_endpoint' access_control' channel_id' header
Long Parameter List,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,HTTPOutputStream,The method has 7 parameters. Parameters: peercast' input_stream' output_stream' remote_endpoint' access_control' channel' request
Long Parameter List,PeerCastStation.HTTP,HTTPPushSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPPushSourceStream.cs,HTTPPushSourceConnection,The method has 5 parameters. Parameters: peercast' channel' source_uri' content_reader' use_content_bitrate
Long Parameter List,PeerCastStation.HTTP,HTTPResponse,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPResponse.cs,HTTPResponse,The method has 5 parameters. Parameters: protocol' status' reason_phrase' headers' body
Long Parameter List,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,HTTPSourceConnection,The method has 5 parameters. Parameters: peercast' channel' source_uri' content_reader' use_content_bitrate
Long Statement,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The length of the statement  "      var hostport = Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*):(\d{1'5})\z"); " is 147.
Long Statement,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The length of the statement  "      var hostaddr = Regex.Match(text' @"\A([a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9\-]{0'61}[a-zA-Z0-9])?)*)\z"); " is 137.
Long Statement,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,SendPlaylist,The length of the statement  "        await Connection.WriteAsync(pls.CreatePlayList(baseuri' Enumerable.Empty<KeyValuePair<string'string>>())' cancel_token); " is 120.
Long Statement,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,OnStarted,The length of the statement  "            .Select(name => PeerCast.ContentFilters.FirstOrDefault(filter => filter.Name.ToLowerInvariant()==name.ToLowerInvariant())) " is 122.
Long Statement,PeerCastStation.HTTP,M3UPlayList,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayList,The length of the statement  "      var queries = String.Join("&"' parameters.Select(kv => Uri.EscapeDataString(kv.Key) + "=" + Uri.EscapeDataString(kv.Value))); " is 125.
Long Statement,PeerCastStation.HTTP,ASXPlayList,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayList,The length of the statement  "      var queries = String.Join("&"' parameters.Select(kv => Uri.EscapeDataString(kv.Key) + "=" + Uri.EscapeDataString(kv.Value))); " is 125.
Complex Conditional,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Complex Conditional,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The conditional expression  "IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535"  is complex.
Complex Conditional,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseChannelID,The conditional expression  "request!=null &&            (request.Method=="GET" || request.Method=="HEAD") &&            request.Uri!=null"  is complex.
Empty Catch Block,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,SendContents,The method has an empty catch block.
Empty Catch Block,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The method has an empty catch block.
Empty Catch Block,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The method has an empty catch block.
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,Read,The following statement contains a magic number: while (line!="") {          var value = stream.ReadByte();          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) return null;          buf.Add((byte)value);          if (buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (ipv4port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (ipv4port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv4port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetwork &&              Int32.TryParse(ipv4port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (ipv6port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (ipv6port.Success) {          IPAddress addr;          int port;          if (IPAddress.TryParse(ipv6port.Groups[1].Value' out addr) &&              addr.AddressFamily==System.Net.Sockets.AddressFamily.InterNetworkV6 &&              Int32.TryParse(ipv6port.Groups[2].Value' out port) &&              0<port && port<=65535) {            return new IPEndPoint(addr' port).ToString();          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (hostport.Success) {          string host = hostport.Groups[1].Value;          int port;          if (Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535) {            return String.Format("{0}:{1}"' host' port);          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseEndPoint,The following statement contains a magic number: if (hostport.Success) {          string host = hostport.Groups[1].Value;          int port;          if (Int32.TryParse(hostport.Groups[2].Value' out port) && 0<port && port<=65535) {            return String.Format("{0}:{1}"' host' port);          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,CreateTrackerUri,The following statement contains a magic number: foreach (Match param in Regex.Matches(request_uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")) {          if (Uri.UnescapeDataString(param.Groups[2].Value)=="tip") {            tip = Uri.UnescapeDataString(param.Groups[3].Value);            break;          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,CreateTrackerUri,The following statement contains a magic number: foreach (Match param in Regex.Matches(request_uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")) {          if (Uri.UnescapeDataString(param.Groups[2].Value)=="tip") {            tip = Uri.UnescapeDataString(param.Groups[3].Value);            break;          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStreamFactory,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ParseChannelID,The following statement contains a magic number: if (request!=null &&            (request.Method=="GET" || request.Method=="HEAD") &&            request.Uri!=null) {          Match match = null;          if ((match = Regex.Match(request.Uri.AbsolutePath' @"^/(stream/|pls/)([0-9A-Fa-f]{32}).*$")).Success) {            return new Guid(match.Groups[2].Value);          }        }
Magic Number,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,WaitChannelReceived,The following statement contains a magic number: await Task.WhenAny(          Task.Delay(10000)'          this.channelInfoReadyTaskSource.Task'          WaitForStoppedAsync());
Magic Number,PeerCastStation.HTTP,HTTPPushSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPPushSourceStream.cs,GetBindAddresses,The following statement contains a magic number: return addresses.Select(addr => new IPEndPoint(addr' uri.Port<0 ? 1935 : uri.Port));
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(\w+) +(\S+) +(HTTP/1.\d)$"' RegexOptions.IgnoreCase)).Success) {            this.Method = match.Groups[1].Value.ToUpper();            path = match.Groups[2].Value;            Protocol = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^Host:(.+)$"' RegexOptions.IgnoreCase)).Success) {            host = match.Groups[1].Value.Trim();            Headers["HOST"] = host;          }          else if ((match = Regex.Match(req' @"^Cookie:(\s*)(.+)(\s*)$"' RegexOptions.IgnoreCase)).Success) {            foreach (var pair in match.Groups[2].Value.Split(';')) {              var md = Regex.Match(pair' @"^([A-Za-z0-9!#$%^&*_\-+|~`'"".]+)=(.*)$");              if (md.Success) {                Cookies.Add(md.Groups[1].Value' md.Groups[2].Value);              }            }          }          else if ((match = Regex.Match(req' @"^(\S*):(.+)$"' RegexOptions.IgnoreCase)).Success) {            Headers[match.Groups[1].Value.ToUpper()] = match.Groups[2].Value.Trim();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(\w+) +(\S+) +(HTTP/1.\d)$"' RegexOptions.IgnoreCase)).Success) {            this.Method = match.Groups[1].Value.ToUpper();            path = match.Groups[2].Value;            Protocol = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^Host:(.+)$"' RegexOptions.IgnoreCase)).Success) {            host = match.Groups[1].Value.Trim();            Headers["HOST"] = host;          }          else if ((match = Regex.Match(req' @"^Cookie:(\s*)(.+)(\s*)$"' RegexOptions.IgnoreCase)).Success) {            foreach (var pair in match.Groups[2].Value.Split(';')) {              var md = Regex.Match(pair' @"^([A-Za-z0-9!#$%^&*_\-+|~`'"".]+)=(.*)$");              if (md.Success) {                Cookies.Add(md.Groups[1].Value' md.Groups[2].Value);              }            }          }          else if ((match = Regex.Match(req' @"^(\S*):(.+)$"' RegexOptions.IgnoreCase)).Success) {            Headers[match.Groups[1].Value.ToUpper()] = match.Groups[2].Value.Trim();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(\w+) +(\S+) +(HTTP/1.\d)$"' RegexOptions.IgnoreCase)).Success) {            this.Method = match.Groups[1].Value.ToUpper();            path = match.Groups[2].Value;            Protocol = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^Host:(.+)$"' RegexOptions.IgnoreCase)).Success) {            host = match.Groups[1].Value.Trim();            Headers["HOST"] = host;          }          else if ((match = Regex.Match(req' @"^Cookie:(\s*)(.+)(\s*)$"' RegexOptions.IgnoreCase)).Success) {            foreach (var pair in match.Groups[2].Value.Split(';')) {              var md = Regex.Match(pair' @"^([A-Za-z0-9!#$%^&*_\-+|~`'"".]+)=(.*)$");              if (md.Success) {                Cookies.Add(md.Groups[1].Value' md.Groups[2].Value);              }            }          }          else if ((match = Regex.Match(req' @"^(\S*):(.+)$"' RegexOptions.IgnoreCase)).Success) {            Headers[match.Groups[1].Value.ToUpper()] = match.Groups[2].Value.Trim();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(\w+) +(\S+) +(HTTP/1.\d)$"' RegexOptions.IgnoreCase)).Success) {            this.Method = match.Groups[1].Value.ToUpper();            path = match.Groups[2].Value;            Protocol = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^Host:(.+)$"' RegexOptions.IgnoreCase)).Success) {            host = match.Groups[1].Value.Trim();            Headers["HOST"] = host;          }          else if ((match = Regex.Match(req' @"^Cookie:(\s*)(.+)(\s*)$"' RegexOptions.IgnoreCase)).Success) {            foreach (var pair in match.Groups[2].Value.Split(';')) {              var md = Regex.Match(pair' @"^([A-Za-z0-9!#$%^&*_\-+|~`'"".]+)=(.*)$");              if (md.Success) {                Cookies.Add(md.Groups[1].Value' md.Groups[2].Value);              }            }          }          else if ((match = Regex.Match(req' @"^(\S*):(.+)$"' RegexOptions.IgnoreCase)).Success) {            Headers[match.Groups[1].Value.ToUpper()] = match.Groups[2].Value.Trim();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(\w+) +(\S+) +(HTTP/1.\d)$"' RegexOptions.IgnoreCase)).Success) {            this.Method = match.Groups[1].Value.ToUpper();            path = match.Groups[2].Value;            Protocol = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^Host:(.+)$"' RegexOptions.IgnoreCase)).Success) {            host = match.Groups[1].Value.Trim();            Headers["HOST"] = host;          }          else if ((match = Regex.Match(req' @"^Cookie:(\s*)(.+)(\s*)$"' RegexOptions.IgnoreCase)).Success) {            foreach (var pair in match.Groups[2].Value.Split(';')) {              var md = Regex.Match(pair' @"^([A-Za-z0-9!#$%^&*_\-+|~`'"".]+)=(.*)$");              if (md.Success) {                Cookies.Add(md.Groups[1].Value' md.Groups[2].Value);              }            }          }          else if ((match = Regex.Match(req' @"^(\S*):(.+)$"' RegexOptions.IgnoreCase)).Success) {            Headers[match.Groups[1].Value.ToUpper()] = match.Groups[2].Value.Trim();          }        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: if (Uri.TryCreate("http://" + host + path' UriKind.Absolute' out uri)) {          this.Uri = uri;          foreach (Match param in Regex.Matches(uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")) {            this.Parameters.Add(              Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()'              Uri.UnescapeDataString(param.Groups[3].Value));          }        }        else {          this.Uri = null;        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: if (Uri.TryCreate("http://" + host + path' UriKind.Absolute' out uri)) {          this.Uri = uri;          foreach (Match param in Regex.Matches(uri.Query' @"(&|\?)([^&=]+)=([^&=]+)")) {            this.Parameters.Add(              Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()'              Uri.UnescapeDataString(param.Groups[3].Value));          }        }        else {          this.Uri = null;        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,ParseRequestLine,The following statement contains a magic number: if (match.Success) {          return new HTTPRequestLine(            match.Groups[1].Value.ToUpper()'            match.Groups[2].Value'            match.Groups[3].Value);        }        else {          return null;        }
Magic Number,PeerCastStation.HTTP,HTTPRequest,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,ParseRequestLine,The following statement contains a magic number: if (match.Success) {          return new HTTPRequestLine(            match.Groups[1].Value.ToUpper()'            match.Groups[2].Value'            match.Groups[3].Value);        }        else {          return null;        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) {            throw new EndOfStreamException();          }          buf.Add((byte)value);          length += 1;          if (buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }          else if (length>4096) {            throw new InvalidDataException();          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) {            throw new EndOfStreamException();          }          buf.Add((byte)value);          length += 1;          if (buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }          else if (length>4096) {            throw new InvalidDataException();          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) {            throw new EndOfStreamException();          }          buf.Add((byte)value);          length += 1;          if (buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }          else if (length>4096) {            throw new InvalidDataException();          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: while (line!="") {          var value = await stream.ReadByteAsync(cancel_token);          if (value<0) {            throw new EndOfStreamException();          }          buf.Add((byte)value);          length += 1;          if (buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n') {            line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);            if (line!="") requests.Add(line);            buf.Clear();          }          else if (length>4096) {            throw new InvalidDataException();          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: var status   = 200;
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(HTTP/1.\d) (\d+) (.*)$")).Success) {            protocol = match.Groups[1].Value;            status   = Int32.Parse(match.Groups[2].Value);            reason_phrase = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^(\S*):\s*(.*)\s*$"' RegexOptions.IgnoreCase)).Success) {            headers[match.Groups[1].Value.ToUpperInvariant()] = match.Groups[2].Value;          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(HTTP/1.\d) (\d+) (.*)$")).Success) {            protocol = match.Groups[1].Value;            status   = Int32.Parse(match.Groups[2].Value);            reason_phrase = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^(\S*):\s*(.*)\s*$"' RegexOptions.IgnoreCase)).Success) {            headers[match.Groups[1].Value.ToUpperInvariant()] = match.Groups[2].Value;          }        }
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: foreach (var req in requests) {          Match match = null;          if ((match = Regex.Match(req' @"^(HTTP/1.\d) (\d+) (.*)$")).Success) {            protocol = match.Groups[1].Value;            status   = Int32.Parse(match.Groups[2].Value);            reason_phrase = match.Groups[3].Value;          }          else if ((match = Regex.Match(req' @"^(\S*):\s*(.*)\s*$"' RegexOptions.IgnoreCase)).Success) {            headers[match.Groups[1].Value.ToUpperInvariant()] = match.Groups[2].Value;          }        }
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          var client = new TcpClient();          if (source.HostNameType==UriHostNameType.IPv4 ||              source.HostNameType==UriHostNameType.IPv6) {            await client.ConnectAsync(IPAddress.Parse(source.Host)' source.Port);          }          else {            await client.ConnectAsync(source.DnsSafeHost' source.Port);          }          var connection = new SourceConnectionClient(client);          connection.Stream.ReadTimeout  = 10000;          connection.Stream.WriteTimeout = 8000;          return connection;        }        catch (SocketException e) {          Logger.Error(e);          return null;        }
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoConnect,The following statement contains a magic number: try {          var client = new TcpClient();          if (source.HostNameType==UriHostNameType.IPv4 ||              source.HostNameType==UriHostNameType.IPv6) {            await client.ConnectAsync(IPAddress.Parse(source.Host)' source.Port);          }          else {            await client.ConnectAsync(source.DnsSafeHost' source.Port);          }          var connection = new SourceConnectionClient(client);          connection.Stream.ReadTimeout  = 10000;          connection.Stream.WriteTimeout = 8000;          return connection;        }        catch (SocketException e) {          Logger.Error(e);          return null;        }
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: try {          this.Status = ConnectionStatus.Connecting;          var host = SourceUri.DnsSafeHost;          if (SourceUri.Port!=-1 && SourceUri.Port!=80) {            host = String.Format("{0}:{1}"' SourceUri.DnsSafeHost' SourceUri.Port);          }          var request = String.Format(              "GET {0} HTTP/1.1\r\n" +              "Host: {1}\r\n" +              "User-Agent: NSPlayer ({2})\r\n" +              "Connection: close\r\n" +              "Pragma: stream-switch\r\n" +              "\r\n"'              SourceUri.PathAndQuery'              host'              PeerCast.AgentName);          await connection.Stream.WriteAsync(System.Text.Encoding.UTF8.GetBytes(request));          Logger.Debug("Sending request:\n" + request);            response = null;          response = await HTTPResponseReader.ReadAsync(connection.Stream' cancel_token);          if (response.Status!=200) {            Logger.Error("Server responses {0} to GET {1}"' response.Status' SourceUri.PathAndQuery);            Stop(response.Status==404 ? StopReason.OffAir : StopReason.UnavailableError);          }            this.Status = ConnectionStatus.Connected;          await contentReader.ReadAsync(contentSink' connection.Stream' cancel_token);          Stop(StopReason.OffAir);        }        catch (InvalidDataException) {          Stop(StopReason.ConnectionError);        }        catch (OperationCanceledException) {          Logger.Error("Recv content timed out");          Stop(StopReason.ConnectionError);        }        catch (IOException) {          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: try {          this.Status = ConnectionStatus.Connecting;          var host = SourceUri.DnsSafeHost;          if (SourceUri.Port!=-1 && SourceUri.Port!=80) {            host = String.Format("{0}:{1}"' SourceUri.DnsSafeHost' SourceUri.Port);          }          var request = String.Format(              "GET {0} HTTP/1.1\r\n" +              "Host: {1}\r\n" +              "User-Agent: NSPlayer ({2})\r\n" +              "Connection: close\r\n" +              "Pragma: stream-switch\r\n" +              "\r\n"'              SourceUri.PathAndQuery'              host'              PeerCast.AgentName);          await connection.Stream.WriteAsync(System.Text.Encoding.UTF8.GetBytes(request));          Logger.Debug("Sending request:\n" + request);            response = null;          response = await HTTPResponseReader.ReadAsync(connection.Stream' cancel_token);          if (response.Status!=200) {            Logger.Error("Server responses {0} to GET {1}"' response.Status' SourceUri.PathAndQuery);            Stop(response.Status==404 ? StopReason.OffAir : StopReason.UnavailableError);          }            this.Status = ConnectionStatus.Connected;          await contentReader.ReadAsync(contentSink' connection.Stream' cancel_token);          Stop(StopReason.OffAir);        }        catch (InvalidDataException) {          Stop(StopReason.ConnectionError);        }        catch (OperationCanceledException) {          Logger.Error("Recv content timed out");          Stop(StopReason.ConnectionError);        }        catch (IOException) {          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: try {          this.Status = ConnectionStatus.Connecting;          var host = SourceUri.DnsSafeHost;          if (SourceUri.Port!=-1 && SourceUri.Port!=80) {            host = String.Format("{0}:{1}"' SourceUri.DnsSafeHost' SourceUri.Port);          }          var request = String.Format(              "GET {0} HTTP/1.1\r\n" +              "Host: {1}\r\n" +              "User-Agent: NSPlayer ({2})\r\n" +              "Connection: close\r\n" +              "Pragma: stream-switch\r\n" +              "\r\n"'              SourceUri.PathAndQuery'              host'              PeerCast.AgentName);          await connection.Stream.WriteAsync(System.Text.Encoding.UTF8.GetBytes(request));          Logger.Debug("Sending request:\n" + request);            response = null;          response = await HTTPResponseReader.ReadAsync(connection.Stream' cancel_token);          if (response.Status!=200) {            Logger.Error("Server responses {0} to GET {1}"' response.Status' SourceUri.PathAndQuery);            Stop(response.Status==404 ? StopReason.OffAir : StopReason.UnavailableError);          }            this.Status = ConnectionStatus.Connected;          await contentReader.ReadAsync(contentSink' connection.Stream' cancel_token);          Stop(StopReason.OffAir);        }        catch (InvalidDataException) {          Stop(StopReason.ConnectionError);        }        catch (OperationCanceledException) {          Logger.Error("Recv content timed out");          Stop(StopReason.ConnectionError);        }        catch (IOException) {          Stop(StopReason.ConnectionError);        }
Magic Number,PeerCastStation.HTTP,HTTPSourceStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,OnConnectionStopped,The following statement contains a magic number: switch (reason) {        case StopReason.UserReconnect:          break;        case StopReason.UserShutdown:          Stop(reason);          break;        default:          Task.Delay(3000).ContinueWith(prev => Reconnect());          break;        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The following statement contains a magic number: try {          var authorization = System.Text.Encoding.ASCII.GetString(Convert.FromBase64String(authorization_token)).Split(':');          if (authorization.Length>=2) {            var user = authorization[0];            var pass = String.Join(":"' authorization.Skip(1).ToArray());            authorized = acinfo.CheckAuthorization(user' pass);          }        }        catch (FormatException) {        }        catch (ArgumentException) {        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,ASXPlayList,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayList,The following statement contains a magic number: try {          return System.Text.Encoding.GetEncoding(932).GetBytes(res);        }        catch (System.Text.EncoderFallbackException) {          return System.Text.Encoding.UTF8.GetBytes(res);        }
Missing Default,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,SendContents,The following switch statement is missing a default case: switch (packet.Type) {            case Packet.ContentType.Header:              if (sent_header!=packet.Content && packet.Content!=null) {                await Connection.WriteAsync(packet.Content.Data' cancel_token);                Logger.Debug("Sent ContentHeader pos {0}"' packet.Content.Position);                sent_header = packet.Content;                sent_packet = packet.Content;              }              break;            case Packet.ContentType.Body:              if (sent_header==null) continue;              var c = packet.Content;              if (c.Timestamp>sent_packet.Timestamp ||                  (c.Timestamp==sent_packet.Timestamp && c.Position>sent_packet.Position)) {                await Connection.WriteAsync(c.Data' cancel_token);                sent_packet = c;              }              break;            }
Missing Default,PeerCastStation.HTTP,HTTPOutputStream,C:\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,SendReponseBody,The following switch statement is missing a default case: switch (GetBodyType()) {        case BodyType.None:          break;        case BodyType.Content:          await SendContents(cancel_token);          break;        case BodyType.Playlist:          await SendPlaylist(cancel_token);          break;        }
