Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PeerCastStation.HTTP,HTTPChunkedContentStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPChunkedContentStream.cs,ReadAsync,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.HTTP,HTTPChunkedContentStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPChunkedContentStream.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,StreamHandler,Cyclomatic complexity of the method is 15
Complex Method,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,Cyclomatic complexity of the method is 13
Complex Method,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,Cyclomatic complexity of the method is 9
Complex Method,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,Cyclomatic complexity of the method is 41
Complex Method,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,Cyclomatic complexity of the method is 12
Long Parameter List,PeerCastStation.HTTP,HTTPPushSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPPushSourceStream.cs,HTTPPushSourceConnection,The method has 5 parameters. Parameters: peercast' channel' source_uri' content_reader' use_content_bitrate
Long Parameter List,PeerCastStation.HTTP,HTTPResponse,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPResponse.cs,HTTPResponse,The method has 5 parameters. Parameters: protocol' status' reason_phrase' headers' body
Long Parameter List,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,HTTPSourceConnection,The method has 5 parameters. Parameters: peercast' channel' source_uri' content_reader' use_content_bitrate
Long Identifier,PeerCastStation.HTTP,HLSChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,,The length of the parameter stoppedCancellationTokenSource is 30.
Long Statement,PeerCastStation.HTTP,HTTPChunkedContentStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPChunkedContentStream.cs,ReadAsync,The length of the statement  "        int len = await BaseStream.ReadAsync(buffer' offset' Math.Min(count' currentChunkSize)' cancellationToken).ConfigureAwait(false); " is 129.
Long Statement,PeerCastStation.HTTP,HTTPLiveStreamingDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,GetChannelAsync,The length of the statement  "      var channel = ctx.GetPeerCast().RequestChannel(req.ChannelId' OutputStreamBase.CreateTrackerUri(req.ChannelId' tip)' true); " is 123.
Long Statement,PeerCastStation.HTTP,M3U8PlayList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,CreatePlayListAsync,The length of the statement  "        var queries = String.Join("&"' parameters.Select(kv => Uri.EscapeDataString(kv.Key) + "=" + Uri.EscapeDataString(kv.Value))); " is 125.
Long Statement,PeerCastStation.HTTP,M3U8PlayList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,CreatePlayListAsync,The length of the statement  "            var url = new UriBuilder(new Uri(baseuri' Channel.ChannelID.ToString("N").ToUpperInvariant() + String.Format("/{0:00000}.ts"' seg.Index))); " is 139.
Long Statement,PeerCastStation.HTTP,HLSContentSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,AddRef,The length of the statement  "              .Select(name => channel.PeerCast.ContentFilters.FirstOrDefault(filter => filter.Name.ToLowerInvariant() == name.ToLowerInvariant())) " is 132.
Long Statement,PeerCastStation.HTTP,HLSChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,GetSubscription,The length of the statement  "        return owner.channelSinks.GetOrAdd(new Tuple<Channel'string>(channel' session)' k => new HLSChannelSink(owner' ctx' k)).AddRef(ctx); " is 132.
Long Statement,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,GetSegmentsAsync,The length of the statement  "        var result = await Task.WhenAny(task' cancellationToken.CreateCancelTask<Ringbuffer<HLSSegment>>()).ConfigureAwait(false); " is 122.
Long Statement,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,GetChannelAsync,The length of the statement  "      var channel = ctx.GetPeerCast().RequestChannel(req.ChannelId' OutputStreamBase.CreateTrackerUri(req.ChannelId' tip)' true); " is 123.
Long Statement,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,PlayListHandler,The length of the statement  "            body = await pls.CreatePlayListAsync(baseuri' Enumerable.Empty<KeyValuePair<string'string>>()' cts.Token).ConfigureAwait(false); " is 128.
Long Statement,PeerCastStation.HTTP,M3UPlayList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayListAsync,The length of the statement  "      var queries = String.Join("&"' parameters.Select(kv => Uri.EscapeDataString(kv.Key) + "=" + Uri.EscapeDataString(kv.Value))); " is 125.
Long Statement,PeerCastStation.HTTP,ASXPlayList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayListAsync,The length of the statement  "      var queries = String.Join("&"' parameters.Select(kv => Uri.EscapeDataString(kv.Key) + "=" + Uri.EscapeDataString(kv.Value))); " is 125.
Complex Conditional,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The conditional expression  "i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0"  is complex.
Complex Conditional,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The conditional expression  "i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0"  is complex.
Empty Catch Block,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,StreamHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,StreamHandler,The method has an empty catch block.
Empty Catch Block,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The method has an empty catch block.
Empty Catch Block,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The method has an empty catch block.
Magic Number,PeerCastStation.HTTP,HTTPLiveStreamingDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,GetChannelAsync,The following statement contains a magic number: cts.CancelAfter(10000);
Magic Number,PeerCastStation.HTTP,HTTPLiveStreamingDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,PlayListHandler,The following statement contains a magic number: cts.CancelAfter(10000);
Magic Number,PeerCastStation.HTTP,HTTPLiveStreamingDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,FragmentHandler,The following statement contains a magic number: cts.CancelAfter(10000);
Magic Number,PeerCastStation.HTTP,HLSContentSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Dispose,The following statement contains a magic number: Task.Run(async () => {            await Task.Delay(5000).ConfigureAwait(false);            if (Interlocked.Decrement(ref referenceCount)==0) {              owner.contentSinks.TryRemove(channel' out var s);              Interlocked.Exchange(ref subscription' null)?.Dispose();            }          });
Magic Number,PeerCastStation.HTTP,HLSChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,HLSChannelSink,The following statement contains a magic number: remoteEndPoint.Address.GetAddressLocality()<2
Magic Number,PeerCastStation.HTTP,HLSChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,AddRef,The following statement contains a magic number: remoteEndPoint.Address.GetAddressLocality()<2
Magic Number,PeerCastStation.HTTP,HLSChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Dispose,The following statement contains a magic number: Task.Run(async () => {            await Task.Delay(5000).ConfigureAwait(false);            if (Interlocked.Decrement(ref referenceCount)==0) {              owner.channelSinks.TryRemove(session' out var s);              Interlocked.Exchange(ref subscription' null)?.Dispose();              stoppedCancellationTokenSource.Dispose();            }          });
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: req.FragmentNumber = md.Groups[2].Success ? (int?)Int32.Parse(md.Groups[2].Value) : null;
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: req.FragmentNumber = md.Groups[2].Success ? (int?)Int32.Parse(md.Groups[2].Value) : null;
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: req.Extension = md.Groups[3].Success ? md.Groups[3].Value : null;
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: req.Extension = md.Groups[3].Success ? md.Groups[3].Value : null;
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: components.Length>2
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: var ext = md.Groups[2].Success ? md.Groups[2].Value : null;
Magic Number,PeerCastStation.HTTP,ParsedRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingDirectHost.cs,Parse,The following statement contains a magic number: var ext = md.Groups[2].Success ? md.Groups[2].Value : null;
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: var bytes188 = new byte[188];
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: Array.Copy(content.Data' r' bytes188' 0' 188);
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: segmentBuffer.Write(bytes188' 0' 188);
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: segmentBuffer.Length > 8 * 1024 * 1024
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: segmentBuffer.Length > 8 * 1024 * 1024
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: segmentBuffer.Length > 8 * 1024 * 1024
Magic Number,PeerCastStation.HTTP,SegmentList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPLiveStreamingSegmenter.cs,AddContent,The following statement contains a magic number: r += 188;
Magic Number,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,GetChannelAsync,The following statement contains a magic number: cts.CancelAfter(10000);
Magic Number,PeerCastStation.HTTP,HTTPDirectOwinApp,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,PlayListHandler,The following statement contains a magic number: cts.CancelAfter(10000);
Magic Number,PeerCastStation.HTTP,ChannelSink,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPOutputStream.cs,ChannelSink,The following statement contains a magic number: remoteEndPoint.Address.GetAddressLocality()<2
Magic Number,PeerCastStation.HTTP,HTTPPushSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPPushSourceStream.cs,GetBindAddresses,The following statement contains a magic number: return addresses.Select(addr => new IPEndPoint(addr' uri.Port<0 ? 1935 : uri.Port));
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: path = match.Groups[2].Value;
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: Protocol = match.Groups[3].Value;
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: this.Parameters.Add(              Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()'              Uri.UnescapeDataString(param.Groups[3].Value));
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,HTTPRequest,The following statement contains a magic number: this.Parameters.Add(              Uri.UnescapeDataString(param.Groups[2].Value).ToLowerInvariant()'              Uri.UnescapeDataString(param.Groups[3].Value));
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,ParseRequestLine,The following statement contains a magic number: return new HTTPRequestLine(            match.Groups[1].Value.ToUpper()'            match.Groups[2].Value'            match.Groups[3].Value);
Magic Number,PeerCastStation.HTTP,HTTPRequest,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequest.cs,ParseRequestLine,The following statement contains a magic number: return new HTTPRequestLine(            match.Groups[1].Value.ToUpper()'            match.Groups[2].Value'            match.Groups[3].Value);
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,Read,The following statement contains a magic number: line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,Read,The following statement contains a magic number: buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n'
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,Read,The following statement contains a magic number: buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n'
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,ReadAsync,The following statement contains a magic number: line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,ReadAsync,The following statement contains a magic number: buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n'
Magic Number,PeerCastStation.HTTP,HTTPRequestReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPRequestReader.cs,ReadAsync,The following statement contains a magic number: buf.Count >= 2 && buf[buf.Count - 2] == '\r' && buf[buf.Count - 1] == '\n'
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: line = System.Text.Encoding.UTF8.GetString(buf.ToArray()' 0' buf.Count - 2);
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n'
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: buf.Count>=2 && buf[buf.Count-2]=='\r' && buf[buf.Count-1]=='\n'
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: var status   = 200;
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: status   = Int32.Parse(match.Groups[2].Value);
Magic Number,PeerCastStation.HTTP,HTTPResponseReader,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,ReadAsync,The following statement contains a magic number: reason_phrase = match.Groups[3].Value;
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.ReadTimeout  = 10000;
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoConnect,The following statement contains a magic number: connection.Stream.WriteTimeout = 8000;
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: SourceUri.Port!=-1 && SourceUri.Port!=80
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: Stop(response.Status==404 ? StopReason.OffAir : StopReason.UnavailableError);
Magic Number,PeerCastStation.HTTP,HTTPSourceConnection,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,DoProcess,The following statement contains a magic number: response.Status!=200
Magic Number,PeerCastStation.HTTP,HTTPSourceStream,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPSourceStream.cs,OnConnectionStopped,The following statement contains a magic number: switch (args.Reason) {        case StopReason.UserReconnect:        case StopReason.UserShutdown:          break;        default:          args.Delay = 3000;          args.Reconnect = true;          break;        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,CheckAuthorization,The following statement contains a magic number: authorization.Length>=2
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,HTTPUtils,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\HTTPUtils.cs,GetReasonPhrase,The following statement contains a magic number: switch (status_code) {        case 100: return "Continue";        case 101: return "Switching Protocols";        case 200: return "OK";        case 201: return "Created";        case 202: return "Accepted";        case 203: return "Non-Authoritative Information";        case 204: return "No Content";        case 205: return "Reset Content";        case 206: return "Partial Content";        case 300: return "Multiple Choices";        case 301: return "Moved Permanently";        case 302: return "Found";        case 303: return "See Other";        case 304: return "Not Modified";        case 305: return "Use Proxy";        case 307: return "Temporary Redirect";        case 400: return "Bad Request";        case 401: return "Unauthorized";        case 402: return "Payment Required";        case 403: return "Forbidden";        case 404: return "Not Found";        case 405: return "Method Not Allowed";        case 406: return "Not Acceptable";        case 407: return "Proxy Authentication Required";        case 408: return "Request Time-out";        case 409: return "Conflict";        case 410: return "Gone";        case 411: return "Length Required";        case 412: return "Precondition Failed";        case 413: return "Request Entity Too Large";        case 414: return "Request-URI Too Large";        case 415: return "Unsupported Media Type";        case 416: return "Requested range not satisfiable";        case 417: return "Expectation Failed";        case 500: return "Internal Server Error";        case 501: return "Not Implemented";        case 502: return "Bad Gateway";        case 503: return "Service Unavailable";        case 504: return "Gateway Time-out";        case 505: return "HTTP Version not supported";        default: return "";        }
Magic Number,PeerCastStation.HTTP,ASXPlayList,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\PlayList.cs,CreatePlayListAsync,The following statement contains a magic number: return Task.FromResult(System.Text.Encoding.GetEncoding(932).GetBytes(res));
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_error_indicator = (packet[1] & 0x80) >> 7;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.payload_unit_start_indicator = (packet[1] & 0x40) >> 6;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_priority = (packet[1] & 0x20) >> 5;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.PID = ((packet[1] & 0x1F) << 8) | packet[2];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.PID = ((packet[1] & 0x1F) << 8) | packet[2];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_scrambling_control = (packet[3] & 0x60) >> 6;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.transport_scrambling_control = (packet[3] & 0x60) >> 6;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.adaptation_field_control = (packet[3] & 0x30) >> 4;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.adaptation_field_control = (packet[3] & 0x30) >> 4;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.continuity_counter = (packet[3] & 0x0F);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.payload_offset = 4;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.adaptation_field_length = packet[4];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.random_access_indicator = packet[5] & 0x40;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var pcr_flag = (packet[5] & 0x10)!=0;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_base =                ((long)packet[6+0] << 25) |                ((long)packet[6+1] << 17) |                ((long)packet[6+2] << 9) |                ((long)packet[6+3] << 1) |                (((long)packet[6+4] & 0x80) >> 7);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: var program_clock_reference_extension = ((packet[6+4] & 0x01) << 8) | packet[6+5];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: this.program_clock_reference = (program_clock_reference_base * 300 + program_clock_reference_extension) / 27000000.0;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int i = 5 + adaptation_field_length;
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xC0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i+3<packet.Length && packet[i] == 0x0 && packet[i + 1] == 0x0 && packet[i + 2] == 0x1 && packet[i + 3] == 0xE0
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int section_length = ((packet[payload_offset+1] & 0x0F)<<8 | packet[payload_offset+2]);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: byte[] pmts = new byte[4];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: Array.Copy(packet' payload_offset+8+i' pmts' 0' 4);
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int program_number = pmts[0] << 8 | pmts[1];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: int pmtid = (pmts[2] & 0x1F) << 8 | pmts[3];
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i<section_length-5-4
Magic Number,PeerCastStation.HTTP,TSPacket,D:\research\architectureSmells\repos\kumaryu_peercaststation\PeerCastStation\PeerCastStation.HTTP\TsPacket.cs,TSPacket,The following statement contains a magic number: i<section_length-5-4
