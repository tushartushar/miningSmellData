Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,PeekMessage,The method has 5 parameters. Parameters: wMsg' hwnd' msgMin' msgMax' remove
Magic Number,Eto.Test.WinForms.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.WinForms\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(200' 200);  				nativeWindow.FormClosed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var winformsPanel = panel.ToNative(true);  				winformsPanel.Dock = swf.DockStyle.Fill;  				nativeWindow.Controls.Add(winformsPanel);    				nativeWindow.Show();  			});
Magic Number,Eto.Test.WinForms.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.WinForms\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(200' 200);  				nativeWindow.FormClosed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var winformsPanel = panel.ToNative(true);  				winformsPanel.Dock = swf.DockStyle.Fill;  				nativeWindow.Controls.Add(winformsPanel);    				nativeWindow.Show();  			});
Magic Number,Eto.Test.WinForms.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.WinForms\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(200' 200);  				nativeWindow.FormClosed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var winformsPanel = panel.ToNative(true);  				winformsPanel.Dock = swf.DockStyle.Fill;  				nativeWindow.Controls.Add(winformsPanel);    				nativeWindow.Show();  			});
Magic Number,Eto.Test.WinForms.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.WinForms\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(200' 200);  				nativeWindow.FormClosed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var winformsPanel = panel.ToNative(true);  				winformsPanel.Dock = swf.DockStyle.Fill;  				nativeWindow.Controls.Add(winformsPanel);    				nativeWindow.Show();  			});
Magic Number,Eto.Test.WinForms.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.WinForms\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(200' 200);  				nativeWindow.FormClosed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var winformsPanel = panel.ToNative(true);  				winformsPanel.Dock = swf.DockStyle.Fill;  				nativeWindow.Controls.Add(winformsPanel);    				nativeWindow.Show();  			});
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,SignedHIWORD,The following statement contains a magic number: return (short)((n >> 16) & 0xFFFF);
