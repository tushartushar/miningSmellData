Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Eto.Serialization.Xaml,EtoXamlType,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\EtoXamlType.cs,LookupTypeConverter,Cyclomatic complexity of the method is 8
Complex Method,Eto.Serialization.Xaml.Extensions,BindingExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\BindingExtension.cs,ProvideValue,Cyclomatic complexity of the method is 8
Complex Method,Eto.Serialization.Xaml.Extensions,ResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\ResourceExtension.cs,ProvideValue,Cyclomatic complexity of the method is 13
Complex Method,Eto.Serialization.Xaml.Extensions,OnExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\OnExtension.cs,ProvideValue,Cyclomatic complexity of the method is 12
Long Parameter List,Eto.Serialization.Xaml.Extensions,FontExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\FontExtension.cs,FontExtension,The method has 5 parameters. Parameters: family' size' typeface' style' decoration
Long Statement,Eto.Serialization.Xaml,DesignerMarkupExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\DesignerUserControl.cs,ProvideValue,The length of the statement  "					if (ct.CanAssignTo(coltype.ItemType) || coltype.ItemType.TypeConverter?.ConverterInstance.CanConvertFrom(ct.UnderlyingType) == true) " is 132.
Long Statement,Eto.Serialization.Xaml,EtoXamlType,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\EtoXamlType.cs,LookupTypeConverter,The length of the statement  "				typeConverterAttrib = Nullable.GetUnderlyingType(UnderlyingType).GetTypeInfo().GetCustomAttribute<EtoTypeConverterAttribute>(); " is 127.
Long Statement,Eto.Serialization.Xaml,EtoNameScope,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\EtoNameScope.cs,RegisterName,The length of the statement  "				var property = instanceType.GetRuntimeProperties().FirstOrDefault(r => r.Name == name && r.SetMethod != null &&!r.SetMethod.IsStatic); " is 134.
Long Statement,Eto.Serialization.Xaml,EtoNameScope,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\EtoNameScope.cs,RegisterName,The length of the statement  "				var field = instanceType.GetField(name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly); " is 138.
Long Statement,Eto.Serialization.Xaml.Extensions,BindingExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\BindingExtension.cs,ProvideValue,The length of the statement  "					var convert = instance.GetType().GetRuntimeMethod("Convert"' new[] { typeof(IValueConverter)' typeof(object)' typeof(CultureInfo) }); " is 133.
Long Statement,Eto.Serialization.Xaml.Extensions,FontExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\FontExtension.cs,ProvideValue,The length of the statement  "				var typeface = family.Typefaces.FirstOrDefault(r => string.Equals(r.Name' Typeface' StringComparison.OrdinalIgnoreCase)); " is 121.
Long Statement,Eto.Serialization.Xaml.Extensions,StaticResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\StaticResourceExtension.cs,ProvideValue,The length of the statement  "			var schemaContextProvider = serviceProvider.GetService(typeof(IXamlSchemaContextProvider)) as IXamlSchemaContextProvider; " is 121.
Long Statement,Eto,TypeHelper,C:\repos\picoe_Eto\Source\Eto\TypeHelper.cs,GetConstructor,The length of the statement  "			return type.GetTypeInfo().DeclaredConstructors.FirstOrDefault(r => r.GetParameters().Select(p => p.ParameterType).SequenceEqual(args)); " is 135.
Complex Conditional,Eto.Serialization.Xaml,EtoXamlSchemaContext,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\EtoXamlSchemaContext.cs,GetXamlType,The conditional expression  "info.IsSubclassOf(typeof(Widget))  				|| info.Assembly == EtoAssembly // struct  				|| (  					// nullable struct  				    info.IsGenericType  				    && info.GetGenericTypeDefinition() == typeof(Nullable<>)  					&& Nullable.GetUnderlyingType(type).GetTypeInfo().Assembly == EtoAssembly  				)"  is complex.
Magic Number,Eto.Serialization.Xaml,DesignerUserControl,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\DesignerUserControl.cs,DesignerUserControl,The following statement contains a magic number: Padding = new Padding(20);
Magic Number,Eto.Serialization.Xaml,DesignerUserControl,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\DesignerUserControl.cs,DesignerUserControl,The following statement contains a magic number: Content = label = new Label  			{  				VerticalAlignment = VerticalAlignment.Center'  				TextAlignment = TextAlignment.Center'  				Font = SystemFonts.Default(8)'  				Text = "[User Control]"  			};
Magic Number,Eto.Serialization.Xaml.Extensions,ResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\ResourceExtension.cs,ProvideValue,The following statement contains a magic number: if (contextProvider != null)  			{  				var context = contextProvider.SchemaContext as EtoXamlSchemaContext;  				if (context != null && context.DesignMode)  				{  					// TODO: Lookup resource file using ide service so we can actually show the image or use the resource  					if (propertyInfo != null)  					{  						if (typeof(Bitmap).IsAssignableFrom(propertyInfo.PropertyType))  							return new Bitmap(24' 24' PixelFormat.Format32bppRgba);  						  						if (typeof(Icon).IsAssignableFrom(propertyInfo.PropertyType))  							return new Icon(1' new Bitmap(24' 24' PixelFormat.Format32bppRgba));    						// return its current value if not a known type to handle  						return propertyInfo.GetValue(provideValue.TargetObject' null);  					}  					return null;  				}  			}
Magic Number,Eto.Serialization.Xaml.Extensions,ResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\ResourceExtension.cs,ProvideValue,The following statement contains a magic number: if (contextProvider != null)  			{  				var context = contextProvider.SchemaContext as EtoXamlSchemaContext;  				if (context != null && context.DesignMode)  				{  					// TODO: Lookup resource file using ide service so we can actually show the image or use the resource  					if (propertyInfo != null)  					{  						if (typeof(Bitmap).IsAssignableFrom(propertyInfo.PropertyType))  							return new Bitmap(24' 24' PixelFormat.Format32bppRgba);  						  						if (typeof(Icon).IsAssignableFrom(propertyInfo.PropertyType))  							return new Icon(1' new Bitmap(24' 24' PixelFormat.Format32bppRgba));    						// return its current value if not a known type to handle  						return propertyInfo.GetValue(provideValue.TargetObject' null);  					}  					return null;  				}  			}
Magic Number,Eto.Serialization.Xaml.Extensions,ResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\ResourceExtension.cs,ProvideValue,The following statement contains a magic number: if (contextProvider != null)  			{  				var context = contextProvider.SchemaContext as EtoXamlSchemaContext;  				if (context != null && context.DesignMode)  				{  					// TODO: Lookup resource file using ide service so we can actually show the image or use the resource  					if (propertyInfo != null)  					{  						if (typeof(Bitmap).IsAssignableFrom(propertyInfo.PropertyType))  							return new Bitmap(24' 24' PixelFormat.Format32bppRgba);  						  						if (typeof(Icon).IsAssignableFrom(propertyInfo.PropertyType))  							return new Icon(1' new Bitmap(24' 24' PixelFormat.Format32bppRgba));    						// return its current value if not a known type to handle  						return propertyInfo.GetValue(provideValue.TargetObject' null);  					}  					return null;  				}  			}
Magic Number,Eto.Serialization.Xaml.Extensions,ResourceExtension,C:\repos\picoe_Eto\Source\Eto.Serialization.Xaml\Extensions\ResourceExtension.cs,ProvideValue,The following statement contains a magic number: if (contextProvider != null)  			{  				var context = contextProvider.SchemaContext as EtoXamlSchemaContext;  				if (context != null && context.DesignMode)  				{  					// TODO: Lookup resource file using ide service so we can actually show the image or use the resource  					if (propertyInfo != null)  					{  						if (typeof(Bitmap).IsAssignableFrom(propertyInfo.PropertyType))  							return new Bitmap(24' 24' PixelFormat.Format32bppRgba);  						  						if (typeof(Icon).IsAssignableFrom(propertyInfo.PropertyType))  							return new Icon(1' new Bitmap(24' 24' PixelFormat.Format32bppRgba));    						// return its current value if not a known type to handle  						return propertyInfo.GetValue(provideValue.TargetObject' null);  					}  					return null;  				}  			}
