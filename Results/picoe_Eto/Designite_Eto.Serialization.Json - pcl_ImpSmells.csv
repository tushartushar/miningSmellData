Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Eto.Serialization.Json.Converters,DynamicLayoutConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\DynamicLayoutConverter.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Eto.Serialization.Json.Converters,FontConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,Cyclomatic complexity of the method is 10
Complex Method,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Eto.Serialization.Json.Converters,TableLayoutConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\TableLayoutConverter.cs,ReadJson,Cyclomatic complexity of the method is 9
Long Statement,Eto,TypeHelper,C:\repos\picoe_Eto\Source\Eto\TypeHelper.cs,GetConstructor,The length of the statement  "			return type.GetTypeInfo().DeclaredConstructors.FirstOrDefault(r => r.GetParameters().Select(p => p.ParameterType).SequenceEqual(args)); " is 135.
Long Statement,Eto.Serialization.Json.Converters,FontConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The length of the statement  "					var typeface = family.Typefaces.FirstOrDefault(r => string.Equals(r.Name' typefaceName' StringComparison.OrdinalIgnoreCase)); " is 125.
Long Statement,Eto.Serialization.Json.Converters,FontConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The length of the statement  "				throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Font must be defined as a string or an object with Family' Typeface' Size' Style' and Decoration properties")); " is 191.
Long Statement,Eto.Serialization.Json.Converters,ImageConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\ImageConverter.cs,ReadJson,The length of the statement  "			throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Image or Icon must be defined as a resource or file string")); " is 142.
Long Statement,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,The length of the statement  "								throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Could not find attachable property {0}.{1}"' type.Name' memberName)); " is 149.
Magic Number,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,The following statement contains a magic number: foreach (var item in items)  			{  				var typeName = (string)item["$type"];  				if (typeName != null) {    					var type = ((EtoBinder)serializer.Binder).BindToType (typeName);  					if (type != null) {  						foreach (var prop in (IDictionary<string' JToken>)item) {  							if (prop.Key == "$type") continue;  							var memberName = "Set" + prop.Key;  							var member = type.GetRuntimeMethods().FirstOrDefault(r => r.IsStatic && r.Name == memberName);  							if (member == null)  								throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Could not find attachable property {0}.{1}"' type.Name' memberName));  							var parameters = member.GetParameters();  							if (parameters.Length != 2)  								throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Invalid number of parameters"));  							var propType = parameters[1].ParameterType;  							using (var propReader = new JTokenReader(prop.Value)) {  								var propValue = serializer.Deserialize(propReader' propType);  								member.Invoke (null' new object[] { store.Parent' propValue });  							}  						}  					}  				}  			}
Missing Default,Eto.Serialization.Json.Converters,FontConverter,C:\repos\picoe_Eto\Source\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The following switch statement is missing a default case: switch (property.Name.ToLowerInvariant())  					{  						case "family":  							familyName = property.Value.ToString();  							break;  						case "systemfont":  							SystemFont tsystemfont;  							if (Enum.TryParse(property.Value.ToString()' true' out tsystemfont))  								systemFont = tsystemfont;  							break;  						case "typeface":  							typefaceName = property.Value.ToString();  							break;  						case "size":  							float ret;  							if (float.TryParse(property.Value.ToString()' out ret) && ret > 0)  								size = ret;  							break;  						case "style":  						case "fontstyle":  							if (property.Value.Type == JTokenType.String)  							{  								FontStyle tstyle;  								if (Enum.TryParse(property.Value.ToString()' true' out tstyle))  									fontStyle |= tstyle;  							}  							else  							{  								foreach (var style in property.Value)  								{  									FontStyle tstyle;  									if (Enum.TryParse(style.ToString()' true' out tstyle))  										fontStyle |= tstyle;  								}  							}  							break;  						case "decoration":  						case "fontdecoration":  							if (property.Value.Type == JTokenType.String)  							{  								FontDecoration tdecoration;  								if (Enum.TryParse(property.Value.ToString()' true' out tdecoration))  									decoration |= tdecoration;  							}  							else  							{  								foreach (var style in property.Value)  								{  									FontDecoration tdecoration;  									if (Enum.TryParse(style.ToString()' true' out tdecoration))  										decoration |= tdecoration;  								}  							}  							break;  					}
