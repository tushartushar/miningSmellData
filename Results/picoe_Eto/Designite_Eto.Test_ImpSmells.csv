Implementation smell,Namespace,Class,File,Method,Description
Long Method,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The method has 134 lines of code.
Long Method,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The method has 232 lines of code.
Long Method,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The method has 185 lines of code.
Long Method,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The method has 110 lines of code.
Long Method,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,LoadHtml,The method has 139 lines of code.
Long Method,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The method has 114 lines of code.
Long Method,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The method has 138 lines of code.
Complex Method,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,Cyclomatic complexity of the method is 11
Complex Method,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,CreateChild,Cyclomatic complexity of the method is 9
Complex Method,Eto.Test.Sections.Controls,ControlColorsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ControlColorsSection.cs,LogEvents,Cyclomatic complexity of the method is 8
Complex Method,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,SetOptions,Cyclomatic complexity of the method is 8
Complex Method,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,Cyclomatic complexity of the method is 10
Complex Method,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,Cyclomatic complexity of the method is 20
Complex Method,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,CreateControlContent,Cyclomatic complexity of the method is 8
Complex Method,Eto.Test.Sections,SingleTestFilter,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,Pass,Cyclomatic complexity of the method is 8
Complex Method,Eto.Test.Sections,KeywordFilter,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,Matches,Cyclomatic complexity of the method is 12
Complex Method,Eto.Test.Sections,UnitTestRunner,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,TestFinished,Cyclomatic complexity of the method is 10
Complex Method,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,ToTree,Cyclomatic complexity of the method is 12
Complex Method,Eto.Test.UnitTests.Forms,BaseDataObjectTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ClipboardTests.cs,TestValue,Cyclomatic complexity of the method is 8
Complex Method,Eto.Test.UnitTests,ControlTypeInfo<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,PopulateControl,Cyclomatic complexity of the method is 16
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Equals,The method has 7 parameters. Parameters: m' xx' yx' xy' yy' x0' y0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Append_Appends,The method has 18 parameters. Parameters: xx' yx' xy' yy' x0' y0' XX' YX' XY' YY' X0' Y0' Xx' Yx' Xy' Yy' a0' b0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Prepend_Prepends,The method has 18 parameters. Parameters: xx' yx' xy' yy' x0' y0' XX' YX' XY' YY' X0' Y0' Xx' Yx' Xy' Yy' a0' b0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Invert_Inverts,The method has 12 parameters. Parameters: xx' yx' xy' yy' x0' y0' XX' YX' XY' YY' X0' Y0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Rotate_Rotates,The method has 13 parameters. Parameters: degrees' xx' yx' xy' yy' x0' y0' XX' YX' XY' YY' X0' Y0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Scale_Scales,The method has 14 parameters. Parameters: sx' sy' xx' yx' xy' yy' x0' y0' XX' YX' XY' YY' X0' Y0
Long Parameter List,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_TransformPoint_TransformsPoint,The method has 10 parameters. Parameters: x' y' X' Y' xx' yx' xy' yy' x0' y0
Long Parameter List,Eto.Test.UnitTests.Forms,RangeTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\RangeTests.cs,TouchesShouldTouch,The method has 5 parameters. Parameters: s1' e1' s2' e2' touches
Long Parameter List,Eto.Test.UnitTests.Forms,RangeTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\RangeTests.cs,IntersectsShouldBeValid,The method has 5 parameters. Parameters: s1' e1' s2' e2' intersects
Long Parameter List,Eto.Test.UnitTests.Forms,RangeTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\RangeTests.cs,UnionShouldUnion,The method has 6 parameters. Parameters: s1' e1' s2' e2' s' e
Long Parameter List,Eto.Test.UnitTests.Forms,RangeTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\RangeTests.cs,UnionWithTouchShouldUnion,The method has 6 parameters. Parameters: s1' e1' s2' e2' s' e
Long Parameter List,Eto.Test.UnitTests.Forms,RangeTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\RangeTests.cs,IntersectShouldIntersect,The method has 6 parameters. Parameters: s1' e1' s2' e2' s' e
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The method has 5 parameters. Parameters: dropDown' item1' item2' item3' useIndex
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,TestSelectionAttributes,The method has 6 parameters. Parameters: richText' tag' italic' underline' bold' strikethrough
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,TextChangingShouldReturnCorrectResults,The method has 5 parameters. Parameters: oldText' newText' text' rangeStart' rangeLength
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,InsertingTextShouldFireTextChanging,The method has 5 parameters. Parameters: oldText' newText' text' rangeStart' rangeLength
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,OldAndNewTextShouldCalculateRangeAndText,The method has 5 parameters. Parameters: oldText' newText' text' rangeStart' rangeLength
Long Parameter List,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,OldAndRangeShouldCalculateNewText,The method has 5 parameters. Parameters: oldText' newText' text' rangeStart' rangeLength
Long Identifier,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The length of the parameter incorrectTableLayoutEnabledState is 32.
Long Identifier,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The length of the parameter initialStateMatchesInitiallyEnabled is 35.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem1.Click += (sender' e) => Log.Write(sender' "Click' {0}' Checked: {1}"' checkMenuItem1.Text' checkMenuItem1.Checked); " is 130.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem1.CheckedChanged += (sender' e) => Log.Write(sender' "CheckedChanged' {0}: {1}"' checkMenuItem1.Text' checkMenuItem1.Checked); " is 139.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem2.Click += (sender' e) => Log.Write(sender' "Click' {0}' Checked: {1}"' checkMenuItem2.Text' checkMenuItem2.Checked); " is 130.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem2.CheckedChanged += (sender' e) => Log.Write(sender' "CheckedChanged' {0}: {1}"' checkMenuItem2.Text' checkMenuItem2.Checked); " is 139.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem3.Executed += (sender' e) => Log.Write(sender' "Executed' {0}' Checked: {1}"' checkMenuItem3.MenuText' checkMenuItem3.Checked); " is 140.
Long Statement,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The length of the statement  "					checkMenuItem3.CheckedChanged += (sender' e) => Log.Write(sender' "CheckedChanged' {0}: {1}"' checkMenuItem3.MenuText' checkMenuItem3.Checked); " is 143.
Long Statement,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,WriteDragInfo,The length of the statement  "				sb.Append($"\n\tParent: {(treeGridInfo.Parent as TreeGridItem)?.Values[0]}' ChildIndex: {treeGridInfo.ChildIndex}' Item: {(treeGridInfo.Item as TreeGridItem)?.Values[0]}' Position: {treeGridInfo.Position}' InsertIndex: {treeGridInfo.InsertIndex}"); " is 248.
Long Statement,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,WriteDragInfo,The length of the statement  "				sb.Append($"\n\tItem: {(gridInfo.Item as GridItem)?.Values[0]}' Index: {gridInfo.Index}' Position: {gridInfo.Position}' InsertIndex: {gridInfo.InsertIndex}"); " is 158.
Long Statement,Eto.Test.Sections.Behaviors,KeyEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\KeyEventsSection.cs,LogKeyEvent,The length of the statement  "			Log.Write(sender' "{0}' Key: {1}' Char: {2}' Handled: {3}"' type' e.KeyData' e.IsChar ? e.KeyChar.ToString() : "no char"' e.Handled); " is 133.
Long Statement,Eto.Test.Sections.Behaviors,MouseEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\MouseEventsSection.cs,LogMouseEvent,The length of the statement  "			Log.Write(sender' $"{type}' Location: {e.Location}' Buttons: {e.Buttons}' Modifiers: {e.Modifiers}' Delta: {e.Delta}' Screen: {control?.PointToScreen(e.Location)}"); " is 165.
Long Statement,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,DisplayModeDropDown,The length of the statement  "			dialogDisplayModeDropDown.Bind(c => c.Enabled' typeRadio' Binding.Property((RadioButtonList t) => t.SelectedKey).ToBool("dialog")); " is 131.
Long Statement,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The length of the statement  "			layout.AddRow(new Label { Text = "With Default Size of 50x50:"' VerticalAlignment = VerticalAlignment.Center }' control' control2); " is 131.
Long Statement,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,ImageButton,The length of the statement  "            control.Bind(r => r.MinimumSize' Binding.Property(this' r => r.ClearMinimumSize).Convert(r => r ? Size.Empty : defaultMinimiumSize)); " is 133.
Long Statement,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The length of the statement  "					current.SelectedRange = (setValue.Value != null && toValue.Value != null) ? new Range<DateTime>(setValue.Value.Value' toValue.Value.Value) : current.SelectedRange; " is 163.
Long Statement,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,LogEvents,The length of the statement  "			control.SelectedDateChanged += (sender' e) => Log.Write(control' "SelectedDateChanged' Value: {0}"' control.SelectedDate); " is 122.
Long Statement,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,LogEvents,The length of the statement  "			control.SelectedRangeChanged += (sender' e) => Log.Write(control' "SelectedRangeChanged' Value: {0}"' control.SelectedRange); " is 125.
Long Statement,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,Default,The length of the statement  "			layout.AddRow(null' AddRowsButton(control)' RemoveRowsButton(control)' ClearButton(control)' OrientationDropDown(control)' TextColorControl(control)' null); " is 156.
Long Statement,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,LogEvents,The length of the statement  "			control.SelectedKeysChanged += (sender' e) => Log.Write(control' $"SelectedKeysChanged' Value: {string.Join("' "' control.SelectedKeys)}"); " is 139.
Long Statement,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,Default,The length of the statement  "			layout.AddSeparateRow(AddRowsButton(control)' RemoveRowsButton(control)' ClearButton(control)' SetSelected(control)' ClearSelected(control)' null); " is 147.
Long Statement,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,Default,The length of the statement  "			layout.AddSeparateRow(GetEnabled(control)' GetReadOnly(control)' AutoComplete(control)' ShowComboText(control)' SetComboText(control)' null); " is 141.
Long Statement,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,LogEvents,The length of the statement  "			control.SelectedIndexChanged += (sender' e) => Log.Write(control' "SelectedIndexChanged' Value: {0}"' control.SelectedIndex); " is 125.
Long Statement,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,LogEvents,The length of the statement  "			control.SelectedIndexChanged += (sender' e) => Log.Write(control' $"SelectedIndexChanged' Index: {control.SelectedIndex}"); " is 123.
Long Statement,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,LogEvents,The length of the statement  "			control.PageReordered += (sender' e) => Log.Write(control' $"PageReordered' Title: {e.Page.Text}' OldIndex: {e.OldIndex}' NewIndex: {e.NewIndex}"); " is 147.
Long Statement,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,Default,The length of the statement  "			layout.AddSeparateRow(AddRowsButton(control)' AddWithImagesCheckBox()' RemoveRowsButton(control)' ClearButton(control)' null); " is 126.
Long Statement,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,LogEvents,The length of the statement  "			control.SelectedIndexChanged += (sender' e) =>  Log.Write(control' "SelectedIndexChanged' Value: {0}"' control.SelectedIndex); " is 126.
Long Statement,Eto.Test.Sections.Controls,GridCellFormattingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridCellFormattingSection.cs,LogEvents,The length of the statement  "				// Log.Write (control' "Formatting Row: {1}' Column: {2}' Item: {0}"' e.Item' e.Row' control.Columns.IndexOf (e.Column)); " is 121.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.CellEditing += (sender' e) => Log.Write(control' $"BeginCellEdit' Row: {e.Row}' Column: {e.Column}' Item: {e.Item}' GridColumn: {e.GridColumn}' IsEditing: {control.IsEditing}"); " is 185.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.CellEdited += (sender' e) => Log.Write(control' $"EndCellEdit' Row: {e.Row}' Column: {e.Column}' Item: {e.Item}' GridColumn: {e.GridColumn}' IsEditing: {control.IsEditing}"); " is 182.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.SelectionChanged += (sender' e) => Log.Write(control' $"Selection Changed' Rows: {SelectedRowsString(control)}"); " is 121.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.CellClick += (sender' e) => Log.Write(control' $"Cell Clicked' Row: {e.Row}' Column: {e.Column}' Item: {e.Item}' GridColumn: {e.GridColumn}' IsEditing: {control.IsEditing}"); " is 182.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.CellDoubleClick += (sender' e) => Log.Write(control' $"Cell Double Clicked' Row: {e.Row}' Column: {e.Column}' Item: {e.Item}' GridColumn: {e.GridColumn}' IsEditing: {control.IsEditing}"); " is 195.
Long Statement,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,LogEvents,The length of the statement  "			control.MouseDoubleClick += (sender' e) => Log.Write(control' $"MouseDoubleClick' Buttons: {e.Buttons}' Location: {e.Location}"); " is 129.
Long Statement,Eto.Test.Sections.Controls,MyCustomCell,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,OnConfigureCell,The length of the statement  "				//Log.Write(this' "OnConfigureCell: Control: {0}' Row: {2}' CellState: {3}' Item: {1}"' control' args.Item' args.Row' args.CellState); " is 134.
Long Statement,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,ToString,The length of the statement  "				return string.Format("[MyGridItem: Row={0}' Check={1}' Text={2}' Image={3}' DropDownKey={4}' Color={5}' Progress={6}]"' Row' Check' Text' Image' DropDownKey' Color' Progress); " is 175.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,RadioButtons,The length of the statement  "			layout.AddRow(controller = new RadioButton { Text = "Radio 1"' Checked = true }' new RadioButton(controller) { Text = "Radio 2" }); " is 131.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The length of the statement  "			layout.AddSeparateRow(new TextBox { Text = "TextBox"' Size = new Size(150' -1) }' "PasswordBox"' new PasswordBox { Text = "PasswordBox"' Size = new Size(150' -1) }' null); " is 171.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The length of the statement  "			layout.AddSeparateRow("Stepper"' new Stepper()' "NumericStepper"' new NumericStepper { Value = 50' DecimalPlaces = 1 }' new TextStepper { Text = "TextStepper" }' null); " is 168.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The length of the statement  "			layout.AddSeparateRow(ListBox()' new GroupBox { Text = "GroupBox"' Content = new Label { Text = "I'm in a group box" } }' null); " is 128.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The length of the statement  "			layout.AddSeparateRow("ProgressBar"' new ProgressBar { Value = 25' Width = 100 }' "Spinner"' new Spinner { Enabled = true }' null); " is 131.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,GridView,The length of the statement  "			control.Columns.Add(new GridColumn { DataCell = new ComboBoxCell(3) { DataStore = ComboCellItems() }' HeaderText = "ComboBoxCell"' Editable = true }); " is 150.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeView,The length of the statement  "			control.Columns.Add(new GridColumn { DataCell = new CheckBoxCell(2)' HeaderText = "CheckBoxCell"' Editable = true' AutoSize = true }); " is 134.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeView,The length of the statement  "			control.Columns.Add(new GridColumn { DataCell = new ComboBoxCell(3) { DataStore = ComboCellItems() }' HeaderText = "ComboBoxCell"' Editable = true }); " is 150.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,WebView,The length of the statement  "				control.LoadHtml("<html><head><title>Hello</title></head><body><h1>WebView</h1><p>This is a web view loaded with a html string</p></body>"); " is 140.
Long Statement,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,WebView,The length of the statement  "					Log.Write(this' "You must install webkit-sharp for WebView to work under GTK. Note that GTK does not support webkit-sharp on any platform other than Linux."); " is 158.
Long Statement,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The length of the statement  "			const string text = "Lorem ipsum dolor sit amet' consectetur adipiscing elit' sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam' quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident' sunt in culpa qui officia deserunt mollit anim id est laborum."; " is 468.
Long Statement,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The length of the statement  "			testVerticalAlignment.CheckedChanged += (sender' e) => label.Size = new Size(-1' testVerticalAlignment.Checked == true ? 200 : -1); " is 131.
Long Statement,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The length of the statement  "					TableLayout.Horizontal(5' null' testVerticalAlignment' verticalAlignmentDropDown' "TextAlignment:"' textAlignmentDropDown' null)' " is 129.
Long Statement,Eto.Test.Sections.Controls,LinkButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LinkButtonSection.cs,DisabledButtonWithColor,The length of the statement  "			var control = new LinkButton { Text = "Disabled Button with color"' DisabledTextColor = Colors.Yellow' Enabled = false }; " is 121.
Long Statement,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,Default,The length of the statement  "			layout.AddRow(null' AddRowsButton(control)' RemoveRowsButton(control)' ClearButton(control)' OrientationDropDown(control)' TextColorControl(control)' null); " is 156.
Long Statement,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,LogEvents,The length of the statement  "			button.SelectedIndexesChanged += (sender' e) => Log.Write(sender' $"SelectedIndexesChanged: {string.Join("' "' button.SelectedIndexes.Select(r => r.ToString()))}"); " is 164.
Long Statement,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,LogEvents,The length of the statement  "			button.SelectedItemsChanged += (sender' e) => Log.Write(sender' $"SelectedItemsChanged: {string.Join("' "' button.SelectedItems.Select(ItemDesc))}"); " is 149.
Long Statement,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,LogEvents,The length of the statement  "			button.SelectedItemChanged += (sender' e) => Log.Write(sender' $"SelectedItemChanged: {ItemDesc(button.SelectedItem)}"); " is 120.
Long Statement,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The length of the statement  "						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }' " is 149.
Long Statement,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The length of the statement  "						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } } " is 149.
Long Statement,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The length of the statement  "							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } }; " is 183.
Long Statement,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The length of the statement  "							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } }; " is 184.
Long Statement,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,Default,The length of the statement  "			var text = new TextArea { Text = "Lorem ipsum dolor sit amet' consectetur adipiscing elit' sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam' quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident' sunt in culpa qui officia deserunt mollit anim id est laborum." }; " is 483.
Long Statement,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,LogEvents,The length of the statement  "			control.CaretIndexChanged += (sender' e) => Log.Write(control' "CaretIndexChanged' CaretIndex: {0}"' control.CaretIndex); " is 121.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,HoverNodeLabel,The length of the statement  "					hoverNodeLabel.Text = $"Item under mouse: {((TreeGridItem)cell.Item)?.Values[1] ?? "(no item)"}' Column: {cell.Column?.HeaderText ?? "(no column)"}"; " is 149.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The length of the statement  "			control.Columns.Add(new GridColumn { DataCell = new ImageTextCell(0' 1)' HeaderText = "Image and Text"' AutoSize = true' Resizable = true' Editable = true }); " is 158.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The length of the statement  "			control.Columns.Add(new GridColumn { DataCell = new TextBoxCell(2)' HeaderText = "Text"' AutoSize = true' Width = 150' Resizable = true' Editable = true }); " is 156.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' "\t Items: {0}"' string.Join("' "' control.SelectedItems.OfType<TreeGridItem>().Select(r => GetDescription(r)))); " is 132.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' "SelectedItemChanged' Item: {0}"' control.SelectedItem != null ? GetDescription(control.SelectedItem) : "<none selected>"); " is 142.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' "CellDoubleClick' Row: {0}' Column: {1}' Item: {2}' ColInfo: {3}"' e.Row' e.Column' e.Item' e.GridColumn); " is 125.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' $"MouseDown' Cell Column: {cell.Column?.HeaderText}' Item: {GetDescription(cell.Item as ITreeGridItem)}"); " is 125.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' $"MouseUp' Cell Column: {cell.Column?.HeaderText}' Item: {GetDescription(cell.Item as ITreeGridItem)}"); " is 123.
Long Statement,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' $"MouseDoubleClick' Cell Column: {cell.Column?.HeaderText}' Item: {GetDescription(cell.Item as ITreeGridItem)}"); " is 132.
Long Statement,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,LogEvents,The length of the statement  "				Log.Write(control' "SelectionChanged' Item: {0}"' control.SelectedItem != null ? control.SelectedItem.Text : "<none selected>"); " is 128.
Long Statement,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,WebView,The length of the statement  "					Log.Write(this' "You must install webkit-sharp for WebView to work under GTK. Note that GTK does not support webkit-sharp on any platform other than Linux."); " is 158.
Long Statement,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,LoadHtml,The length of the statement  "			<button onclick=""appendResult('inputResult'' prompt('Enter some text'' 'some default text')); return false;"">Show Prompt</button> " is 131.
Long Statement,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,LoadHtml,The length of the statement  "			<button onclick=""window.open('http://www.example.com'' 'name_of_new_window'); return false;"">Open named window</button> " is 121.
Long Statement,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,OpenFile,The length of the statement  "					Log.Write(dialog' "Result: {0}' FileName: {1}\nFiles: {2}"' result' dialog.FileName' string.Join("' "' dialog.Filenames)); " is 122.
Long Statement,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,OpenFileWithFilters,The length of the statement  "					Log.Write(dialog' "Result: {0}' CurrentFilter: {1}' FileName: {2}\nFiles: {3}"' result' dialog.CurrentFilter' dialog.FileName' string.Join("' "' dialog.Filenames)); " is 164.
Long Statement,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontList,The length of the statement  "			fontList.Items.AddRange(lookup.Values.OrderBy(r => r.Name).Select(r => new ListItem { Text = getName(r)' Key = r.Name }).OfType<IListItem>()); " is 142.
Long Statement,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,UpdatePreview,The length of the statement  "				fontStyles.Items.AddRange(family.Typefaces.Select(r => new ListItem { Text = getFaceName(r)' Key = r.Name }).OfType<IListItem>()); " is 130.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,CaptionBox,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' string>(this' r => r.MessageBoxCaption' (r' val) => r.MessageBoxCaption = val); " is 132.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,TitleBox,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' string>(this' r => r.MessageBoxText' (r' val) => r.MessageBoxText = val); " is 126.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxTypeCombo,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' MessageBoxType>(this' r => r.MessageBoxType' (r' val) => r.MessageBoxType = val); " is 134.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxButtonsCombo,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' MessageBoxButtons>(this' r => r.MessageBoxButtons' (r' val) => r.MessageBoxButtons = val); " is 143.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxDefaultButtonCombo,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' MessageBoxDefaultButton>(this' r => r.MessageBoxDefaultButton' (r' val) => r.MessageBoxDefaultButton = val); " is 161.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,AttachToParentCheckBox,The length of the statement  "			var binding = new BindableBinding<MessageBoxSection' bool?>(this' r => r.AttachToParent' (r' val) => r.AttachToParent = val ?? false); " is 134.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,ShowDialogButton,The length of the statement  "					result = MessageBox.Show(this' text: MessageBoxText' caption: caption' type: MessageBoxType' buttons: MessageBoxButtons' defaultButton: MessageBoxDefaultButton); " is 161.
Long Statement,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,ShowDialogButton,The length of the statement  "					result = MessageBox.Show(text: MessageBoxText' caption: caption' type: MessageBoxType' buttons: MessageBoxButtons' defaultButton: MessageBoxDefaultButton); " is 155.
Long Statement,Eto.Test.Sections.Drawing,DrawLoopSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,SetMode,The length of the statement  "					content.Content = new Label { Text = "This platform does not support Drawable.CreateGraphics"' TextColor = Colors.White' VerticalAlignment = VerticalAlignment.Center' TextAlignment = TextAlignment.Center }; " is 206.
Long Statement,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The length of the statement  "			graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101)); " is 177.
Long Statement,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The length of the statement  "			graphics.DrawText(Fonts.Sans(12 * graphics.PointsPerPixel)' Colors.White' 0' 104' "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"); " is 148.
Long Statement,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The length of the statement  "			graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120)); " is 123.
Long Statement,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The length of the statement  "			m.Prepend(Matrix.Create(1' (float)Math.Tan(Math.PI * t.SkewAngleY / 180.0)' (float)Math.Tan(Math.PI * t.SkewAngleX / 180.0)' 1' 0' 0)); " is 135.
Long Statement,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The length of the statement  "			yield return ControlType.Create<Label>(set: (c'v) => c.Text = v' getTextColor: c => c.TextColor' setTextColor: (c' v) => c.TextColor = v); " is 138.
Long Statement,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The length of the statement  "			yield return ControlType.Create<TextBox>(set: (c' v) => c.Text = v' getTextColor: c => c.TextColor' setTextColor: (c' v) => c.TextColor = v); " is 141.
Long Statement,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The length of the statement  "			yield return ControlType.Create<TextArea>(set: (c' v) => c.Text = v' getTextColor: c => c.TextColor' setTextColor: (c' v) => c.TextColor = v); " is 142.
Long Statement,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The length of the statement  "			yield return ControlType.Create<LinkButton>(set: (c' v) => c.Text = v' getTextColor: c => c.TextColor' setTextColor: (c' v) => c.TextColor = v); " is 144.
Long Statement,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MiddleSection,The length of the statement  "			middleTable.Add(new Label { Text = "Content"' BackgroundColor = Colors.LightGrey' TextAlignment = TextAlignment.Center' VerticalAlignment = VerticalAlignment.Center }' 0' 1' true' true); " is 186.
Long Statement,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The length of the statement  "			var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) }; " is 125.
Long Statement,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The length of the statement  "			var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) }; " is 125.
Long Statement,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The length of the statement  "				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text); " is 135.
Long Statement,Eto.Test.Sections,UnitTestRunner,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,GetCategories,The length of the statement  "			return GetTests().SelectMany(TestHelpers.GetChildren).Where(filter.Pass).SelectMany(TestHelpers.GetCategories).Distinct(); " is 122.
Long Statement,Eto.Test.Sections,UnitTestRunner,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,TestNextAssembly,The length of the statement  "					WriteLog($"\tPassed: {allresults.PassCount}' Failed: {allresults.FailCount}' Skipped: {allresults.SkipCount}' Inconclusive: {allresults.InconclusiveCount}' Warnings: {allresults.WarningCount}"); " is 194.
Long Statement,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,ValidateImages,The length of the statement  "									Assert.Fail("Image pixels are not the same at position {0}'{1} (source: {2}' clone: {3})"' x' y' imagePixel' clonePixel); " is 121.
Long Statement,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,ValidateImages,The length of the statement  "								Assert.Fail("Image pixels are not the same at position {0}'{1} (source: {2}' clone: {3})"' x' y' imagePixel' clonePixel); " is 121.
Long Statement,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The length of the statement  "			await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15))); " is 127.
Long Statement,Eto.Test.UnitTests.Drawing,ClipTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\ClipTests.cs,ClipBoundsShouldMatchClientSize,The length of the statement  "				Assert.AreEqual(Size.Round(drawable.ClientSize)' Size.Round(graphics.ClipBounds.Size)' "Clip bounds should match drawable client size"); " is 136.
Long Statement,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The length of the statement  "			yield return PropertyTest(() => new Eto.Drawing.LinearGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(10' 10))' r => r.Wrap); " is 144.
Long Statement,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The length of the statement  "			yield return PropertyTest(() => new Eto.Drawing.RadialGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(1' 1)' new SizeF(10' 10))' r => r.Wrap); " is 161.
Long Statement,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The length of the statement  "			Assert.AreEqual(expectedScales.Length' icon.Frames.Count()' "#2 - Should be a representation for each image with @<scale>"); " is 124.
Long Statement,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The length of the statement  "			CollectionAssert.AreEqual(expectedScales' icon.Frames.Select(r => r.Scale).OrderBy(r => r)' "#3 - scales weren't loaded"); " is 122.
Long Statement,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The length of the statement  "			ManualForm("You should be able to toggle the radio buttons between enabled and disabled.\nChange the check box twice and verify the result."' " is 141.
Long Statement,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The length of the statement  "			Assert.AreEqual(0' incorrectTableLayoutEnabledState' "#2.1 - internal TableLayout did not have the correct enabled state"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The length of the statement  "						"Modal 2\nWait until Modal 1 closes' then try to close this window.\nThis window should also resize and adjust the label correctly"' " is 132.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(filtered[filterInsertIndex].Id' 21' "#1 Item should NOT be inserted at the specified index' since it is an even number"); " is 137.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(model.IndexOf(filtered[filterInsertIndex]) - 1' model.IndexOf(item)' "#3 Item should be inserted right before item at filter location"); " is 152.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(filtered[filterInsertIndex].Id' 1001' "#4 Item with odd number should be inserted at the specified index"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(filtered.IndexOf(item)' filterInsertIndex' "#5 Item should be in the filtered list at the insert location"); " is 124.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(model.IndexOf(filtered[filterInsertIndex + 1]) - 1' model.IndexOf(item)' "#6 Item should be inserted right before item at filter location"); " is 156.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(filtered[filterInsertIndex].Id' 1001' "#7 Item with odd number should be inserted at the specified index"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(filtered.IndexOf(item)' filterInsertIndex' "#8 Item should be in the filtered list at the insert location"); " is 124.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The length of the statement  "			Assert.AreEqual(model.IndexOf(filtered[filterInsertIndex + 1]) - 1' model.IndexOf(item)' "#9 Item should be inserted right before item at filter location"); " is 156.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The length of the statement  "			Assert.IsNull(changeArgs' "#1-2 Inserting an item that doesn't match the filter shouldn't raise a change notification"); " is 120.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The length of the statement  "			Assert.AreEqual(NotifyCollectionChangedAction.Add' changeArgs.Action' "#3-2 Item should have triggered an add notification"); " is 125.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The length of the statement  "			Assert.AreEqual(NotifyCollectionChangedAction.Remove' changeArgs.Action' "#3-2 Item should have triggered a remove notification"); " is 130.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The length of the statement  "			Assert.AreEqual(NotifyCollectionChangedAction.Reset' changeArgs.Action' "#4 Changing filter should send a reset notification"); " is 127.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The length of the statement  "			Assert.IsNull(changeArgs' "#1-2 Inserting an item that doesn't match the filter shouldn't raise a change notification"); " is 120.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The length of the statement  "			Assert.AreEqual(NotifyCollectionChangedAction.Add' changeArgs.Action' "#3-2 Item should have triggered an add notification"); " is 125.
Long Statement,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,ResetShouldAddCurrentItemsToFilteredList,The length of the statement  "			Assert.AreEqual(20' filterCollection.Count' "FilterCollection.Count should be equal to 20 after adding more items in bulk"); " is 124.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ButtonTests.cs,ButtonShouldAlignWithTextBox,The length of the statement  "						new TableRow(new TableCell(new TextBox { Text = "TextBox"}' true)' new TableCell(new Button { Text = "Button 1"}' true))' " is 121.
Long Statement,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,ModeShouldUpdateDateWhenChangingFromRangeToSingle,The length of the statement  "				Assert.AreEqual(initialRange.End' calendar.SelectedRange.End' "SelectedRange.End should be the original end date when changing back to range mode"); " is 148.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ComboBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ComboBoxTests.cs,TextNotMatchingItemsShouldNotHaveSelectedItem,The length of the statement  "				Assert.AreEqual(0' selectedIndexChanged' "Setting text to something not in list should not fire SelectedIndexChanged event"); " is 125.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ComboBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ComboBoxTests.cs,TextNotMatchingItemsShouldNotHaveSelectedItem,The length of the statement  "				Assert.AreEqual(1' selectedIndexChanged' "Setting text to an item in the list should fire a SelectedIndexChanged event"); " is 121.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The length of the statement  "				ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form => " is 146.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items"); " is 129.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match"); " is 147.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed"); " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The length of the statement  "				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The length of the statement  "				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire when changing the Filter which removes items"); " is 125.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected"); " is 127.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected"); " is 129.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items"); " is 129.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match"); " is 147.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed"); " is 135.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed"); " is 137.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The length of the statement  "				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The length of the statement  "				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items"); " is 134.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items"); " is 129.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match"); " is 147.
Long Statement,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The length of the statement  "				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed"); " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The length of the statement  "			yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32)); " is 133.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The length of the statement  "			yield return new ImageSizeTestCase(() => image()' () => image().Size' () => image().WithSize(32' 32)' () => new Size(32' 32)); " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The length of the statement  "				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value"); " is 149.
Long Statement,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The length of the statement  "				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater"); " is 152.
Long Statement,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The length of the statement  "				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater"); " is 152.
Long Statement,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The length of the statement  "						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times."); " is 131.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "			yield return new FontVariantInfo { FamilyName = "Arial"' FontNameSuffix = arialBaseName' WithBold = true' WithItalic = true }; " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "				yield return new FontVariantInfo { FamilyName = "Helvetica Neue"' RtfFontName = "HelveticaNeue-UltraLight"' FaceName = "UltraLight" }; " is 134.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "			yield return new FontVariantInfo { FamilyName = "Klavika"' WithBold = true' WithItalic = true' RtfFontName = "Klavika Bd" }; " is 124.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "			yield return new FontVariantInfo { FamilyName = "Klavika"' FaceName = "Bold"' WithItalic = true' RtfFontName = "Klavika Bd" }; " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "			yield return new FontVariantInfo { FamilyName = "Klavika"' FaceName = "Light"' WithItalic = true' RtfFontName = "Klavika Lt" }; " is 127.
Long Statement,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,GetFontVariants,The length of the statement  "			yield return new FontVariantInfo { FamilyName = "Klavika"' FaceName = "Medium"' WithItalic = true' RtfFontName = "Klavika Md" }; " is 128.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The length of the statement  "				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."' " is 257.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The length of the statement  "				container.AddRow(new TableRow(new Label { Text = text' Wrap = WrapMode.Word' Font = SystemFonts.Label(SystemFonts.Default().Size - 2.0f) })); " is 141.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The length of the statement  "			DropDown CreateAndAddDropDownRow(DynamicLayout container' string text' List<string> options' int position' Action<DropDown' EventArgs> command) " is 143.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The length of the statement  "					CreateAndAddDescriptionRow(container' "Lorem ipsum dolor sit amet' consectetur adipiscing elit. Cras suscipit malesuada ex' ut iaculis nisl. Donec eros est' rutrum ac molestie vitae' euismod mollis enim. Integer eget turpis sit amet nulla laoreet dapibus. Curabitur sit amet nulla sed erat rutrum gravida. Donec vel erat ex. Aenean sit amet massa at ante suscipit fringilla. Sed bibendum tempor sem et congue. Maecenas diam neque' dictum id ligula eget' vulputate ornare massa. Integer lobortis dolor risus' a eleifend ante feugiat ac. Aenean egestas bibendum fermentum. In ac elit vitae augue convallis blandit eu eget ligula."); " is 630.
Long Statement,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The length of the statement  "					CreateAndAddDescriptionRow(container' "Vestibulum dignissim in ipsum sed condimentum. Etiam vitae ullamcorper dui. Pellentesque non imperdiet lacus. Maecenas ullamcorper sapien enim' sit amet commodo mauris scelerisque non. Nullam facilisis ipsum laoreet' gravida eros in' egestas odio. Morbi id ex vitae dui viverra ornare et vel metus. Phasellus lobortis finibus ex. Nulla tristique malesuada eros eget maximus. Donec a nisi facilisis sapien porta mattis. Curabitur sodales' magna sit amet aliquet commodo' eros quam congue felis' sit amet dictum orci neque nec risus. Aenean id auctor tellus. Etiam ac imperdiet nunc. Aliquam suscipit quam nec velit sollicitudin' posuere tempor ante vehicula. Suspendisse vitae massa tempus' maximus urna vitae' bibendum arcu."); " is 766.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectedIndexOverrideShouldTriggerEvent,The length of the statement  "			var control = new SegmentedButtonSubclass { Items = { "Item1"' "Item2"' "Item3" }' SelectionMode = SegmentedSelectionMode.Single }; " is 131.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The length of the statement  "						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes. " is 140.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The length of the statement  "						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes. " is 137.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The length of the statement  "					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}"); " is 174.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The length of the statement  "					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth); " is 120.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The length of the statement  "					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient); " is 147.
Long Statement,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The length of the statement  "					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth); " is 120.
Long Statement,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,InitialValueOfSelectedTextShouldBeEmptyInsteadOfNull,The length of the statement  "				Assert.AreEqual(string.Empty' textArea.SelectedText' "SelectedText should *still* be empty not null after setting text"); " is 121.
Long Statement,Eto.Test.UnitTests.Forms.Layout,DynamicLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\DynamicLayoutTests.cs,AddingItemShouldSetChildrenAndParent,The length of the statement  "				Assert.AreSame(layout.FindChild<Label>("label")' items[0]' "#3. FindChild should work without loading the dynamic layout"); " is 123.
Long Statement,Eto.Test.UnitTests.Forms.Layout,DynamicLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\DynamicLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The length of the statement  "				Assert.IsNull(items[1].Parent' "#4. Item should have parent cleared when replaced with another item in the dynamic layout"); " is 124.
Long Statement,Eto.Test.UnitTests.Forms.Layout,DynamicLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\DynamicLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The length of the statement  "				Assert.AreEqual(layout' items[2].Parent' "#5. Item should not have changed parent as it is still in the dynamic layout"); " is 121.
Long Statement,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The length of the statement  "			ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form => " is 142.
Long Statement,Eto.Test.UnitTests.Forms.Layout,StackLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\StackLayoutTests.cs,AddingItemShouldSetChildrenAndParent,The length of the statement  "				Assert.AreSame(stackLayout.FindChild<Label>("label")' items[0]' "#3. FindChild should work without loading the stack layout"); " is 126.
Long Statement,Eto.Test.UnitTests.Forms.Layout,StackLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\StackLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The length of the statement  "				Assert.IsNull(items[1].Parent' "#4. Item should have parent cleared when replaced with another item in the stack layout"); " is 122.
Long Statement,Eto.Test.UnitTests.Forms.Layout,StackLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\StackLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The length of the statement  "				Assert.AreEqual(stackLayout' items[2].Parent' "#5. Item should not have changed parent as it is still in the stack layout"); " is 124.
Long Statement,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The length of the statement  "						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }' " is 155.
Long Statement,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The length of the statement  "			ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form => " is 120.
Long Statement,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The length of the statement  "							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }' " is 131.
Long Statement,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Initialize,The length of the statement  "					var setting = doc != null ? doc.Root.Element("appSettings").Elements("add").FirstOrDefault(r => r.Attribute("key").Value == "generator") : null; " is 144.
Long Statement,Eto.Test.UnitTests,PropertyTestInfo,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Run,The length of the statement  "					var defaultValue = defValAttr != null ? defValAttr.Value : propertyInfo.PropertyType.GetTypeInfo().IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null; " is 172.
Long Statement,Eto.Test.UnitTests,PropertyTestInfo,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Run,The length of the statement  "					Assert.AreEqual(defaultValue' val' string.Format("Property '{0}' of type '{1}' is expected to be '{2}'"' propertyName' Type.Name' defaultValue)); " is 145.
Long Statement,Eto.Test.UnitTests,ControlTypeInfo<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,PopulateControl,The length of the statement  "					tabControl.Pages.Add(new TabPage { Text = "Tab 1"' Content = new Panel { Size = new Size(100' 100)' Content = "Hello" }  }); " is 124.
Long Statement,Eto.Test.UnitTests,ControlTypeInfo<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,PopulateControl,The length of the statement  "					documentControl.Pages.Add(new DocumentPage { Text = "Tab 1"' Content = new Panel { Size = new Size(100' 100)' Content = "Hello" } }); " is 133.
Complex Conditional,Eto.Test.Sections,KeywordFilter,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,Matches,The conditional expression  "!inverse && j == 0 && kw.Length == 1 && kw[0] == '-'"  is complex.
Empty Catch Block,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,WriteData,The method has an empty catch block.
Empty Catch Block,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,ButtonShowDialog_Click,The method has an empty catch block.
Empty Catch Block,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Initialize,The method has an empty catch block.
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainForm,The following statement contains a magic number: MinimumSize = new Size(400' 400);
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainForm,The following statement contains a magic number: MinimumSize = new Size(400' 400);
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainForm,The following statement contains a magic number: ClientSize = new Size(900' 650);
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainForm,The following statement contains a magic number: ClientSize = new Size(900' 650);
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainContent,The following statement contains a magic number: var splitter = new Splitter  				{  					Position = 200'  					FixedPanel = SplitterFixedPanel.Panel1'  					Panel1 = SectionList.Control'  					Panel1MinimumSize = 150'  					Panel2MinimumSize = 300'  					// for now' don't show log in mobile  					Panel2 = Platform.IsMobile ? contentContainer : RightPane()  				};
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainContent,The following statement contains a magic number: var splitter = new Splitter  				{  					Position = 200'  					FixedPanel = SplitterFixedPanel.Panel1'  					Panel1 = SectionList.Control'  					Panel1MinimumSize = 150'  					Panel2MinimumSize = 300'  					// for now' don't show log in mobile  					Panel2 = Platform.IsMobile ? contentContainer : RightPane()  				};
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,MainContent,The following statement contains a magic number: var splitter = new Splitter  				{  					Position = 200'  					FixedPanel = SplitterFixedPanel.Panel1'  					Panel1 = SectionList.Control'  					Panel1MinimumSize = 150'  					Panel2MinimumSize = 300'  					// for now' don't show log in mobile  					Panel2 = Platform.IsMobile ? contentContainer : RightPane()  				};
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: var layout = new DynamicLayout { Size = new Size(100' 120)' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: var layout = new DynamicLayout { Size = new Size(100' 120)' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: var layout = new DynamicLayout { Size = new Size(100' 120)' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: var layout = new DynamicLayout { Size = new Size(100' 120)' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: layout.BeginVertical(new Padding(0' 5' 5' 0));
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,EventLogSection,The following statement contains a magic number: layout.BeginVertical(new Padding(0' 5' 5' 0));
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The following statement contains a magic number: var window = new ButtonMenuItem { Text = "&Window"' Order = 1000' Items = { windowCommand } };
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The following statement contains a magic number: i < 5
Magic Number,Eto.Test,MainForm,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\MainForm.cs,CreateMenuToolBar,The following statement contains a magic number: i < 2
Magic Number,Eto.Test,PointEntry,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\PointEntry.cs,PointEntry,The following statement contains a magic number: x = new NumericStepper { MinValue = -1' Value = -1' Width = 50 };
Magic Number,Eto.Test,PointEntry,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\PointEntry.cs,PointEntry,The following statement contains a magic number: y = new NumericStepper { MinValue = -1' Value = -1' Width = 50 };
Magic Number,Eto.Test,SectionListGridView,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\SectionList.cs,SectionListGridView,The following statement contains a magic number: gridView.Columns.Add(new GridColumn { HeaderText = "Name"' Width = 100' AutoSize = false' DataCell = new TextBoxCell { Binding = new DelegateBinding<MyItem' string>(r => r.Name) }' Sortable = true });
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,OnPreLoad,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,OnPreLoad,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,OnPreLoad,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,TableLayoutControl,The following statement contains a magic number: Func<Panel> createPanel = () => new Panel { Size = new Size(50' 20)' BackgroundColor = Colors.Green };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,TableLayoutControl,The following statement contains a magic number: Func<Panel> createPanel = () => new Panel { Size = new Size(50' 20)' BackgroundColor = Colors.Green };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,TableLayoutControl,The following statement contains a magic number: control.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,TableLayoutControl,The following statement contains a magic number: control.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,TableLayoutControl,The following statement contains a magic number: control.Padding = 10;
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,DrawableControl,The following statement contains a magic number: var control = new Drawable { Size = new Size(100' 30)' CanFocus = true };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,DrawableControl,The following statement contains a magic number: var control = new Drawable { Size = new Size(100' 30)' CanFocus = true };
Magic Number,Eto.Test.Sections.Behaviors,AllControlsBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\AllControlsBase.cs,DrawableControl,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				if (control.BackgroundColor.A <= 0)  					pe.Graphics.FillRectangle(Brushes.Blue' pe.ClipRectangle);  				var size = pe.Graphics.MeasureString(SystemFonts.Label()' "Drawable");  				pe.Graphics.DrawText(SystemFonts.Label()' Brushes.White' (PointF)((control.Size - size) / 2)' "Drawable");  			};
Magic Number,Eto.Test.Sections.Behaviors,BadgeLabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\BadgeLabelSection.cs,BadgeLabelSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,BadgeLabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\BadgeLabelSection.cs,BadgeLabelSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,BadgeLabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\BadgeLabelSection.cs,BadgeLabelSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,BadgeLabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\BadgeLabelSection.cs,SetBadgeLabel,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,BadgeLabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\BadgeLabelSection.cs,SetBadgeLabel,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,ClipboardSection,The following statement contains a magic number: Content = new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Spacing = 5'  				Items =  				{  					new StackLayout  					{   						Orientation = Orientation.Horizontal'   						Spacing = 5'  						Padding = new Padding(10)'  						Items = { copyTextButton' copyHtmlButton' copyImageButton' pasteTextButton' clearButton }  					}'  					new StackLayoutItem(pasteData' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,ClipboardSection,The following statement contains a magic number: Content = new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Spacing = 5'  				Items =  				{  					new StackLayout  					{   						Orientation = Orientation.Horizontal'   						Spacing = 5'  						Padding = new Padding(10)'  						Items = { copyTextButton' copyHtmlButton' copyImageButton' pasteTextButton' clearButton }  					}'  					new StackLayoutItem(pasteData' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,ClipboardSection,The following statement contains a magic number: Content = new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Spacing = 5'  				Items =  				{  					new StackLayout  					{   						Orientation = Orientation.Horizontal'   						Spacing = 5'  						Padding = new Padding(10)'  						Items = { copyTextButton' copyHtmlButton' copyImageButton' pasteTextButton' clearButton }  					}'  					new StackLayoutItem(pasteData' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,Update,The following statement contains a magic number: var panel = new StackLayout { Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,ClipboardSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ClipboardSection.cs,Update,The following statement contains a magic number: panel.Items.Add(hexString.Substring(0' Math.Min(hexString.Length' 1000)));
Magic Number,Eto.Test.Sections.Behaviors,ContextMenuSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ContextMenuSection.cs,CreateContextMenuLabel,The following statement contains a magic number: var label = new Label  			{  				Size = new Size(100' 100)'  				BackgroundColor = Colors.Blue'  				TextColor = Colors.White'  				TextAlignment = TextAlignment.Center'  				Text = "Click on me!"  			};
Magic Number,Eto.Test.Sections.Behaviors,ContextMenuSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ContextMenuSection.cs,CreateContextMenuLabel,The following statement contains a magic number: var label = new Label  			{  				Size = new Size(100' 100)'  				BackgroundColor = Colors.Blue'  				TextColor = Colors.White'  				TextAlignment = TextAlignment.Center'  				Text = "Click on me!"  			};
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,GetCursors,The following statement contains a magic number: yield return ("Custom (.png)"' new Cursor(new Bitmap(TestIcons.Logo' 32' 32)' new PointF(16' 16)));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,GetCursors,The following statement contains a magic number: yield return ("Custom (.png)"' new Cursor(new Bitmap(TestIcons.Logo' 32' 32)' new PointF(16' 16)));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,GetCursors,The following statement contains a magic number: yield return ("Custom (.png)"' new Cursor(new Bitmap(TestIcons.Logo' 32' 32)' new PointF(16' 16)));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,GetCursors,The following statement contains a magic number: yield return ("Custom (.png)"' new Cursor(new Bitmap(TestIcons.Logo' 32' 32)' new PointF(16' 16)));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: layout.BeginCentered(spacing: new Size(10' 10)' yscale: true);
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: layout.BeginCentered(spacing: new Size(10' 10)' yscale: true);
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: var rect = new Rectangle(0' 0' 100' 50);
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: var rect = new Rectangle(0' 0' 100' 50);
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: layout.BeginVertical(spacing: new Size(20' 20));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: layout.BeginVertical(spacing: new Size(20' 20));
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: rect.X += rect.Width + 20;
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: var label = new Label  				{   					Size = new Size(100' 50)'   					Text = text'  					VerticalAlignment = VerticalAlignment.Center'  					TextAlignment = TextAlignment.Center'  					BackgroundColor = Colors.Silver  				};
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: var label = new Label  				{   					Size = new Size(100' 50)'   					Text = text'  					VerticalAlignment = VerticalAlignment.Center'  					TextAlignment = TextAlignment.Center'  					BackgroundColor = Colors.Silver  				};
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: rect.Y += rect.Height + 20;
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: count++ > 3
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: drawable.Size = new Size(340' rect.Y + rect.Height + 20);
Magic Number,Eto.Test.Sections.Behaviors,CursorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,CursorSection,The following statement contains a magic number: drawable.Size = new Size(340' rect.Y + rect.Height + 20);
Magic Number,Eto.Test.Sections.Behaviors,CursorDrawable,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\CursorSection.cs,OnPaint,The following statement contains a magic number: var textLocation = rect.Center - textSize / 2;
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: imageOffset = new PointEntry { Value = new Point(80' 80) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: imageOffset = new PointEntry { Value = new Point(80' 80) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var panelSource = new Panel { BackgroundColor = Colors.Red' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var panelSource = new Panel { BackgroundColor = Colors.Red' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var treeSource = new TreeGridView { Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var treeSource = new TreeGridView { Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var drawableDest = new Drawable { BackgroundColor = Colors.Blue' AllowDrop = true' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var drawableDest = new Drawable { BackgroundColor = Colors.Blue' AllowDrop = true' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var treeDest = new TreeGridView { AllowDrop = true' Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var treeDest = new TreeGridView { AllowDrop = true' Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: treeDest.DragOver += (sender' e) =>  			{  				var info = treeDest.GetDragInfo(e);  				if (info == null)  					return; // not supported    				switch (dragMode.SelectedKey)  				{  					case "over":  						info.RestrictToOver();  						break;  					case "insert":  						info.RestrictToInsert();  						break;  					case "node":  						info.RestrictToNode(treeDestData[2]);  						break;  					case "none":  						info.Item = info.Parent = null;  						break;  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: gridDest.DragOver += (sender' e) =>  			{  				var info = gridDest.GetDragInfo(e);  				if (info == null)  					return; // not supported    				switch (dragMode.SelectedKey)  				{  					case "over":  						info.RestrictToOver();  						break;  					case "insert":  						info.RestrictToInsert();  						break;  					case "node":  						info.Index = 2;  						info.Position = GridDragPosition.Over;  						break;  					case "none":  						info.Index = -1;  						break;  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(4' 4) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(4' 4) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(4' 4) };
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following statement contains a magic number: layout.BeginGroup("DataObject"' 10);
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DoDragDrop,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DoDragDrop,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DoDragDrop,The following statement contains a magic number: g.FillEllipse(Brushes.Blue' 0' 0' 100' 100);
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DoDragDrop,The following statement contains a magic number: g.FillEllipse(Brushes.Blue' 0' 0' 100' 100);
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,CreateTreeData,The following statement contains a magic number: level < 2 && (i % 4) != 0
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,CreateTreeData,The following statement contains a magic number: level < 2 && (i % 4) != 0
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,CreateTreeData,The following statement contains a magic number: i < 10
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,CreateGridData,The following statement contains a magic number: i < 100
Magic Number,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,WriteData,The following statement contains a magic number: var s = string.Join("'"' d.Select(r => r.ToString()).Take(1000));
Magic Number,Eto.Test.Sections.Behaviors,DynamicFocusSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicFocusSection.cs,DynamicFocusSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows = {  					new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { addContentButton' focusControlCheckBox } }'  					content  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DynamicFocusSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicFocusSection.cs,DynamicFocusSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows = {  					new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { addContentButton' focusControlCheckBox } }'  					content  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DynamicFocusSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicFocusSection.cs,DynamicFocusSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows = {  					new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { addContentButton' focusControlCheckBox } }'  					content  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DynamicFocusSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicFocusSection.cs,DynamicFocusSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows = {  					new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { addContentButton' focusControlCheckBox } }'  					content  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,DynamicMenuBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicMenuBarSection.cs,DynamicMenuBarSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,DynamicMenuBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DynamicMenuBarSection.cs,DynamicMenuBarSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,KeyEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\KeyEventsSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,KeyEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\KeyEventsSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,MouseEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\MouseEventsSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,MouseEventsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\MouseEventsSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,MousePositionSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\MousePositionSection.cs,MousePositionSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,MousePositionSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\MousePositionSection.cs,MousePositionSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Behaviors,NotificationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\NotificationSection.cs,NotificationSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = 10'  				Rows = {  					null'  					new TableRow(new Label { Text = "ID:"' VerticalAlignment = VerticalAlignment.Center }' entryId)'  					new TableRow(new Label { Text = "Title:"' VerticalAlignment = VerticalAlignment.Center }' entryTitle)'  					new TableRow(new Label { Text = "Message:"' VerticalAlignment = VerticalAlignment.Center }' entryMessage)'  					new TableRow(new Label { Text = "UserData:"' VerticalAlignment = VerticalAlignment.Center }' entryUserData)'  					new TableRow(new TableCell()' includeImageCheck)'  					new TableRow(new TableCell()' TableLayout.AutoSized(showNotificationButton))'  					null  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,NotificationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\NotificationSection.cs,NotificationSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = 10'  				Rows = {  					null'  					new TableRow(new Label { Text = "ID:"' VerticalAlignment = VerticalAlignment.Center }' entryId)'  					new TableRow(new Label { Text = "Title:"' VerticalAlignment = VerticalAlignment.Center }' entryTitle)'  					new TableRow(new Label { Text = "Message:"' VerticalAlignment = VerticalAlignment.Center }' entryMessage)'  					new TableRow(new Label { Text = "UserData:"' VerticalAlignment = VerticalAlignment.Center }' entryUserData)'  					new TableRow(new TableCell()' includeImageCheck)'  					new TableRow(new TableCell()' TableLayout.AutoSized(showNotificationButton))'  					null  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,NotificationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\NotificationSection.cs,NotificationSection,The following statement contains a magic number: Content = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = 10'  				Rows = {  					null'  					new TableRow(new Label { Text = "ID:"' VerticalAlignment = VerticalAlignment.Center }' entryId)'  					new TableRow(new Label { Text = "Title:"' VerticalAlignment = VerticalAlignment.Center }' entryTitle)'  					new TableRow(new Label { Text = "Message:"' VerticalAlignment = VerticalAlignment.Center }' entryMessage)'  					new TableRow(new Label { Text = "UserData:"' VerticalAlignment = VerticalAlignment.Center }' entryUserData)'  					new TableRow(new TableCell()' includeImageCheck)'  					new TableRow(new TableCell()' TableLayout.AutoSized(showNotificationButton))'  					null  				}  			};
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenSection,The following statement contains a magic number: layout.BeginVertical(new Padding(10' 0));
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenLayout,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				var scaleSize = (SizeF)drawable.Size / displayBounds.Size;  				var scale = Math.Min(scaleSize.Width' scaleSize.Height);  				var offset = (drawable.Size - (displayBounds.Size * scale)) / 2;  				offset.Height -= displayBounds.Y * scale;  				offset.Width -= displayBounds.X * scale;  				offset = Size.Round(offset);  				foreach (var screen in screens)  				{  					var screenBounds = (screen.Bounds * scale) + offset;                      screenBounds.Size -= 1;                        pe.Graphics.FillRectangle(Colors.White' screenBounds);    					var workingArea = (screen.WorkingArea * scale) + offset;  					pe.Graphics.FillRectangle(Colors.Blue' workingArea);    					pe.Graphics.DrawRectangle(Colors.Black' screenBounds);  				}                    var windowBounds = ((RectangleF)ParentWindow.Bounds * scale) + offset;                  windowBounds.Size -= 1;                  pe.Graphics.FillRectangle(new Color(Colors.LightSkyBlue' 0.8f)' windowBounds);                  pe.Graphics.DrawRectangle(Colors.White' windowBounds);    				var mousePosition = Mouse.Position * scale + offset;  				var mouseRect = new RectangleF(mousePosition' SizeF.Empty);  				mouseRect.Inflate(2' 2);  				pe.Graphics.FillEllipse(Colors.Red' mouseRect);  			};
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenLayout,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				var scaleSize = (SizeF)drawable.Size / displayBounds.Size;  				var scale = Math.Min(scaleSize.Width' scaleSize.Height);  				var offset = (drawable.Size - (displayBounds.Size * scale)) / 2;  				offset.Height -= displayBounds.Y * scale;  				offset.Width -= displayBounds.X * scale;  				offset = Size.Round(offset);  				foreach (var screen in screens)  				{  					var screenBounds = (screen.Bounds * scale) + offset;                      screenBounds.Size -= 1;                        pe.Graphics.FillRectangle(Colors.White' screenBounds);    					var workingArea = (screen.WorkingArea * scale) + offset;  					pe.Graphics.FillRectangle(Colors.Blue' workingArea);    					pe.Graphics.DrawRectangle(Colors.Black' screenBounds);  				}                    var windowBounds = ((RectangleF)ParentWindow.Bounds * scale) + offset;                  windowBounds.Size -= 1;                  pe.Graphics.FillRectangle(new Color(Colors.LightSkyBlue' 0.8f)' windowBounds);                  pe.Graphics.DrawRectangle(Colors.White' windowBounds);    				var mousePosition = Mouse.Position * scale + offset;  				var mouseRect = new RectangleF(mousePosition' SizeF.Empty);  				mouseRect.Inflate(2' 2);  				pe.Graphics.FillEllipse(Colors.Red' mouseRect);  			};
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenLayout,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				var scaleSize = (SizeF)drawable.Size / displayBounds.Size;  				var scale = Math.Min(scaleSize.Width' scaleSize.Height);  				var offset = (drawable.Size - (displayBounds.Size * scale)) / 2;  				offset.Height -= displayBounds.Y * scale;  				offset.Width -= displayBounds.X * scale;  				offset = Size.Round(offset);  				foreach (var screen in screens)  				{  					var screenBounds = (screen.Bounds * scale) + offset;                      screenBounds.Size -= 1;                        pe.Graphics.FillRectangle(Colors.White' screenBounds);    					var workingArea = (screen.WorkingArea * scale) + offset;  					pe.Graphics.FillRectangle(Colors.Blue' workingArea);    					pe.Graphics.DrawRectangle(Colors.Black' screenBounds);  				}                    var windowBounds = ((RectangleF)ParentWindow.Bounds * scale) + offset;                  windowBounds.Size -= 1;                  pe.Graphics.FillRectangle(new Color(Colors.LightSkyBlue' 0.8f)' windowBounds);                  pe.Graphics.DrawRectangle(Colors.White' windowBounds);    				var mousePosition = Mouse.Position * scale + offset;  				var mouseRect = new RectangleF(mousePosition' SizeF.Empty);  				mouseRect.Inflate(2' 2);  				pe.Graphics.FillEllipse(Colors.Red' mouseRect);  			};
Magic Number,Eto.Test.Sections.Behaviors,ScreenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ScreenSection.cs,ScreenLayout,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				var scaleSize = (SizeF)drawable.Size / displayBounds.Size;  				var scale = Math.Min(scaleSize.Width' scaleSize.Height);  				var offset = (drawable.Size - (displayBounds.Size * scale)) / 2;  				offset.Height -= displayBounds.Y * scale;  				offset.Width -= displayBounds.X * scale;  				offset = Size.Round(offset);  				foreach (var screen in screens)  				{  					var screenBounds = (screen.Bounds * scale) + offset;                      screenBounds.Size -= 1;                        pe.Graphics.FillRectangle(Colors.White' screenBounds);    					var workingArea = (screen.WorkingArea * scale) + offset;  					pe.Graphics.FillRectangle(Colors.Blue' workingArea);    					pe.Graphics.DrawRectangle(Colors.Black' screenBounds);  				}                    var windowBounds = ((RectangleF)ParentWindow.Bounds * scale) + offset;                  windowBounds.Size -= 1;                  pe.Graphics.FillRectangle(new Color(Colors.LightSkyBlue' 0.8f)' windowBounds);                  pe.Graphics.DrawRectangle(Colors.White' windowBounds);    				var mousePosition = Mouse.Position * scale + offset;  				var mouseRect = new RectangleF(mousePosition' SizeF.Empty);  				mouseRect.Inflate(2' 2);  				pe.Graphics.FillEllipse(Colors.Red' mouseRect);  			};
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: var stack = new StackLayout { TabIndex = 2 };
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: stack.Items.Add(new TextBox { Text = "3"' TabIndex = 3 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: stack.Items.Add(new TextBox { Text = "2"' TabIndex = 2 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: stack.Items.Add(new TextBox { Text = "4"' TabIndex = 4 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: stack.Items.Add(new TextBox { Text = "5"' TabIndex = 5 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: table.Rows.Add(new TextBox { Text = "3"' TabIndex = 3 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: table.Rows.Add(new TextBox { Text = "2"' TabIndex = 2 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: table.Rows.Add(new TextBox { Text = "4"' TabIndex = 4 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: table.Rows.Add(new TextBox { Text = "5"' TabIndex = 5 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "3"' TabIndex = 3 }' 0' 0);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "2"' TabIndex = 2 }' 25' 25);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "2"' TabIndex = 2 }' 25' 25);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "2"' TabIndex = 2 }' 25' 25);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "4"' TabIndex = 4 }' 50' 50);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "4"' TabIndex = 4 }' 50' 50);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "4"' TabIndex = 4 }' 50' 50);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "5"' TabIndex = 5 }' 75' 75);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "5"' TabIndex = 5 }' 75' 75);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "5"' TabIndex = 5 }' 75' 75);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "1"' TabIndex = 1 }' 100' 100);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: pixel.Add(new TextBox { Text = "1"' TabIndex = 1 }' 100' 100);
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: var dynamic = new DynamicLayout { TabIndex = 3 };
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: dynamic.Add(new TextBox { Text = "3"' TabIndex = 3 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: dynamic.Add(new TextBox { Text = "2"' TabIndex = 2 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: dynamic.Add(new TextBox { Text = "4"' TabIndex = 4 });
Magic Number,Eto.Test.Sections.Behaviors,TabIndexSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\TabIndexSection.cs,TabIndexSection,The following statement contains a magic number: dynamic.Add(new TextBox { Text = "5"' TabIndex = 5 });
Magic Number,Eto.Test.Sections.Behaviors,ToolBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ToolBarSection.cs,ShowTestDialog,The following statement contains a magic number: var dlg = new Dialog  			{  				ClientSize = new Size(400' 300)'  				Resizable = true'  				ToolBar = toolBar  			};
Magic Number,Eto.Test.Sections.Behaviors,ToolBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\ToolBarSection.cs,ShowTestDialog,The following statement contains a magic number: var dlg = new Dialog  			{  				ClientSize = new Size(400' 300)'  				Resizable = true'  				ToolBar = toolBar  			};
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,WindowsSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,WindowsSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,WindowsSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,CreateChild,The following statement contains a magic number: child.Padding = 20;
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,TestChangeSizeButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				if (child != null)  					child.Size = new Size(500' 500);  			};
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,TestChangeSizeButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				if (child != null)  					child.Size = new Size(500' 500);  			};
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,TestChangeClientSizeButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				if (child != null)  					child.ClientSize = new Size(500' 500);  			};
Magic Number,Eto.Test.Sections.Behaviors,WindowsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\WindowsSection.cs,TestChangeClientSizeButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				if (child != null)  					child.ClientSize = new Size(500' 500);  			};
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,ButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,ButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,ButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The following statement contains a magic number: var control = new Button { Text = "B"' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The following statement contains a magic number: var control = new Button { Text = "B"' Size = new Size(50' 50) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The following statement contains a magic number: var control2 = new Button { Text = "Button With Text"' Size = new Size(-1' 50) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ButtonSection.cs,DefaultSizeButton,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The following statement contains a magic number: var toValueSection = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Visible = false'  				Spacing = 5'  				Items = { " to "' toValue }  			};
Magic Number,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The following statement contains a magic number: var layout = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows =   				{  					new TableRow("Min Value"' min)'  					new TableRow("Max Value"' max)'  					new TableRow("Mode"' modeSelect)'  					new TableRow("Set to value"'  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Spacing = 5'  							Items = { setValue' toValueSection' setButton }  						}  					)'  					new TableRow("Value"' TableLayout.AutoSized(current)' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The following statement contains a magic number: var layout = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows =   				{  					new TableRow("Min Value"' min)'  					new TableRow("Max Value"' max)'  					new TableRow("Mode"' modeSelect)'  					new TableRow("Set to value"'  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Spacing = 5'  							Items = { setValue' toValueSection' setButton }  						}  					)'  					new TableRow("Value"' TableLayout.AutoSized(current)' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The following statement contains a magic number: var layout = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows =   				{  					new TableRow("Min Value"' min)'  					new TableRow("Max Value"' max)'  					new TableRow("Mode"' modeSelect)'  					new TableRow("Set to value"'  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Spacing = 5'  							Items = { setValue' toValueSection' setButton }  						}  					)'  					new TableRow("Value"' TableLayout.AutoSized(current)' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,CalendarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CalendarSection.cs,TestProperties,The following statement contains a magic number: var layout = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Padding = new Padding(10)'  				Rows =   				{  					new TableRow("Min Value"' min)'  					new TableRow("Max Value"' max)'  					new TableRow("Mode"' modeSelect)'  					new TableRow("Set to value"'  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Spacing = 5'  							Items = { setValue' toValueSection' setButton }  						}  					)'  					new TableRow("Value"' TableLayout.AutoSized(current)' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,CheckBoxListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,CheckBoxListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,CheckBoxListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxListSection.cs,Items,The following statement contains a magic number: i < 5
Magic Number,Eto.Test.Sections.Controls,CheckBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxSection.cs,CheckBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxSection.cs,CheckBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxSection.cs,CheckBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,CheckBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxSection.cs,CheckBoxSection,The following statement contains a magic number: layout.Add(new CheckBox { Text = "With Larger Font"' Font = SystemFonts.Label(40) });
Magic Number,Eto.Test.Sections.Controls,CheckBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\CheckBoxSection.cs,CheckBoxSection,The following statement contains a magic number: layout.Add(new CheckBox { Text = "With Smaller Font"' Font = SystemFonts.Label(6) });
Magic Number,Eto.Test.Sections.Controls,ColorPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ColorPickerSection.cs,ColorPickerSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				Padding = 10'  				Items =   				{  					CreateAllowAlpha()'  					TableLayout.Horizontal(5' "Default"' Default())'  					TableLayout.Horizontal(5' "Initial Value"' InitialValue())  				}  			};
Magic Number,Eto.Test.Sections.Controls,ColorPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ColorPickerSection.cs,ColorPickerSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				Padding = 10'  				Items =   				{  					CreateAllowAlpha()'  					TableLayout.Horizontal(5' "Default"' Default())'  					TableLayout.Horizontal(5' "Initial Value"' InitialValue())  				}  			};
Magic Number,Eto.Test.Sections.Controls,ColorPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ColorPickerSection.cs,ColorPickerSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				Padding = 10'  				Items =   				{  					CreateAllowAlpha()'  					TableLayout.Horizontal(5' "Default"' Default())'  					TableLayout.Horizontal(5' "Initial Value"' InitialValue())  				}  			};
Magic Number,Eto.Test.Sections.Controls,ColorPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ColorPickerSection.cs,ColorPickerSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				Padding = 10'  				Items =   				{  					CreateAllowAlpha()'  					TableLayout.Horizontal(5' "Default"' Default())'  					TableLayout.Horizontal(5' "Initial Value"' InitialValue())  				}  			};
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,ComboBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,ComboBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,ComboBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += delegate  			{  				for (int i = 0; i < 10; i++)  					list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  			};
Magic Number,Eto.Test.Sections.Controls,ComboBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ComboBoxSection.cs,Items,The following statement contains a magic number: i < 20
Magic Number,Eto.Test.Sections.Controls,ControlColorsSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ControlColorsSection.cs,CreateOptions,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items = {  					null'  					new Label { Text = "Text"' VerticalAlignment = VerticalAlignment.Center }'  					foregroundPicker'  					new Label { Text = "Background"' VerticalAlignment = VerticalAlignment.Center }'  					backgroundPicker'  					new Label { Text = "Form"' VerticalAlignment = VerticalAlignment.Center }'  					formColorPicker'  					fontPicker'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DateTimePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DateTimePickerSection.cs,DateTimePickerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DateTimePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DateTimePickerSection.cs,DateTimePickerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DateTimePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DateTimePickerSection.cs,DateTimePickerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DateTimePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DateTimePickerSection.cs,TestProperties,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,DateTimePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DateTimePickerSection.cs,TestProperties,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,Create,The following statement contains a magic number: return new StackLayout  			{  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					new StackLayout  					{  						Orientation = Orientation.Horizontal'  						Items = { AddPage()' RemovePage()' SelectPage()' allowReorder' enabled' null }  					}'  					new StackLayoutItem(tabControl' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,AddPage,The following statement contains a magic number: control.Click += (s' e) =>  			{  				var tab = new DocumentPage  				{  					Text = "Tab " + (tabControl.Pages.Count + 1)'  					Content = tabControl.Pages.Count % 2 == 0 ? TabOne() : TabTwo()'  					Image = tabControl.Pages.Count % 3 == 0 ? TestIcons.Logo.WithSize(32' 32) : null  				};  				LogEvents(tab);    				tabControl.Pages.Add(tab);  			};
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,AddPage,The following statement contains a magic number: control.Click += (s' e) =>  			{  				var tab = new DocumentPage  				{  					Text = "Tab " + (tabControl.Pages.Count + 1)'  					Content = tabControl.Pages.Count % 2 == 0 ? TabOne() : TabTwo()'  					Image = tabControl.Pages.Count % 3 == 0 ? TestIcons.Logo.WithSize(32' 32) : null  				};  				LogEvents(tab);    				tabControl.Pages.Add(tab);  			};
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,AddPage,The following statement contains a magic number: control.Click += (s' e) =>  			{  				var tab = new DocumentPage  				{  					Text = "Tab " + (tabControl.Pages.Count + 1)'  					Content = tabControl.Pages.Count % 2 == 0 ? TabOne() : TabTwo()'  					Image = tabControl.Pages.Count % 3 == 0 ? TestIcons.Logo.WithSize(32' 32) : null  				};  				LogEvents(tab);    				tabControl.Pages.Add(tab);  			};
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,AddPage,The following statement contains a magic number: control.Click += (s' e) =>  			{  				var tab = new DocumentPage  				{  					Text = "Tab " + (tabControl.Pages.Count + 1)'  					Content = tabControl.Pages.Count % 2 == 0 ? TabOne() : TabTwo()'  					Image = tabControl.Pages.Count % 3 == 0 ? TestIcons.Logo.WithSize(32' 32) : null  				};  				LogEvents(tab);    				tabControl.Pages.Add(tab);  			};
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new DocumentPage  			{  				Text = "Tab 2"'  				Image = TestIcons.TestIcon.WithSize(16' 16)'  				Content = TabTwo()  			});
Magic Number,Eto.Test.Sections.Controls,DocumentControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DocumentControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new DocumentPage  			{  				Text = "Tab 2"'  				Image = TestIcons.TestIcon.WithSize(16' 16)'  				Content = TabTwo()  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,DrawableSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(10'10)'  				Rows =  				{  					TableLayout.HorizontalScaled(  						10'  						new TableLayout(  							"Default"'  							Default()  						)'  						new TableLayout(  							"With Background"'  							WithBackground()  						)  					)'    					new TableLayout(  						"Large Canvas"'  						// use a separate containing panel to test calculations in those cases  						new Panel { Content = LargeCanvas() }  					)'    					new TableRow(TableLayout.Horizontal(  						10'  						new TableLayout(  							"Nested"'  							Nested()  						)'  						new TableLayout(  							"Transparent"'  							Transparent()  						)'  						new TableLayout(  							"Tools"'  							TableLayout.Horizontal(  								Tools(1)' Tools(2)' Tools(0)  							)'  							Tools(3)'  							Tools(0)  						)  					))'    					(Platform.SupportedFeatures & PlatformFeatures.DrawableWithTransparentContent) == 0 ?  					new TableRow(  						"(Transparent content on drawable not supported on this platform)"  					) : null'    					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Default,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(50' 50)  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Default,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(50' 50)  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,WithBackground,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(50' 50)'  				BackgroundColor = Colors.Lime  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,WithBackground,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(50' 50)'  				BackgroundColor = Colors.Lime  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(1000' 1000)'  				BackgroundColor = Colors.Blue  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(1000' 1000)'  				BackgroundColor = Colors.Blue  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: control.Paint += delegate(object sender' PaintEventArgs pe)  			{  				pe.Graphics.FillRectangle(Brushes.Black' new Rectangle(150' 150' 100' 100));  				var whitePen = Pens.White;  				const int inc = 400;  				for (int i = 0; i <= control.Size.Width / inc; i++)  				{  					var pos = i * inc;  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos + control.Size.Width' control.Size.Height));  					pe.Graphics.DrawLine(whitePen' new Point(pos' 0)' new Point(pos - control.Size.Width' control.Size.Height));  				}  				const int lpos = 100;  				pe.Graphics.DrawLine(whitePen' new Point(0' lpos)' new Point(control.Size.Width' lpos));  				pe.Graphics.DrawLine(whitePen' new Point(lpos' 0)' new Point(lpos' control.Size.Height));  				pe.Graphics.DrawImage(image' 100' 10);  				pe.Graphics.DrawImage(image' 250' 10' 80' 20);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: layout.Add(control' 25' 25);
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: layout.Add(control' 25' 25);
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: return new Scrollable  			{  				Size = new Size(250' 250)'  				Content = layout  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,LargeCanvas,The following statement contains a magic number: return new Scrollable  			{  				Size = new Size(250' 250)'  				Content = layout  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Nested,The following statement contains a magic number: var control = new Drawable  			{  				BackgroundColor = Colors.Black'  				Padding = 10'  				Content = new Drawable  				{  					BackgroundColor = Colors.White'  					Padding = 10'  					Content = "Black Border"  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Nested,The following statement contains a magic number: var control = new Drawable  			{  				BackgroundColor = Colors.Black'  				Padding = 10'  				Content = new Drawable  				{  					BackgroundColor = Colors.White'  					Padding = 10'  					Content = "Black Border"  				}  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Transparent,The following statement contains a magic number: return new Drawable  			{  				BackgroundColor = Colors.White'  				Padding = 10'  				Content = new TableLayout(  					true'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(255' 0' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(255' 0' 0)'  										Size = new Size(10' 10)  									}  								)  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 255' 0' 128)'  							Content = new TableLayout(  								true'  								null'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 255' 0)'  										Size = new Size(10' 10)  									}'  									null  								)  							)  						}  					)'  					TableLayout.HorizontalScaled  					(  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 255' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									null'  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 255)'  										Size = new Size(10' 10)  									}  								)'  								null  							)  						}'  						new Drawable  						{  							BackgroundColor = Color.FromArgb(0' 0' 0' 128)'  							Content = new TableLayout(  								true'  								TableLayout.HorizontalScaled(  									new Panel  									{  										BackgroundColor = Color.FromArgb(0' 0' 0)'  										Size = new Size(10' 10)  									}'  									null  								)'  								null  							)'  						}  					)  				)  			}.With(it => it.Paint += (s'pe) =>  			{  				using (var p = new Pen(Colors.Black' 3f))  				{  					for(int i = 4' n = Math.Max(it.Width' it.Height); i < n; i += 8)  					{  						pe.Graphics.DrawLine(p' i' 0' i + n' n);  						pe.Graphics.DrawLine(p' 0' i' n' i + n);  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Tools,The following statement contains a magic number: var stack = new StackLayout  			{  				BackgroundColor = Colors.Transparent'  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Padding = 4'  				Spacing = 4'  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Tools,The following statement contains a magic number: var stack = new StackLayout  			{  				BackgroundColor = Colors.Transparent'  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Padding = 4'  				Spacing = 4'  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Tools,The following statement contains a magic number: control.Paint += (s' pe) =>  			{  				int w = control.Width;  				int h = control.Height;  				var c1 = Color.FromGrayscale(0.8f);  				var c2 = Color.FromGrayscale(0.6f);  				using (var b = new LinearGradientBrush(  					c1' c2' new PointF(1' 0)' new PointF(1' h)))  					pe.Graphics.FillRectangle(b' 1' 0' w-2' h);  				pe.Graphics.DrawLine(c1' 0' 0' 0' h);  				pe.Graphics.DrawLine(c2' w-1' 0' w-1' h);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Tools,The following statement contains a magic number: control.Paint += (s' pe) =>  			{  				int w = control.Width;  				int h = control.Height;  				var c1 = Color.FromGrayscale(0.8f);  				var c2 = Color.FromGrayscale(0.6f);  				using (var b = new LinearGradientBrush(  					c1' c2' new PointF(1' 0)' new PointF(1' h)))  					pe.Graphics.FillRectangle(b' 1' 0' w-2' h);  				pe.Graphics.DrawLine(c1' 0' 0' 0' h);  				pe.Graphics.DrawLine(c2' w-1' 0' w-1' h);  			};
Magic Number,Eto.Test.Sections.Controls,DrawableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DrawableSection.cs,Tools,The following statement contains a magic number: control.Paint += (s' pe) =>  			{  				int w = control.Width;  				int h = control.Height;  				var c1 = Color.FromGrayscale(0.8f);  				var c2 = Color.FromGrayscale(0.6f);  				using (var b = new LinearGradientBrush(  					c1' c2' new PointF(1' 0)' new PointF(1' h)))  					pe.Graphics.FillRectangle(b' 1' 0' w-2' h);  				pe.Graphics.DrawLine(c1' 0' 0' 0' h);  				pe.Graphics.DrawLine(c2' w-1' 0' w-1' h);  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,DropDownSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,DropDownSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,DropDownSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var image1 = TestIcons.Logo.WithSize(32' 32);  				var image2 = TestIcons.TestIcon.WithSize(16' 16);  				for (int i = 0; i < 10; i++)  				{  					if (AddWithImages)  						list.Items.Add(new ImageListItem { Text = "Item " + list.Items.Count' Image = i % 2 == 0 ? image1 : image2 });  					else  						list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  				}  			};
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,Items,The following statement contains a magic number: i < 20
Magic Number,Eto.Test.Sections.Controls,DropDownSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\DropDownSection.cs,EnumCombo,The following statement contains a magic number: control.Width = 100;
Magic Number,Eto.Test.Sections.Controls,ExpanderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ExpanderSection.cs,ExpanderSection,The following statement contains a magic number: var expander = new Expander  			{  				Header = "Test Header"'  				Content = new Panel {  Size = new Size(200' 200)' BackgroundColor = Colors.Blue }  			};
Magic Number,Eto.Test.Sections.Controls,ExpanderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ExpanderSection.cs,ExpanderSection,The following statement contains a magic number: var expander = new Expander  			{  				Header = "Test Header"'  				Content = new Panel {  Size = new Size(200' 200)' BackgroundColor = Colors.Blue }  			};
Magic Number,Eto.Test.Sections.Controls,ExpanderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ExpanderSection.cs,ExpanderSection,The following statement contains a magic number: var expander2 = new Expander  			{  				Header = new StackLayout  				{   					Orientation = Orientation.Horizontal'   					Items = { "Test Expanded with custom header"' new TextBox() }  				}'  				Expanded = true'  				Content = new Panel { Size = new Size(300' 200)' BackgroundColor = Colors.Blue }  			};
Magic Number,Eto.Test.Sections.Controls,ExpanderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ExpanderSection.cs,ExpanderSection,The following statement contains a magic number: var expander2 = new Expander  			{  				Header = new StackLayout  				{   					Orientation = Orientation.Horizontal'   					Items = { "Test Expanded with custom header"' new TextBox() }  				}'  				Expanded = true'  				Content = new Panel { Size = new Size(300' 200)' BackgroundColor = Colors.Blue }  			};
Magic Number,Eto.Test.Sections.Controls,ExpanderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ExpanderSection.cs,ExpanderSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = new Padding(10)'  				Items =  				{  					new StackLayout {  						Orientation = Orientation.Horizontal'  						Items = {  							expandedCheckBox'  							enabledCheckBox  						}  					}'  					expander'  					expander2  				}  			};
Magic Number,Eto.Test.Sections.Controls,FilePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FilePickerSection.cs,FilePickerSection,The following statement contains a magic number: layout.DefaultPadding = new Padding(10);
Magic Number,Eto.Test.Sections.Controls,FilePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FilePickerSection.cs,FilePickerSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,FilePickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FilePickerSection.cs,FilePickerSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,FontPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FontPickerSection.cs,FontPickerSection,The following statement contains a magic number: layout.DefaultPadding = new Padding(10);
Magic Number,Eto.Test.Sections.Controls,FontPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FontPickerSection.cs,FontPickerSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,FontPickerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\FontPickerSection.cs,FontPickerSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,GridCellFormattingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridCellFormattingSection.cs,LogEvents,The following statement contains a magic number: control.RowHeight = 36;
Magic Number,Eto.Test.Sections.Controls,GridCellFormattingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridCellFormattingSection.cs,LogEvents,The following statement contains a magic number: var font = Fonts.Serif(18' FontStyle.Italic);
Magic Number,Eto.Test.Sections.Controls,GridCellFormattingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridCellFormattingSection.cs,LogEvents,The following statement contains a magic number: control.CellFormatting += (sender' e) =>  			{  				// Log.Write (control' "Formatting Row: {1}' Column: {2}' Item: {0}"' e.Item' e.Row' control.Columns.IndexOf (e.Column));  				e.Font = font;  				e.BackgroundColor = e.Row % 2 == 0 ? Colors.Blue : Colors.LightBlue;  				e.ForegroundColor = e.Row % 2 == 0 ? Colors.Lime : Colors.Yellow;  			};
Magic Number,Eto.Test.Sections.Controls,GridCellFormattingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridCellFormattingSection.cs,LogEvents,The following statement contains a magic number: control.CellFormatting += (sender' e) =>  			{  				// Log.Write (control' "Formatting Row: {1}' Column: {2}' Item: {0}"' e.Item' e.Row' control.Columns.IndexOf (e.Column));  				e.Font = font;  				e.BackgroundColor = e.Row % 2 == 0 ? Colors.Blue : Colors.LightBlue;  				e.ForegroundColor = e.Row % 2 == 0 ? Colors.Lime : Colors.Yellow;  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,GridViewSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					new TableRow(  						"Grid"'  						new TableLayout(  							CreateOptions(gridView)'  							new TableRow(gridView) { ScaleHeight = true }'  							CreatePositionLabel(gridView)  						)  					) { ScaleHeight = true }'  					new TableRow("Selected Items"' selectionGridView)  				}  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,GridViewSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					new TableRow(  						"Grid"'  						new TableLayout(  							CreateOptions(gridView)'  							new TableRow(gridView) { ScaleHeight = true }'  							CreatePositionLabel(gridView)  						)  					) { ScaleHeight = true }'  					new TableRow("Selected Items"' selectionGridView)  				}  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,GridViewSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					new TableRow(  						"Grid"'  						new TableLayout(  							CreateOptions(gridView)'  							new TableRow(gridView) { ScaleHeight = true }'  							CreatePositionLabel(gridView)  						)  					) { ScaleHeight = true }'  					new TableRow("Selected Items"' selectionGridView)  				}  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateOptions,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,GridLinesDropDown,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items = { "GridLines"' control }  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateGrid,The following statement contains a magic number: var control = new GridView  			{  				Size = new Size(300' 100)  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateGrid,The following statement contains a magic number: var control = new GridView  			{  				Size = new Size(300' 100)  			};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateGrid,The following statement contains a magic number: drawableCell.Paint += (sender' e) =>  				{  					var m = e.Item as MyGridItem;  					if (m != null)  					{  						if (e.CellState.HasFlag(CellStates.Selected))  							e.Graphics.FillRectangle(Colors.Blue' e.ClipRectangle);  						else  							e.Graphics.FillRectangle(Brushes.Cached(m.Color)' e.ClipRectangle);  						var rect = e.ClipRectangle;  						rect.Inflate(-5' -5);    						var color = e.CellState.HasFlag(CellStates.Editing) ? Colors.Black : Colors.White;  						e.Graphics.DrawRectangle(color' rect);  						e.Graphics.DrawLine(color' rect.Left' rect.Bottom' rect.MiddleX' rect.Top);  						e.Graphics.DrawLine(color' rect.Right' rect.Bottom' rect.MiddleX' rect.Top);  					}  				};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateGrid,The following statement contains a magic number: drawableCell.Paint += (sender' e) =>  				{  					var m = e.Item as MyGridItem;  					if (m != null)  					{  						if (e.CellState.HasFlag(CellStates.Selected))  							e.Graphics.FillRectangle(Colors.Blue' e.ClipRectangle);  						else  							e.Graphics.FillRectangle(Brushes.Cached(m.Color)' e.ClipRectangle);  						var rect = e.ClipRectangle;  						rect.Inflate(-5' -5);    						var color = e.CellState.HasFlag(CellStates.Editing) ? Colors.Black : Colors.White;  						e.Graphics.DrawRectangle(color' rect);  						e.Graphics.DrawLine(color' rect.Left' rect.Bottom' rect.MiddleX' rect.Top);  						e.Graphics.DrawLine(color' rect.Right' rect.Bottom' rect.MiddleX' rect.Top);  					}  				};
Magic Number,Eto.Test.Sections.Controls,GridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,CreateBeginEditButton,The following statement contains a magic number: control.Click += (sender' e) => grid.BeginEdit(1' 2);
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: var val = row % 3;
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: val = row % 2;
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: val = row % 5;
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: val < 4
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: val = row % 12;
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: progress = (float)Math.Round(val / 10f' 1);
Magic Number,Eto.Test.Sections.Controls,MyGridItem,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GridViewSection.cs,MyGridItem,The following statement contains a magic number: val <= 10
Magic Number,Eto.Test.Sections.Controls,GroupBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GroupBoxSection.cs,GroupBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,GroupBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GroupBoxSection.cs,GroupBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,GroupBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\GroupBoxSection.cs,GroupBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,FixedSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,FixedSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,FixedSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,ScaledSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,ScaledSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,ScaledSize,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,LargeSize,The following statement contains a magic number: return new ImageView { Image = image' Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,LargeSize,The following statement contains a magic number: return new ImageView { Image = image' Size = new Size(200' 200) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,SmallSize,The following statement contains a magic number: return new ImageView { Image = image' Size = new Size(64' 64) };
Magic Number,Eto.Test.Sections.Controls,ImageViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ImageViewSection.cs,SmallSize,The following statement contains a magic number: return new ImageView { Image = image' Size = new Size(64' 64) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,Tabs,The following statement contains a magic number: control.Pages.Add(MainContent(new TabPage { Text = "Tab 1"' Image = icon1' Padding = new Padding(10) }));
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,MainContent,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,MainContent,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,RadioButtons,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,RadioButtons,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,ListBox,The following statement contains a magic number: var control = new ListBox { Size = new Size(150' 50) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,ListBox,The following statement contains a magic number: var control = new ListBox { Size = new Size(150' 50) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.Add(new ImageView { Image = icon1' Size = new Size(64' 64) });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.Add(new ImageView { Image = icon1' Size = new Size(64' 64) });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow(new TextBox { Text = "TextBox"' Size = new Size(150' -1) }' "PasswordBox"' new PasswordBox { Text = "PasswordBox"' Size = new Size(150' -1) }' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow(new TextBox { Text = "TextBox"' Size = new Size(150' -1) }' "PasswordBox"' new PasswordBox { Text = "PasswordBox"' Size = new Size(150' -1) }' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow("Stepper"' new Stepper()' "NumericStepper"' new NumericStepper { Value = 50' DecimalPlaces = 1 }' new TextStepper { Text = "TextStepper" }' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow(new TextArea { Text = "TextArea"' Size = new Size(150' 50) }' CreateRichTextArea()' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow(new TextArea { Text = "TextArea"' Size = new Size(150' 50) }' CreateRichTextArea()' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow("Slider"' new Slider { Value = 50' TickFrequency = 10 });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow("Slider"' new Slider { Value = 50' TickFrequency = 10 });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow("ProgressBar"' new ProgressBar { Value = 25' Width = 100 }' "Spinner"' new Spinner { Enabled = true }' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,LeftPane,The following statement contains a magic number: layout.AddSeparateRow("ProgressBar"' new ProgressBar { Value = 25' Width = 100 }' "Spinner"' new Spinner { Enabled = true }' null);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: var richTextArea = new RichTextArea { Text = "RichTextArea"' Size = new Size(150' 50) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: var richTextArea = new RichTextArea { Text = "RichTextArea"' Size = new Size(150' 50) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetBold(new Range<int>(0' 3)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetForeground(new Range<int>(0' 3)' Colors.Blue);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetItalic(new Range<int>(4' 7)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetItalic(new Range<int>(4' 7)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetStrikethrough(new Range<int>(4' 7)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetStrikethrough(new Range<int>(4' 7)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetForeground(new Range<int>(4' 7)' Colors.Green);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetForeground(new Range<int>(4' 7)' Colors.Green);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetUnderline(new Range<int>(8' 11)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetUnderline(new Range<int>(8' 11)' true);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetForeground(new Range<int>(8' 11)' Colors.Red);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,CreateRichTextArea,The following statement contains a magic number: richTextArea.Buffer.SetForeground(new Range<int>(8' 11)' Colors.Red);
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,GridView,The following statement contains a magic number: var control = new GridView { Size = new Size(-1' 150) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,GridView,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new TextBoxCell(2)' HeaderText = "TextBoxCell"' Editable = true });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,GridView,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new ComboBoxCell(3) { DataStore = ComboCellItems() }' HeaderText = "ComboBoxCell"' Editable = true });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeChildren,The following statement contains a magic number: level > 4
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeChildren,The following statement contains a magic number: yield return new TreeGridItem(TreeChildren(level + 1)' bitmap1' "TreeGridView 1"' true' "1") { Expanded = level < 2 };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeView,The following statement contains a magic number: var control = new TreeGridView { Size = new Size(-1' 150) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeView,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new CheckBoxCell(2)' HeaderText = "CheckBoxCell"' Editable = true' AutoSize = true });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,TreeView,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new ComboBoxCell(3) { DataStore = ComboCellItems() }' HeaderText = "ComboBoxCell"' Editable = true });
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,WebView,The following statement contains a magic number: var control = new WebView { Size = new Size(-1' 100) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,RightPane,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,KitchenSinkSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\KitchenSinkSection.cs,RightPane,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,LabelSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,LabelSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,LabelSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,FontLabel,The following statement contains a magic number: return new Label  			{  				Text = "Font Label"'  				Font = Fonts.Sans(14' FontStyle.Bold)'  			};
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The following statement contains a magic number: testVerticalAlignment.CheckedChanged += (sender' e) => label.Size = new Size(-1' testVerticalAlignment.Checked == true ? 200 : -1);
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The following statement contains a magic number: Func<Control> spacer = () => new Panel { BackgroundColor = Colors.DarkGray' Size = new Size(10' 10) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The following statement contains a magic number: Func<Control> spacer = () => new Panel { BackgroundColor = Colors.DarkGray' Size = new Size(10' 10) };
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The following statement contains a magic number: return new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					TableLayout.Horizontal(5' null' "Wrap:"' wrapDropDown' "Font:"' fontSelector' null)'  					TableLayout.Horizontal(5' null' testVerticalAlignment' verticalAlignmentDropDown' "TextAlignment:"' textAlignmentDropDown' null)'  					spacer()'  					new TableLayout(  						new TableRow(  							spacer()'  							new TableCell(label' true)'  							spacer()  						)  					)'  					spacer()  				}  			};
Magic Number,Eto.Test.Sections.Controls,LabelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LabelSection.cs,WrapLabel,The following statement contains a magic number: return new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					TableLayout.Horizontal(5' null' "Wrap:"' wrapDropDown' "Font:"' fontSelector' null)'  					TableLayout.Horizontal(5' null' testVerticalAlignment' verticalAlignmentDropDown' "TextAlignment:"' textAlignmentDropDown' null)'  					spacer()'  					new TableLayout(  						new TableRow(  							spacer()'  							new TableCell(label' true)'  							spacer()  						)  					)'  					spacer()  				}  			};
Magic Number,Eto.Test.Sections.Controls,LinkButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LinkButtonSection.cs,LinkButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,LinkButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LinkButtonSection.cs,LinkButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,LinkButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\LinkButtonSection.cs,LinkButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,ListBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,ListBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,ListBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,Default,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,Default,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,Default,The following statement contains a magic number: i < 10
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,AddRowsButton,The following statement contains a magic number: control.Click += delegate  			{  				for (int i = 0; i < 10; i++)  					list.Items.Add(new ListItem { Text = "Item " + list.Items.Count });  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,WithIcons,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,WithIcons,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,WithContextMenu,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,WithContextMenu,The following statement contains a magic number: var control = new ListBox  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,ListBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ListBoxSection.cs,WithContextMenu,The following statement contains a magic number: i < 10
Magic Number,Eto.Test.Sections.Controls,MaskedTextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextBoxSection.cs,MaskedTextBoxSection,The following statement contains a magic number: Spacing = 5;
Magic Number,Eto.Test.Sections.Controls,MaskedTextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextBoxSection.cs,MaskedTextBoxSection,The following statement contains a magic number: Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Controls,MaskedTextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextBoxSection.cs,MaskedTextBoxSection,The following statement contains a magic number: var tb = new NumericMaskedTextBox<decimal> { Value = 123.456M };
Magic Number,Eto.Test.Sections.Controls,MaskedTextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextBoxSection.cs,MaskedTextBoxSection,The following statement contains a magic number: Items.Add(new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { tb' l } });
Magic Number,Eto.Test.Sections.Controls,MaskedTextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextBoxSection.cs,MaskedTextBoxSection,The following statement contains a magic number: Items.Add(new NumericMaskedTextBox<double> { Value = 0.000000123 });
Magic Number,Eto.Test.Sections.Controls,MaskedTextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextStepperSection.cs,MaskedTextStepperSection,The following statement contains a magic number: Spacing = 5;
Magic Number,Eto.Test.Sections.Controls,MaskedTextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextStepperSection.cs,MaskedTextStepperSection,The following statement contains a magic number: Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Controls,MaskedTextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextStepperSection.cs,MaskedTextStepperSection,The following statement contains a magic number: var tb = new NumericMaskedTextStepper<decimal> { Value = 123.456M };
Magic Number,Eto.Test.Sections.Controls,MaskedTextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextStepperSection.cs,MaskedTextStepperSection,The following statement contains a magic number: Items.Add(new StackLayout { Orientation = Orientation.Horizontal' Spacing = 5' Items = { tb' l } });
Magic Number,Eto.Test.Sections.Controls,MaskedTextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\MaskedTextStepperSection.cs,MaskedTextStepperSection,The following statement contains a magic number: Items.Add(new NumericMaskedTextStepper<double> { Value = 0.000000123 });
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var numeric = new NumericStepper { Width = 200 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var minValue = new NumericStepper { Enabled = false' Value = -1000 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var maxValue = new NumericStepper { Enabled = false' Value = 1000 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var decimalPlaces = new NumericStepper { MaxValue = 15' MinValue = 0 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var maxDecimalPlaces = new NumericStepper { MaxValue = 15' MinValue = 0 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var cultures = typeof(CultureInfo).GetTypeInfo().GetDeclaredMethod("GetCultures")?.Invoke(null' new object[] { 7 /* AllCultures */}) as IEnumerable<CultureInfo>;
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var increment = new NumericStepper { MaximumDecimalPlaces = 15 };
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var options1 = new StackLayout  			{  				Spacing = 5'  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Items =  				{  					enabled'  					readOnly  				}  			};
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var options2 = new StackLayout  			{  				Spacing = 5'  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Items =  				{  					chkMinValue' minValue'  					chkMaxValue' maxValue'  					"Increment"' increment  				}  			};
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: var options3 = new StackLayout  			{  				Spacing = 5'  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Items =  				{  					"DecimalPlaces"' decimalPlaces'  					"MaximumDecimalPlaces"' maxDecimalPlaces  				}  			};
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Center'  				Items = {  					options1'  					options2'  					options3'  					TableLayout.Horizontal(5' "FormatString"' formatString' "CultureInfo"' cultureDropDown)'  					"Result:"' numeric  				}  			};
Magic Number,Eto.Test.Sections.Controls,NumericStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\NumericStepperSection.cs,NumericStepperSection,The following statement contains a magic number: Content = new StackLayout  			{  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Center'  				Items = {  					options1'  					options2'  					options3'  					TableLayout.Horizontal(5' "FormatString"' formatString' "CultureInfo"' cultureDropDown)'  					"Result:"' numeric  				}  			};
Magic Number,Eto.Test.Sections.Controls,PasswordBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PasswordBoxSection.cs,PasswordBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,PasswordBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PasswordBoxSection.cs,PasswordBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,PasswordBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PasswordBoxSection.cs,PasswordBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,ProgressBarSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,ProgressBarSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,ProgressBarSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,SetValue,The following statement contains a magic number: var control = new ProgressBar  			{  				MinValue = 0'  				MaxValue = 1000'  				Value = 500  			};
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,SetValue,The following statement contains a magic number: var control = new ProgressBar  			{  				MinValue = 0'  				MaxValue = 1000'  				Value = 500  			};
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,SetValue,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,SetValue,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,StartStopButton,The following statement contains a magic number: control.Click += delegate  			{  				if (timer == null)  				{  					timer = new UITimer { Interval = 0.5 };  					timer.Elapsed += delegate  					{  						if (bar.Value < bar.MaxValue)  							bar.Value += 50;  						else  							bar.Value = bar.MinValue;  					};  					timer.Start();  					control.Text = "Stop Timer";  				}  				else  				{  					timer.Stop();  					timer.Dispose();  					timer = null;  					control.Text = "Start Timer";  				}  			};
Magic Number,Eto.Test.Sections.Controls,ProgressBarSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ProgressBarSection.cs,StartStopButton,The following statement contains a magic number: control.Click += delegate  			{  				if (timer == null)  				{  					timer = new UITimer { Interval = 0.5 };  					timer.Elapsed += delegate  					{  						if (bar.Value < bar.MaxValue)  							bar.Value += 50;  						else  							bar.Value = bar.MinValue;  					};  					timer.Start();  					control.Text = "Stop Timer";  				}  				else  				{  					timer.Stop();  					timer.Dispose();  					timer = null;  					control.Text = "Start Timer";  				}  			};
Magic Number,Eto.Test.Sections.Controls,PropertyCellSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PropertyCellSection.cs,PropertyCellSection,The following statement contains a magic number: Content = new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Spacing = 5'  				Padding = 10'  				Items =  				{  					searchBox'  					new StackLayoutItem(grid' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,PropertyCellSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PropertyCellSection.cs,PropertyCellSection,The following statement contains a magic number: Content = new StackLayout  			{  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Spacing = 5'  				Padding = 10'  				Items =  				{  					searchBox'  					new StackLayoutItem(grid' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,PropertyGridSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PropertyGridSection.cs,PropertyGridSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,PropertyGridSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\PropertyGridSection.cs,PropertyGridSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,RadioButtonListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,RadioButtonListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,RadioButtonListSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonListSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonListSection.cs,Items,The following statement contains a magic number: i < 5
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,RadioButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,RadioButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,RadioButtonSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,RadioButtonSection,The following statement contains a magic number: layout.Add(new RadioButton { Text = "With Larger Font"' Font = SystemFonts.Label(40) });
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,RadioButtonSection,The following statement contains a magic number: layout.Add(new RadioButton { Text = "With Smaller Font"' Font = SystemFonts.Label(6) });
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,SetInitialValue,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,SetInitialValue,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,SetInitialValue,The following statement contains a magic number: var item = new RadioButton(controller) { Text = "Item " + i' Checked = i == 2 };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,SetInitialValue,The following statement contains a magic number: i < 5
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Disabled,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Disabled,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Disabled,The following statement contains a magic number: var item = new RadioButton(controller) { Text = "Item " + i' Checked = i == 2' Enabled = false };
Magic Number,Eto.Test.Sections.Controls,RadioButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RadioButtonSection.cs,Disabled,The following statement contains a magic number: i < 5
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: richText.Size = new Size(-1' 300);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var range = new Range<int>(6' 10);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var range = new Range<int>(6' 10);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetFont(range' Fonts.Cursive(20' FontStyle.Bold' FontDecoration.Underline));
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetBold(new Range<int>(11' 16)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetBold(new Range<int>(11' 16)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetItalic(new Range<int>(18' 20)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetItalic(new Range<int>(18' 20)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetUnderline(new Range<int>(22' 25)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetUnderline(new Range<int>(22' 25)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetStrikethrough(new Range<int>(28' 38)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: buffer.SetStrikethrough(new Range<int>(28' 38)' true);
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var formatting1 = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  				    null'  				    boldButton'  				    italicButton'  				    underlineButton'  				    strikethroughButton'  				    null  				}  			};
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var formatting2 = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  					null'  					new Label { Text = "Foreground"' VerticalAlignment = VerticalAlignment.Center }'  					TableLayout.AutoSized(foregroundButton' centered: true)'  					new Label { Text = "Background"' VerticalAlignment = VerticalAlignment.Center }'  					TableLayout.AutoSized(backgroundButton' centered: true)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var formatting3 = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  				    null'  				    fontButton'  				    familyDropDown'  					typefaceDropDown'  				    null  				}  			};
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: var buttons = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  				    null'  				    formatEnum'  				    loadButton'  				    saveButton'  					loadFileButton'  					clearButton'  				    null  				}  			};
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = new Padding(10)'  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					buttons'  					TextAreaSection.TextAreaOptions(richText)'  					TextAreaSection.TextAreaOptions2(richText)'  					TextAreaSection.TextAreaOptions3(richText)'  					formatting1'  					formatting2'  					formatting3'  					new StackLayoutItem(richText' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,RichTextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\RichTextAreaSection.cs,RichTextAreaSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = new Padding(10)'  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					buttons'  					TextAreaSection.TextAreaOptions(richText)'  					TextAreaSection.TextAreaOptions2(richText)'  					TextAreaSection.TextAreaOptions3(richText)'  					formatting1'  					formatting2'  					formatting3'  					new StackLayoutItem(richText' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: sizeMode.SelectedIndexChanged += (sender' e) =>   			{  				switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }              };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: var options = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Spacing = 5'  				Items = {   					"Border:"'  					borderType'  					"Expand:"'  					expandWidth'  					expandHeight'  					"Content Size:"'  					sizeMode  				}  			};
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = 10'  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{   					new StackLayoutItem(options' HorizontalAlignment.Center)'   					new StackLayoutItem(scrollable' true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = 10'  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{   					new StackLayoutItem(options' HorizontalAlignment.Center)'   					new StackLayoutItem(scrollable' true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,CreateScrollable,The following statement contains a magic number: var scrollable = new Scrollable { Size = new Size(100' 200) };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,CreateScrollable,The following statement contains a magic number: var scrollable = new Scrollable { Size = new Size(100' 200) };
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,CreateScrollable,The following statement contains a magic number: var desc = new Label  			{   				Text = "Content"'  				BackgroundColor = Colors.Green'  				Size = new Size(400' 400)'  				TextAlignment = TextAlignment.Center'  				VerticalAlignment = VerticalAlignment.Center  			};
Magic Number,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,CreateScrollable,The following statement contains a magic number: var desc = new Label  			{   				Text = "Content"'  				BackgroundColor = Colors.Green'  				Size = new Size(400' 400)'  				TextAlignment = TextAlignment.Center'  				VerticalAlignment = VerticalAlignment.Center  			};
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new ButtonSegmentedItem { Image = TestIcons.TestIcon.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new ButtonSegmentedItem { Image = TestIcons.TestIcon.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new ButtonSegmentedItem { Text = "Some Text"' Image = TestIcons.TestImage.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new ButtonSegmentedItem { Text = "Some Text"' Image = TestIcons.TestImage.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new ButtonSegmentedItem { Text = "Width=150"' Width = 150 });
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new MenuSegmentedItem  			{  				Text = "Menu Only"'  				Image = TestIcons.TestImage.WithSize(16' 16)'  				CanSelect = false'  				Menu = new ContextMenu  				{  					Items =  					{  						CreateMenuItem("Menu Item 1")'  						CreateMenuItem("Menu Item 2")  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,SegmentedButtonSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SegmentedButtonSection.cs,SegmentedButtonSection,The following statement contains a magic number: segbutton.Items.Add(new MenuSegmentedItem  			{  				Text = "Menu Only"'  				Image = TestIcons.TestImage.WithSize(16' 16)'  				CanSelect = false'  				Menu = new ContextMenu  				{  					Items =  					{  						CreateMenuItem("Menu Item 1")'  						CreateMenuItem("Menu Item 2")  					}  				}  			});
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SliderSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SliderSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SliderSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SetInitialValue,The following statement contains a magic number: var control = new Slider  			{  				MinValue = 0'  				MaxValue = 1000'  				TickFrequency = 100'  				Value = 500  			};
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SetInitialValue,The following statement contains a magic number: var control = new Slider  			{  				MinValue = 0'  				MaxValue = 1000'  				TickFrequency = 100'  				Value = 500  			};
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,SetInitialValue,The following statement contains a magic number: var control = new Slider  			{  				MinValue = 0'  				MaxValue = 1000'  				TickFrequency = 100'  				Value = 500  			};
Magic Number,Eto.Test.Sections.Controls,SliderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SliderSection.cs,Vertical,The following statement contains a magic number: control.Size = new Size(-1' 150);
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,SpinnerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,SpinnerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,SpinnerSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,SpinnerSection,The following statement contains a magic number: layout.AddRow(new Label { Text = "Larger" }' Default(new Size(100' 100)));
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,SpinnerSection,The following statement contains a magic number: layout.AddRow(new Label { Text = "Larger" }' Default(new Size(100' 100)));
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SpinnerSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SpinnerSection.cs,Default,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,SplitterSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,SplitterSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,SplitterSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test1,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test1,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test1,The following statement contains a magic number: form.ClientSize = new Size(800' 600);
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test1,The following statement contains a magic number: form.ClientSize = new Size(800' 600);
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestDynamic,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var tabcontrol = new TabControl();  				tabcontrol.Pages.Add(new TabPage { Text = "Index" });    				var addTabButton = new Button { Text = "Add Tab With Splitter" };  				addTabButton.Click += (ss' ee) =>  				{  					using (Context)  					{  						var newTabpage = new TabPage  						{  							Text = "test"'  							Content = new Splitter  							{  								Panel1 = new TreeGridView { Size = new Size(100' 100) }'  								Panel2 = new GridView()'  								Orientation = Orientation.Horizontal'  								FixedPanel = SplitterFixedPanel.Panel1'  								Position = 100'  							}  						};  						tabcontrol.Pages.Add(newTabpage);  						tabcontrol.SelectedPage = newTabpage;  					}  				};    				var form = new Form  				{  					Padding = new Padding(5)'  					Content = new TableLayout(  						TableLayout.AutoSized(addTabButton' centered: true)'  						tabcontrol  					)  				};  				form.Size = new Size(600' 400);  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: var leftPane = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: var leftPane = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: var rightPane = new Splitter  				{  					Orientation = Orientation.Vertical'  					FixedPanel = SplitterFixedPanel.Panel2'  					Panel1 = rightTop'  					Panel2 = rightBottom'  					Position = 200'  				};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: var form = new Form  				{  					Padding = new Padding(5)'  					Content = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.Panel1'  						BackgroundColor = Colors.Gray'  						Position = 200'  						Panel1 = leftPane'  						Panel2 = rightPane  					}  				};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: var form = new Form  				{  					Padding = new Padding(5)'  					Content = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.Panel1'  						BackgroundColor = Colors.Gray'  						Position = 200'  						Panel1 = leftPane'  						Panel2 = rightPane  					}  				};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: form.Size = new Size(600' 400);
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Test2,The following statement contains a magic number: form.Size = new Size(600' 400);
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<Splitter' Control> makebox = split =>  			{  				var area = new TextArea();  				area.SizeChanged += (s' e) =>  				{  					var size = area.VisualParent.Size;  					if (split.Orientation == Orientation.Horizontal)  						size.Width -= split.SplitterWidth;  					else  						size.Height -= split.SplitterWidth;  					if (size.Width <= 0 || size.Height <= 0)  						return;  					app.AsyncInvoke(() => {  					area.Text = string.Format(  						"W:{0} ({1}%)\r\nH:{2} ({3}%)"'  						area.Width' (area.Width * 200 + size.Width) / (size.Width + size.Width)'  						area.Height' (area.Height * 200 + size.Height) / (size.Height + size.Height));  					});  				};  				return area;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<Splitter' Control> makebox = split =>  			{  				var area = new TextArea();  				area.SizeChanged += (s' e) =>  				{  					var size = area.VisualParent.Size;  					if (split.Orientation == Orientation.Horizontal)  						size.Width -= split.SplitterWidth;  					else  						size.Height -= split.SplitterWidth;  					if (size.Width <= 0 || size.Height <= 0)  						return;  					app.AsyncInvoke(() => {  					area.Text = string.Format(  						"W:{0} ({1}%)\r\nH:{2} ({3}%)"'  						area.Width' (area.Width * 200 + size.Width) / (size.Width + size.Width)'  						area.Height' (area.Height * 200 + size.Height) / (size.Height + size.Height));  					});  				};  				return area;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: Func<int' Form> makeform = i =>  			{  				var wa = new Rectangle(Screen.PrimaryScreen.WorkingArea);  				var form = new Form  				{  					Title = "Test Form #" + (i + 1)'  					Bounds = i == 0  					? new Rectangle(wa.X + 20' wa.Y + 20' wa.Width / 3' wa.Height / 3)  					: i == 1  					? new Rectangle(wa.X + 20' wa.Y + 40 + wa.Height / 3' wa.Width / 3' wa.Height * 2 / 3 - 60)  					: new Rectangle(wa.X + wa.Width / 3 + 40' wa.Y + 20' wa.Width * 2 / 3 - 60' wa.Height - 40)  				};  				using (Context)  				{  					var main = new Splitter  					{  						Position = 80  					};  					var middle = new Splitter  					{  						FixedPanel = SplitterFixedPanel.Panel2'  						Width = 200'  						Position = 120 - main.SplitterWidth  					};  					var ltop = new Splitter  					{  						Orientation = Orientation.Vertical'  						Position = 80  					};  					var lbottom = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 80  					};  					var right = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						Height = 300 + main.SplitterWidth'  						Position = 100 // ~33%  					};  					var center = new Splitter  					{  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .4  					};  					main.Panel1 = ltop;  					main.Panel2 = middle;  					ltop.Panel1 = makebox(ltop);  					ltop.Panel2 = lbottom;  					lbottom.Panel1 = makebox(lbottom);  					lbottom.Panel2 = makebox(lbottom);  					middle.Panel1 = center;  					middle.Panel2 = right;  					right.Panel1 = makebox(right);  					right.Panel2 = makebox(right);  					center.Panel1 = makebox(center);  					center.Panel2 = makebox(center);  					form.Content = main;  				}  				form.Show();  				return form;  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var forms = new Form[3];  				for (int i = 0; i < 3; i++)  				{  					forms[i] = makeform(i);  					forms[i].Closed += (fs' fe) =>  					{  						var all = forms;  						forms = null;  						if (all != null)  							for (int j = 0; j < 3; j++)  								if (all[j] != fs)  									all[j].Close();  					};  				}  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var forms = new Form[3];  				for (int i = 0; i < 3; i++)  				{  					forms[i] = makeform(i);  					forms[i].Closed += (fs' fe) =>  					{  						var all = forms;  						forms = null;  						if (all != null)  							for (int j = 0; j < 3; j++)  								if (all[j] != fs)  									all[j].Close();  					};  				}  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestInitResize,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var forms = new Form[3];  				for (int i = 0; i < 3; i++)  				{  					forms[i] = makeform(i);  					forms[i].Closed += (fs' fe) =>  					{  						var all = forms;  						forms = null;  						if (all != null)  							for (int j = 0; j < 3; j++)  								if (all[j] != fs)  									all[j].Close();  					};  				}  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitterSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,TestHiding,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var form = new Form();  				using (Context)  				{  					var rnd = new Random();  					var splitter = new Splitter  					{  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = 0.5'  						Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }'  						Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Content = new Panel { BackgroundColor = Colors.White' Size = new Size(200' 400) } }  					};    					var showPanel1 = new CheckBox { Text = "Panel1.Visible" };  					showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);    					var showPanel2 = new CheckBox { Text = "Panel2.Visible" };  					showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);    					var fixedPanel = new EnumDropDown<SplitterFixedPanel>();  					fixedPanel.SelectedValueBinding.Bind(splitter' r => r.FixedPanel);    					var orientation = new EnumDropDown<Orientation>();  					orientation.SelectedValueBinding.Bind(splitter' r => r.Orientation);    					int count = 0;  					var replacePanel1Button = new Button { Text = "Replace Panel1" };  					replacePanel1Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel1.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel1 to a control with Visible = {isVisible}");  							splitter.Panel1 = new Panel { Padding = 20' BackgroundColor = Colors.Red' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel1 with null");  							splitter.Panel1 = null;  						}  						showPanel1.CheckedBinding.Bind(splitter.Panel1' r => r.Visible);  					};    					var replacePanel2Button = new Button { Text = "Replace Panel2" };  					replacePanel2Button.Click += (s' ee) =>  					{  						bool isVisible = rnd.Next(2) == 1;  						showPanel2.Unbind();  						if (isVisible || rnd.Next(2) == 1)  						{  							Log.Write(this' $"Replacing Panel2 to a control with Visible = {isVisible}");  							splitter.Panel2 = new Panel { Padding = 20' BackgroundColor = Colors.Blue' Visible = isVisible' Content = new Panel { BackgroundColor = Colors.White' Content = $"Count: {count++}" } };  						}  						else  						{  							Log.Write(this' "Replacing Panel2 with null");  							splitter.Panel2 = null;  						}  						showPanel2.CheckedBinding.Bind(splitter.Panel2' r => r.Visible);  					};      					var splitPanel = new Panel { Content = splitter };    					var showSplitter = new CheckBox { Text = "Show Splitter"' Checked = true };  					showSplitter.CheckedChanged += (sender2' e2) => {  						if (showSplitter.Checked == true)  							splitPanel.Content = splitter;  						else  							splitPanel.Content = null;  					};    					var buttons1 = TableLayout.Horizontal(null' showSplitter' showPanel1' showPanel2' fixedPanel' orientation' null);  					var buttons2 = TableLayout.Horizontal(null' replacePanel1Button' replacePanel2Button' null);  				  					form.Content = new StackLayout  					{  						HorizontalContentAlignment = HorizontalAlignment.Stretch'  						Items =  						{  							buttons1'  							buttons2'  							new StackLayoutItem(splitPanel' true)  						}  					};  				}  				form.Show();  			};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p0_1 = new Splitter  					{  						Panel1 = Panels[0]'  						Panel2 = Panels[1]'  						Orientation = Orientation.Vertical'  						Position = 200  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p2_3 = new Splitter  					{  						Panel1 = Panels[2]'  						Panel2 = Panels[3]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						//Position = 0'  						Height = 205 // ~ RelativePosition=200  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p2_3 = new Splitter  					{  						Panel1 = Panels[2]'  						Panel2 = Panels[3]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						//Position = 0'  						Height = 205 // ~ RelativePosition=200  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p2_3 = new Splitter  					{  						Panel1 = Panels[2]'  						Panel2 = Panels[3]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						//Position = 0'  						Height = 205 // ~ RelativePosition=200  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p4_5 = new Splitter  					{  						Panel1 = Panels[4]'  						Panel2 = Panels[5]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .6  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p4_5 = new Splitter  					{  						Panel1 = Panels[4]'  						Panel2 = Panels[5]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .6  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p4_5 = new Splitter  					{  						Panel1 = Panels[4]'  						Panel2 = Panels[5]'  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.None'  						RelativePosition = .6  					};
Magic Number,Eto.Test.Sections.Controls,SplitLayout,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\SplitterSection.cs,Layout,The following statement contains a magic number: var p0123_45 = new Splitter  					{  						Panel1 = p01_23'  						Panel2 = p4_5'  						Orientation = Orientation.Horizontal'  						FixedPanel = SplitterFixedPanel.Panel2'  						RelativePosition = 150  					};
Magic Number,Eto.Test.Sections.Controls,StepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\StepperSection.cs,StepperSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = 10'  				Spacing = 5'  				Items =  				{  					"Stepper"'  					enabledCheckBox'  					validDirectionsDropDown'  					stepper  				}  			};
Magic Number,Eto.Test.Sections.Controls,StepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\StepperSection.cs,StepperSection,The following statement contains a magic number: Content = new StackLayout  			{  				Padding = 10'  				Spacing = 5'  				Items =  				{  					"Stepper"'  					enabledCheckBox'  					validDirectionsDropDown'  					stepper  				}  			};
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,Create,The following statement contains a magic number: return new StackLayout  			{  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items =  				{  					new StackLayout  					{  						Orientation = Orientation.Horizontal'  						Items = { null' AddTab()' RemoveTab()' ClearTabs()' SelectTab()' TabPositionControl()' null }  					}'  					new StackLayoutItem(tabControl' expand: true)  				}  			};
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,AddTab,The following statement contains a magic number: control.Click += (s' e) =>  			{  				var tab = new TabPage  				{  					Text = "Tab " + (tabControl.Pages.Count + 1)'  					Content = tabControl.Pages.Count % 2 == 0 ? TabOne() : TabTwo()  				};  				LogEvents(tab);    				tabControl.Pages.Add(tab);  			};
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new TabPage  			{  				Text = "Tab 2"'  				Image = TestIcons.TestIcon.WithSize(16' 16)'  				Content = TabTwo()  			});
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new TabPage  			{  				Text = "Tab 2"'  				Image = TestIcons.TestIcon.WithSize(16' 16)'  				Content = TabTwo()  			});
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new TabPage { Image = TestIcons.TestIcon.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,TabControlSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TabControlSection.cs,DefaultTabs,The following statement contains a magic number: control.Pages.Add(new TabPage { Image = TestIcons.TestIcon.WithSize(16' 16) });
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,Default,The following statement contains a magic number: return new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TextAreaOptions(text)'  					TextAreaOptions2(text)'  					TextAreaOptions3(text)'  					TextAreaOptions4(text)'  					text  				}  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,Default,The following statement contains a magic number: return new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TextAreaOptions(text)'  					TextAreaOptions2(text)'  					TextAreaOptions3(text)'  					TextAreaOptions4(text)'  					text  				}  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,Default,The following statement contains a magic number: return new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TextAreaOptions(text)'  					TextAreaOptions2(text)'  					TextAreaOptions3(text)'  					TextAreaOptions4(text)'  					text  				}  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,TextAreaOptions,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items = { null' ShowSelectedText(text)' SetSelectedText(text)' ReplaceSelected(text)' SelectAll(text)' null }  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,TextAreaOptions2,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items = { null' SetAlignment(text)' SetCaretButton(text)' ChangeColorButton(text)' null }  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,TextAreaOptions3,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  					null'  					EnabledCheckBox(text)'  					ReadOnlyCheckBox(text)'  					AcceptsTabCheckBox(text)'  					AcceptsReturnCheckBox(text)'  					WrapCheckBox(text)'  					SpellCheckCheckBox(text)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,TextAreaOptions4,The following statement contains a magic number: return new StackLayout  			{  				Orientation = Orientation.Horizontal'  				Spacing = 5'  				Items =  				{  					null'  					TextReplacementsDropDown(text)'  					null  				}  				};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,SetAlignment,The following statement contains a magic number: return new TableLayout  			{  				Padding = Padding.Empty'  				Spacing = new Size(5' 5)'  				Rows = { new TableRow(new Label { Text = "Alignment"' VerticalAlignment = VerticalAlignment.Center }' control) }  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,SetAlignment,The following statement contains a magic number: return new TableLayout  			{  				Padding = Padding.Empty'  				Spacing = new Size(5' 5)'  				Rows = { new TableRow(new Label { Text = "Alignment"' VerticalAlignment = VerticalAlignment.Center }' control) }  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,SetSelectedText,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var text = textArea.Text;  				// select the last half of the text  				textArea.Selection = new Range<int>(text.Length / 2' text.Length / 2 + 1);  				textArea.Focus();  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,SetSelectedText,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				var text = textArea.Text;  				// select the last half of the text  				textArea.Selection = new Range<int>(text.Length / 2' text.Length / 2 + 1);  				textArea.Focus();  			};
Magic Number,Eto.Test.Sections.Controls,TextAreaSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextAreaSection.cs,SetCaretButton,The following statement contains a magic number: control.Click += (sender' e) =>  			{  				textArea.CaretIndex = textArea.Text.Length / 2;  				textArea.Focus();  			};
Magic Number,Eto.Test.Sections.Controls,TextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextBoxSection.cs,TextBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextBoxSection.cs,TextBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextBoxSection.cs,TextBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextBoxSection.cs,DifferentSize,The following statement contains a magic number: var control = new TextBox { Text = "Different Size (300x50)"' Size = new Size(300' 50) };
Magic Number,Eto.Test.Sections.Controls,TextBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextBoxSection.cs,DifferentSize,The following statement contains a magic number: var control = new TextBox { Text = "Different Size (300x50)"' Size = new Size(300' 50) };
Magic Number,Eto.Test.Sections.Controls,TextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextStepperSection.cs,TextStepperSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextStepperSection.cs,TextStepperSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextStepperSection.cs,TextStepperSection,The following statement contains a magic number: var layout = new DynamicLayout { Padding = 10' DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Controls,TextStepperSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TextStepperSection.cs,TextStepperSection,The following statement contains a magic number: layout.AddCentered(new TextStepper { Text = "Different Size (300x-1)"' Size = new Size(300' -1) });
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: Image image = TestIcons.TestIcon.WithSize(16' 16);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: Image image = TestIcons.TestIcon.WithSize(16' 16);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: Image largeImage = TestIcons.TestIcon.WithSize(100' 100);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: Image largeImage = TestIcons.TestIcon.WithSize(100' 100);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: DefaultSpacing = new Size(2' 2);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: DefaultSpacing = new Size(2' 2);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: withImageSelection.SelectedIndexBinding  				.Convert(  					i => i == 0 ? image : i == 1 ? largeImage : null'  					img => img == image ? 0 : img == largeImage ? 1 : 2  					)  				.Bind(button' c => c.Image);
Magic Number,Eto.Test.Sections.Controls,BaseButtonSection<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ToggleButtonSection.cs,BaseButtonSection,The following statement contains a magic number: BeginVertical(padding: 10);
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,TreeGridViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,TreeGridViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,TreeGridViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,CreateComplexTreeItem,The following statement contains a magic number: var item = new TreeGridItem  			{  				Expanded = expanded++ % 2 == 0  			};
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,CreateComplexTreeItem,The following statement contains a magic number: i < 4
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,CreateComplexTreeItem,The following statement contains a magic number: level < 4
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The following statement contains a magic number: var control = new TreeGridView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The following statement contains a magic number: var control = new TreeGridView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new TextBoxCell(2)' HeaderText = "Text"' AutoSize = true' Width = 150' Resizable = true' Editable = true });
Magic Number,Eto.Test.Sections.Controls,TreeGridViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeGridViewSection.cs,ImagesAndMenu,The following statement contains a magic number: control.Columns.Add(new GridColumn { DataCell = new TextBoxCell(2)' HeaderText = "Text"' AutoSize = true' Width = 150' Resizable = true' Editable = true });
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,TreeViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,TreeViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,TreeViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,CreateTreeItem,The following statement contains a magic number: var item = new TreeItem  			{  				Text = name'  				Expanded = expanded++ % 2 == 0'  				Image = image  			};
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,CreateTreeItem,The following statement contains a magic number: i < 4
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,CreateTreeItem,The following statement contains a magic number: level < 4
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,Default,The following statement contains a magic number: var control = new TreeView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,Default,The following statement contains a magic number: var control = new TreeView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,ImagesAndMenu,The following statement contains a magic number: var control = new TreeView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,TreeViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\TreeViewSection.cs,ImagesAndMenu,The following statement contains a magic number: var control = new TreeView  			{  				Size = new Size(100' 150)  			};
Magic Number,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,WebViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,WebViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,WebViewSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Controls,WebViewSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\WebViewSection.cs,LoadUrl,The following statement contains a magic number: control.Click += delegate  			{  				if (Platform.Supports<Dialog>())  				{  					var dialog = new Dialog<bool>();  					if (Platform.IsDesktop)  						dialog.MinimumSize = new Size(300' 0);    					var layout = new DynamicLayout();  					var textBox = new TextBox { Text = "https://google.com" };  					var goButton = new Button { Text = "Go" };  					dialog.DefaultButton = goButton;  					goButton.Click += (sender' e) => dialog.Close(true);  					var cancelButton = new Button { Text = "Cancel" };  					dialog.AbortButton = cancelButton;  					cancelButton.Click += (sender' e) => dialog.Close();  					layout.BeginVertical();  					layout.AddRow(new Label { Text = "Url" }' textBox);  					layout.EndBeginVertical();  					layout.AddRow(null' cancelButton' goButton);  					layout.EndVertical();    					dialog.Content = layout;      					if (dialog.ShowModal(this))  					{  						Uri uri;  						if (Uri.TryCreate(textBox.Text' UriKind.Absolute' out uri))  							webView.Url = uri;  					}  				}  				else  					webView.Url = new Uri("https://google.com");  			};
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout.DefaultPadding = new Padding(10);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout2.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout2.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout3.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,AboutDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\AboutDialogSection.cs,AboutDialogSection,The following statement contains a magic number: layout3.DefaultSpacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Dialogs,ColorDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\ColorDialogSection.cs,ColorDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,ColorDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\ColorDialogSection.cs,ColorDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,ColorDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\ColorDialogSection.cs,ColorDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,ColorDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\ColorDialogSection.cs,ColorDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,ColorDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\ColorDialogSection.cs,ColorDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,DialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,DialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,DialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,DialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,DialogSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,CreateDialog,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,CreateDialog,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,CreateDialog,The following statement contains a magic number: layout.Add(new Label  			{  				Text = "Content"'  				Size = new Size(100' 100)'  				VerticalAlignment = VerticalAlignment.Center'  				TextAlignment = TextAlignment.Center  			});
Magic Number,Eto.Test.Sections.Dialogs,DialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\DialogSection.cs,CreateDialog,The following statement contains a magic number: layout.Add(new Label  			{  				Text = "Content"'  				Size = new Size(100' 100)'  				VerticalAlignment = VerticalAlignment.Center'  				TextAlignment = TextAlignment.Center  			});
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,FileDialogSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TableLayout.Horizontal(null' new Label { Text = "File Name" }' GetFileName()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Directory" }' GetDirectory()' null)'  					TableLayout.Horizontal(null' GetMultiSelect()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Title" }' GetTitle()' null)'  					TableLayout.Horizontal(null' OpenFile()' OpenFileWithFilters()' null)'  					TableLayout.Horizontal(null' SaveFile()' SaveFileWithFilters()' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,FileDialogSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TableLayout.Horizontal(null' new Label { Text = "File Name" }' GetFileName()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Directory" }' GetDirectory()' null)'  					TableLayout.Horizontal(null' GetMultiSelect()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Title" }' GetTitle()' null)'  					TableLayout.Horizontal(null' OpenFile()' OpenFileWithFilters()' null)'  					TableLayout.Horizontal(null' SaveFile()' SaveFileWithFilters()' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,FileDialogSection,The following statement contains a magic number: Content = new TableLayout  			{  				Padding = new Padding(10)'  				Spacing = new Size(5' 5)'  				Rows =  				{  					TableLayout.Horizontal(null' new Label { Text = "File Name" }' GetFileName()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Directory" }' GetDirectory()' null)'  					TableLayout.Horizontal(null' GetMultiSelect()' null)'  					TableLayout.Horizontal(null' new Label { Text = "Title" }' GetTitle()' null)'  					TableLayout.Horizontal(null' OpenFile()' OpenFileWithFilters()' null)'  					TableLayout.Horizontal(null' SaveFile()' SaveFileWithFilters()' null)'  					null  				}  			};
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,GetFileName,The following statement contains a magic number: var fileNameText = new TextBox { Size = new Size(200' -1) };
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,GetDirectory,The following statement contains a magic number: var fileNameText = new TextBox { Size = new Size(200' -1) };
Magic Number,Eto.Test.Sections.Dialogs,FileDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FileDialogSection.cs,GetTitle,The following statement contains a magic number: var titleText = new TextBox { Size = new Size(200' -1) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: layout.Add(new Panel { MinimumSize = new Size(100' 150)' Content = tabs }' yscale: true);
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: layout.Add(new Panel { MinimumSize = new Size(100' 150)' Content = tabs }' yscale: true);
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontDialogSection,The following statement contains a magic number: UpdatePreview(Fonts.Serif(18' FontStyle.Bold));
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,PickFontFamily,The following statement contains a magic number: var fontFamilyName = new TextBox { Text = "Times' serif"' Size = new Size(200' -1) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,SetToFontFamily,The following statement contains a magic number: button.Click += delegate  			{  				var family = new FontFamily("Times New Roman");  				var font = new Font(family' 20);  				UpdatePreview(font);  			};
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontList,The following statement contains a magic number: fontList = new ListBox { Size = new Size(300' 180) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontList,The following statement contains a magic number: fontList = new ListBox { Size = new Size(300' 180) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontStyles,The following statement contains a magic number: fontStyles = new ListBox { Size = new Size(150' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontStyles,The following statement contains a magic number: fontStyles = new ListBox { Size = new Size(150' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontSizes,The following statement contains a magic number: fontSizes = new ListBox { Size = new Size(60' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontSizes,The following statement contains a magic number: fontSizes = new ListBox { Size = new Size(60' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,FontSizes,The following statement contains a magic number: i < 72
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,Metrics,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,Metrics,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,MetricsPreview,The following statement contains a magic number: metricsPreview = new Drawable { Size = new Size(200' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,MetricsPreview,The following statement contains a magic number: metricsPreview = new Drawable { Size = new Size(200' 100) };
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,MetricsPreview,The following statement contains a magic number: metricsPreview.Paint += (sender' pe) =>  			{  				var width = metricsPreview.Size.Width;  				pe.Graphics.PixelOffsetMode = PixelOffsetMode.Half;    				pe.Graphics.DrawRectangle(Colors.Black' new RectangleF(metricsPreview.Size));    				var size = pe.Graphics.MeasureString(selectedFont' preview.Text);  				var scale = ParentWindow.Screen.Scale;    				var ypos = Math.Max(0' (metricsPreview.Size.Height - size.Height) / 2);    				pe.Graphics.FillRectangle(Brushes.GhostWhite' new RectangleF(new PointF(0' ypos)' size));    				pe.Graphics.DrawText(selectedFont' Colors.Black' 0' ypos' preview.Text);    				var baseline = ypos + selectedFont.Baseline * scale;  				pe.Graphics.DrawLine(Pens.Black' 0' baseline' width' baseline);    				var ascender = baseline - selectedFont.Ascent * scale;  				pe.Graphics.DrawLine(Pens.Blue' 0' ascender' width' ascender);    				var descender = baseline + selectedFont.Descent * scale;  				pe.Graphics.DrawLine(Pens.Red' 0' descender' width' descender);    				var xheight = baseline - selectedFont.XHeight * scale;  				pe.Graphics.DrawLine(Pens.Green' 0' xheight' width' xheight);    				var lineheight = ypos + selectedFont.LineHeight * scale;  				pe.Graphics.DrawLine(Pens.Orange' 0' lineheight' width' lineheight);  			};
Magic Number,Eto.Test.Sections.Dialogs,FontDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\FontDialogSection.cs,Preview,The following statement contains a magic number: preview = new TextArea { Wrap = true' Size = new Size(-1' 100) };
Magic Number,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,MessageBoxSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,CaptionBox,The following statement contains a magic number: var control = new TextBox { Size = new Size(300' -1) };
Magic Number,Eto.Test.Sections.Dialogs,MessageBoxSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\MessageBoxSection.cs,TitleBox,The following statement contains a magic number: var control = new TextArea { Size = new Size(300' -1) };
Magic Number,Eto.Test.Sections.Dialogs,OpenWithDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\OpenWithDialogSection.cs,OpenWithDialogSection,The following statement contains a magic number: layout.DefaultPadding = new Padding(10);
Magic Number,Eto.Test.Sections.Dialogs,OpenWithDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\OpenWithDialogSection.cs,OpenWithDialogSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Dialogs,OpenWithDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\OpenWithDialogSection.cs,OpenWithDialogSection,The following statement contains a magic number: layout.DefaultSpacing = new Size(4' 4);
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SelectFolderSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = 10 };
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SelectFolderSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = 10 };
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SelectFolderSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = 10 };
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SelectFolderSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = 10 };
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SelectFolderSection,The following statement contains a magic number: var layout = new DynamicLayout { Spacing = new Size(20' 20)' DefaultSpacing = new Size(5' 5)' Padding = 10 };
Magic Number,Eto.Test.Sections.Dialogs,SelectFolderSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Dialogs\SelectFolderSection.cs,SetInitialFolderCheckBox,The following statement contains a magic number: return TableLayout.Horizontal(2' control' folder);
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasSection,The following statement contains a magic number: Content = new DynamicLayout(  				new DynamicRow(  					"Antialias"' AntialiasOn()'  					null  				)'  				null  			) { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasSection,The following statement contains a magic number: Content = new DynamicLayout(  				new DynamicRow(  					"Antialias"' AntialiasOn()'  					null  				)'  				null  			) { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasSection,The following statement contains a magic number: Content = new DynamicLayout(  				new DynamicRow(  					"Antialias"' AntialiasOn()'  					null  				)'  				null  			) { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 100)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 100)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,AntialiasOn,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.AntiAlias = true;  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = true;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias ON");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);    				e.Graphics.AntiAlias = false;  				e.Graphics.TranslateTransform(100' 0);  				e.Graphics.DrawText(SystemFonts.Default()' Brushes.White' 0' 0' "Antialias OFF");  				e.Graphics.DrawPath(Pens.White' path);  				e.Graphics.DrawLine(Pens.White' 0' 20' 100' 100);  			};
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.MoveTo(new Point(10' 16));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.MoveTo(new Point(10' 16));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(20' 90));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(20' 90));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(10' 60));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(10' 60));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(90' 80));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(90' 80));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(60' 30));
Magic Number,Eto.Test.Sections.Drawing,AntialiasSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\AntialiasSection.cs,CreatePath,The following statement contains a magic number: path.LineTo(new Point(60' 30));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,BitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,BitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,BitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawTest,The following statement contains a magic number: var sz = image.Size / 5;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawTest,The following statement contains a magic number: x < sz.Width * 2
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawTest,The following statement contains a magic number: var sz = image.Size / 5;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawTest,The following statement contains a magic number: x < sz.Width * 4
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom24,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom24,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom32,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom32,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom32Alpha,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,CreateCustom32Alpha,The following statement contains a magic number: var size = new Size(100' 100) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(0' 0' 32' image.Height);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 0' image.Width - 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 0' image.Width - 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 0' image.Width - 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 32' 64' 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 32' 64' 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 32' 64' 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 32' 64' 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 32' 32' image.Height - 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 32' 32' image.Height - 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 32' 32' image.Height - 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 32' 32' image.Height - 64);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 96' 64' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 96' 64' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 96' 64' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(32' 96' 64' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 96' 32' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 96' 32' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 96' 32' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,GetTiles,The following statement contains a magic number: yield return new Rectangle(image.Width - 32' 96' 32' image.Height - 96);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: var size = new Size(105' 105) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: var size = new Size(105' 105) * (int)Screen.PrimaryScreen.LogicalPixelSize;
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.DrawImage(image64' new RectangleF(80' 80' 80' 80)' new RectangleF(0' 0' 32' 32));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.MultiplyTransform(Matrix.Create(1' 0' 0' 1' 0.5f' 70.5f));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.MultiplyTransform(Matrix.Create(1' 0' 0' 1' 0.5f' 70.5f));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: DrawRuler(32' g' Colors.Blue);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.MultiplyTransform(Matrix.Create(0' 1' 1' 0' 70.5f' 0.5f));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: g.MultiplyTransform(Matrix.Create(0' 1' 1' 0' 70.5f' 0.5f));
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawImageToRect,The following statement contains a magic number: DrawRuler(32' g' Colors.Blue);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,ScaleImage,The following statement contains a magic number: image = new Bitmap(image' 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,ScaleImage,The following statement contains a magic number: image = new Bitmap(image' 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,ScaleImageView,The following statement contains a magic number: image = new Bitmap(image' 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,ScaleImageView,The following statement contains a magic number: image = new Bitmap(image' 32' 32);
Magic Number,Eto.Test.Sections.Drawing,BitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BitmapSection.cs,DrawRuler,The following statement contains a magic number: var capHeight = 2;
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: ScaleX = 100f;
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: ScaleY = 100f;
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: Center = new PointF(110' 60);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: Center = new PointF(110' 60);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: GradientOrigin = new PointF(150' 90);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: GradientOrigin = new PointF(150' 90);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: Radius = new SizeF(100f' 50f);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: Radius = new SizeF(100f' 50f);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: StartPoint = new PointF(50' 50);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: StartPoint = new PointF(50' 50);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: EndPoint = new PointF(100' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: EndPoint = new PointF(100' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: drawable = new Drawable { Size = new Size(450' 400) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,BrushSection,The following statement contains a magic number: drawable = new Drawable { Size = new Size(450' 400) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,ScaleXControl,The following statement contains a magic number: var control = new NumericStepper { MinValue = 1' MaxValue = 1000 };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,ScaleYControl,The following statement contains a magic number: var control = new NumericStepper { MinValue = 1' MaxValue = 1000 };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,RotationControl,The following statement contains a magic number: var control = new NumericStepper { MinValue = 0' MaxValue = 360 };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,CreateOpacityControl,The following statement contains a magic number: var control = new NumericStepper { Value = 1' MinValue = 0' MaxValue = 1' DecimalPlaces = 2' Increment = 0.1f };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,CreateOpacityControl,The following statement contains a magic number: var control = new NumericStepper { Value = 1' MinValue = 0' MaxValue = 1' DecimalPlaces = 2' Increment = 0.1f };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,GetTransform,The following statement contains a magic number: matrix.Scale(Math.Max(ScaleX / 100f' 0.01f)' Math.Max(ScaleY / 100f' 0.01f));
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,GetTransform,The following statement contains a magic number: matrix.Scale(Math.Max(ScaleX / 100f' 0.01f)' Math.Max(ScaleY / 100f' 0.01f));
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,GetTransform,The following statement contains a magic number: matrix.Scale(Math.Max(ScaleX / 100f' 0.01f)' Math.Max(ScaleY / 100f' 0.01f));
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,GetTransform,The following statement contains a magic number: matrix.Scale(Math.Max(ScaleX / 100f' 0.01f)' Math.Max(ScaleY / 100f' 0.01f));
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(10' 10' 200' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(10' 10' 200' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(10' 10' 200' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(10' 10' 200' 100);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 120' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 120' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 120' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 120' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 210' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 210' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 210' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(10' 210' 200' 80);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: g.FillPie(brush' rect' 100' 240);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: g.FillPie(brush' rect' 100' 240);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' rect' 100' 240);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' rect' 100' 240);
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,BrushSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\BrushSection.cs,Draw,The following statement contains a magic number: var points = new[] { new PointF(300' 10)' new PointF(350' 30)' new PointF(400' 90)' new PointF(320' 100) };
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearGraphicsTest,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(200' 200)'  				BackgroundColor = Colors.Yellow  			};
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearGraphicsTest,The following statement contains a magic number: var control = new Drawable  			{  				Size = new Size(200' 200)'  				BackgroundColor = Colors.Yellow  			};
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillRectangle(Brushes.Green' 0' 0' 200' 200);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillRectangle(Brushes.Green' 0' 0' 200' 200);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.Clear(new SolidBrush(new Color(Colors.Red' 0.5f)));
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillEllipse(Brushes.Blue' rnd.Next(50)' rnd.Next(50)' 150' 150);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillEllipse(Brushes.Blue' rnd.Next(50)' rnd.Next(50)' 150' 150);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillEllipse(Brushes.Blue' rnd.Next(50)' rnd.Next(50)' 150' 150);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following statement contains a magic number: graphics.FillEllipse(Brushes.Blue' rnd.Next(50)' rnd.Next(50)' 150' 150);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,CreateImage,The following statement contains a magic number: image = new Bitmap(200' 200' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,CreateImage,The following statement contains a magic number: image = new Bitmap(200' 200' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearBitmapTest,The following statement contains a magic number: var control = new DrawableImageView  			{  				Image = CreateImage()'  				Size = new Size(200' 200)'  				BackgroundColor = Colors.Yellow  			};
Magic Number,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,ClearBitmapTest,The following statement contains a magic number: var control = new DrawableImageView  			{  				Image = CreateImage()'  				Size = new Size(200' 200)'  				BackgroundColor = Colors.Yellow  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,ClipSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,ClipSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,ClipSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: var control = new Drawable { Size = new Size(300' 100) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: var control = new Drawable { Size = new Size(300' 100) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,RectangleClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				e.Graphics.SetClip(new RectangleF(25' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' new RectangleF(25' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(125' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' new RectangleF(125' 0' 100' 100));    				e.Graphics.SetClip(new RectangleF(225' 25' 50' 50));  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' new RectangleF(225' 0' 100' 100));  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: var control = new Drawable { Size = new Size(350' 250) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: var control = new Drawable { Size = new Size(350' 250) };
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipSection.cs,PathClip,The following statement contains a magic number: control.Paint += (sender' e) =>  			{  				var path = new GraphicsPath();  				path.AddEllipse(25' 25' 50' 50);  				path.AddRectangle(125' 25' 50' 50);  				path.AddLines(new PointF(225' 25)' new PointF(225' 75)' new PointF(275' 50));  				path.CloseFigure();    				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Blue' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Red' path.Bounds);    				path.Transform(Matrix.FromTranslation(0' 75));  				e.Graphics.SetClip(path);  				if (ResetClip)  					e.Graphics.ResetClip();  				e.Graphics.FillRectangle(Brushes.Green' path.Bounds);  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: drawable.Paint += (sender' e) =>  			{  				var g = e.Graphics;    				var rect = new RectangleF(drawable.ClientSize);  				Func<RectangleF> boundsRect = () => g.CurrentTransform.Inverse().TransformRectangle(rect);    				g.SaveTransform();    				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' rect);    				g.TranslateTransform(50' 0);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.TranslateTransform(0' 50);  				g.SetClip(new RectangleF(0' 0' 50' 50));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(GraphicsPath.GetRoundRect(new RectangleF(0' 0' 25' 25)' 4));  				g.FillRectangle(Colors.Red' boundsRect());    				g.ScaleTransform(2' 2);  				g.TranslateTransform(25' 25);  				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());    				g.SetClip(new RectangleF(-25/2f' -25/2f' 25/2f' 25/2f));  				g.FillRectangle(Colors.Red' boundsRect());    				g.RestoreTransform();    				if (!showInvalid)  					g.FillRectangle(Colors.Green' boundsRect());  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: var options = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Spacing = 5'  				Items = { showInvalidCheckBox }  			};
Magic Number,Eto.Test.Sections.Drawing,ClipTransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClipTransformSection.cs,ClipTransformSection,The following statement contains a magic number: Content = new StackLayout {  				Spacing = 5'  				HorizontalContentAlignment = HorizontalAlignment.Stretch'  				Items = { options' new StackLayoutItem(drawable' expand: true) }  			};
Magic Number,Eto.Test.Sections.Drawing,DrawLoopSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,DrawLoopSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DrawLoopSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,DrawLoopSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DrawLoopSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,DrawLoopSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DirectDrawingRenderer,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,InitializeBoxes,The following statement contains a magic number: i < 20
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: var size = new SizeF(random.Next(50) + 50' random.Next(50) + 50);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: var size = new SizeF(random.Next(50) + 50' random.Next(50) + 50);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: var size = new SizeF(random.Next(50) + 50' random.Next(50) + 50);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: var size = new SizeF(random.Next(50) + 50' random.Next(50) + 50);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: increment = new SizeF(random.Next(3) + 1' random.Next(3) + 1);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: increment = new SizeF(random.Next(3) + 1' random.Next(3) + 1);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: random.Next(2) == 1
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: random.Next(2) == 1
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: angle = random.Next(360);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: rotation = (random.Next(20) - 10f) / 4f;
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: rotation = (random.Next(20) - 10f) / 4f;
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: rotation = (random.Next(20) - 10f) / 4f;
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following statement contains a magic number: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Move,The following statement contains a magic number: transform.RotateAt(angle' position.Width / 2' position.Height / 2);
Magic Number,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Move,The following statement contains a magic number: transform.RotateAt(angle' position.Width / 2' position.Height / 2);
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,DrawTextSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,DrawTextSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,DrawTextSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,Default,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 500)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,Default,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 500)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = new Font(SystemFont.Default' 20)' Text = "System Font' 20pt" };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Sans(12) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Serif(12) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Monospace(12) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Cursive(12) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Fantasy(12) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Sans(12' FontStyle.Bold) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Serif(12' FontStyle.Bold) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Monospace(12' FontStyle.Bold) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Cursive(12' FontStyle.Bold) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Fantasy(12' FontStyle.Bold) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Sans(12' FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Serif(12' FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Monospace(12' FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Cursive(12' FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Fantasy(12' FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Sans(12' FontStyle.Bold | FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Serif(12' FontStyle.Bold | FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Monospace(12' FontStyle.Bold | FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Cursive(12' FontStyle.Bold | FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,GetDrawInfo,The following statement contains a magic number: yield return new DrawInfo { Font = Fonts.Fantasy(12' FontStyle.Bold | FontStyle.Italic) };
Magic Number,Eto.Test.Sections.Drawing,DrawTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawTextSection.cs,DrawFrame,The following statement contains a magic number: g.DrawText(info.Font' Colors.White' 10' y' info.Text);
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: var formattedText = new FormattedText              {                  Text = Sections.Controls.RichTextAreaSection.LoremText'                  MaximumSize = new SizeF(200' 100)'                  Wrap = FormattedTextWrapMode.Word'                  Trimming = FormattedTextTrimming.CharacterEllipsis'  				ForegroundBrush = Brushes.White'                  //ForegroundBrush = new LinearGradientBrush(Colors.White' Colors.Blue' new PointF(0' 0)' new PointF(200' 200))'                  Font = font              };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: var formattedText = new FormattedText              {                  Text = Sections.Controls.RichTextAreaSection.LoremText'                  MaximumSize = new SizeF(200' 100)'                  Wrap = FormattedTextWrapMode.Word'                  Trimming = FormattedTextTrimming.CharacterEllipsis'  				ForegroundBrush = Brushes.White'                  //ForegroundBrush = new LinearGradientBrush(Colors.White' Colors.Blue' new PointF(0' 0)' new PointF(200' 200))'                  Font = font              };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 500)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: var control = new Drawable { Size = new Size(400' 500)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: control.Paint += (sender' e) =>              {                  var g = e.Graphics;                    var location = new Point(10' 10);                    g.DrawText(font' color' location' "Single Line Text That Will Not Wrap 漢字");                    location.Y += 40;    				g.DrawRectangle(Colors.Blue' new RectangleF(location' formattedText.MaximumSize));    				var size = formattedText.Measure();                  g.DrawText(formattedText' location);                  g.DrawRectangle(Colors.Silver' new RectangleF(location' size));              };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: control.Paint += (sender' e) =>              {                  var g = e.Graphics;                    var location = new Point(10' 10);                    g.DrawText(font' color' location' "Single Line Text That Will Not Wrap 漢字");                    location.Y += 40;    				g.DrawRectangle(Colors.Blue' new RectangleF(location' formattedText.MaximumSize));    				var size = formattedText.Measure();                  g.DrawText(formattedText' location);                  g.DrawRectangle(Colors.Silver' new RectangleF(location' size));              };
Magic Number,Eto.Test.Sections.Drawing,FormattedTextSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\FormattedTextSection.cs,FormattedTextSection,The following statement contains a magic number: control.Paint += (sender' e) =>              {                  var g = e.Graphics;                    var location = new Point(10' 10);                    g.DrawText(font' color' location' "Single Line Text That Will Not Wrap 漢字");                    location.Y += 40;    				g.DrawRectangle(Colors.Blue' new RectangleF(location' formattedText.MaximumSize));    				var size = formattedText.Measure();                  g.DrawText(formattedText' location);                  g.DrawRectangle(Colors.Silver' new RectangleF(location' size));              };
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: var location = new Point(100' 100);
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: var location = new Point(100' 100);
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GetPixelSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GetPixelSection.cs,GetPixelSection,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				var imageLocation = new PointF(100' 100);  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to read the pixel color.");  				graphics.DrawImage(image' imageLocation);    				var loc = location - (Point)imageLocation;  				loc.Restrict(new Rectangle(image.Size));  				var pixelColor = image.GetPixel(loc.X' loc.Y);  				graphics.DrawText(font' Colors.White' 3' 20' "Color: " + pixelColor);  			};
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,GraphicsPathSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,GraphicsPathSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,GraphicsPathSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,PenThicknessControl,The following statement contains a magic number: var control = new NumericStepper { MinValue = 1' MaxValue = 100 };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,DrawLinePath,The following statement contains a magic number: var control = new Drawable { Size = new Size(550' 200)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,DrawLinePath,The following statement contains a magic number: var control = new Drawable { Size = new Size(550' 200)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,FillLinePath,The following statement contains a magic number: var control = new Drawable { Size = new Size(550' 200)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,FillLinePath,The following statement contains a magic number: var control = new Drawable { Size = new Size(550' 200)' BackgroundColor = Colors.Black };
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(220' 120' 220' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(220' 120' 220' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(220' 120' 220' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(220' 120' 220' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: matrix.Translate(240' 120);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: matrix.Translate(240' 120);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: matrix.Scale(0.25f);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(370' 120' 370' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(370' 120' 370' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(370' 120' 370' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreateMainPath,The following statement contains a magic number: mainPath.AddLine(370' 120' 370' 170);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.MoveTo(10' 10);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.MoveTo(10' 10);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(20' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(20' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(10' 60);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(10' 60);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(90' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(90' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(60' 30);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.LineTo(60' 30);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddArc(100' 0' 100' 50' 200' -160);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddArc(100' 0' 100' 50' 200' -160);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddArc(100' 0' 100' 50' 200' -160);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddArc(100' 0' 100' 50' 200' -160);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddArc(100' 0' 100' 50' 200' -160);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddBezier(new PointF(200' 10)' new PointF(285' 20)' new PointF(210' 85)' new PointF(300' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddCurve(new PointF(310' 90)' new PointF(390' 90)' new PointF(390' 10)' new PointF(310' 10));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLine(410' 10' 410' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLine(410' 10' 410' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLine(410' 10' 410' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLine(410' 10' 410' 90);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(420' 10)' new PointF(420' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(420' 10)' new PointF(420' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(420' 10)' new PointF(420' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(420' 10)' new PointF(420' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(430' 10)' new PointF(430' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(430' 10)' new PointF(430' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(430' 10)' new PointF(430' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(430' 10)' new PointF(430' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddEllipse(100' 100' 100' 45);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddEllipse(100' 100' 100' 45);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddEllipse(100' 100' 100' 45);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddEllipse(100' 100' 100' 45);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddRectangle(10' 110' 80' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddRectangle(10' 110' 80' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddRectangle(10' 110' 80' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddRectangle(10' 110' 80' 80);
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(440' 10)' new PointF(440' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(440' 10)' new PointF(440' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(440' 10)' new PointF(440' 90));
Magic Number,Eto.Test.Sections.Drawing,GraphicsPathSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\GraphicsPathSection.cs,CreatePath,The following statement contains a magic number: newPath.AddLines(new PointF(440' 10)' new PointF(440' 90));
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new ImageView { Image = image' Size = new Size(64' 64) });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new ImageView { Image = image' Size = new Size(64' 64) });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new ImageView { Image = image' Size = new Size(32' 32) });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new ImageView { Image = image' Size = new Size(32' 32) });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new DrawableImageView { Image = image' MinimumSize = new Size(64' 64)' ScaleImage = true });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new DrawableImageView { Image = image' MinimumSize = new Size(64' 64)' ScaleImage = true });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new DrawableImageView { Image = image' MinimumSize = new Size(32' 32)' ScaleImage = true });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new DrawableImageView { Image = image' MinimumSize = new Size(32' 32)' ScaleImage = true });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new Button { Image = image' Text = "64px Height"' Height = 64 });
Magic Number,Eto.Test.Sections.Drawing,IconSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IconFrameSection.cs,CreateViews,The following statement contains a magic number: layout.AddAutoSized(new Button { Image = image' Text = "32px Height"' Height = 32 });
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,IndexedBitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,IndexedBitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,IndexedBitmapSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateImage,The following statement contains a magic number: var image = new IndexedBitmap(100' 100' 8);
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateImage,The following statement contains a magic number: var image = new IndexedBitmap(100' 100' 8);
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateImage,The following statement contains a magic number: var image = new IndexedBitmap(100' 100' 8);
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateImage,The following statement contains a magic number: pal.Count < 256
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateIndexedDrawable,The following statement contains a magic number: var control = new Drawable { Size = new Size(100' 100) };
Magic Number,Eto.Test.Sections.Drawing,IndexedBitmapSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\IndexedBitmapSection.cs,CreateIndexedDrawable,The following statement contains a magic number: var control = new Drawable { Size = new Size(100' 100) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,InterpolationSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,InterpolationSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,InterpolationSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: var drawable = new Drawable { Size = new Size(250' 160) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: var drawable = new Drawable { Size = new Size(250' 160) };
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,InterpolationSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\InterpolationSection.cs,CreateImage,The following statement contains a magic number: drawable.Paint += (sender' pe) =>  			{  				pe.Graphics.ImageInterpolation = interpolation;  				pe.Graphics.DrawImage(image' 0' 0' 20' 20);  				pe.Graphics.DrawImage(image' 0' 20' 50' 50);  				pe.Graphics.DrawImage(image' 0' 70' 100' 100);  				pe.Graphics.DrawImage(image' 120' 0' 300' 300);  			};
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,PenSection,The following statement contains a magic number: PenThickness = 4;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,PenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,PenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,PenSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,PenThicknessControl,The following statement contains a magic number: var control = new NumericStepper { MinValue = 1' MaxValue = 10 };
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,GetDrawable,The following statement contains a magic number: drawable = new Drawable  			{  				Size = new Size(560' 300)  			};
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,GetDrawable,The following statement contains a magic number: drawable = new Drawable  			{  				Size = new Size(560' 300)  			};
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: path.AddLines(new PointF(0' 0)' new PointF(100' 40)' new PointF(0' 30)' new PointF(50' 70));
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: path.AddLines(new PointF(0' 0)' new PointF(100' 40)' new PointF(0' 30)' new PointF(50' 70));
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: path.AddLines(new PointF(0' 0)' new PointF(100' 40)' new PointF(0' 30)' new PointF(50' 70));
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: path.AddLines(new PointF(0' 0)' new PointF(100' 40)' new PointF(0' 30)' new PointF(50' 70));
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: path.AddLines(new PointF(0' 0)' new PointF(100' 40)' new PointF(0' 30)' new PointF(50' 70));
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: var y = i * 20;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawLine(pen' 10' y' 110' y);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawLine(pen' 10' y' 110' y);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: y = 80 + i * 50;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: y = 80 + i * 50;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawRectangle(pen' 10' y' 100' 30);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawRectangle(pen' 10' y' 100' 30);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawRectangle(pen' 10' y' 100' 30);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: y = i * 70;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' 140' y' 100' 80' 160' 160);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' 140' y' 100' 80' 160' 160);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' 140' y' 100' 80' 160' 160);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' 140' y' 100' 80' 160' 160);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawArc(pen' 140' y' 100' 80' 160' 160);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: y = i * 70;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawEllipse(pen' 260' y' 100' 50);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawEllipse(pen' 260' y' 100' 50);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.DrawEllipse(pen' 260' y' 100' 50);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: y = i * 70;
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: g.TranslateTransform(400' y);
Magic Number,Eto.Test.Sections.Drawing,PenSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PenSection.cs,Draw,The following statement contains a magic number: i < 4
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,PixelOffsetSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,PixelOffsetSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,PixelOffsetSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 1' 1' 99' 99);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 1' 1' 99' 99);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 50' 1' 50' 99);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 50' 1' 50' 99);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 50' 1' 50' 99);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 1' 51' 99' 51);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 1' 51' 99' 51);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(whitePen' 1' 51' 99' 51);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawRectangle(whitePen' 101' 1' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawEllipse(Pens.Green' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawEllipse(Pens.Green' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawEllipse(Pens.Green' 101' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawPolygon(whitePen' new PointF(203' 1)' new PointF(253' 51)' new Point(203' 101)' new PointF(203' 1)' new PointF(253' 1)' new PointF(253' 101)' new PointF(203' 101));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(255' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(255' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: var rect = new RectangleF(255' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.LightGreen' rect' 180' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.LightGreen' rect' 180' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SkyBlue' rect' 0' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-15' 0);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.FloralWhite' rect' -45' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.FloralWhite' rect' -45' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-5' -20);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-5' -20);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SlateGray' rect' -45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SlateGray' rect' -45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-10' -10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-10' -10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawArc(Pens.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 100' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 100' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 100' 1' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawText(Fonts.Sans(12 * graphics.PointsPerPixel)' Colors.White' 0' 104' "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawText(Fonts.Sans(12 * graphics.PointsPerPixel)' Colors.White' 0' 104' "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.White' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.White' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.White' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.White' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.Gray' 101' 120' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.Gray' 101' 120' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.Gray' 101' 120' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillRectangle(Brushes.Gray' 101' 120' 10' 10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillEllipse(Brushes.Green' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillEllipse(Brushes.Green' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillEllipse(Brushes.Green' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillEllipse(Brushes.Green' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPolygon(Brushes.White' new PointF(202' 120)' new PointF(252' 170)' new Point(202' 220)' new PointF(202' 120));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(255' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(255' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(255' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect = new RectangleF(255' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.LightGreen' rect' 180' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.LightGreen' rect' 180' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SkyBlue' rect' 0' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-15' 0);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.FloralWhite' rect' -45' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.FloralWhite' rect' -45' 90);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-5' -20);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-5' -20);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SlateGray' rect' -45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SlateGray' rect' -45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-10' -10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: rect.Inflate(-10' -10);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.FillPie(Brushes.SteelBlue' rect' 180 + 45' 270);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawImage(image' 101' 120' 100' 100);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: const int offset = 440;
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: var yoffset = 112;
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(pen' xoffset' 1' xoffset' 110);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: graphics.DrawLine(pen' offset' yoffset' offset + 100' yoffset);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: xoffset += i + 2;
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: yoffset += i + 2;
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetSection.cs,Draw,The following statement contains a magic number: i < 14
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,PixelOffsetTransforms,The following statement contains a magic number: Spacing = 5;
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,PixelOffsetTransforms,The following statement contains a magic number: var options = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Spacing = 5'  				Padding = new Padding(10)'  				Items =  				{  					"PixelOffsetMode"'  					offsetMode'  					"Test"'  					testDropDown  				}  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,PixelOffsetTransforms,The following statement contains a magic number: var options = new StackLayout  			{  				Orientation = Orientation.Horizontal'  				VerticalContentAlignment = VerticalAlignment.Center'  				Spacing = 5'  				Padding = new Padding(10)'  				Items =  				{  					"PixelOffsetMode"'  					offsetMode'  					"Test"'  					testDropDown  				}  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 4f)' new PointF(8f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: m.Scale(60f' 60f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: m.Scale(60f' 60f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: var pen = new Pen(Colors.Red' 0.1f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: var penB = new Pen(Color.FromArgb(0x00' 0x00' 0xFF' 0x9F)' 0.1f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 10f' 6f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.DrawEllipse(penB' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,EllipseAndCurveTest,The following statement contains a magic number: graphics.FillEllipse(brushY' 6f' 2f' 0.5f' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var t = new  			{  				CenterX = 0f'  				CenterY = 0f'  				OffsetX = 200f'  				OffsetY = 50f'  				RotateAngle = 0f'  				SkewAngleY = 10f'  				SkewAngleX = 10f'  				ScaleX = 16f'  				ScaleY = 16f  			};
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(9.64f' 7.64f)' new PointF(9.87f' 7.14f)' new PointF(10f' 6.59f)' new PointF(10f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 6f)' new PointF(10f' 3.79f)' new PointF(8.21f' 2f)' new PointF(6f' 2f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 2f)' new PointF(3.79f' 2f)' new PointF(2f' 3.79f)' new PointF(2f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 6f)' new PointF(2f' 8.21f)' new PointF(3.79f' 10f)' new PointF(6f' 10f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 10f)' new PointF(6.59f' 10f)' new PointF(7.14f' 9.87f)' new PointF(7.64f' 9.64f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(7.64f' 9.64f' 10f' 12f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(10f' 12f' 7.64f' 14.36f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(7.64f' 14.36f)' new PointF(7.14f' 14.13f)' new PointF(6.59f' 14f)' new PointF(6f' 14f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 14f)' new PointF(3.79f' 14f)' new PointF(2f' 15.79f)' new PointF(2f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(2f' 18f)' new PointF(2f' 20.21f)' new PointF(3.79f' 22f)' new PointF(6f' 22f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 22f)' new PointF(8.21f' 22f)' new PointF(10f' 20.21f)' new PointF(10f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(10f' 18f)' new PointF(10f' 17.41f)' new PointF(9.87f' 16.86f)' new PointF(9.64f' 16.36f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(9.64f' 16.36f' 12f' 14f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(12f' 14f' 19f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 21f' 22f' 21f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 21f' 22f' 20f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 20f' 9.64f' 7.64f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 8f)' new PointF(4.9f' 8f)' new PointF(4f' 7.11f)' new PointF(4f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 6f)' new PointF(4f' 4.89f)' new PointF(4.9f' 4f)' new PointF(6f' 4f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 4f)' new PointF(7.1f' 4f)' new PointF(8f' 4.89f)' new PointF(8f' 6f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 6f)' new PointF(8f' 7.11f)' new PointF(7.1f' 8f)' new PointF(6f' 8f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 20f)' new PointF(4.9f' 20f)' new PointF(4f' 19.11f)' new PointF(4f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(4f' 18f)' new PointF(4f' 16.89f)' new PointF(4.9f' 16f)' new PointF(6f' 16f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(6f' 16f)' new PointF(7.1f' 16f)' new PointF(8f' 16.89f)' new PointF(8f' 18f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(8f' 18f)' new PointF(8f' 19.11f)' new PointF(7.1f' 20f)' new PointF(6f' 20f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 12.5f)' new PointF(11.72f' 12.5f)' new PointF(11.5f' 12.28f)' new PointF(11.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(11.5f' 12f)' new PointF(11.5f' 11.72f)' new PointF(11.72f' 11.5f)' new PointF(12f' 11.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12f' 11.5f)' new PointF(12.28f' 11.5f)' new PointF(12.5f' 11.72f)' new PointF(12.5f' 12f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddBezier(new PointF(12.5f' 12f)' new PointF(12.5f' 12.28f)' new PointF(12.28f' 12.5f)' new PointF(12f' 12.5f));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(19f' 3f' 13f' 9f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(13f' 9f' 15f' 11f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(15f' 11f' 22f' 4f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: path.AddLine(22f' 4f' 22f' 3f);
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: m.Prepend(Matrix.Create(1' (float)Math.Tan(Math.PI * t.SkewAngleY / 180.0)' (float)Math.Tan(Math.PI * t.SkewAngleX / 180.0)' 1' 0' 0));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: m.Prepend(Matrix.Create(1' (float)Math.Tan(Math.PI * t.SkewAngleY / 180.0)' (float)Math.Tan(Math.PI * t.SkewAngleX / 180.0)' 1' 0' 0));
Magic Number,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The following statement contains a magic number: var pen = new Pen(Colors.Red' 0.5f);
Magic Number,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The following statement contains a magic number: yield return ControlType.Create<Drawable>(c => c.Size = new Size(100' 20));
Magic Number,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,GetControlTypes,The following statement contains a magic number: yield return ControlType.Create<Drawable>(c => c.Size = new Size(100' 20));
Magic Number,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,CreateControlContent,The following statement contains a magic number: var layout = new DynamicLayout  			{  				DefaultSpacing = new Size(10' 10)  			};
Magic Number,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,CreateControlContent,The following statement contains a magic number: var layout = new DynamicLayout  			{  				DefaultSpacing = new Size(10' 10)  			};
Magic Number,Eto.Test.Sections.Drawing,SystemColorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\SystemColorSection.cs,CreateControlContent,The following statement contains a magic number: var panel = new Panel  				{  					Content = label'  					Padding = new Padding(10)'  				};
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: var drawable = new BufferedDrawable { Size = new Size(image.Size.Width' image.Size.Height * 10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: var w = image.Size.Width / 3;
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: img = img.Clone(new Rectangle((i - 1) % 3 * w' (i - 1) / 3 * w' w' w));
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: img = img.Clone(new Rectangle((i - 1) % 3 * w' (i - 1) / 3 * w' w' w));
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: renderers.Add(graphics =>  				{  					var temp = brush.Transform; // save state  					brush.Transform = Matrix.FromRotation(90);  					graphics.FillRectangle(brush' new RectangleF(image.Size));  					graphics.TranslateTransform(0' image.Size.Height);  					brush.Transform = temp;  				});
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection.cs,TextureBrushesSection,The following statement contains a magic number: i < 10
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: var w = image.Size.Width / 3;
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: var linearGradientBrush = new LinearGradientBrush(Colors.White' Colors.Black' PointF.Empty' new PointF(0' 100));
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to move the shapes.");  				// texture brushes  				var temp = location;  				DrawShapes(textureBrush' temp' img.Size' graphics);  				// solid brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(solidBrush' temp' img.Size' graphics);  				// linear gradient brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(linearGradientBrush' temp' img.Size' graphics);  			};
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to move the shapes.");  				// texture brushes  				var temp = location;  				DrawShapes(textureBrush' temp' img.Size' graphics);  				// solid brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(solidBrush' temp' img.Size' graphics);  				// linear gradient brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(linearGradientBrush' temp' img.Size' graphics);  			};
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to move the shapes.");  				// texture brushes  				var temp = location;  				DrawShapes(textureBrush' temp' img.Size' graphics);  				// solid brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(solidBrush' temp' img.Size' graphics);  				// linear gradient brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(linearGradientBrush' temp' img.Size' graphics);  			};
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,TextureBrushesSection2,The following statement contains a magic number: drawable.Paint += (s' e) =>  			{  				var graphics = e.Graphics;  				graphics.DrawText(font' Colors.White' 3' 3' "Move the mouse in this area to move the shapes.");  				// texture brushes  				var temp = location;  				DrawShapes(textureBrush' temp' img.Size' graphics);  				// solid brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(solidBrush' temp' img.Size' graphics);  				// linear gradient brushes  				temp = temp + new PointF(200' 0);  				DrawShapes(linearGradientBrush' temp' img.Size' graphics);  			};
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.RotateTransform(20);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.TranslateTransform(0' size.Height + 20);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.TranslateTransform(0' size.Height + 20);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.FillPie(brush' new RectangleF(new SizeF(size.Width * 2' size.Height))' 0' 360);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.FillPie(brush' new RectangleF(new SizeF(size.Width * 2' size.Height))' 0' 360);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,DrawShapes,The following statement contains a magic number: g.TranslateTransform(0' size.Height + 20);
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TextureBrushesSection2,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TextureBrushesSection2.cs,GetPolygon,The following statement contains a magic number: var polygon = new[] { new PointF(0' 50)' new PointF(50' 100)' new PointF(100' 50)' new PointF(50' 0) };
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: font = Fonts.Sans(10);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: m.Scale(100' 100);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: m.Scale(100' 100);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: m2.Translate(10' 10);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,TransformSection,The following statement contains a magic number: m2.Translate(10' 10);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: DrawRotatedLines(g' Colors.Salmon' rotatedLineCenter' (center' angle) =>  			{  				var m = Matrix.Create();  				m.Translate(center);  				m.Rotate(angle);  				m.Translate(-center);  				m.Scale(.4f);  				g.MultiplyTransform(m);  			});
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: DrawRotatedText(g' Colors.Lime' rotatedTextCenter' (center' angle) =>  			{  				var m = Matrix.Create();  				m.RotateAt(angle' center - 40);  				g.MultiplyTransform(m);  			});
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.MultiplyTransform(Matrix.FromScaleAt(new SizeF(1' -1)' imageScaleLocation + image.Size / 2));
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Translate(0' -50);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.ScaleAt(0.3f' imageScaleLocation + image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.ScaleAt(0.3f' imageScaleLocation + image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Skew(20' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Skew(20' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.DrawText(font' Colors.White' new PointF(110' 0)' "Skewed Text");
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Translate(480' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Translate(480' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Scale(0.4f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,MatrixTests,The following statement contains a magic number: m.Rotate(90);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: DrawRotatedLines(g' Colors.Salmon' rotatedLineCenter' (center' angle) =>  			{  				g.TranslateTransform(center);  				g.RotateTransform(angle);  				g.TranslateTransform(-center);  				g.ScaleTransform(.4f);  			});
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: DrawRotatedText(g' Colors.Lime' rotatedTextCenter' (center' angle) =>  			{  				g.TranslateTransform(center - 40);  				g.RotateTransform(angle);  				g.TranslateTransform(-center + 40);  			});
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: DrawRotatedText(g' Colors.Lime' rotatedTextCenter' (center' angle) =>  			{  				g.TranslateTransform(center - 40);  				g.RotateTransform(angle);  				g.TranslateTransform(-center + 40);  			});
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(imageScaleLocation + image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(-imageScaleLocation - image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(0' -50);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(imageScaleLocation + image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.ScaleTransform(0.3f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(-imageScaleLocation - image.Size / 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.MultiplyTransform(Matrix.FromSkew(20' 20));
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.MultiplyTransform(Matrix.FromSkew(20' 20));
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.DrawText(font' Colors.White' new PointF(110' 0)' "Skewed Text");
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.DrawLine(Pens.White' 110' textSize.Height + 2' 110 + textSize.Width' textSize.Height + 2);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(480' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.TranslateTransform(480' 20);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.ScaleTransform(0.4f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DirectTests,The following statement contains a magic number: g.RotateTransform(90);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedLines,The following statement contains a magic number: g.DrawLine(pen' center' center + new Size(40' 0));
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedLines,The following statement contains a magic number: i < 360f
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedText,The following statement contains a magic number: i <= 90f
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedArcs,The following statement contains a magic number: g.DrawArc(new Pen(color)' RectangleF.FromCenter(center' new SizeF(50' 50))' 0' 45f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedArcs,The following statement contains a magic number: g.DrawArc(new Pen(color)' RectangleF.FromCenter(center' new SizeF(50' 50))' 0' 45f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedArcs,The following statement contains a magic number: g.DrawArc(new Pen(color)' RectangleF.FromCenter(center' new SizeF(50' 50))' 0' 45f);
Magic Number,Eto.Test.Sections.Drawing,TransformSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\TransformSection.cs,DrawRotatedArcs,The following statement contains a magic number: i <= 360f
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,SetButtonsPosition,The following statement contains a magic number: var size = new Size(200' 200);
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,SetButtonsPosition,The following statement contains a magic number: var size = new Size(200' 200);
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,CreateButtons,The following statement contains a magic number: var table = new TableLayout(3' 3);
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,CreateButtons,The following statement contains a magic number: var table = new TableLayout(3' 3);
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,CreateButtons,The following statement contains a magic number: table.Add(right = new CheckBox { Text = "Right"' BackgroundColor = Colors.Red }' 2' 1' true' true);
Magic Number,Eto.Test.Sections.Layouts.PixelLayoutSection,AnchorSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\PixelLayoutSection\AnchorSection.cs,CreateButtons,The following statement contains a magic number: table.Add(bottom = new CheckBox { Text = "Bottom"' BackgroundColor = Colors.Blue }' 1' 2' true' true);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,DockLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\DockLayoutExpansion.cs,DockLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,DockLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\DockLayoutExpansion.cs,DockLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,DockLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\DockLayoutExpansion.cs,DockLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,PixelLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,PixelLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,PixelLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,Default,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Width/Height (default)" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,Default,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Width/Height (default)" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,ExpandedWidth,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Width" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,ExpandedWidth,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Width" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,ExpandedHeight,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Height" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,PixelLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\PixelLayoutExpansion.cs,ExpandedHeight,The following statement contains a magic number: layout.Add(new Label { BackgroundColor = Colors.Red' Text = "Expanded Height" }' 50' 50);
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TableLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TableLayoutExpansion.cs,TableLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TableLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TableLayoutExpansion.cs,TableLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TableLayoutExpansion,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TableLayoutExpansion.cs,TableLayoutExpansion,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,TablePaddingAndSpacingSection,The following statement contains a magic number: var layout = new TableLayout  			{  				Padding = 10'  				Spacing = new Size(10' 10)  			};
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,TablePaddingAndSpacingSection,The following statement contains a magic number: var layout = new TableLayout  			{  				Padding = 10'  				Spacing = new Size(10' 10)  			};
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,TablePaddingAndSpacingSection,The following statement contains a magic number: var layout = new TableLayout  			{  				Padding = 10'  				Spacing = new Size(10' 10)  			};
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,TablePaddingAndSpacingSection,The following statement contains a magic number: i < 20
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,CreateChild,The following statement contains a magic number: return new TableLayout  			{  				BackgroundColor = Colors.Silver'  				Padding = 10'  				Spacing = new Size(10' 10)'  				Rows =  				{  					new TableRow()'  					new TableRow("Text"' new TextBox())'  					new TableRow(new TableCell()' new CheckBox { Text = "Check Box" })  				}  			};
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,CreateChild,The following statement contains a magic number: return new TableLayout  			{  				BackgroundColor = Colors.Silver'  				Padding = 10'  				Spacing = new Size(10' 10)'  				Rows =  				{  					new TableRow()'  					new TableRow("Text"' new TextBox())'  					new TableRow(new TableCell()' new CheckBox { Text = "Check Box" })  				}  			};
Magic Number,Eto.Test.Sections.Layouts.ScrollingLayouts,TablePaddingAndSpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\ScrollingLayouts\TablePaddingAndSpacingSection.cs,CreateChild,The following statement contains a magic number: return new TableLayout  			{  				BackgroundColor = Colors.Silver'  				Padding = 10'  				Spacing = new Size(10' 10)'  				Rows =  				{  					new TableRow()'  					new TableRow("Text"' new TextBox())'  					new TableRow(new TableCell()' new CheckBox { Text = "Check Box" })  				}  			};
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ChildWidthSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ChildWidthSection.cs,ChildWidthSection,The following statement contains a magic number: table.Columns.Add(new GridColumn { AutoSize = false' Width = 1000' HeaderText = "Title"' DataCell = new TextBoxCell("FormattedTitle")' Editable = false' Sortable = true });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ChildWidthSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ChildWidthSection.cs,ChildWidthSection,The following statement contains a magic number: this.Add(table' 0' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,RuntimeSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,RuntimeSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,RuntimeSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,ToggleButton,The following statement contains a magic number: control.Click += delegate  			{  				toggle = !toggle;  				SuspendLayout();  				if (toggle)  				{  					mainTable.Add(left = VerticalSection()' 0' 0);  					rightSection.Content = VerticalSection();  					middleTable.Add(HorizontalSection()' 0' 2);  					topSection.Content = HorizontalSection();  					control.Text = "Remove Columns";  				}  				else  				{  					if (left != null)  					{  						left.Detach();  						left = null;  					}  					rightSection.Content = null;  					middleTable.Add(null' 0' 2);  					topSection.Content = null;  					control.Text = "Add Columns To Table";  				}  				ResumeLayout();  			};
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,ToggleButton,The following statement contains a magic number: control.Click += delegate  			{  				toggle = !toggle;  				SuspendLayout();  				if (toggle)  				{  					mainTable.Add(left = VerticalSection()' 0' 0);  					rightSection.Content = VerticalSection();  					middleTable.Add(HorizontalSection()' 0' 2);  					topSection.Content = HorizontalSection();  					control.Text = "Remove Columns";  				}  				else  				{  					if (left != null)  					{  						left.Detach();  						left = null;  					}  					rightSection.Content = null;  					middleTable.Add(null' 0' 2);  					topSection.Content = null;  					control.Text = "Add Columns To Table";  				}  				ResumeLayout();  			};
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MainTable,The following statement contains a magic number: mainTable = new TableLayout(3' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MainTable,The following statement contains a magic number: mainTable.Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MainTable,The following statement contains a magic number: mainTable.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MainTable,The following statement contains a magic number: mainTable.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MainTable,The following statement contains a magic number: mainTable.Add(rightSection = new Panel()' 2' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MiddleSection,The following statement contains a magic number: middleTable = new TableLayout(1' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MiddleSection,The following statement contains a magic number: middleTable.Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MiddleSection,The following statement contains a magic number: middleTable.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,MiddleSection,The following statement contains a magic number: middleTable.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,VerticalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: var layout = new DynamicLayout { BackgroundColor = Colors.Blue' DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,RuntimeSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\RuntimeSection.cs,HorizontalSection,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(50' 60)' BackgroundColor = Colors.Lime });
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: var size = new Size(-1' 100);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(1' 1) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(1' 1) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(1' 1) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(2' 2) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue' Size = size' Spacing = new Size(5' 5)' Padding = new Padding(5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout.SetColumnScale(2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,ScalingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\ScalingSection.cs,ScalingSection,The following statement contains a magic number: tableLayout.SetRowScale(2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,SpacingSection,The following statement contains a magic number: var layout = new TableLayout(3' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,SpacingSection,The following statement contains a magic number: layout.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,SpacingSection,The following statement contains a magic number: layout.Spacing = new Size(5' 5);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,SpacingSection,The following statement contains a magic number: layout.Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,SpacingSection,The following statement contains a magic number: layout.Add(DifferentSizes()' 2' 0' true' true);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,FillTable,The following statement contains a magic number: var panel = new Panel  					{  						Size = SquareSize'  						BackgroundColor = (x + y * layout.Dimensions.Width) % 2 == 0 ? Colors.Lime : Colors.Red  					};
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoSpacing,The following statement contains a magic number: var layout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoSpacing,The following statement contains a magic number: var layout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoSpacing,The following statement contains a magic number: layout.Padding = new Padding(10);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: var layout = new TableLayout(3' 4) { BackgroundColor = Colors.Blue' Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: var layout = new TableLayout(3' 4) { BackgroundColor = Colors.Blue' Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: var layout = new TableLayout(3' 4) { BackgroundColor = Colors.Blue' Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: var layout = new TableLayout(3' 4) { BackgroundColor = Colors.Blue' Spacing = new Size(5' 5) };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 0' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 0' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 10)' BackgroundColor = Colors.Red }' 1' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 10)' BackgroundColor = Colors.Red }' 1' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 30)' BackgroundColor = Colors.Lime }' 2' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 30)' BackgroundColor = Colors.Lime }' 2' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 30)' BackgroundColor = Colors.Lime }' 2' 0);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 10)' BackgroundColor = Colors.Red }' 0' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 10)' BackgroundColor = Colors.Red }' 0' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 30)' BackgroundColor = Colors.Lime }' 1' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 30)' BackgroundColor = Colors.Lime }' 1' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 2' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 2' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 2' 1);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Lime }' 0' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Lime }' 0' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Lime }' 0' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Red }' 1' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Red }' 1' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Red }' 1' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 2' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 2' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 2' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Lime }' 2' 2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 0' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 0' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(10' 10)' BackgroundColor = Colors.Red }' 0' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Lime }' 1' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Lime }' 1' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(20' 20)' BackgroundColor = Colors.Lime }' 1' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Red }' 2' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Red }' 2' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Red }' 2' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,DifferentSizes,The following statement contains a magic number: layout.Add(new Panel { Size = new Size(30' 30)' BackgroundColor = Colors.Red }' 2' 3);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: var layout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: var layout = new TableLayout(3' 3) { BackgroundColor = Colors.Blue };
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: layout.Spacing = new Size(20' 20);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: layout.Spacing = new Size(20' 20);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: layout.SetColumnScale(2);
Magic Number,Eto.Test.Sections.Layouts.TableLayoutSection,SpacingSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Layouts\TableLayoutSection\SpacingSection.cs,NoPadding,The following statement contains a magic number: layout.SetRowScale(2);
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogSection,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogOptions,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogOptions,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PrintDialogOptions,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: var font = Fonts.Serif(16);
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PrintPage += (sender' e) =>  			{  				Size pageSize = Size.Round(e.PageSize);    				// draw a border around the printable area  				var rect = new Rectangle(pageSize);  				rect.Inflate(-1' -1);  				e.Graphics.DrawRectangle(Pens.Silver' rect);    				// draw title  				e.Graphics.DrawText(font' Colors.Black' new Point(50' 20)' document.Name);    				// draw page number  				var text = string.Format("page {0} of {1}"' e.CurrentPage + 1' document.PageCount);  				var textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' 20)' text);    				// draw date  				text = string.Format("Printed on {0:f}"' printTime);  				textSize = Size.Round(e.Graphics.MeasureString(font' text));  				e.Graphics.DrawText(font' Colors.Black' new Point(pageSize.Width - textSize.Width - 50' pageSize.Height - textSize.Height - 20)' text);    				// draw some rectangles  				switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}  			};
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following statement contains a magic number: document.PageCount = 2;
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,Settings,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,Settings,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,Settings,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PageRange,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PageRange,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,PageRange,The following statement contains a magic number: var layout = new DynamicLayout { DefaultSpacing = new Size(5' 5)' Padding = new Padding(10) };
Magic Number,Eto.Test.Sections,UnitTestProgressBar,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestProgressBar,The following statement contains a magic number: Size = new Size(200' 5);
Magic Number,Eto.Test.Sections,UnitTestProgressBar,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestProgressBar,The following statement contains a magic number: Size = new Size(200' 5);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: timer.Interval = 0.5;
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: tree = new TreeGridView { ShowHeader = false' Size = new Size(400' -1) };
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var buttons = new TableLayout  			{  				Padding = new Padding(10' 0)'  				Spacing = new Size(5' 5)'  				Rows = { new TableRow(startButton' stopButton' showOuputCheckBox' null' testCountLabel) }  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var buttons = new TableLayout  			{  				Padding = new Padding(10' 0)'  				Spacing = new Size(5' 5)'  				Rows = { new TableRow(startButton' stopButton' showOuputCheckBox' null' testCountLabel) }  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var buttons = new TableLayout  			{  				Padding = new Padding(10' 0)'  				Spacing = new Size(5' 5)'  				Rows = { new TableRow(startButton' stopButton' showOuputCheckBox' null' testCountLabel) }  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var statusChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  				Orientation = Orientation.Horizontal'  				DataStore = GetOptionalFilters()  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var statusChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  				Orientation = Orientation.Horizontal'  				DataStore = GetOptionalFilters()  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var includeChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var includeChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var excludeChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var excludeChecks = new CheckBoxList  			{  				Spacing = new Size(2' 2)'  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: filterControls = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Rows = {  					new TableRow("Show"' statusChecks' null)'  					new TableRow(includeLabel' includeChecks)'  					new TableRow(excludeLabel' excludeChecks)  				}  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: filterControls = new TableLayout  			{  				Spacing = new Size(5' 5)'  				Rows = {  					new TableRow("Show"' statusChecks' null)'  					new TableRow(includeLabel' includeChecks)'  					new TableRow(excludeLabel' excludeChecks)  				}  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: var allFilters = new Panel  			{  				Padding = new Padding(10' 0)'  				Content = new Scrollable  				{  					Border = BorderType.None'  					Content = new TableLayout { Rows = { filterControls' customFilterControls } }  				}  			};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: Size = new Size(950' 600);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: Size = new Size(950' 600);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: log = new TextArea { Size = new Size(400' 300)' ReadOnly = true' Wrap = false };
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: log = new TextArea { Size = new Size(400' 300)' ReadOnly = true' Wrap = false };
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,UnitTestPanel,The following statement contains a magic number: base.Content = new Splitter  				{  					FixedPanel = SplitterFixedPanel.None'    					Panel1 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { allFilters' search' tree }  					}'    					Panel2 = new TableLayout  					{  						Padding = new Padding(0' 10' 0' 0)'  						Spacing = new Size(5' 5)'  						Rows = { buttons' progress' log }  					}  				};
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: switch (status)  			{  				case TestStatus.Warning:  					return CreateImage(Colors.Yellow' Colors.Black' "!");  				case TestStatus.Failed:  					return CreateImage(Colors.Red' (g' b) =>  					{  						var offset = 10;  						var pen = new Pen(Colors.White' 4);  						g.DrawLine(pen' offset' offset' b.Width - offset' b.Height - offset);  						g.DrawLine(pen' b.Width - offset' offset' offset' b.Height - offset);  					});  				case TestStatus.Inconclusive:  					return CreateImage(Colors.Yellow' Colors.Black' "?");  				case TestStatus.Skipped:  					return CreateImage(Colors.Yellow' Colors.Black' "»");  				case TestStatus.Passed:  					return CreateImage(Colors.Green' Colors.White' "✓");  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: switch (status)  			{  				case TestStatus.Warning:  					return CreateImage(Colors.Yellow' Colors.Black' "!");  				case TestStatus.Failed:  					return CreateImage(Colors.Red' (g' b) =>  					{  						var offset = 10;  						var pen = new Pen(Colors.White' 4);  						g.DrawLine(pen' offset' offset' b.Width - offset' b.Height - offset);  						g.DrawLine(pen' b.Width - offset' offset' offset' b.Height - offset);  					});  				case TestStatus.Inconclusive:  					return CreateImage(Colors.Yellow' Colors.Black' "?");  				case TestStatus.Skipped:  					return CreateImage(Colors.Yellow' Colors.Black' "»");  				case TestStatus.Passed:  					return CreateImage(Colors.Green' Colors.White' "✓");  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: var bmp = new Bitmap(32' 32' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: var bmp = new Bitmap(32' 32' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: return bmp.WithSize(16' 16);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: return bmp.WithSize(16' 16);
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: return CreateImage(color' (g' b) =>  			{  				var r = new RectangleF(Point.Empty' b.Size);  				r.Inflate(-1' -1);  				if (text != null)  				{  					var font = SystemFonts.Default(SystemFonts.Default().Size * 2);  					var size = g.MeasureString(font' text);  					g.DrawText(font' textcolor' r.Location + (PointF)(r.Size - size) / 2' text);  				}  			});
Magic Number,Eto.Test.Sections,UnitTestPanel,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\UnitTestPanel.cs,CreateImage,The following statement contains a magic number: return CreateImage(color' (g' b) =>  			{  				var r = new RectangleF(Point.Empty' b.Size);  				r.Inflate(-1' -1);  				if (text != null)  				{  					var font = SystemFonts.Default(SystemFonts.Default().Size * 2);  					var size = g.MeasureString(font' text);  					g.DrawText(font' textcolor' r.Location + (PointF)(r.Size - size) / 2' text);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapFromBackgroundThreadShouldBeUsable,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapFromBackgroundThreadShouldBeUsable,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapFromBackgroundThreadShouldBeUsable,The following statement contains a magic number: g.DrawLine(Colors.Blue' 0' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapFromBackgroundThreadShouldBeUsable,The following statement contains a magic number: g.DrawLine(Colors.Blue' 0' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldBeEditableFromUIThread,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldBeEditableFromUIThread,The following statement contains a magic number: var bmp = new Bitmap(100' 100' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldBeEditableFromUIThread,The following statement contains a magic number: Shown(  				f => {  					using (var g = new Graphics(bmp))  					{  						g.DrawLine(Colors.Blue' 0' 0' 100' 100);  					}    					return new ImageView { Image = bmp };  				});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldBeEditableFromUIThread,The following statement contains a magic number: Shown(  				f => {  					using (var g = new Graphics(bmp))  					{  						g.DrawLine(Colors.Blue' 0' 0' 100' 100);  					}    					return new ImageView { Image = bmp };  				});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(Colors.Blue' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(Colors.Blue' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(Colors.Green' 10' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(Colors.Green' 10' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(Colors.Green' 10' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 20; x < 30; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 20; x < 30; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 20; x < 30; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: Assert.AreEqual(Colors.Green' bmp.GetPixel(10' 0)' "#2");
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: Assert.AreEqual(Colors.Red' bmp.GetPixel(20' 0)' "#3");
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#5");
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: Assert.AreEqual(Colors.Red' bd.GetPixel(20' 0)' "#6");
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() => Shown(f => new ImageView { Image = bmp }'   				iv => {    				// also test in UI thread  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(0' 0)' "#7");  				Assert.AreEqual(Colors.Green' bmp.GetPixel(10' 0)' "#8");  				Assert.AreEqual(Colors.Red' bmp.GetPixel(20' 0)' "#9");    				using (var bd = bmp.Lock())  				{  					Assert.AreEqual(Colors.Blue' bd.GetPixel(0' 0)' "#10");  					Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#11");  					Assert.AreEqual(Colors.Red' bd.GetPixel(20' 0)' "#12");  				}  			}));
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() => Shown(f => new ImageView { Image = bmp }'   				iv => {    				// also test in UI thread  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(0' 0)' "#7");  				Assert.AreEqual(Colors.Green' bmp.GetPixel(10' 0)' "#8");  				Assert.AreEqual(Colors.Red' bmp.GetPixel(20' 0)' "#9");    				using (var bd = bmp.Lock())  				{  					Assert.AreEqual(Colors.Blue' bd.GetPixel(0' 0)' "#10");  					Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#11");  					Assert.AreEqual(Colors.Red' bd.GetPixel(20' 0)' "#12");  				}  			}));
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() => Shown(f => new ImageView { Image = bmp }'   				iv => {    				// also test in UI thread  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(0' 0)' "#7");  				Assert.AreEqual(Colors.Green' bmp.GetPixel(10' 0)' "#8");  				Assert.AreEqual(Colors.Red' bmp.GetPixel(20' 0)' "#9");    				using (var bd = bmp.Lock())  				{  					Assert.AreEqual(Colors.Blue' bd.GetPixel(0' 0)' "#10");  					Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#11");  					Assert.AreEqual(Colors.Red' bd.GetPixel(20' 0)' "#12");  				}  			}));
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,BitmapShouldAllowMultipleThreads,The following statement contains a magic number: await Task.Run(() => Shown(f => new ImageView { Image = bmp }'   				iv => {    				// also test in UI thread  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(0' 0)' "#7");  				Assert.AreEqual(Colors.Green' bmp.GetPixel(10' 0)' "#8");  				Assert.AreEqual(Colors.Red' bmp.GetPixel(20' 0)' "#9");    				using (var bd = bmp.Lock())  				{  					Assert.AreEqual(Colors.Blue' bd.GetPixel(0' 0)' "#10");  					Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#11");  					Assert.AreEqual(Colors.Red' bd.GetPixel(20' 0)' "#12");  				}  			}));
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldThrowIfCalledWhileLocked,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					Assert.Throws<InvalidOperationException>(() => bmp.Lock());  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldThrowIfCalledWhileLocked,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					Assert.Throws<InvalidOperationException>(() => bmp.Lock());  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldNowThrowIfCalledSequentially,The following statement contains a magic number: Invoke(() =>  			{  				var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);    				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 0; x < 10; x++)  							bd.SetPixel(x' y' Colors.Red);  				}  			  				using (var bd = bmp.Lock())  				{  					for (int y = 0; y < 10; y++)  						for (int x = 10; x < 20; x++)  							bd.SetPixel(x' y' Colors.Blue);  				}    				// sanity check  				Assert.AreEqual(Colors.Red' bmp.GetPixel(0' 0));  				Assert.AreEqual(Colors.Blue' bmp.GetPixel(10' 0));  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldSetPixelsCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var bitmap = new Bitmap(width' height' format);  				// use Lock() to set pixels  				using (var bd = bitmap.Lock())  				{  					for (int i = 0; i < width; ++i)  					{  						for (int j = 0; j < height; ++j)  						{  							var c = j < height / 2 ? Colors.Red : Colors.Green;  							bd.SetPixel(i' j' c);  						}  					}  				}    				// use GetPixel() to get the pixel to verify (which is typically not implemented using lock())  				for (int i = 0; i < width; ++i)  				{  					for (int j = 0; j < height; ++j)  					{  						var c = j < height / 2 ? Colors.Red : Colors.Green;  						Assert.AreEqual(c' bitmap.GetPixel(i' j)' $"Pixel at {i}'{j} is incorrect");  					}  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldSetPixelsCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var bitmap = new Bitmap(width' height' format);  				// use Lock() to set pixels  				using (var bd = bitmap.Lock())  				{  					for (int i = 0; i < width; ++i)  					{  						for (int j = 0; j < height; ++j)  						{  							var c = j < height / 2 ? Colors.Red : Colors.Green;  							bd.SetPixel(i' j' c);  						}  					}  				}    				// use GetPixel() to get the pixel to verify (which is typically not implemented using lock())  				for (int i = 0; i < width; ++i)  				{  					for (int j = 0; j < height; ++j)  					{  						var c = j < height / 2 ? Colors.Red : Colors.Green;  						Assert.AreEqual(c' bitmap.GetPixel(i' j)' $"Pixel at {i}'{j} is incorrect");  					}  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldGetPixelsCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var bitmap = new Bitmap(width' height' format);  				for (int i = 0; i < width; ++i)  				{  					for (int j = 0; j < height; ++j)  					{  						var c = j < height / 2 ? Colors.Red : Colors.Green;  						bitmap.SetPixel(i' j' c);  					}  				}    				using (var bd = bitmap.Lock())  				{  					for (int i = 0; i < width; ++i)  					{  						for (int j = 0; j < height; ++j)  						{  							var c = j < height / 2 ? Colors.Red : Colors.Green;  							Assert.AreEqual(c' bd.GetPixel(i' j)' $"Pixel at {i}'{j} is incorrect");  						}  					}  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,LockShouldGetPixelsCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var bitmap = new Bitmap(width' height' format);  				for (int i = 0; i < width; ++i)  				{  					for (int j = 0; j < height; ++j)  					{  						var c = j < height / 2 ? Colors.Red : Colors.Green;  						bitmap.SetPixel(i' j' c);  					}  				}    				using (var bd = bitmap.Lock())  				{  					for (int i = 0; i < width; ++i)  					{  						for (int j = 0; j < height; ++j)  						{  							var c = j < height / 2 ? Colors.Red : Colors.Green;  							Assert.AreEqual(c' bd.GetPixel(i' j)' $"Pixel at {i}'{j} is incorrect");  						}  					}  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,SizeShouldBeInPixels,The following statement contains a magic number: Invoke(() =>  			{  				Assert.AreEqual(new Size(128' 128)' TestIcons.Logo288Bitmap.Size);    				Assert.AreEqual(new Size(128' 128)' TestIcons.LogoBitmap.Size);  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,SizeShouldBeInPixels,The following statement contains a magic number: Invoke(() =>  			{  				Assert.AreEqual(new Size(128' 128)' TestIcons.Logo288Bitmap.Size);    				Assert.AreEqual(new Size(128' 128)' TestIcons.LogoBitmap.Size);  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,SizeShouldBeInPixels,The following statement contains a magic number: Invoke(() =>  			{  				Assert.AreEqual(new Size(128' 128)' TestIcons.Logo288Bitmap.Size);    				Assert.AreEqual(new Size(128' 128)' TestIcons.LogoBitmap.Size);  			});
Magic Number,Eto.Test.UnitTests.Drawing,BitmapTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BitmapTests.cs,SizeShouldBeInPixels,The following statement contains a magic number: Invoke(() =>  			{  				Assert.AreEqual(new Size(128' 128)' TestIcons.Logo288Bitmap.Size);    				Assert.AreEqual(new Size(128' 128)' TestIcons.LogoBitmap.Size);  			});
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,LinearGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new LinearGradientBrush(Colors.Blue' Colors.Green' new PointF(0' 0)' new PointF(30' 30)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,LinearGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new LinearGradientBrush(Colors.Blue' Colors.Green' new PointF(0' 0)' new PointF(30' 30)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,RadialGradientBrushShouldWorkInMultipleThreads,The following statement contains a magic number: await BrushTest(new RadialGradientBrush(Colors.Blue' Colors.Green' new PointF(10' 10)' new PointF(15' 15)' new SizeF(15' 15)));
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: var bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: g.FillRectangle(brush' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: g.FillRectangle(brush' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(brush' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(brush' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(brush' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,BrushTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\BrushTests.cs,BrushTest,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(30' 30' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.FillRectangle(brush' 0' 0' 10' 10);  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,ClipTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\ClipTests.cs,ClipBoundsShouldMatchClientSize,The following statement contains a magic number: var size = new Size(300' 300);
Magic Number,Eto.Test.UnitTests.Drawing,ClipTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\ClipTests.cs,ClipBoundsShouldMatchClientSize,The following statement contains a magic number: var size = new Size(300' 300);
Magic Number,Eto.Test.UnitTests.Drawing,ClipTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\ClipTests.cs,ClipRectangleShouldTranslate,The following statement contains a magic number: TestBase.Paint((drawable' e) =>  			{  				var graphics = e.Graphics;  				// Clip to the upper-left quadrant  				var clipTo = drawable.ClientSize / 2;  				graphics.SetClip(new RectangleF(PointF.Empty' clipTo));    				// Translate to the bottom-right quadrant  				graphics.TranslateTransform(new Point(clipTo));    				// Check that the clip region was correctly translated  				var clip = graphics.ClipBounds;  				var expectedClip = new RectangleF(-new Point(clipTo)' clipTo);  				Assert.AreEqual(Rectangle.Round(expectedClip)' Rectangle.Round(clip)' "Clip rectangle wasn't translated properly");  			});
Magic Number,Eto.Test.UnitTests.Drawing,ColorTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\ColorTests.cs,ToRgbShouldRoundtrip,The following statement contains a magic number: Assert.AreEqual(color.Ab' 255' "Alpha should be 255 when using Color.FromRgb");
Magic Number,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The following statement contains a magic number: yield return PropertyTest(() => new Eto.Drawing.LinearGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(10' 10))' r => r.Wrap);
Magic Number,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The following statement contains a magic number: yield return PropertyTest(() => new Eto.Drawing.LinearGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(10' 10))' r => r.Wrap);
Magic Number,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The following statement contains a magic number: yield return PropertyTest(() => new Eto.Drawing.RadialGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(1' 1)' new SizeF(10' 10))' r => r.Wrap);
Magic Number,Eto.Test.UnitTests.Drawing,DefaultValueTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\DefaultValueTests.cs,GetTests,The following statement contains a magic number: yield return PropertyTest(() => new Eto.Drawing.RadialGradientBrush(Colors.Black' Colors.White' PointF.Empty' new PointF(1' 1)' new SizeF(10' 10))' r => r.Wrap);
Magic Number,Eto.Test.UnitTests.Drawing,FontTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\FontTests.cs,FontShouldWorkInMultipleThreads,The following statement contains a magic number: var bmp = new Bitmap(100' 20' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,FontTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\FontTests.cs,FontShouldWorkInMultipleThreads,The following statement contains a magic number: var bmp = new Bitmap(100' 20' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,FontTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\FontTests.cs,FontShouldWorkInMultipleThreads,The following statement contains a magic number: var font = Fonts.Sans(10' FontStyle.Italic' FontDecoration.Underline);
Magic Number,Eto.Test.UnitTests.Drawing,FontTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\FontTests.cs,FontShouldWorkInMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(100' 20' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.DrawText(font' Colors.Blue' 0' 0' "Some Text");  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,FontTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\FontTests.cs,FontShouldWorkInMultipleThreads,The following statement contains a magic number: await Task.Run(() =>  			{  				bmp = new Bitmap(100' 20' PixelFormat.Format32bppRgba);  				using (var g = new Graphics(bmp))  				{  					g.DrawText(font' Colors.Blue' 0' 0' "Some Text");  				}  			});
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: var bmp = new Bitmap(40' 10' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: var bmp = new Bitmap(40' 10' PixelFormat.Format32bppRgba);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Red' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Red' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.TranslateTransform(10' 0);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Green' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Green' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.TranslateTransform(10' 0);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Blue' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Blue' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.TranslateTransform(10' 0);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Yellow' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: g.FillRectangle(Colors.Yellow' 0' 0' 10' 10);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: Assert.AreEqual(Colors.Green' bd.GetPixel(10' 0)' "#2");
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(20' 0)' "#3");
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,AntiAliasShouldNotInterfereWithTransform,The following statement contains a magic number: Assert.AreEqual(Colors.Yellow' bd.GetPixel(30' 0)' "#4");
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: var bmp = new Bitmap(2' 2' PixelFormat.Format32bppRgb);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: var bmp = new Bitmap(2' 2' PixelFormat.Format32bppRgb);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: var bmp2 = new Bitmap(200' 200' PixelFormat.Format32bppRgb);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: var bmp2 = new Bitmap(200' 200' PixelFormat.Format32bppRgb);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 0' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 0' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 0' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 0' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 0' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 0' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: g.DrawImage(bmp' 100' 100' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: hasBlue(bd.GetPixel(x + 99' y + 0));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: hasRedAndBlue(bd.GetPixel(x + 25' y + 75));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: hasRedAndBlue(bd.GetPixel(x + 25' y + 75));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: hasRed(bd.GetPixel(x + 0' y + 99));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 99' y + 0));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 50' y + 50));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 50' y + 50));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 50' y + 49));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 50' y + 49));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 49' y + 49));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Blue' bd.GetPixel(x + 49' y + 49));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Red' bd.GetPixel(x + 49' y + 51));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Red' bd.GetPixel(x + 49' y + 51));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: Assert.AreEqual(Colors.Red' bd.GetPixel(x + 0' y + 99));
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: checkNonInterpolated(bd' 100' 0);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: checkInterpolated(bd' 0' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: checkNonInterpolated(bd' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,GraphicsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\GraphicsTests.cs,ImageInterpolationShouldBeIndependent,The following statement contains a magic number: checkNonInterpolated(bd' 100' 100);
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The following statement contains a magic number: var expectedScales = new [] { 0.5f' 1f' 1.5f' 2f' 4f };
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The following statement contains a magic number: var expectedScales = new [] { 0.5f' 1f' 1.5f' 2f' 4f };
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The following statement contains a magic number: var expectedScales = new [] { 0.5f' 1f' 1.5f' 2f' 4f };
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconShouldSupportMultipleResolutions,The following statement contains a magic number: var expectedScales = new [] { 0.5f' 1f' 1.5f' 2f' 4f };
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: Assert.AreEqual(5' icon.Frames.Count()' "#2");
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,IconFromIcoShouldSetFrames,The following statement contains a magic number: var sizes = new []  			{  				new Size(16' 16)'  				new Size(32' 32)'  				new Size(48' 48)'  				new Size(64' 64)'  				new Size(128' 128)'  			};
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,GetFrameWithScaleShouldWorkWithIco,The following statement contains a magic number: Assert.AreEqual(5' icon.Frames.Count()' "#2");
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,DrawingManyIconsShouldNotCrash,The following statement contains a magic number: g.DrawImage(icon' 0' 0' 50' 50);
Magic Number,Eto.Test.UnitTests.Drawing,IconTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\IconTests.cs,DrawingManyIconsShouldNotCrash,The following statement contains a magic number: g.DrawImage(icon' 0' 0' 50' 50);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Equals,The following statement contains a magic number: return  				FloatEquals(e[0]' xx) &&  				FloatEquals(e[1]' yx) &&  				FloatEquals(e[2]' xy) &&  				FloatEquals(e[3]' yy) &&  				FloatEquals(e[4]' x0) &&  				FloatEquals(e[5]' y0);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Equals,The following statement contains a magic number: return  				FloatEquals(e[0]' xx) &&  				FloatEquals(e[1]' yx) &&  				FloatEquals(e[2]' xy) &&  				FloatEquals(e[3]' yy) &&  				FloatEquals(e[4]' x0) &&  				FloatEquals(e[5]' y0);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Equals,The following statement contains a magic number: return  				FloatEquals(e[0]' xx) &&  				FloatEquals(e[1]' yx) &&  				FloatEquals(e[2]' xy) &&  				FloatEquals(e[3]' yy) &&  				FloatEquals(e[4]' x0) &&  				FloatEquals(e[5]' y0);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Equals,The following statement contains a magic number: return  				FloatEquals(e[0]' xx) &&  				FloatEquals(e[1]' yx) &&  				FloatEquals(e[2]' xy) &&  				FloatEquals(e[3]' yy) &&  				FloatEquals(e[4]' x0) &&  				FloatEquals(e[5]' y0);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,FloatEquals,The following statement contains a magic number: return Math.Abs(p - q) < 0.001f;
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Translate_Translates,The following statement contains a magic number: m.Translate(100' 200);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Translate_Translates,The following statement contains a magic number: m.Translate(100' 200);
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Translate_Translates,The following statement contains a magic number: Assert.IsTrue(Equals(m' 1' 0' 0' 1' 100' 200));
Magic Number,Eto.Test.UnitTests.Drawing,MatrixTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Drawing\MatrixTests.cs,Matrix_Translate_Translates,The following statement contains a magic number: Assert.IsTrue(Equals(m' 1' 0' 0' 1' 100' 200));
Magic Number,Eto.Test.UnitTests.Forms,BaseDataObjectTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ClipboardTests.cs,GettingAndSettingTextShouldNotCrash,The following statement contains a magic number: Invoke(() =>  			{  				for (int i = 0; i < 100; i++)  				{  					// this crashes on WPF on some machines.. don't know why as I can't repro the issue.  					var clipboard = new T();  					var val = "Hello" + i;  					clipboard.Text = val;  					Assert.AreEqual(val' clipboard.Text);  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,BaseDataObjectTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ClipboardTests.cs,IndividualValuesShouldBeIndependent,The following statement contains a magic number: var byteData = new byte[] { 10' 20' 30 };
Magic Number,Eto.Test.UnitTests.Forms,BaseDataObjectTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ClipboardTests.cs,IndividualValuesShouldBeIndependent,The following statement contains a magic number: var byteData = new byte[] { 10' 20' 30 };
Magic Number,Eto.Test.UnitTests.Forms,BaseDataObjectTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ClipboardTests.cs,IndividualValuesShouldBeIndependent,The following statement contains a magic number: var byteData = new byte[] { 10' 20' 30 };
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding around the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = 40;  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding around the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = 40;  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding around the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = 40;  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingBottomRightShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding at the bottom and right of the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = new Padding(0' 0' 40' 40);  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingBottomRightShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding at the bottom and right of the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = new Padding(0' 0' 40' 40);  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingBottomRightShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding at the bottom and right of the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = new Padding(0' 0' 40' 40);  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,PanelPaddingBottomRightShouldWork,The following statement contains a magic number: ManualForm(  				"There should be 40px padding at the bottom and right of the blue rectangle"'  				form =>  				{  					var panel = type.CreateControl();  					Assert.IsNotNull(panel);    					panel.Padding = new Padding(0' 0' 40' 40);  					panel.Content = new Panel  					{  						BackgroundColor = Colors.Blue'  						Size = new Size(200' 200)  					};  					return type.CreateContainer(panel);  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The following statement contains a magic number: ManualForm("You should be able to toggle the radio buttons between enabled and disabled.\nChange the check box twice and verify the result."'  				form =>  				{  					var label = new Label { TextAlignment = TextAlignment.Left };  					var radio = new EnumRadioButtonList<TestEnum> { Orientation = Orientation.Vertical };  					var check = new CheckBox { Text = "Enable radio buttons"' Checked = initiallyEnabled };  					radio.EnabledChanged += (sender' e) => label.Text = $"EnabledChanged->radio.Enabled({radio.Enabled})";  					radio.Enabled = initiallyEnabled;  					Assert.AreEqual(initiallyEnabled' radio.Enabled' "#1.1");  					check.CheckedChanged += (sender' e) => {  						var isChecked = check.Checked == true;  						radio.Enabled = isChecked;  						changedCount++;  						// check visual child enabled state  						var tableLayout = radio.VisualChildren.OfType<TableLayout>().FirstOrDefault();  						if (tableLayout?.Enabled != isChecked)  							incorrectTableLayoutEnabledState++;  					};    					radio.LoadComplete += (sender' e) =>  					{  						var theButton = radio.VisualChildren.OfType<RadioButton>().FirstOrDefault();  						if (theButton?.Enabled == initiallyEnabled)  							initialStateMatchesInitiallyEnabled = true;  					};    					form.ClientSize = new Size(450' -1);  					form.Resizable = true;  					return new TableLayout { Rows = { check' radio' label } };  				});
Magic Number,Eto.Test.UnitTests.Forms,ContainerTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ContainerTests.cs,EnabledShouldBeToggleable,The following statement contains a magic number: Assert.GreaterOrEqual(changedCount' 2' "#2.2 - The check box was not toggled at least twice");
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireAfterSet,The following statement contains a magic number: Shown(form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => dataContextChanged++;  				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				form.Content = c;  				Assert.AreEqual(2' dataContextChanged);  			}' () =>  			{  				Assert.AreEqual(2' dataContextChanged);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireAfterSet,The following statement contains a magic number: Shown(form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => dataContextChanged++;  				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				form.Content = c;  				Assert.AreEqual(2' dataContextChanged);  			}' () =>  			{  				Assert.AreEqual(2' dataContextChanged);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireAfterSet,The following statement contains a magic number: Shown(form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => dataContextChanged++;  				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				c.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.AreSame(dataContext' c.DataContext);    				form.Content = c;  				Assert.AreEqual(2' dataContextChanged);  			}' () =>  			{  				Assert.AreEqual(2' dataContextChanged);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireWhenSettingContentAfterLoaded,The following statement contains a magic number: Shown(form =>  			{  				form.DataContextChanged += (sender' e) => dataContextChanged++;  				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(form.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  				return form;  			}' form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => contentDataContextChanged++;  				form.Content = c;  				Assert.AreEqual(1' contentDataContextChanged);  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.IsInstanceOf<MyViewModel>(form.DataContext);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);    				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' contentDataContextChanged);  				Assert.AreEqual(2' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireWhenSettingContentAfterLoaded,The following statement contains a magic number: Shown(form =>  			{  				form.DataContextChanged += (sender' e) => dataContextChanged++;  				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(form.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  				return form;  			}' form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => contentDataContextChanged++;  				form.Content = c;  				Assert.AreEqual(1' contentDataContextChanged);  				Assert.AreEqual(1' dataContextChanged);  				Assert.IsInstanceOf<MyViewModel>(c.DataContext);  				Assert.IsInstanceOf<MyViewModel>(form.DataContext);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);    				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' contentDataContextChanged);  				Assert.AreEqual(2' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireWhenSettingContentAfterLoadedWithThemedControl,The following statement contains a magic number: Shown(form =>  			{  				form.DataContextChanged += (sender' e) => dataContextChanged++;  				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.AreSame(dataContext' form.DataContext);  				return form;  			}' form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => contentDataContextChanged++;  				form.Content = new CustomExpander { Content = c };  				Assert.AreEqual(1' contentDataContextChanged);  				Assert.AreEqual(1' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);    				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' contentDataContextChanged);  				Assert.AreEqual(2' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextChangedShouldFireWhenSettingContentAfterLoadedWithThemedControl,The following statement contains a magic number: Shown(form =>  			{  				form.DataContextChanged += (sender' e) => dataContextChanged++;  				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(1' dataContextChanged);  				Assert.AreSame(dataContext' form.DataContext);  				return form;  			}' form =>  			{  				var c = new Panel();  				c.DataContextChanged += (sender' e) => contentDataContextChanged++;  				form.Content = new CustomExpander { Content = c };  				Assert.AreEqual(1' contentDataContextChanged);  				Assert.AreEqual(1' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);    				form.DataContext = dataContext = new MyViewModel();  				Assert.AreEqual(2' contentDataContextChanged);  				Assert.AreEqual(2' dataContextChanged);  				Assert.AreSame(dataContext' c.DataContext);  				Assert.AreSame(dataContext' form.DataContext);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextInSubChildShouldNotBeChangedWhenParentIsSet,The following statement contains a magic number: Invoke(() =>  			{  				int childChanged = 0;  				int parentChanged = 0;  				int subChildChanged = 0;  				var parent = new Panel();  				parent.DataContextChanged += (sender' e) => parentChanged++;  				parent.DataContext = new MyViewModel { ID = 1 };  				Assert.AreEqual(1' parentChanged);    				var subChild = new Panel();  				subChild.DataContextChanged += (sender' e) => subChildChanged++;  				subChild.DataContext = new MyViewModel { ID = 2 };  				Assert.AreEqual(1' subChildChanged);    				var child = new Panel();  				child.DataContextChanged += (sender' e) => childChanged++;  				Assert.AreEqual(0' childChanged);  				child.Content = subChild;  				Assert.AreEqual(1' subChildChanged);  				Assert.AreEqual(0' childChanged);    				parent.Content = child;  				Assert.AreEqual(1' childChanged);  				Assert.AreEqual(1' subChildChanged);  				Assert.AreEqual(1' parentChanged);    				Assert.IsInstanceOf<MyViewModel>(parent.DataContext);  				Assert.AreEqual(1' ((MyViewModel)parent.DataContext).ID);  				Assert.IsInstanceOf<MyViewModel>(child.DataContext);  				Assert.AreEqual(1' ((MyViewModel)child.DataContext).ID);  				Assert.IsInstanceOf<MyViewModel>(subChild.DataContext);  				Assert.AreEqual(2' ((MyViewModel)subChild.DataContext).ID);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextInSubChildShouldNotBeChangedWhenParentIsSet,The following statement contains a magic number: Invoke(() =>  			{  				int childChanged = 0;  				int parentChanged = 0;  				int subChildChanged = 0;  				var parent = new Panel();  				parent.DataContextChanged += (sender' e) => parentChanged++;  				parent.DataContext = new MyViewModel { ID = 1 };  				Assert.AreEqual(1' parentChanged);    				var subChild = new Panel();  				subChild.DataContextChanged += (sender' e) => subChildChanged++;  				subChild.DataContext = new MyViewModel { ID = 2 };  				Assert.AreEqual(1' subChildChanged);    				var child = new Panel();  				child.DataContextChanged += (sender' e) => childChanged++;  				Assert.AreEqual(0' childChanged);  				child.Content = subChild;  				Assert.AreEqual(1' subChildChanged);  				Assert.AreEqual(0' childChanged);    				parent.Content = child;  				Assert.AreEqual(1' childChanged);  				Assert.AreEqual(1' subChildChanged);  				Assert.AreEqual(1' parentChanged);    				Assert.IsInstanceOf<MyViewModel>(parent.DataContext);  				Assert.AreEqual(1' ((MyViewModel)parent.DataContext).ID);  				Assert.IsInstanceOf<MyViewModel>(child.DataContext);  				Assert.AreEqual(1' ((MyViewModel)child.DataContext).ID);  				Assert.IsInstanceOf<MyViewModel>(subChild.DataContext);  				Assert.AreEqual(2' ((MyViewModel)subChild.DataContext).ID);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextWithEqualsShouldSet,The following statement contains a magic number: Invoke(() =>  			{  				int changed = 0;  				var panel = new Panel();  				panel.DataContextChanged += (sender' e) => changed++;    				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(1' changed);    				// should be set again' even though they are equal  				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(2' changed);    				panel.DataContext = new MyViewModelWithEquals { ID = 20 };  				Assert.AreEqual(3' changed);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextWithEqualsShouldSet,The following statement contains a magic number: Invoke(() =>  			{  				int changed = 0;  				var panel = new Panel();  				panel.DataContextChanged += (sender' e) => changed++;    				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(1' changed);    				// should be set again' even though they are equal  				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(2' changed);    				panel.DataContext = new MyViewModelWithEquals { ID = 20 };  				Assert.AreEqual(3' changed);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextWithEqualsShouldSet,The following statement contains a magic number: Invoke(() =>  			{  				int changed = 0;  				var panel = new Panel();  				panel.DataContextChanged += (sender' e) => changed++;    				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(1' changed);    				// should be set again' even though they are equal  				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(2' changed);    				panel.DataContext = new MyViewModelWithEquals { ID = 20 };  				Assert.AreEqual(3' changed);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextWithEqualsShouldSet,The following statement contains a magic number: Invoke(() =>  			{  				int changed = 0;  				var panel = new Panel();  				panel.DataContextChanged += (sender' e) => changed++;    				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(1' changed);    				// should be set again' even though they are equal  				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(2' changed);    				panel.DataContext = new MyViewModelWithEquals { ID = 20 };  				Assert.AreEqual(3' changed);  			});
Magic Number,Eto.Test.UnitTests.Forms,DataContextTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,DataContextWithEqualsShouldSet,The following statement contains a magic number: Invoke(() =>  			{  				int changed = 0;  				var panel = new Panel();  				panel.DataContextChanged += (sender' e) => changed++;    				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(1' changed);    				// should be set again' even though they are equal  				panel.DataContext = new MyViewModelWithEquals { ID = 10 };  				Assert.AreEqual(2' changed);    				panel.DataContext = new MyViewModelWithEquals { ID = 20 };  				Assert.AreEqual(3' changed);  			});
Magic Number,Eto.Test.UnitTests.Forms,CustomExpanderHandler,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,OnLoad,The following statement contains a magic number: Assert.AreEqual(2' dataContextChanged);
Magic Number,Eto.Test.UnitTests.Forms,CustomExpanderHandler,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,OnLoad,The following statement contains a magic number: Assert.AreEqual(2' contentDataContextChanged);
Magic Number,Eto.Test.UnitTests.Forms,CustomExpanderHandler,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,OnLoadComplete,The following statement contains a magic number: Assert.AreEqual(2' dataContextChanged);
Magic Number,Eto.Test.UnitTests.Forms,CustomExpanderHandler,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DataContextTests.cs,OnLoadComplete,The following statement contains a magic number: Assert.AreEqual(2' contentDataContextChanged);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldShowContent,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();    				dlg.Resizable = true;  				dlg.ClientSize = new Size(300' 400);    				dlg.Content = new TableLayout  				{  					Rows = {  						"Some content that should be shown"'  						null'  						new Panel {  							Size = new Size(30' 30)'  							Content = new Label { Text = "This should be above the buttons"' TextColor = Colors.White }'  							BackgroundColor = Colors.Blue  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldShowContent,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();    				dlg.Resizable = true;  				dlg.ClientSize = new Size(300' 400);    				dlg.Content = new TableLayout  				{  					Rows = {  						"Some content that should be shown"'  						null'  						new Panel {  							Size = new Size(30' 30)'  							Content = new Label { Text = "This should be above the buttons"' TextColor = Colors.White }'  							BackgroundColor = Colors.Blue  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldShowContent,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();    				dlg.Resizable = true;  				dlg.ClientSize = new Size(300' 400);    				dlg.Content = new TableLayout  				{  					Rows = {  						"Some content that should be shown"'  						null'  						new Panel {  							Size = new Size(30' 30)'  							Content = new Label { Text = "This should be above the buttons"' TextColor = Colors.White }'  							BackgroundColor = Colors.Blue  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldShowContent,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();    				dlg.Resizable = true;  				dlg.ClientSize = new Size(300' 400);    				dlg.Content = new TableLayout  				{  					Rows = {  						"Some content that should be shown"'  						null'  						new Panel {  							Size = new Size(30' 30)'  							Content = new Label { Text = "This should be above the buttons"' TextColor = Colors.White }'  							BackgroundColor = Colors.Blue  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,DialogShouldHaveCorrectMinimumSize,The following statement contains a magic number: Invoke(() =>  			{  				var dlg = new Dialog<bool>();  				Size? sizeAfterSetting = null;  				dlg.Resizable = true;  				// check output of size changed   				dlg.SizeChanged += (sender' e) => Log.Write(this' $"SizeChanged: {dlg.Size}' {dlg.RestoreBounds}");  				dlg.Size = new Size(300' 300);  				dlg.MinimumSize = new Size(300' 300);  				dlg.LoadComplete += (sender' e) =>  				{  					dlg.Size = new Size(400' 400);    					// get size after load complete is.. uh.. fully complete.  					Application.Instance.AsyncInvoke(() => sizeAfterSetting = dlg.Size);  				};  				if (Platform.Instance.IsWpf)  				{  					AppContext.TryGetSwitch("Switch.System.Windows.DoNotScaleForDpiChanges"' out bool isEnabled);  					Assert.IsTrue(isEnabled' "Set Switch.System.Windows.DoNotScaleForDpiChanges=true in app.config");  				}  				dlg.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Center'  					AlignLabels = false'  					Items = {  						new Label {  							Text = "This dialog should start as 400x400 and not shrink smaller than 300x300."'  							Wrap = WrapMode.Word'  							BackgroundColor = Colors.Blue'  							Size = new Size(300' 300)  						}  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dlg.Close(true);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) => dlg.Close(false);    				dlg.PositiveButtons.Add(passButton);  				dlg.NegativeButtons.Add(failButton);    				var result = dlg.ShowModal();    				Assert.AreEqual(new Size(400' 400)' sizeAfterSetting' "Size after setting is incorrect!");  				Assert.IsTrue(result);  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The following statement contains a magic number: var modal1 = new Dialog { Content = "Modal 1"' Size = new Size(200' 200) };
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The following statement contains a magic number: var modal1 = new Dialog { Content = "Modal 1"' Size = new Size(200' 200) };
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The following statement contains a magic number: var modal2 = new Dialog  			{  				Content = new StackLayout  				{  					Items = {  						"Modal 2\nWait until Modal 1 closes' then try to close this window.\nThis window should also resize and adjust the label correctly"'  						closeButton  					}  				}'  				Size = new Size(200' 200)'  				Resizable = true  			};
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The following statement contains a magic number: var modal2 = new Dialog  			{  				Content = new StackLayout  				{  					Items = {  						"Modal 2\nWait until Modal 1 closes' then try to close this window.\nThis window should also resize and adjust the label correctly"'  						closeButton  					}  				}'  				Size = new Size(200' 200)'  				Resizable = true  			};
Magic Number,Eto.Test.UnitTests.Forms,DialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\DialogTests.cs,MultipleDialogsShouldAllowClosingInDifferentOrders,The following statement contains a magic number: Task.Run(() =>  			{  				System.Threading.Thread.Sleep(TimeSpan.FromSeconds(2));  				Application.Instance.AsyncInvoke(modal1.Close);  			});
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,WithOddItemFilterShouldContainOddModelItems,The following statement contains a magic number: Assert.AreEqual(model.Count / 2' filtered.Count);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,WithOddItemFilterShouldContainOddModelItems,The following statement contains a magic number: Assert.AreSame(model[i * 2 + 1]' filtered[i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,WithOddItemFilterShouldContainOddModelItems,The following statement contains a magic number: i < model.Count / 2
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsShouldSortCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2]' filtered[i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsShouldSortCorrectly,The following statement contains a magic number: i < model.Count / 2
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsShouldSortCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2 + 1]' filtered[model.Count / 2 + i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsShouldSortCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2 + 1]' filtered[model.Count / 2 + i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsShouldSortCorrectly,The following statement contains a magic number: i < model.Count / 2
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: Assert.AreEqual(model.Count / 2' filtered.Count);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2]' filtered[i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: i < model.Count / 4
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2 + 1]' filtered[model.Count / 4 + i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: Assert.AreSame(model[i * 2 + 1]' filtered[model.Count / 4 + i]);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,SortWithEvenItemsBeforeOddItemsAndWithFilterShouldSortAndFilterCorrectly,The following statement contains a magic number: i < model.Count / 4
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: filtered.RemoveAt(80);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 19)' "Removing the 80th filtered row should remove item #19");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(model.Any(r => r.Id == 19)' "Removing the 80th filtered row should remove item #19 from the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: model.Remove(model.First(r => r.Id == 20));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 20)' "Removing Item #20 should no longer show up in the filtered collection");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(model.Any(r => r.Id == 20)' "Removing Item #20 should no longer be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 19)' "Item #19 should not be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenSortedShouldRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 20)' "Item #20 should not be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: filtered.Filter = item => item.Id <= 50;
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsTrue(filtered.Any(r => r.Id == 20)' "Item #20 should appear in the filtered list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsTrue(model.Any(r => r.Id == 20)' "Item #20 should be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: filtered.Remove(filtered.First(r => r.Id == 20));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 20)' "Removing Item #20 should no longer show up in the filtered collection");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(model.Any(r => r.Id == 20)' "Removing Item #20 should no longer be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsTrue(filtered.Any(r => r.Id == 30)' "Item #30 should appear in the filtered list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsTrue(model.Any(r => r.Id == 30)' "Item #30 should be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: model.Remove(model.First(r => r.Id == 30));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 30)' "Removing Item #30 should no longer show up in the filtered collection");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(model.Any(r => r.Id == 30)' "Removing Item #30 should no longer be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 60)' "Item #60 should NOT appear in the filtered list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsTrue(model.Any(r => r.Id == 60)' "Item #60 should be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: model.Remove(model.First(r => r.Id == 60));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 60)' "Removing Item #60 should no longer show up in the filtered collection");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(model.Any(r => r.Id == 60)' "Removing Item #60 should no longer be in the model");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 20)' "Item #20 should not be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 30)' "Item #30 should not be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveItemWhenFilteredRemoveCorrectItems,The following statement contains a magic number: Assert.IsFalse(filtered.Any(r => r.Id == 60)' "Item #60 should not be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddItemShouldTriggerCorrectChange,The following statement contains a magic number: var item = new DataItem(1000);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldTriggerCorrectChange,The following statement contains a magic number: var item = new DataItem(1000);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldTriggerCorrectChange,The following statement contains a magic number: const int insertIndex = 50;
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: const int filterInsertIndex = 10;
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: var item = new DataItem(1000);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: Assert.AreEqual(filtered[filterInsertIndex].Id' 21' "#1 Item should NOT be inserted at the specified index' since it is an even number");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: item = new DataItem(1001);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: Assert.AreEqual(filtered[filterInsertIndex].Id' 1001' "#4 Item with odd number should be inserted at the specified index");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: Assert.AreEqual(filtered[filterInsertIndex].Id' 1001' "#7 Item with odd number should be inserted at the specified index");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: Assert.IsTrue(filtered.Any(r => r.Id == 1000)' "Item #1000 should be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertItemShouldBeInSameOrderInModel,The following statement contains a magic number: Assert.IsTrue(filtered.Any(r => r.Id == 1001)' "Item #1001 should be in the list");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: var item = new DataItem(1000);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: model.Insert(10' item);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: item = new DataItem(1001);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: model.Insert(11' item);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: Assert.AreEqual(1001' ((DataItem)changeArgs.NewItems[0]).Id' "#3-5 New item of notification is not correct");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: Assert.AreEqual(1000' filtered[10].Id' "#4-1 Item 1000 was not inserted in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: Assert.AreEqual(1000' filtered[10].Id' "#4-1 Item 1000 was not inserted in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: Assert.AreEqual(1001' filtered[11].Id' "#4-2 Item 1001 was not inserted in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,InsertIntoParentWhileFilteredShouldKeepSameIndecies,The following statement contains a magic number: Assert.AreEqual(1001' filtered[11].Id' "#4-2 Item 1001 was not inserted in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: var itemToRemove1 = model[10];
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: model.RemoveAt(10);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: var itemToRemove2 = model[10];
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: Assert.AreEqual(44' filtered.IndexOf(itemToRemove2)' "#2-1 Item should be in the filtered collection");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: Assert.AreEqual(44' changeArgs.OldStartingIndex' "#3-3 Index of remove notification is incorrect");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,RemoveFromParentWhileFilteredShouldBeRemoved,The following statement contains a magic number: Assert.AreEqual(11' ((DataItem)changeArgs.OldItems[0]).Id' "#3-5 Old item of notification is not correct");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: var item = new DataItem(1000);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: item = new DataItem(1001);
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: Assert.AreEqual(1001' ((DataItem)changeArgs.NewItems[0]).Id' "#3-5 New item of notification is not correct");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: Assert.AreEqual(1000' filtered[filtered.Count - 2].Id' "#4-1 Item 1000 was not added in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: Assert.AreEqual(1000' filtered[filtered.Count - 2].Id' "#4-1 Item 1000 was not added in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,AddFromSourceWhileFilteredShouldAddCorrectly,The following statement contains a magic number: Assert.AreEqual(1001' filtered[filtered.Count - 1].Id' "#4-2 Item 1001 was not added in the correct location");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,ResetShouldAddCurrentItemsToFilteredList,The following statement contains a magic number: collection.AddRange(Enumerable.Range(1' 10).Select(r => new DataItem(r)));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,ResetShouldAddCurrentItemsToFilteredList,The following statement contains a magic number: Assert.AreEqual(10' filterCollection.Count' "FilterCollection.Count should be equal to 10 after adding items in bulk");
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,ResetShouldAddCurrentItemsToFilteredList,The following statement contains a magic number: collection.AddRange(Enumerable.Range(1' 10).Select(r => new DataItem(r)));
Magic Number,Eto.Test.UnitTests.Forms,FilterCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FilterCollectionTests.cs,ResetShouldAddCurrentItemsToFilteredList,The following statement contains a magic number: Assert.AreEqual(20' filterCollection.Count' "FilterCollection.Count should be equal to 20 after adding more items in bulk");
Magic Number,Eto.Test.UnitTests.Forms,FontDialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FontDialogTests.cs,FontDialogFromModalDialogShouldWork,The following statement contains a magic number: ManualDialog("Click on the label and change the font"' form =>  			{  				selectedFont = SystemFonts.User();  				var label = new Label { Text = selectedFont.FamilyName' TextColor = SystemColors.Highlight };    				label.MouseDown += (sender' e) =>  				{  					fd = new FontDialog();  					fd.Font = selectedFont;  					fd.FontChanged += (sender2' e2) =>  					{  						selectedFont = fd.Font;  						label.Text = fd.Font.FamilyName;  						wasChanged = true;  					};    					fd.ShowDialog(label);  					Application.Instance.AsyncInvoke(() =>  					{  						GC.Collect();  						GC.WaitForPendingFinalizers();  					});  				};      				return new StackLayout { Items = { label' new TextArea() }' Padding = 10 };  			});
Magic Number,Eto.Test.UnitTests.Forms,FontDialogTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\FontDialogTests.cs,FontDialogFromFormShouldWork,The following statement contains a magic number: ManualForm("Click on the label and change the font"' form =>  			{  				selectedFont = SystemFonts.User();  				var label = new Label { Text = selectedFont.FamilyName' TextColor = SystemColors.Highlight };    				label.MouseDown += (sender' e) =>  				{  					fd = new FontDialog();  					fd.Font = selectedFont;  					fd.FontChanged += (sender2' e2) =>  					{  						selectedFont = fd.Font;  						label.Text = fd.Font.FamilyName;  						wasChanged = true;  					};  					fd.ShowDialog(label);    					Application.Instance.AsyncInvoke(() =>  					{  						GC.Collect();  						GC.WaitForPendingFinalizers();  					});  				};      				return new StackLayout { Items = { label' new TextArea() }' Padding = 10 };  			});
Magic Number,Eto.Test.UnitTests.Forms,GridViewUtils,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\GridViewUtils.cs,SortEvenItemsBeforeOdd,The following statement contains a magic number: return (a % 2 == b % 2) ? a - b : (a % 2 == 0 ? -1 : 1);
Magic Number,Eto.Test.UnitTests.Forms,GridViewUtils,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\GridViewUtils.cs,SortEvenItemsBeforeOdd,The following statement contains a magic number: return (a % 2 == b % 2) ? a - b : (a % 2 == 0 ? -1 : 1);
Magic Number,Eto.Test.UnitTests.Forms,GridViewUtils,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\GridViewUtils.cs,SortEvenItemsBeforeOdd,The following statement contains a magic number: return (a % 2 == b % 2) ? a - b : (a % 2 == 0 ? -1 : 1);
Magic Number,Eto.Test.UnitTests.Forms,GridViewUtils,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\GridViewUtils.cs,KeepOddItemsFilter,The following statement contains a magic number: return o.Id % 2 == 1;
Magic Number,Eto.Test.UnitTests.Forms,GridViewUtils,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\GridViewUtils.cs,KeepFirstHalfOfItemsFilter,The following statement contains a magic number: return o.Id < ItemCount / 2;
Magic Number,Eto.Test.UnitTests.Forms,ToolBarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolBarTests.cs,AddingDividerSeparatorShouldNotCrash,The following statement contains a magic number: var form = new Dialog { Size = new Size(800' 300) };
Magic Number,Eto.Test.UnitTests.Forms,ToolBarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolBarTests.cs,AddingDividerSeparatorShouldNotCrash,The following statement contains a magic number: var form = new Dialog { Size = new Size(800' 300) };
Magic Number,Eto.Test.UnitTests.Forms,ToolBarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolBarTests.cs,AddingDividerSeparatorShouldNotCrash,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Eto.Test.UnitTests.Forms,ToolBarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolBarTests.cs,AddingDividerSeparatorShouldNotCrash,The following statement contains a magic number: i < 20
Magic Number,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var toolbar = new ToolBar();  				for (int i = 0; i < 15; i++)  				{  					switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}  				}  				for (int i = 0; i < toolbar.Items.Count; i++)  				{  					if (toolbar.Items[i] is SeparatorToolItem)  						continue;  					Assert.AreEqual(i.ToString()' toolbar.Items[i].Text' "Items are out of order");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var toolbar = new ToolBar();  				for (int i = 0; i < 15; i++)  				{  					switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}  				}  				for (int i = 0; i < toolbar.Items.Count; i++)  				{  					if (toolbar.Items[i] is SeparatorToolItem)  						continue;  					Assert.AreEqual(i.ToString()' toolbar.Items[i].Text' "Items are out of order");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var toolbar = new ToolBar();  				for (int i = 0; i < 15; i++)  				{  					switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}  				}  				for (int i = 0; i < toolbar.Items.Count; i++)  				{  					if (toolbar.Items[i] is SeparatorToolItem)  						continue;  					Assert.AreEqual(i.ToString()' toolbar.Items[i].Text' "Items are out of order");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var toolbar = new ToolBar();  				for (int i = 0; i < 15; i++)  				{  					switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}  				}  				for (int i = 0; i < toolbar.Items.Count; i++)  				{  					if (toolbar.Items[i] is SeparatorToolItem)  						continue;  					Assert.AreEqual(i.ToString()' toolbar.Items[i].Text' "Items are out of order");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var toolbar = new ToolBar();  				for (int i = 0; i < 15; i++)  				{  					switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}  				}  				for (int i = 0; i < toolbar.Items.Count; i++)  				{  					if (toolbar.Items[i] is SeparatorToolItem)  						continue;  					Assert.AreEqual(i.ToString()' toolbar.Items[i].Text' "Items are out of order");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,WindowShouldReportInitialSize,The following statement contains a magic number: Form(form =>  			{  				Size? size = null;  				form.Content = new Panel { Size = new Size(300' 300) };  				form.SizeChanged += (sender' e) => size = form.Size;    				form.Shown += (sender' e) => {  					Assert.IsNotNull(size' "#1");  					Assert.IsTrue(size.Value.Width >= 300' "#2");  					Assert.IsTrue(size.Value.Height>= 300' "#3");  					form.Close();  				};  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,WindowShouldReportInitialSize,The following statement contains a magic number: Form(form =>  			{  				Size? size = null;  				form.Content = new Panel { Size = new Size(300' 300) };  				form.SizeChanged += (sender' e) => size = form.Size;    				form.Shown += (sender' e) => {  					Assert.IsNotNull(size' "#1");  					Assert.IsTrue(size.Value.Width >= 300' "#2");  					Assert.IsTrue(size.Value.Height>= 300' "#3");  					form.Close();  				};  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,WindowShouldReportInitialSize,The following statement contains a magic number: Form(form =>  			{  				Size? size = null;  				form.Content = new Panel { Size = new Size(300' 300) };  				form.SizeChanged += (sender' e) => size = form.Size;    				form.Shown += (sender' e) => {  					Assert.IsNotNull(size' "#1");  					Assert.IsTrue(size.Value.Width >= 300' "#2");  					Assert.IsTrue(size.Value.Height>= 300' "#3");  					form.Close();  				};  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,WindowShouldReportInitialSize,The following statement contains a magic number: Form(form =>  			{  				Size? size = null;  				form.Content = new Panel { Size = new Size(300' 300) };  				form.SizeChanged += (sender' e) => size = form.Size;    				form.Shown += (sender' e) => {  					Assert.IsNotNull(size' "#1");  					Assert.IsTrue(size.Value.Width >= 300' "#2");  					Assert.IsTrue(size.Value.Height>= 300' "#3");  					form.Close();  				};  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,ClosedEventShouldFireOnceWithMultipleSubclasses,The following statement contains a magic number: Form<SubSubForm>(form =>  			{  				form.Content = new Panel { Size = new Size(300' 300) };  				form.Closed += (sender' e) => closed++;  				form.Shown += (sender' e) => form.Close();  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,ClosedEventShouldFireOnceWithMultipleSubclasses,The following statement contains a magic number: Form<SubSubForm>(form =>  			{  				form.Content = new Panel { Size = new Size(300' 300) };  				form.Closed += (sender' e) => closed++;  				form.Shown += (sender' e) => form.Close();  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,InitialLocationOfFormShouldBeCorrect,The following statement contains a magic number: ManualForm("This form should be located at the top left of the screen"' form =>  			{  				if (withOwner)  					form.Owner = Application.Instance.MainForm;  				form.Location = new Point(0' 0);    				return new Panel { Size = new Size(200' 200) };  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,InitialLocationOfFormShouldBeCorrect,The following statement contains a magic number: ManualForm("This form should be located at the top left of the screen"' form =>  			{  				if (withOwner)  					form.Owner = Application.Instance.MainForm;  				form.Location = new Point(0' 0);    				return new Panel { Size = new Size(200' 200) };  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,InitialLocationOfDialogShouldBeCorrect,The following statement contains a magic number: ManualDialog("This dialog should be located at the top left of the screen"' form =>  			{  				if (withOwner)  					form.Owner = Application.Instance.MainForm;  				form.Location = new Point(0' 0);    				return new Panel { Size = new Size(200' 200) };  			});
Magic Number,Eto.Test.UnitTests.Forms,WindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\WindowTests.cs,InitialLocationOfDialogShouldBeCorrect,The following statement contains a magic number: ManualDialog("This dialog should be located at the top left of the screen"' form =>  			{  				if (withOwner)  					form.Owner = Application.Instance.MainForm;  				form.Location = new Point(0' 0);    				return new Panel { Size = new Size(200' 200) };  			});
Magic Number,Eto.Test.UnitTests.Forms,XamlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\XamlTests.cs,NullableSizeAndPaddingShouldDeserialize,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				string xaml = string.Format("<DynamicTable Padding='10' Spacing='5' 5' xmlns='{0}' />"' XamlReader.EtoFormsNamespace);    				var table = XamlReader.Load<DynamicTable>(new StringReader(xaml)' null);    				Assert.IsNotNull(table' "#1");  				Assert.AreEqual(table.Padding' new Padding(10)' "#2");  				Assert.AreEqual(table.Spacing' new Size(5' 5)' "#3");  			});
Magic Number,Eto.Test.UnitTests.Forms,XamlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\XamlTests.cs,NullableSizeAndPaddingShouldDeserialize,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				string xaml = string.Format("<DynamicTable Padding='10' Spacing='5' 5' xmlns='{0}' />"' XamlReader.EtoFormsNamespace);    				var table = XamlReader.Load<DynamicTable>(new StringReader(xaml)' null);    				Assert.IsNotNull(table' "#1");  				Assert.AreEqual(table.Padding' new Padding(10)' "#2");  				Assert.AreEqual(table.Spacing' new Size(5' 5)' "#3");  			});
Magic Number,Eto.Test.UnitTests.Forms,XamlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\XamlTests.cs,NullableSizeAndPaddingShouldDeserialize,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				string xaml = string.Format("<DynamicTable Padding='10' Spacing='5' 5' xmlns='{0}' />"' XamlReader.EtoFormsNamespace);    				var table = XamlReader.Load<DynamicTable>(new StringReader(xaml)' null);    				Assert.IsNotNull(table' "#1");  				Assert.AreEqual(table.Padding' new Padding(10)' "#2");  				Assert.AreEqual(table.Spacing' new Size(5' 5)' "#3");  			});
Magic Number,Eto.Test.UnitTests.Forms.Bindings,ObjectBindingChangedTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\ObjectBindingChangedTests.cs,DoublePropertyShouldUpdate,The following statement contains a magic number: binding.DataValue = 1.2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,ObjectBindingObjectChangedTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\ObjectBindingObjectChangedTests.cs,DoublePropertyShouldUpdate,The following statement contains a magic number: bindObject.DoubleProperty = 1.2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,BindingWithNameShouldUpdateProperly,The following statement contains a magic number: item.IntProperty = 2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,BindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,BindingWithNameShouldUpdateProperly,The following statement contains a magic number: item.IntProperty = 4;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,BindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,BindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(4' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject.IntProperty = 2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject = new BindObject { IntProperty = 3 };
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: oldChild.IntProperty = 4;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject.IntProperty = 2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject = new BindObject { IntProperty = 3 };
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: oldChild.IntProperty = 4;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithExpressionShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject.IntProperty = 2;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(2' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: item.ChildBindObject = new BindObject { IntProperty = 3 };
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: oldChild.IntProperty = 4;
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' changed);
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,ChildBindingWithNameShouldUpdateProperly,The following statement contains a magic number: Assert.AreEqual(3' binding.GetValue(item));
Magic Number,Eto.Test.UnitTests.Forms.Bindings,PropertyBindingTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Bindings\PropertyBindingTests.cs,NonExistantPropertyShouldNotCrash,The following statement contains a magic number: Assert.DoesNotThrow(() => binding.SetValue(item' 123));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ButtonTests.cs,ButtonShouldNotFlicker,The following statement contains a magic number: ManualForm("Button should not flicker and appear as a single style"' form =>  			{  				var layout = new TableLayout()  				{  					Padding = 10'  					Spacing = new Size(5' 5)'  					Rows =  					{  						new TableRow(new NumericStepper()' new Button{ Text = "Test"})  					}  				};  				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ButtonTests.cs,ButtonShouldNotFlicker,The following statement contains a magic number: ManualForm("Button should not flicker and appear as a single style"' form =>  			{  				var layout = new TableLayout()  				{  					Padding = 10'  					Spacing = new Size(5' 5)'  					Rows =  					{  						new TableRow(new NumericStepper()' new Button{ Text = "Test"})  					}  				};  				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ButtonTests.cs,ButtonShouldNotFlicker,The following statement contains a magic number: ManualForm("Button should not flicker and appear as a single style"' form =>  			{  				var layout = new TableLayout()  				{  					Padding = 10'  					Spacing = new Size(5' 5)'  					Rows =  					{  						new TableRow(new NumericStepper()' new Button{ Text = "Test"})  					}  				};  				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedDateShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar();  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				DateTime date = DateTime.Today;  				calendar.SelectedDate = date;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the initial value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when date is set to the initial value");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				date = DateTime.Today.AddDays(10);  				calendar.SelectedDate = date;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a value");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing SelectedDate");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				dateCount = rangeCount = 0;  				calendar.SelectedDate = date;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				dateCount = rangeCount = 0;  				calendar.SelectedDate = date = DateTime.Today.AddDays(20);  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing SelectedDate");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedDateShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar();  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				DateTime date = DateTime.Today;  				calendar.SelectedDate = date;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the initial value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when date is set to the initial value");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				date = DateTime.Today.AddDays(10);  				calendar.SelectedDate = date;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a value");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing SelectedDate");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				dateCount = rangeCount = 0;  				calendar.SelectedDate = date;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");    				dateCount = rangeCount = 0;  				calendar.SelectedDate = date = DateTime.Today.AddDays(20);  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing SelectedDate");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedRangeShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar { Mode = CalendarMode.Range };  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				rangeCount = dateCount = 0;  				var range = new Range<DateTime>(DateTime.Today);  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to initial value of null");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should fire when set to initial value of null");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  				Assert.AreEqual(range.Start' calendar.SelectedDate' "SelectedDate should be null when range is set to null");    				rangeCount = dateCount = 0;  				range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(10));  				calendar.SelectedRange = range;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedDate should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the same value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when set to the same value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(11));  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(2)' DateTime.Today.AddDays(10));  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different range");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedRangeShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar { Mode = CalendarMode.Range };  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				rangeCount = dateCount = 0;  				var range = new Range<DateTime>(DateTime.Today);  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to initial value of null");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should fire when set to initial value of null");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  				Assert.AreEqual(range.Start' calendar.SelectedDate' "SelectedDate should be null when range is set to null");    				rangeCount = dateCount = 0;  				range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(10));  				calendar.SelectedRange = range;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedDate should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the same value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when set to the same value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(11));  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(2)' DateTime.Today.AddDays(10));  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different range");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedRangeShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar { Mode = CalendarMode.Range };  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				rangeCount = dateCount = 0;  				var range = new Range<DateTime>(DateTime.Today);  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to initial value of null");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should fire when set to initial value of null");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  				Assert.AreEqual(range.Start' calendar.SelectedDate' "SelectedDate should be null when range is set to null");    				rangeCount = dateCount = 0;  				range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(10));  				calendar.SelectedRange = range;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedDate should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the same value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when set to the same value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(11));  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(2)' DateTime.Today.AddDays(10));  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different range");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,SelectedRangeShouldTriggerChange,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar { Mode = CalendarMode.Range };  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				rangeCount = dateCount = 0;  				var range = new Range<DateTime>(DateTime.Today);  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to initial value of null");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should fire when set to initial value of null");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  				Assert.AreEqual(range.Start' calendar.SelectedDate' "SelectedDate should be null when range is set to null");    				rangeCount = dateCount = 0;  				range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(10));  				calendar.SelectedRange = range;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when set to a specific date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedDate should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when set to the same date");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not be fired when set to the same date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when set to the same value");  				Assert.AreEqual(0' rangeCount' "SelectedRangeChanged should not fire when set to the same value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(1)' DateTime.Today.AddDays(11));  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different date");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");    				rangeCount = dateCount = 0;  				calendar.SelectedRange = range = new Range<DateTime>(DateTime.Today.AddDays(2)' DateTime.Today.AddDays(10));  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should fire when range's start date hasn't changed");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should fire when set to a different range");  				Assert.AreEqual(range' calendar.SelectedRange' "SelectedRange should retain its value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,MinDateShouldChangeSelectedDate,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar();  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				calendar.SelectedDate = DateTime.Today;  				dateCount = rangeCount = 0;  				var date = DateTime.Today.AddDays(10);  				calendar.MinDate = date;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should be fired when changing the min date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing the min date");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should be changed to the MinDate");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,MaxDateShouldChangeSelectedDate,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var calendar = new Calendar();  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				calendar.SelectedDate = DateTime.Today;  				dateCount = rangeCount = 0;  				var date = DateTime.Today.AddDays(-10);  				calendar.MaxDate = date;  				Assert.AreEqual(1' dateCount' "SelectedDateChanged should be fired when changing the min date");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing the min date");  				Assert.AreEqual(date' calendar.SelectedDate' "SelectedDate should be changed to the MaxDate");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,CalendarTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\CalendarTests.cs,ModeShouldUpdateDateWhenChangingFromRangeToSingle,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var initialRange = new Range<DateTime>(DateTime.Today' DateTime.Today.AddDays(10));  				var calendar = new Calendar { Mode = CalendarMode.Range' SelectedRange = initialRange };  				var dateCount = 0;  				var rangeCount = 0;  				calendar.SelectedDateChanged += (sender' e) => dateCount++;  				calendar.SelectedRangeChanged += (sender' e) => rangeCount++;    				Assert.AreEqual(initialRange' calendar.SelectedRange' "SelectedRange is not set to the initial value");    				calendar.Mode = CalendarMode.Single;  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when changing the mode");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing the mode when the range changes");  				Assert.AreEqual(initialRange.Start' calendar.SelectedDate' "SelectedDate should be the start of the original range");  				Assert.AreEqual(initialRange.Start' calendar.SelectedRange.Start' "SelectedRange.End should be the same date");  				Assert.AreEqual(initialRange.Start' calendar.SelectedRange.End' "SelectedRange.End should be the same date");    				dateCount = rangeCount = 0;  				calendar.Mode = CalendarMode.Range;  				Assert.AreEqual(initialRange.End' calendar.SelectedRange.End' "SelectedRange.End should be the original end date when changing back to range mode");  				Assert.AreEqual(0' dateCount' "SelectedDateChanged should not be fired when changing the mode");  				Assert.AreEqual(1' rangeCount' "SelectedRangeChanged should be fired when changing the mode when the range changes");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,ControlsShouldHaveSaneDefaultWidths,The following statement contains a magic number: ManualForm(  				"Check to make sure the text/entry boxes have the correct widths and do not grow when entering text"'  				form =>  				{  					var longText = "Some very long text that should not make the control grow larger than its default size";  					return new Scrollable  					{  						Content = new StackLayout  						{  							Items =  							{  								new Button { Text = "Button" }'  								new Calendar()'  								new CheckBox { Text = "CheckBox" }'  								new ColorPicker()'  								new ComboBox { Text = longText' Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new DateTimePicker()'  								new Drawable { Size = new Size(100' 20)' BackgroundColor = Colors.Blue }' // not actually visible without a size  								new DropDown { Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new Expander { Header = "Hello"' Content = new Label { Text = "Some content" } }'  								new FilePicker { FilePath = "/some/path/that/is/long/which/should/not/make/it/too/big" }'  								new GroupBox { Content = "Some content"' Text = "Some text" }'  								new LinkButton {  Text = "LinkButton"}'  								new NumericStepper()'  								new PasswordBox()'  								new ProgressBar { Value = 50 }'  								new RadioButton { Text = "RadioButton" }'  								new RichTextArea { Text = longText }'  								new SearchBox { Text = longText }'  								new Slider { Value = 50 }'  								new Spinner()'  								new Stepper()'  								new TabControl { Pages = { new TabPage { Text = "TabPage"' Content = "Tab content" } } }'  								new TextArea { Text = longText }'  								new TextBox { Text = longText }'  								new TextStepper { Text = longText }'  						  		//new WebView()  					  		}  						}  					};  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,ControlsShouldHaveSaneDefaultWidths,The following statement contains a magic number: ManualForm(  				"Check to make sure the text/entry boxes have the correct widths and do not grow when entering text"'  				form =>  				{  					var longText = "Some very long text that should not make the control grow larger than its default size";  					return new Scrollable  					{  						Content = new StackLayout  						{  							Items =  							{  								new Button { Text = "Button" }'  								new Calendar()'  								new CheckBox { Text = "CheckBox" }'  								new ColorPicker()'  								new ComboBox { Text = longText' Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new DateTimePicker()'  								new Drawable { Size = new Size(100' 20)' BackgroundColor = Colors.Blue }' // not actually visible without a size  								new DropDown { Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new Expander { Header = "Hello"' Content = new Label { Text = "Some content" } }'  								new FilePicker { FilePath = "/some/path/that/is/long/which/should/not/make/it/too/big" }'  								new GroupBox { Content = "Some content"' Text = "Some text" }'  								new LinkButton {  Text = "LinkButton"}'  								new NumericStepper()'  								new PasswordBox()'  								new ProgressBar { Value = 50 }'  								new RadioButton { Text = "RadioButton" }'  								new RichTextArea { Text = longText }'  								new SearchBox { Text = longText }'  								new Slider { Value = 50 }'  								new Spinner()'  								new Stepper()'  								new TabControl { Pages = { new TabPage { Text = "TabPage"' Content = "Tab content" } } }'  								new TextArea { Text = longText }'  								new TextBox { Text = longText }'  								new TextStepper { Text = longText }'  						  		//new WebView()  					  		}  						}  					};  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,ControlsShouldHaveSaneDefaultWidths,The following statement contains a magic number: ManualForm(  				"Check to make sure the text/entry boxes have the correct widths and do not grow when entering text"'  				form =>  				{  					var longText = "Some very long text that should not make the control grow larger than its default size";  					return new Scrollable  					{  						Content = new StackLayout  						{  							Items =  							{  								new Button { Text = "Button" }'  								new Calendar()'  								new CheckBox { Text = "CheckBox" }'  								new ColorPicker()'  								new ComboBox { Text = longText' Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new DateTimePicker()'  								new Drawable { Size = new Size(100' 20)' BackgroundColor = Colors.Blue }' // not actually visible without a size  								new DropDown { Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new Expander { Header = "Hello"' Content = new Label { Text = "Some content" } }'  								new FilePicker { FilePath = "/some/path/that/is/long/which/should/not/make/it/too/big" }'  								new GroupBox { Content = "Some content"' Text = "Some text" }'  								new LinkButton {  Text = "LinkButton"}'  								new NumericStepper()'  								new PasswordBox()'  								new ProgressBar { Value = 50 }'  								new RadioButton { Text = "RadioButton" }'  								new RichTextArea { Text = longText }'  								new SearchBox { Text = longText }'  								new Slider { Value = 50 }'  								new Spinner()'  								new Stepper()'  								new TabControl { Pages = { new TabPage { Text = "TabPage"' Content = "Tab content" } } }'  								new TextArea { Text = longText }'  								new TextBox { Text = longText }'  								new TextStepper { Text = longText }'  						  		//new WebView()  					  		}  						}  					};  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,ControlsShouldHaveSaneDefaultWidths,The following statement contains a magic number: ManualForm(  				"Check to make sure the text/entry boxes have the correct widths and do not grow when entering text"'  				form =>  				{  					var longText = "Some very long text that should not make the control grow larger than its default size";  					return new Scrollable  					{  						Content = new StackLayout  						{  							Items =  							{  								new Button { Text = "Button" }'  								new Calendar()'  								new CheckBox { Text = "CheckBox" }'  								new ColorPicker()'  								new ComboBox { Text = longText' Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new DateTimePicker()'  								new Drawable { Size = new Size(100' 20)' BackgroundColor = Colors.Blue }' // not actually visible without a size  								new DropDown { Items = { "Item 1"' "Item 2"' "Item 3" } }'  								new Expander { Header = "Hello"' Content = new Label { Text = "Some content" } }'  								new FilePicker { FilePath = "/some/path/that/is/long/which/should/not/make/it/too/big" }'  								new GroupBox { Content = "Some content"' Text = "Some text" }'  								new LinkButton {  Text = "LinkButton"}'  								new NumericStepper()'  								new PasswordBox()'  								new ProgressBar { Value = 50 }'  								new RadioButton { Text = "RadioButton" }'  								new RichTextArea { Text = longText }'  								new SearchBox { Text = longText }'  								new Slider { Value = 50 }'  								new Spinner()'  								new Stepper()'  								new TabControl { Pages = { new TabPage { Text = "TabPage"' Content = "Tab content" } } }'  								new TextArea { Text = longText }'  								new TextBox { Text = longText }'  								new TextStepper { Text = longText }'  						  		//new WebView()  					  		}  						}  					};  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,ControlsShouldCollectWhenNotReferenced,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The following statement contains a magic number: ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form =>  				{  					var screens = Screen.Screens.ToArray();  					Assert.GreaterOrEqual(screens.Length' 2' "You must have a secondary monitor for this test");  					form.Location = Point.Round(screens[1].Bounds.Location) + new Size(50' 50);  					form.ClientSize = new Size(200' 200);    					var textBox = new TextBox { Text = "You shouldn't see this" };    					form.Shown += (sender' e) =>  					{  						childForm = new Form  						{  							WindowStyle = WindowStyle.None'  							ShowInTaskbar = false'  							Maximizable = false'  							Resizable = false'  							BackgroundColor = Colors.Red'  							Topmost = true'  							Location = Point.Round(textBox.PointToScreen(PointF.Empty))'  							Size = textBox.Size  						};  						var b = new Button { Text = "Click Me!" };  						b.Click += (sender2' e2) =>  						{  							wasClicked = true;  							childForm.Close();  							childForm = null;  							form.Close();  						};    						childForm.Content = new TableLayout { Rows = { b } };  						childForm.Show();  					};    					var layout = new DynamicLayout();  					layout.AddCentered(textBox);    					return layout;  				}' allowPass: false' allowFail: false);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The following statement contains a magic number: ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form =>  				{  					var screens = Screen.Screens.ToArray();  					Assert.GreaterOrEqual(screens.Length' 2' "You must have a secondary monitor for this test");  					form.Location = Point.Round(screens[1].Bounds.Location) + new Size(50' 50);  					form.ClientSize = new Size(200' 200);    					var textBox = new TextBox { Text = "You shouldn't see this" };    					form.Shown += (sender' e) =>  					{  						childForm = new Form  						{  							WindowStyle = WindowStyle.None'  							ShowInTaskbar = false'  							Maximizable = false'  							Resizable = false'  							BackgroundColor = Colors.Red'  							Topmost = true'  							Location = Point.Round(textBox.PointToScreen(PointF.Empty))'  							Size = textBox.Size  						};  						var b = new Button { Text = "Click Me!" };  						b.Click += (sender2' e2) =>  						{  							wasClicked = true;  							childForm.Close();  							childForm = null;  							form.Close();  						};    						childForm.Content = new TableLayout { Rows = { b } };  						childForm.Show();  					};    					var layout = new DynamicLayout();  					layout.AddCentered(textBox);    					return layout;  				}' allowPass: false' allowFail: false);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The following statement contains a magic number: ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form =>  				{  					var screens = Screen.Screens.ToArray();  					Assert.GreaterOrEqual(screens.Length' 2' "You must have a secondary monitor for this test");  					form.Location = Point.Round(screens[1].Bounds.Location) + new Size(50' 50);  					form.ClientSize = new Size(200' 200);    					var textBox = new TextBox { Text = "You shouldn't see this" };    					form.Shown += (sender' e) =>  					{  						childForm = new Form  						{  							WindowStyle = WindowStyle.None'  							ShowInTaskbar = false'  							Maximizable = false'  							Resizable = false'  							BackgroundColor = Colors.Red'  							Topmost = true'  							Location = Point.Round(textBox.PointToScreen(PointF.Empty))'  							Size = textBox.Size  						};  						var b = new Button { Text = "Click Me!" };  						b.Click += (sender2' e2) =>  						{  							wasClicked = true;  							childForm.Close();  							childForm = null;  							form.Close();  						};    						childForm.Content = new TableLayout { Rows = { b } };  						childForm.Show();  					};    					var layout = new DynamicLayout();  					layout.AddCentered(textBox);    					return layout;  				}' allowPass: false' allowFail: false);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The following statement contains a magic number: ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form =>  				{  					var screens = Screen.Screens.ToArray();  					Assert.GreaterOrEqual(screens.Length' 2' "You must have a secondary monitor for this test");  					form.Location = Point.Round(screens[1].Bounds.Location) + new Size(50' 50);  					form.ClientSize = new Size(200' 200);    					var textBox = new TextBox { Text = "You shouldn't see this" };    					form.Shown += (sender' e) =>  					{  						childForm = new Form  						{  							WindowStyle = WindowStyle.None'  							ShowInTaskbar = false'  							Maximizable = false'  							Resizable = false'  							BackgroundColor = Colors.Red'  							Topmost = true'  							Location = Point.Round(textBox.PointToScreen(PointF.Empty))'  							Size = textBox.Size  						};  						var b = new Button { Text = "Click Me!" };  						b.Click += (sender2' e2) =>  						{  							wasClicked = true;  							childForm.Close();  							childForm = null;  							form.Close();  						};    						childForm.Content = new TableLayout { Rows = { b } };  						childForm.Show();  					};    					var layout = new DynamicLayout();  					layout.AddCentered(textBox);    					return layout;  				}' allowPass: false' allowFail: false);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ControlTests.cs,PointToScreenShouldWorkOnSecondaryScreen,The following statement contains a magic number: ManualForm("The Form with the button should be above the text box exactly.\nClick the button to pass the test' close the window to fail."' form =>  				{  					var screens = Screen.Screens.ToArray();  					Assert.GreaterOrEqual(screens.Length' 2' "You must have a secondary monitor for this test");  					form.Location = Point.Round(screens[1].Bounds.Location) + new Size(50' 50);  					form.ClientSize = new Size(200' 200);    					var textBox = new TextBox { Text = "You shouldn't see this" };    					form.Shown += (sender' e) =>  					{  						childForm = new Form  						{  							WindowStyle = WindowStyle.None'  							ShowInTaskbar = false'  							Maximizable = false'  							Resizable = false'  							BackgroundColor = Colors.Red'  							Topmost = true'  							Location = Point.Round(textBox.PointToScreen(PointF.Empty))'  							Size = textBox.Size  						};  						var b = new Button { Text = "Click Me!" };  						b.Click += (sender2' e2) =>  						{  							wasClicked = true;  							childForm.Close();  							childForm = null;  							form.Close();  						};    						childForm.Content = new TableLayout { Rows = { b } };  						childForm.Show();  					};    					var layout = new DynamicLayout();  					layout.AddCentered(textBox);    					return layout;  				}' allowPass: false' allowFail: false);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LogicalParentShouldChangeWhenAddedOrRemoved,The following statement contains a magic number: Invoke(() =>  			{  				var ctl = new DocumentControl();  				var child = new Panel { Size = new Size(100' 100) };  				var page = new DocumentPage(child);  				Assert.AreEqual(page' child.Parent' "#1");  				ctl.Pages.Add(page);  				Assert.AreEqual(page.Parent' ctl' "#2");  				ctl.Pages.RemoveAt(0);  				Assert.IsNull(page.Parent' "#3");  				page.Content = null;  				Assert.IsNull(child.Parent' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LogicalParentShouldChangeWhenAddedOrRemoved,The following statement contains a magic number: Invoke(() =>  			{  				var ctl = new DocumentControl();  				var child = new Panel { Size = new Size(100' 100) };  				var page = new DocumentPage(child);  				Assert.AreEqual(page' child.Parent' "#1");  				ctl.Pages.Add(page);  				Assert.AreEqual(page.Parent' ctl' "#2");  				ctl.Pages.RemoveAt(0);  				Assert.IsNull(page.Parent' "#3");  				page.Content = null;  				Assert.IsNull(child.Parent' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LoadedEventsShouldPropegate,The following statement contains a magic number: Shown(form =>  			{  				var ctl = new DocumentControl();    				child1 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page1 = new DocumentPage(child1) { Text = "Page 1" });    				Assert.IsFalse(child1.Loaded' "#1");    				child2 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page2 = new DocumentPage(child2));    				Assert.IsFalse(child2.Loaded' "#2");  				return ctl;  			}' ctl =>  			{  				Assert.IsTrue(child1.Loaded' "#3");  				page1.Content = new Panel();  				Assert.IsFalse(child1.Loaded' "#4");    				ctl.SelectedIndex = 1;    				Assert.IsTrue(child2.Loaded' "#5");  				ctl.Pages.RemoveAt(1);  				Assert.IsFalse(child2.Loaded' "#6");  				Assert.IsFalse(page2.Loaded' "#7");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LoadedEventsShouldPropegate,The following statement contains a magic number: Shown(form =>  			{  				var ctl = new DocumentControl();    				child1 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page1 = new DocumentPage(child1) { Text = "Page 1" });    				Assert.IsFalse(child1.Loaded' "#1");    				child2 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page2 = new DocumentPage(child2));    				Assert.IsFalse(child2.Loaded' "#2");  				return ctl;  			}' ctl =>  			{  				Assert.IsTrue(child1.Loaded' "#3");  				page1.Content = new Panel();  				Assert.IsFalse(child1.Loaded' "#4");    				ctl.SelectedIndex = 1;    				Assert.IsTrue(child2.Loaded' "#5");  				ctl.Pages.RemoveAt(1);  				Assert.IsFalse(child2.Loaded' "#6");  				Assert.IsFalse(page2.Loaded' "#7");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LoadedEventsShouldPropegate,The following statement contains a magic number: Shown(form =>  			{  				var ctl = new DocumentControl();    				child1 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page1 = new DocumentPage(child1) { Text = "Page 1" });    				Assert.IsFalse(child1.Loaded' "#1");    				child2 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page2 = new DocumentPage(child2));    				Assert.IsFalse(child2.Loaded' "#2");  				return ctl;  			}' ctl =>  			{  				Assert.IsTrue(child1.Loaded' "#3");  				page1.Content = new Panel();  				Assert.IsFalse(child1.Loaded' "#4");    				ctl.SelectedIndex = 1;    				Assert.IsTrue(child2.Loaded' "#5");  				ctl.Pages.RemoveAt(1);  				Assert.IsFalse(child2.Loaded' "#6");  				Assert.IsFalse(page2.Loaded' "#7");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DocumentControlTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DocumentControlTests.cs,LoadedEventsShouldPropegate,The following statement contains a magic number: Shown(form =>  			{  				var ctl = new DocumentControl();    				child1 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page1 = new DocumentPage(child1) { Text = "Page 1" });    				Assert.IsFalse(child1.Loaded' "#1");    				child2 = new Panel { Size = new Size(100' 100) };  				ctl.Pages.Add(page2 = new DocumentPage(child2));    				Assert.IsFalse(child2.Loaded' "#2");  				return ctl;  			}' ctl =>  			{  				Assert.IsTrue(child1.Loaded' "#3");  				page1.Content = new Panel();  				Assert.IsFalse(child1.Loaded' "#4");    				ctl.SelectedIndex = 1;    				Assert.IsTrue(child2.Loaded' "#5");  				ctl.Pages.RemoveAt(1);  				Assert.IsFalse(child2.Loaded' "#6");  				Assert.IsFalse(page2.Loaded' "#7");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' dropDown.SelectedIndex);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedIndexChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(3' selectedIndexChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedValueChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedKeyChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(3' selectedIndexChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedValueChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,DropDownTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\DropDownTests.cs,TestDropDownSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedKeyChanged);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				selectionChangedCount = 0; // reset the count  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire when changing the Filter which removes items");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				selectionChangedCount = 0; // reset the count  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire when changing the Filter which removes items");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				selectionChangedCount = 0; // reset the count  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire when changing the Filter which removes items");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewFilterTests.cs,FilterItemsShouldUnselectFilteredItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				selectionChangedCount = 0; // reset the count  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire when changing the Filter which removes items");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");  				Assert.AreEqual(initialCount / 2' viewSelectionChangedCount' "View SelectionChanged event should fire for each item selected");  				Assert.AreEqual(initialCount / 2' modelSelectionChangedCount' "Model SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				modelSelectionChangedCount = viewSelectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' viewSelectionChangedCount' "View SelectionChanged event should fire for each selected item removed");  				Assert.AreEqual(initialCount / 4' modelSelectionChangedCount' "Model SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				viewSelectionChangedCount = modelSelectionChangedCount = 0; // reset the counts  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				// view's selected items should change  				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");  				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items");    				// model's selected items should not have changed  				selectedItems = filtered.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				expectedItems = model.Where((item' row) => row < model.Count / 2).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Model's selected items should not have changed");  				Assert.AreEqual(0' modelSelectionChangedCount' "Model SelectionChanged event should not fire when changing filter");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				viewSelectionChangedCount = modelSelectionChangedCount = 0; // reset the counts  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				// view's selected items should change  				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");  				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items");    				// model's selected items should not have changed  				selectedItems = filtered.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				expectedItems = model.Where((item' row) => row < model.Count / 2).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Model's selected items should not have changed");  				Assert.AreEqual(0' modelSelectionChangedCount' "Model SelectionChanged event should not fire when changing filter");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				viewSelectionChangedCount = modelSelectionChangedCount = 0; // reset the counts  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				// view's selected items should change  				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");  				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items");    				// model's selected items should not have changed  				selectedItems = filtered.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				expectedItems = model.Where((item' row) => row < model.Count / 2).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Model's selected items should not have changed");  				Assert.AreEqual(0' modelSelectionChangedCount' "Model SelectionChanged event should not fire when changing filter");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				viewSelectionChangedCount = modelSelectionChangedCount = 0; // reset the counts  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				// view's selected items should change  				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");  				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items");    				// model's selected items should not have changed  				selectedItems = filtered.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				expectedItems = model.Where((item' row) => row < model.Count / 2).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Model's selected items should not have changed");  				Assert.AreEqual(0' modelSelectionChangedCount' "Model SelectionChanged event should not fire when changing filter");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectableFilterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectableFilterTests.cs,FilterItemsShouldNotChangeSelection,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				// Select the first half of items  				for (var i = 0; i < model.Count / 2; i++)  					grid.SelectRow(i);    				viewSelectionChangedCount = modelSelectionChangedCount = 0; // reset the counts  				filtered.Filter = GridViewUtils.KeepOddItemsFilter;    				Assert.AreEqual(model.Count / 4' grid.SelectedRows.Count()' "A quarter of the items should be selected");    				// view's selected items should change  				var selectedItems = grid.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				var expectedItems = model.Where((item' row) => row < model.Count / 2 && (row % 2) == 1).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Selected items should only contain items left after filtering");  				Assert.AreEqual(1' viewSelectionChangedCount' "View SelectionChanged event should fire when changing the Filter which removes items");    				// model's selected items should not have changed  				selectedItems = filtered.SelectedItems.OfType<DataItem>().OrderBy(r => r.Id).ToList();  				expectedItems = model.Where((item' row) => row < model.Count / 2).ToList();  				Assert.IsTrue(expectedItems.SequenceEqual(selectedItems)' "Model's selected items should not have changed");  				Assert.AreEqual(0' modelSelectionChangedCount' "Model SelectionChanged event should not fire when changing filter");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,UnselectAllShouldUnselectAllRows,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;  				var initialCount = model.Count;    				// Select half of the items (every 2nd row)  				for (var i = 0; i < initialCount; i += 2)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				selectionChangedCount = 0;    				grid.UnselectAll();    				Assert.AreEqual(0' grid.SelectedRows.Count()' "There should be zero selected items after UnselectAll");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire once after UnselectAll");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,UnselectAllShouldUnselectAllRows,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;  				var initialCount = model.Count;    				// Select half of the items (every 2nd row)  				for (var i = 0; i < initialCount; i += 2)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				selectionChangedCount = 0;    				grid.UnselectAll();    				Assert.AreEqual(0' grid.SelectedRows.Count()' "There should be zero selected items after UnselectAll");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire once after UnselectAll");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,UnselectAllShouldUnselectAllRows,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;  				var initialCount = model.Count;    				// Select half of the items (every 2nd row)  				for (var i = 0; i < initialCount; i += 2)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				selectionChangedCount = 0;    				grid.UnselectAll();    				Assert.AreEqual(0' grid.SelectedRows.Count()' "There should be zero selected items after UnselectAll");    				Assert.AreEqual(1' selectionChangedCount' "SelectionChanged event should fire once after UnselectAll");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewSelectTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewSelectTests.cs,DeleteSelectedItemsShouldRemoveSelectedItems,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				grid.AllowMultipleSelection = true;    				var initialCount = model.Count;    				// Select the first half of items  				for (var i = 0; i < initialCount / 2; i++)  					grid.SelectRow(i);    				Assert.AreEqual(initialCount / 2' grid.SelectedRows.Count()' "Number of selected items should be half of the items");    				Assert.AreEqual(initialCount / 2' selectionChangedCount' "SelectionChanged event should fire for each item selected");    				// reset to test events fired when removing  				selectionChangedCount = 0;    				// Delete alternate items  				for (var i = initialCount - 1; i >= 0; i -= 2)  					model.RemoveAt(i);    				Assert.AreEqual(initialCount / 4' grid.SelectedRows.Count()' "Number of selected items should be quarter of the original items");  				var expectedSelectedItemIds = new List<int>();  				for (var i = 0; i < initialCount / 2; i += 2)  					expectedSelectedItemIds.Add(i);  				Assert.IsTrue(expectedSelectedItemIds.SequenceEqual(grid.SelectedItems.OfType<DataItem>().Select(x => x.Id).OrderBy(r => r))' "Items don't match");    				Assert.AreEqual(initialCount / 4' selectionChangedCount' "SelectionChanged event should fire for each selected item removed");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CellClickShouldHaveMouseInformation,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = "Left click on the cell at 0' 0" };  				var gv = new GridView { Size = new Size(200' 100) };    				gv.Columns.Add(new GridColumn  				{  					DataCell = new CheckBoxCell(0)'  					HeaderText = "Check"  				});  				gv.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(1)'  					HeaderText = "Text"  				});  				gv.DataStore = new List<GridItem>  				{  					new GridItem(true' "Item 1")'  					new GridItem(false' "Item 2")'  					new GridItem(false' "Item 3")  				};    				var step = 0;      				gv.CellClick += (sender' e) =>  				{  					try  					{  						switch (step)  						{  							case 0:  								Assert.AreEqual(0' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Point.Round(Mouse.Position / 4f)' Point.Round(gv.PointToScreen(e.Location) / 4f));  								label.Text = "Now' left click on 1' 0";  								step = 1;  								break;  							case 1:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(0' e.Row);  								Assert.AreEqual(MouseButtons.Primary' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 1";  								step = 2;  								break;  							case 2:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(1' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.None' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								label.Text = "Now' right click on 1' 2 with the shift key pressed";  								step = 3;  								break;  							case 3:  								Assert.AreEqual(1' e.Column);  								Assert.AreEqual(2' e.Row);  								Assert.AreEqual(MouseButtons.Alternate' e.Buttons);  								Assert.AreEqual(Keys.Shift' e.Modifiers);  								Assert.AreEqual(Mouse.Position' gv.PointToScreen(e.Location));  								step = 4;  								form.Close();  								break;  							default:  								Assert.Fail("Test is in an invalid state");  								break;  						}  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};    				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items = {  						label'  						gv  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CollectionChangedWithResetShouldShowItems,The following statement contains a magic number: var count = 10;
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CollectionChangedWithResetShouldShowItems,The following statement contains a magic number: ManualForm($"GridView should show {count} items"' form =>  			{  				var collection = new MyCollection();  				var filterCollection = new FilterCollection<DataItem>(collection);  				var myGridView = new GridView  				{  					Size = new Size(200' 260)'  					DataStore = filterCollection'  					Columns = {  						new GridColumn {  							DataCell = new TextBoxCell { Binding = Eto.Forms.Binding.Property((DataItem m) => m.Id.ToString()) }  						}  					}  				};  				collection.Clear();  				collection.AddRange(Enumerable.Range(1' count).Select(r => new DataItem(r)));    				return myGridView;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,CollectionChangedWithResetShouldShowItems,The following statement contains a magic number: ManualForm($"GridView should show {count} items"' form =>  			{  				var collection = new MyCollection();  				var filterCollection = new FilterCollection<DataItem>(collection);  				var myGridView = new GridView  				{  					Size = new Size(200' 260)'  					DataStore = filterCollection'  					Columns = {  						new GridColumn {  							DataCell = new TextBoxCell { Binding = Eto.Forms.Binding.Property((DataItem m) => m.Id.ToString()) }  						}  					}  				};  				collection.Clear();  				collection.AddRange(Enumerable.Range(1' count).Select(r => new DataItem(r)));    				return myGridView;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,AutoSizedColumnShouldChangeSizeOfControl,The following statement contains a magic number: ManualForm("GridView should auto size to content"' form =>  			{  				var collection = new ObservableCollection<DataItem>();  				var gridView = new GridView  				{  					Height = 180'  					DataStore = collection'  					Columns =  					{  						new GridColumn  						{  							AutoSize = true'  							DataCell = new TextBoxCell { Binding = Binding.Property((DataItem m) => m.TextValue) }  						}  					}  				};  				var item = new DataItem { TextValue = "Some Text" };  				collection.Add(item);    				var textBox = new TextBox();  				textBox.Focus();  				textBox.TextBinding.Bind(item' i => i.TextValue);  				textBox.TextChanged += (sender' e) => gridView.ReloadData(0);    				var layout = new DynamicLayout();  				layout.BeginVertical(yscale: true);  				layout.AddRow(gridView' null); // gridView is auto sized  				layout.EndVertical();    				layout.AddSeparateRow("Text:"' textBox);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Application.Instance.Invoke(() =>  				{  					f = new Form { Size = new Size(300' 300) };    					g = new GridView();  					g.Columns.Add(new GridColumn  					{  						DataCell = new CustomCellWithTableLayout()  					});  					g.DataStore = Enumerable.Range(0' 100).Cast<object>().ToList();  					g.SelectedRow = 1;  					f.Content = g;  					f.Show();  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Application.Instance.Invoke(() =>  				{  					f = new Form { Size = new Size(300' 300) };    					g = new GridView();  					g.Columns.Add(new GridColumn  					{  						DataCell = new CustomCellWithTableLayout()  					});  					g.DataStore = Enumerable.Range(0' 100).Cast<object>().ToList();  					g.SelectedRow = 1;  					f.Content = g;  					f.Show();  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Application.Instance.Invoke(() =>  				{  					f = new Form { Size = new Size(300' 300) };    					g = new GridView();  					g.Columns.Add(new GridColumn  					{  						DataCell = new CustomCellWithTableLayout()  					});  					g.DataStore = Enumerable.Range(0' 100).Cast<object>().ToList();  					g.SelectedRow = 1;  					f.Content = g;  					f.Show();  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Application.Instance.Invoke(() =>  				{  					g.DataStore = Enumerable.Range(0' 10).Cast<object>().ToList();  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ReloadingDataStoreShouldNotCrash,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Eto.Test.UnitTests.Forms.Controls,GridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\GridViewTests.cs,ClickingWithEmptyDataShouldNotCrash,The following statement contains a magic number: Form(form =>  			{  				var dd = new List<GridItem>();    				dd.Add(new GridItem { Values = new[] { "Hello" } });  				var control = new GridView();  				control.AllowEmptySelection = allowEmptySelection;  				control.AllowMultipleSelection = allowMultipleSelection;  				control.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(0)'  					Width = 100'  					HeaderText = "Text Cell"  				});  				control.DataStore = dd;  				Application.Instance.AsyncInvoke(() => {  					// can crash when had selection initially but no selection after.  					try  					{  						control.DataStore = new List<GridItem>();  					}  					catch (Exception ex)  					{  						exception = ex;  					}  					Application.Instance.AsyncInvoke(form.Close);  				});    				form.Content = control;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,IconShouldNotCrashInEventsOrAfterClosed,The following statement contains a magic number: Form(form =>  			{  				// shouldn't really be setting ImageView.Image after the form is closed (as you can't re-open the form)'  				// but with complex code this may happen so we should protect from crashing.  				var imageView = new ImageView { Width = 64' Height = 64 };  				form.Content = new StackLayout { Items = { imageView } };  				imageView.Image = TestIcons.Logo;  				form.Load += (sender' e) => imageView.Image = TestIcons.TestIcon;  				form.LoadComplete += (sender' e) => imageView.Image = TestIcons.TestIcon;  				form.Closing += (sender' e) =>  				{  					imageView.Image = TestIcons.Logo;  				};  				form.Closed += (sender' e) =>  				{  					imageView.Image = TestIcons.Logo;  				};  				form.Shown += (sender' e) => Application.Instance.AsyncInvoke(() =>  				{  					form.Close();  					imageView.Image = TestIcons.Logo;  				});  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,IconShouldNotCrashInEventsOrAfterClosed,The following statement contains a magic number: Form(form =>  			{  				// shouldn't really be setting ImageView.Image after the form is closed (as you can't re-open the form)'  				// but with complex code this may happen so we should protect from crashing.  				var imageView = new ImageView { Width = 64' Height = 64 };  				form.Content = new StackLayout { Items = { imageView } };  				imageView.Image = TestIcons.Logo;  				form.Load += (sender' e) => imageView.Image = TestIcons.TestIcon;  				form.LoadComplete += (sender' e) => imageView.Image = TestIcons.TestIcon;  				form.Closing += (sender' e) =>  				{  					imageView.Image = TestIcons.Logo;  				};  				form.Closed += (sender' e) =>  				{  					imageView.Image = TestIcons.Logo;  				};  				form.Shown += (sender' e) => Application.Instance.AsyncInvoke(() =>  				{  					form.Close();  					imageView.Image = TestIcons.Logo;  				});  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(16' 16)' new Size(16' 16)' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(32' 32)' new Size(32' 32)' null' zeroSize);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(32' 32)' new Size(32' 32)' null' zeroSize);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(32' 32)' new Size(32' 32)' null' zeroSize);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => logo().WithSize(32' 32)' new Size(32' 32)' null' zeroSize);
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => image()' () => image().Size' () => image().WithSize(32' 32)' () => new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => image()' () => image().Size' () => image().WithSize(32' 32)' () => new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => image()' () => image().Size' () => image().WithSize(32' 32)' () => new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(() => image()' () => image().Size' () => image().WithSize(32' 32)' () => new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(null' zeroSize' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(null' zeroSize' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(null' zeroSize' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,GetImageSizeTests,The following statement contains a magic number: yield return new ImageSizeTestCase(null' zeroSize' () => logo().WithSize(32' 32)' new Size(32' 32));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,ImageSizeShouldUpdateImageViewSize,The following statement contains a magic number: Form(form =>  			{  				var imageView = new ImageView();  				imageView.Image = imageInfo.StartImage?.Invoke();  				Assert.AreEqual(new Size(-1' -1)' imageView.Size' "#1");  				form.ClientSize = new Size(200' 200);  				form.Content = new StackLayout { Items = { imageView } };    				form.Shown += (sender' e) =>   				{  					try  					{  						imageView.SizeChanged += (sender2' e2) =>  						{  							try  							{  								Assert.AreEqual(imageInfo.UpdateSize()' imageView.Size);  								form.Close();  							}  							catch (Exception ex)  							{  								exception = ex;  								form.Close();  							}  						};    						Assert.AreEqual(imageInfo.StartSize()' imageView.Size);  						imageView.Image = imageInfo.UpdateImage?.Invoke();  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ImageViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ImageViewTests.cs,ImageSizeShouldUpdateImageViewSize,The following statement contains a magic number: Form(form =>  			{  				var imageView = new ImageView();  				imageView.Image = imageInfo.StartImage?.Invoke();  				Assert.AreEqual(new Size(-1' -1)' imageView.Size' "#1");  				form.ClientSize = new Size(200' 200);  				form.Content = new StackLayout { Items = { imageView } };    				form.Shown += (sender' e) =>   				{  					try  					{  						imageView.SizeChanged += (sender2' e2) =>  						{  							try  							{  								Assert.AreEqual(imageInfo.UpdateSize()' imageView.Size);  								form.Close();  							}  							catch (Exception ex)  							{  								exception = ex;  								form.Close();  							}  						};    						Assert.AreEqual(imageInfo.StartSize()' imageView.Size);  						imageView.Image = imageInfo.UpdateImage?.Invoke();  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\LabelTests.cs,ChangingTextAfterCreationShouldUpdateSize,The following statement contains a magic number: ManualForm("Label should be fully visible"' form =>  			{  				var label = new Label { Text = "" };  				Application.Instance.AsyncInvoke(() => label.Text = "This label should end with a period.");  				var layout = new PixelLayout  				{  					Size = new Size(300' 200)  				};  				layout.Add(label' 0' 0);  				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\LabelTests.cs,ChangingTextAfterCreationShouldUpdateSize,The following statement contains a magic number: ManualForm("Label should be fully visible"' form =>  			{  				var label = new Label { Text = "" };  				Application.Instance.AsyncInvoke(() => label.Text = "This label should end with a period.");  				var layout = new PixelLayout  				{  					Size = new Size(300' 200)  				};  				layout.Add(label' 0' 0);  				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ListControlTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ListControlTests.cs,ItemTextBindingShouldWorkRegardlessOfOrder,The following statement contains a magic number: ManualForm("Should show 'Item x' for each item"' form =>  			{  				var dropDown = new T();  				if (dropDown is ListBox)  					dropDown.Size = new Size(150' 200);    				var binding = Binding.Delegate((string d) => "Item " + d);  				if (mode == SetBindingMode.Before)  					dropDown.ItemTextBinding = binding;  				dropDown.DataStore = new[] { "1"' "2"' "3" };  				dropDown.SelectedIndex = 0;  				if (mode == SetBindingMode.After)  					dropDown.ItemTextBinding = binding;    				if (mode == SetBindingMode.Async)  				{  					var updateBindingButton = new Button { Text = "Update ItemTextBinding" };  					updateBindingButton.Click += (sender' e) => dropDown.ItemTextBinding = binding;    					return new StackLayout  					{  						Spacing = 4'  						Items = { new StackLayoutItem(dropDown' true)' updateBindingButton }  					};  				}  				else  					return dropDown;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ListControlTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ListControlTests.cs,ItemTextBindingShouldWorkRegardlessOfOrder,The following statement contains a magic number: ManualForm("Should show 'Item x' for each item"' form =>  			{  				var dropDown = new T();  				if (dropDown is ListBox)  					dropDown.Size = new Size(150' 200);    				var binding = Binding.Delegate((string d) => "Item " + d);  				if (mode == SetBindingMode.Before)  					dropDown.ItemTextBinding = binding;  				dropDown.DataStore = new[] { "1"' "2"' "3" };  				dropDown.SelectedIndex = 0;  				if (mode == SetBindingMode.After)  					dropDown.ItemTextBinding = binding;    				if (mode == SetBindingMode.Async)  				{  					var updateBindingButton = new Button { Text = "Update ItemTextBinding" };  					updateBindingButton.Click += (sender' e) => dropDown.ItemTextBinding = binding;    					return new StackLayout  					{  						Spacing = 4'  						Items = { new StackLayoutItem(dropDown' true)' updateBindingButton }  					};  				}  				else  					return dropDown;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ListControlTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ListControlTests.cs,ItemTextBindingShouldWorkRegardlessOfOrder,The following statement contains a magic number: ManualForm("Should show 'Item x' for each item"' form =>  			{  				var dropDown = new T();  				if (dropDown is ListBox)  					dropDown.Size = new Size(150' 200);    				var binding = Binding.Delegate((string d) => "Item " + d);  				if (mode == SetBindingMode.Before)  					dropDown.ItemTextBinding = binding;  				dropDown.DataStore = new[] { "1"' "2"' "3" };  				dropDown.SelectedIndex = 0;  				if (mode == SetBindingMode.After)  					dropDown.ItemTextBinding = binding;    				if (mode == SetBindingMode.Async)  				{  					var updateBindingButton = new Button { Text = "Update ItemTextBinding" };  					updateBindingButton.Click += (sender' e) => dropDown.ItemTextBinding = binding;    					return new StackLayout  					{  						Spacing = 4'  						Items = { new StackLayoutItem(dropDown' true)' updateBindingButton }  					};  				}  				else  					return dropDown;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MinMaxShouldRetainValue,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 100;  				numeric.MaxValue = 1000;  				Assert.AreEqual(100' numeric.MinValue' "MinValue should return the same value as set");  				Assert.AreEqual(1000' numeric.MaxValue' "MaxValue should return the same value as set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");    				numeric.MinValue = double.NegativeInfinity;  				numeric.MaxValue = double.PositiveInfinity;  				numeric.Value = 0;    				Assert.AreEqual(double.NegativeInfinity' numeric.MinValue' "MinValue should be double.NegativeInfinity");  				Assert.AreEqual(double.PositiveInfinity' numeric.MaxValue' "MaxValue should be double.PositiveInfinity");  				Assert.AreEqual(0' numeric.Value' "Value should be back to 0");    				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MinMaxShouldRetainValue,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 100;  				numeric.MaxValue = 1000;  				Assert.AreEqual(100' numeric.MinValue' "MinValue should return the same value as set");  				Assert.AreEqual(1000' numeric.MaxValue' "MaxValue should return the same value as set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");    				numeric.MinValue = double.NegativeInfinity;  				numeric.MaxValue = double.PositiveInfinity;  				numeric.Value = 0;    				Assert.AreEqual(double.NegativeInfinity' numeric.MinValue' "MinValue should be double.NegativeInfinity");  				Assert.AreEqual(double.PositiveInfinity' numeric.MaxValue' "MaxValue should be double.PositiveInfinity");  				Assert.AreEqual(0' numeric.Value' "Value should be back to 0");    				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MinMaxShouldRetainValue,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 100;  				numeric.MaxValue = 1000;  				Assert.AreEqual(100' numeric.MinValue' "MinValue should return the same value as set");  				Assert.AreEqual(1000' numeric.MaxValue' "MaxValue should return the same value as set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");    				numeric.MinValue = double.NegativeInfinity;  				numeric.MaxValue = double.PositiveInfinity;  				numeric.Value = 0;    				Assert.AreEqual(double.NegativeInfinity' numeric.MinValue' "MinValue should be double.NegativeInfinity");  				Assert.AreEqual(double.PositiveInfinity' numeric.MaxValue' "MaxValue should be double.PositiveInfinity");  				Assert.AreEqual(0' numeric.Value' "Value should be back to 0");    				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MinMaxShouldRetainValue,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 100;  				numeric.MaxValue = 1000;  				Assert.AreEqual(100' numeric.MinValue' "MinValue should return the same value as set");  				Assert.AreEqual(1000' numeric.MaxValue' "MaxValue should return the same value as set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");    				numeric.MinValue = double.NegativeInfinity;  				numeric.MaxValue = double.PositiveInfinity;  				numeric.Value = 0;    				Assert.AreEqual(double.NegativeInfinity' numeric.MinValue' "MinValue should be double.NegativeInfinity");  				Assert.AreEqual(double.PositiveInfinity' numeric.MaxValue' "MaxValue should be double.PositiveInfinity");  				Assert.AreEqual(0' numeric.Value' "Value should be back to 0");    				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event should fire when changing the MinValue");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,ValueShouldBeLimitedToMinMax,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				int currentValueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.MinValue = 0;  				numeric.MaxValue = 2000;  				Assert.AreEqual(0' numeric.MinValue' "Could not correctly set MinValue");  				Assert.AreEqual(2000' numeric.MaxValue' "Could not correctly set MaxValue");    				numeric.MinValue = 100;  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  				Assert.AreEqual(100' numeric.Value' "Value should be set after MinValue is set");    				numeric.Value = 1000;  				Assert.AreEqual(1000' numeric.Value' "Could not correctly set Value after Min/Max is set");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = 2001;  				Assert.AreEqual(2000' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.Value = -1000;  				Assert.AreEqual(100' numeric.Value' "Value should be limited to Min/Max value");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 1000;  				Assert.AreEqual(1000' numeric.Value' "Value should be changed to match new MinValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");    				numeric.MinValue = 0;  				numeric.MaxValue = 500;  				Assert.AreEqual(500' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(++currentValueChanged' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,FractionalMaxValueShouldSetValueCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.DecimalPlaces = decimalPlaces;    				numeric.Value = value;  				Assert.AreEqual(1' valueChanged' "ValueChanged event was not fired the correct number of times");  				numeric.MaxValue = maxValue;  				Assert.AreEqual(newValue' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(2' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,FractionalMinValueShouldSetValueCorrectly,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();  				int valueChanged = 0;  				numeric.ValueChanged += (sender' e) => valueChanged++;    				numeric.DecimalPlaces = decimalPlaces;    				numeric.Value = value;  				numeric.MinValue = minValue;  				Assert.AreEqual(newValue' numeric.Value' "Value should be changed to match new MaxValue");  				Assert.AreEqual(2' valueChanged' "ValueChanged event was not fired the correct number of times");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,MaximumDecimalPlacesShouldUpdateWhenDecimalPlacesIsChanged,The following statement contains a magic number: Invoke(() =>  			{  				var numeric = new NumericStepper();    				numeric.DecimalPlaces = 3;  				Assert.AreEqual(3' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should be changed to at minimum DecimalPlaces");    				numeric.DecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces isn't roundtripping set values");  				Assert.AreEqual(3' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces should only be changed when DecimalPlaces is greater than its current value");      				numeric.MaximumDecimalPlaces = 2;  				Assert.AreEqual(2' numeric.DecimalPlaces' "DecimalPlaces should keep its original value");  				Assert.AreEqual(2' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 1;  				Assert.AreEqual(1' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(1' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");    				numeric.MaximumDecimalPlaces = 0;  				Assert.AreEqual(0' numeric.DecimalPlaces' "DecimalPlaces should be updated to the new value of MaximumDecimalPlaces when its current value is greater");  				Assert.AreEqual(0' numeric.MaximumDecimalPlaces' "MaximumDecimalPlaces wasn't updated to the new value");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStick,The following statement contains a magic number: Shown(form =>  			{  				numericStepper = new NumericStepper();  				numericStepper.ValueChanged += (sender' e) =>  				{  					numericStepper.Value = 10;  				};  				form.Content = numericStepper;  			}'  			() =>  			{  				Assert.AreEqual(0' numericStepper.Value);  				numericStepper.Value = 2;  				Assert.AreEqual(10' numericStepper.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStick,The following statement contains a magic number: Shown(form =>  			{  				numericStepper = new NumericStepper();  				numericStepper.ValueChanged += (sender' e) =>  				{  					numericStepper.Value = 10;  				};  				form.Content = numericStepper;  			}'  			() =>  			{  				Assert.AreEqual(0' numericStepper.Value);  				numericStepper.Value = 2;  				Assert.AreEqual(10' numericStepper.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStick,The following statement contains a magic number: Shown(form =>  			{  				numericStepper = new NumericStepper();  				numericStepper.ValueChanged += (sender' e) =>  				{  					numericStepper.Value = 10;  				};  				form.Content = numericStepper;  			}'  			() =>  			{  				Assert.AreEqual(0' numericStepper.Value);  				numericStepper.Value = 2;  				Assert.AreEqual(10' numericStepper.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,NumericStepperTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\NumericStepperTests.cs,SettingValueInChangedHandlerShouldStickWhenTyped,The following statement contains a magic number: ManualForm("Type '2' in the numeric spinner.  It should be set to 10 and ValueChanged called exactly 2 times."'  				form =>  			{  				var label = new Label();  				var numericStepper = new NumericStepper();  				Assert.AreEqual(0' numericStepper.Value' "#1");  				var changedCount = 0;  				numericStepper.ValueChanged += (sender' e) =>  				{  					if (exception != null)  						return;  					try  					{  						changedCount++;  						if (changedCount == 1)  							Assert.AreEqual(2' numericStepper.Value' "#2");  						else if (changedCount == 2)  							Assert.AreEqual(10' numericStepper.Value' "#3");  						else if (changedCount > 2)  							Assert.Fail($"#4. ValueChanged should only fire twice. New value is '{numericStepper.Value}' but should stay at 10.");  						numericStepper.Value = 10;  						Assert.AreEqual(10' numericStepper.Value' "#5");  						Application.Instance.AsyncInvoke(() => label.Text = $"Value is {numericStepper.Value}. ValueChanged called {changedCount} times.");  					}  					catch (Exception ex)  					{  						exception = ex;  						form.Close();  					}  				};  				numericStepper.Focus();  				return new StackLayout  				{  					Items =  					{  						numericStepper'  						label  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,RadioButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RadioButtonTests.cs,RadioButtonGroupsShouldWorkProgrammatically,The following statement contains a magic number: Shown(form =>  			{  				rb1 = new RadioButton();  				rb1.CheckedChanged += (sender' e) => rb1changed++;    				rb2 = new RadioButton(rb1);  				rb2.CheckedChanged += (sender' e) => rb2changed++;    				rb3 = new RadioButton(rb1);  				rb3.CheckedChanged += (sender' e) => rb3changed++;    				if (useSeparateContainers)  				{  					form.Content = new TableLayout  					{  						Rows =  						{  							new TextBox()' // on winforms' when a radio button gets focus it also gets checked  							new TableLayout { Rows = { rb1 } }'  							new TableLayout { Rows = { rb2 } }'  							new TableLayout { Rows = { rb3 } }  						}  					};  				}  				else  				{  					form.Content = new TableLayout  					{  						Rows =  						{  							new TextBox()' // on winforms' when a radio button gets focus it also gets checked  							rb1' rb2' rb3  						}  					};  				}  			}' () =>  			{  				// none checked is valid  				Assert.IsFalse(rb1.Checked' "#1.1");  				Assert.IsFalse(rb2.Checked' "#1.2");  				Assert.IsFalse(rb3.Checked' "#1.3");  				Assert.AreEqual(0' rb1changed' "#1.4");  				Assert.AreEqual(0' rb2changed' "#1.5");  				Assert.AreEqual(0' rb3changed' "#1.6");    				rb2.Checked = true;    				Assert.IsFalse(rb1.Checked' "#2.1");  				Assert.IsTrue(rb2.Checked' "#2.2");  				Assert.IsFalse(rb3.Checked' "#2.3");  				Assert.AreEqual(0' rb1changed' "#2.4");  				Assert.AreEqual(1' rb2changed' "#2.5");  				Assert.AreEqual(0' rb3changed' "#2.6");    				rb3.Checked = true;    				Assert.IsFalse(rb1.Checked' "#3.1");  				Assert.IsFalse(rb2.Checked' "#3.2");  				Assert.IsTrue(rb3.Checked' "#3.3");  				Assert.AreEqual(0' rb1changed' "#3.4");  				Assert.AreEqual(2' rb2changed' "#3.5");  				Assert.AreEqual(1' rb3changed' "#3.6");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: textArea.Selection = Range.FromLength(6' 5);
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: textArea.Selection = Range.FromLength(6' 5);
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#3-1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#3-1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(6' textArea.CaretIndex' "#3-2");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(2' selectionChanged' "#3-4");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(2' caretChanged' "#3-5");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(2' textChanged' "#4-4");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(3' selectionChanged' "#4-5");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,CheckSelectionTextCaretAfterSettingRtf,The following statement contains a magic number: Assert.AreEqual(3' caretChanged' "#4-6");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionAttributesShouldBeCorrectWithLoadedRtf,The following statement contains a magic number: richText.CaretIndex = 5;
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionAttributesShouldBeCorrectWithLoadedRtf,The following statement contains a magic number: richText.CaretIndex = 7;
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionAttributesShouldBeCorrectWithLoadedRtf,The following statement contains a magic number: richText.CaretIndex = 17;
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionAttributesShouldBeCorrectWithLoadedRtf,The following statement contains a magic number: richText.CaretIndex = 24;
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionAttributesShouldBeCorrectWithLoadedRtf,The following statement contains a magic number: richText.CaretIndex = 29;
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(2' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionUnderline");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(3' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionStrikethrough");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(4' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionBold");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(5' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionItalic");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(6' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionForeground");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,SelectionBoldItalicUnderlineShouldTriggerTextChanged,The following statement contains a magic number: Assert.AreEqual(7' textChangedCount' "RichTextArea.TextChanged did not fire when setting SelectionBackground");
Magic Number,Eto.Test.UnitTests.Forms.Controls,RichTextAreaTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\RichTextAreaTests.cs,PlainTextShouldInheritBaseFont,The following statement contains a magic number: expectedFontSize = 24;
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,TwoScrollablesShouldNotClipControls,The following statement contains a magic number: ManualForm(  				"When resizing on macOS with System Preferences > General > Show Scroll Bars set to 'Always'' the scrollbars should not obscure content when resizing the form to a smaller size.\nAlso' the top panel should never get a vertical scroll bar' only horizontal."'  				form =>  			{  				form.ClientSize = new Size(400' -1);  				form.Padding = 20;  				var pixelLayout1 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout1.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 30) }' Point.Empty);  				var scrollable1 = new Scrollable { Content = pixelLayout1 };    				var pixelLayout2 = new PixelLayout { BackgroundColor = Colors.Green };  				pixelLayout2.Add(new Panel { BackgroundColor = Colors.Blue' Size = new Size(300' 300) }' Point.Empty);  				var scrollable2 = new Scrollable { Content = pixelLayout2 };  				return new TableLayout  				{  					Rows = {  						scrollable1'  						scrollable2  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,AllControlsShouldExpandWidth,The following statement contains a magic number: ManualForm("Control and blue background should expand to width of scrollable"' form =>  			{  				var control = info.CreateControl();  				info.PopulateControl(control);  				control.BackgroundColor = Colors.Blue;    				return new Scrollable  				{  					Size = new Size(300' 200)'  					Content = control'  					ExpandContentWidth = true'  					ExpandContentHeight = false  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,AllControlsShouldExpandWidth,The following statement contains a magic number: ManualForm("Control and blue background should expand to width of scrollable"' form =>  			{  				var control = info.CreateControl();  				info.PopulateControl(control);  				control.BackgroundColor = Colors.Blue;    				return new Scrollable  				{  					Size = new Size(300' 200)'  					Content = control'  					ExpandContentWidth = true'  					ExpandContentHeight = false  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: container.AddRow(new TableRow(new Label { Text = ""' Height = 10 }));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: container.AddRow(new TableRow(new Label { Text = text' Wrap = WrapMode.Word' Font = SystemFonts.Label(SystemFonts.Default().Size - 2.0f) }));
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: var drop = new DropDown { Width = 200 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: ManualForm(  				"You should be able to scroll down to the 'BOTTOM' label' and long paragraphs should be wrapped."'  				form =>  				{  					var container = new DynamicLayout();    					container.BeginVertical();    					container.Padding = 0;    					CreateAndAddLabelRow(container' "Header 1");    					CreateAndAddDescriptionRow(container' "Lorem ipsum dolor sit amet' consectetur adipiscing elit. Cras suscipit malesuada ex' ut iaculis nisl. Donec eros est' rutrum ac molestie vitae' euismod mollis enim. Integer eget turpis sit amet nulla laoreet dapibus. Curabitur sit amet nulla sed erat rutrum gravida. Donec vel erat ex. Aenean sit amet massa at ante suscipit fringilla. Sed bibendum tempor sem et congue. Maecenas diam neque' dictum id ligula eget' vulputate ornare massa. Integer lobortis dolor risus' a eleifend ante feugiat ac. Aenean egestas bibendum fermentum. In ac elit vitae augue convallis blandit eu eget ligula.");    					CreateAndAddDropDownRow(container' "Some Drop Down"' new List<string>() { "item1"' "item2" }' 0' (sender' e) => { });    					CreateAndAddLabelRow(container' "Header 2");    					CreateAndAddLabelRow(container' "Header 3");    					CreateAndAddDescriptionRow(container' "Vestibulum dignissim in ipsum sed condimentum. Etiam vitae ullamcorper dui. Pellentesque non imperdiet lacus. Maecenas ullamcorper sapien enim' sit amet commodo mauris scelerisque non. Nullam facilisis ipsum laoreet' gravida eros in' egestas odio. Morbi id ex vitae dui viverra ornare et vel metus. Phasellus lobortis finibus ex. Nulla tristique malesuada eros eget maximus. Donec a nisi facilisis sapien porta mattis. Curabitur sodales' magna sit amet aliquet commodo' eros quam congue felis' sit amet dictum orci neque nec risus. Aenean id auctor tellus. Etiam ac imperdiet nunc. Aliquam suscipit quam nec velit sollicitudin' posuere tempor ante vehicula. Suspendisse vitae massa tempus' maximus urna vitae' bibendum arcu.");    					CreateAndAddDropDownRow(container' "Other Drop Down"' new List<string>()' -1' (sender' e) => { });    					container.AddRow(new Label { Text = "BOTTOM"' Font = SystemFonts.Bold() });    					container.AddSpace();    					container.EndVertical();    					container.Width = 300;// - container.Padding.Value.Left * 2 - container.Padding.Value.Right * 2;    					var tabs = new List<TabPage>  					{  						new TabPage(new Scrollable { Content = container' Border = BorderType.None }) { Text = "Tab 1" }'  						new TabPage(new Panel()) { Text = "Tab 2" }  					};    					var tabctrl = new TabControl();  					foreach (var tab in tabs)  					{  						tabctrl.Pages.Add(tab);  					}    					form.ClientSize = new Size(500' 300);    					return tabctrl;  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: ManualForm(  				"You should be able to scroll down to the 'BOTTOM' label' and long paragraphs should be wrapped."'  				form =>  				{  					var container = new DynamicLayout();    					container.BeginVertical();    					container.Padding = 0;    					CreateAndAddLabelRow(container' "Header 1");    					CreateAndAddDescriptionRow(container' "Lorem ipsum dolor sit amet' consectetur adipiscing elit. Cras suscipit malesuada ex' ut iaculis nisl. Donec eros est' rutrum ac molestie vitae' euismod mollis enim. Integer eget turpis sit amet nulla laoreet dapibus. Curabitur sit amet nulla sed erat rutrum gravida. Donec vel erat ex. Aenean sit amet massa at ante suscipit fringilla. Sed bibendum tempor sem et congue. Maecenas diam neque' dictum id ligula eget' vulputate ornare massa. Integer lobortis dolor risus' a eleifend ante feugiat ac. Aenean egestas bibendum fermentum. In ac elit vitae augue convallis blandit eu eget ligula.");    					CreateAndAddDropDownRow(container' "Some Drop Down"' new List<string>() { "item1"' "item2" }' 0' (sender' e) => { });    					CreateAndAddLabelRow(container' "Header 2");    					CreateAndAddLabelRow(container' "Header 3");    					CreateAndAddDescriptionRow(container' "Vestibulum dignissim in ipsum sed condimentum. Etiam vitae ullamcorper dui. Pellentesque non imperdiet lacus. Maecenas ullamcorper sapien enim' sit amet commodo mauris scelerisque non. Nullam facilisis ipsum laoreet' gravida eros in' egestas odio. Morbi id ex vitae dui viverra ornare et vel metus. Phasellus lobortis finibus ex. Nulla tristique malesuada eros eget maximus. Donec a nisi facilisis sapien porta mattis. Curabitur sodales' magna sit amet aliquet commodo' eros quam congue felis' sit amet dictum orci neque nec risus. Aenean id auctor tellus. Etiam ac imperdiet nunc. Aliquam suscipit quam nec velit sollicitudin' posuere tempor ante vehicula. Suspendisse vitae massa tempus' maximus urna vitae' bibendum arcu.");    					CreateAndAddDropDownRow(container' "Other Drop Down"' new List<string>()' -1' (sender' e) => { });    					container.AddRow(new Label { Text = "BOTTOM"' Font = SystemFonts.Bold() });    					container.AddSpace();    					container.EndVertical();    					container.Width = 300;// - container.Padding.Value.Left * 2 - container.Padding.Value.Right * 2;    					var tabs = new List<TabPage>  					{  						new TabPage(new Scrollable { Content = container' Border = BorderType.None }) { Text = "Tab 1" }'  						new TabPage(new Panel()) { Text = "Tab 2" }  					};    					var tabctrl = new TabControl();  					foreach (var tab in tabs)  					{  						tabctrl.Pages.Add(tab);  					}    					form.ClientSize = new Size(500' 300);    					return tabctrl;  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\ScrollableTests.cs,WidthOfContentShouldAffectScrollableRegionWhenLabelsWrap,The following statement contains a magic number: ManualForm(  				"You should be able to scroll down to the 'BOTTOM' label' and long paragraphs should be wrapped."'  				form =>  				{  					var container = new DynamicLayout();    					container.BeginVertical();    					container.Padding = 0;    					CreateAndAddLabelRow(container' "Header 1");    					CreateAndAddDescriptionRow(container' "Lorem ipsum dolor sit amet' consectetur adipiscing elit. Cras suscipit malesuada ex' ut iaculis nisl. Donec eros est' rutrum ac molestie vitae' euismod mollis enim. Integer eget turpis sit amet nulla laoreet dapibus. Curabitur sit amet nulla sed erat rutrum gravida. Donec vel erat ex. Aenean sit amet massa at ante suscipit fringilla. Sed bibendum tempor sem et congue. Maecenas diam neque' dictum id ligula eget' vulputate ornare massa. Integer lobortis dolor risus' a eleifend ante feugiat ac. Aenean egestas bibendum fermentum. In ac elit vitae augue convallis blandit eu eget ligula.");    					CreateAndAddDropDownRow(container' "Some Drop Down"' new List<string>() { "item1"' "item2" }' 0' (sender' e) => { });    					CreateAndAddLabelRow(container' "Header 2");    					CreateAndAddLabelRow(container' "Header 3");    					CreateAndAddDescriptionRow(container' "Vestibulum dignissim in ipsum sed condimentum. Etiam vitae ullamcorper dui. Pellentesque non imperdiet lacus. Maecenas ullamcorper sapien enim' sit amet commodo mauris scelerisque non. Nullam facilisis ipsum laoreet' gravida eros in' egestas odio. Morbi id ex vitae dui viverra ornare et vel metus. Phasellus lobortis finibus ex. Nulla tristique malesuada eros eget maximus. Donec a nisi facilisis sapien porta mattis. Curabitur sodales' magna sit amet aliquet commodo' eros quam congue felis' sit amet dictum orci neque nec risus. Aenean id auctor tellus. Etiam ac imperdiet nunc. Aliquam suscipit quam nec velit sollicitudin' posuere tempor ante vehicula. Suspendisse vitae massa tempus' maximus urna vitae' bibendum arcu.");    					CreateAndAddDropDownRow(container' "Other Drop Down"' new List<string>()' -1' (sender' e) => { });    					container.AddRow(new Label { Text = "BOTTOM"' Font = SystemFonts.Bold() });    					container.AddSpace();    					container.EndVertical();    					container.Width = 300;// - container.Padding.Value.Left * 2 - container.Padding.Value.Right * 2;    					var tabs = new List<TabPage>  					{  						new TabPage(new Scrollable { Content = container' Border = BorderType.None }) { Text = "Tab 1" }'  						new TabPage(new Panel()) { Text = "Tab 2" }  					};    					var tabctrl = new TabControl();  					foreach (var tab in tabs)  					{  						tabctrl.Pages.Add(tab);  					}    					form.ClientSize = new Size(500' 300);    					return tabctrl;  				});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingSelectedSegmentShouldNotTriggerSelectionChanged,The following statement contains a magic number: Form(form =>  			{  				itemExpected = new ButtonSegmentedItem { Text = "Click Me!"' Selected = true };  				var segmentedButton = new SegmentedButton  				{  					SelectionMode = SegmentedSelectionMode.Single'  					Items = { "First"' itemExpected' "Last" }  				};    				segmentedButton.SelectedIndexesChanged += (sender' e) => selectedIndexesChangedCount++;  				segmentedButton.ItemClick += (sender' e) =>  				{  					itemItemClicked = e.Item;  					itemClickCount++;  				};  				itemExpected.Click += (sender' e) =>  				{  					itemClicked = sender as SegmentedItem;  					clickCount++;  					Application.Instance.AsyncInvoke(form.Close);  				};    				Assert.IsTrue(itemExpected.Selected' "#1.1");    				form.Content = new StackLayout  				{  					Spacing = 10'  					Padding = 10'  					Items =  					{  						"Click the selected segment"'  						segmentedButton  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingSelectedSegmentShouldNotTriggerSelectionChanged,The following statement contains a magic number: Form(form =>  			{  				itemExpected = new ButtonSegmentedItem { Text = "Click Me!"' Selected = true };  				var segmentedButton = new SegmentedButton  				{  					SelectionMode = SegmentedSelectionMode.Single'  					Items = { "First"' itemExpected' "Last" }  				};    				segmentedButton.SelectedIndexesChanged += (sender' e) => selectedIndexesChangedCount++;  				segmentedButton.ItemClick += (sender' e) =>  				{  					itemItemClicked = e.Item;  					itemClickCount++;  				};  				itemExpected.Click += (sender' e) =>  				{  					itemClicked = sender as SegmentedItem;  					clickCount++;  					Application.Instance.AsyncInvoke(form.Close);  				};    				Assert.IsTrue(itemExpected.Selected' "#1.1");    				form.Content = new StackLayout  				{  					Spacing = 10'  					Padding = 10'  					Items =  					{  						"Click the selected segment"'  						segmentedButton  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(2' selectedIndexesChangedCount' "#1.2");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(3' selectedIndexesChangedCount' "#1.3");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(2' segmentedButton.SelectedIndex' "#2.1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: CollectionAssert.AreEqual(new[] { 2 }' segmentedButton.SelectedIndexes' "#2.4");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(3' selectedIndexesChangedCount' "#2.5");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(4' selectedIndexesChangedCount' "#3.5");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SettingMultipleSelectedInSingleModeShouldOnlyHaveOneSelectedItem,The following statement contains a magic number: Assert.AreEqual(5' selectedIndexesChangedCount' "#4.5");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,AddingAndRemovingSelectedItemShouldChangeSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedIndexesChangedCount' "#5.1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ChangingModesShouldUpdateSelection,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 0' 1' 2 }' segmentedButton.SelectedIndexes' "#1.3");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ChangingModesShouldUpdateSelection,The following statement contains a magic number: Assert.AreEqual(2' selectedIndexesChangedCount' "#4.1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ChangingSelectionWhenModeIsNoneShouldNotRaiseChangedEvents,The following statement contains a magic number: control.SelectedIndexes = new[] { 1' 2 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,ClickingAnItemShouldRaiseChangedEvents,The following statement contains a magic number: Assert.Multiple(() =>  			{  				// check events on the segmented button control  				Assert.AreEqual(1' itemClickWasRaised' "#2.1"); // ensure user actually clicked an item.  				Assert.AreEqual(selectedIndex' model.SelectedIndex' "#2.2");    				// check events on the item itself  				Assert.AreEqual(1' itemWasClicked' "#2.3");    				if (selectionMode == SegmentedSelectionMode.Multiple)  				{  					if (initiallySelected)  					{  						Assert.AreEqual(2' selectedIndexChangedCount' "#3.1.1");  						Assert.AreEqual(2' selectedIndexesChangedCount' "#3.1.2");  						Assert.IsFalse(selectedIndex >= 0' "#3.1.3");  						Assert.AreEqual(3' model.SelectedIndexChangedCount' "#3.1.4"); // one for binding' one when item is added' and one when it actually changes.  						Assert.IsFalse(model.ItemIsSelected' "#3.1.5");  						Assert.AreEqual(3' model.ItemIsSelectedChangedCount' "#3.1.6"); // one for binding' one when it is set' and one when it actually changes.  					}  					else  					{  						Assert.AreEqual(1' selectedIndexChangedCount' "#3.2.1");  						Assert.AreEqual(1' selectedIndexesChangedCount' "#3.2.2");  						Assert.IsTrue(selectedIndex >= 0' "#3.2.3");  						Assert.AreEqual(2' model.SelectedIndexChangedCount' "#3.2.4"); // one for binding' one when it actually changes.  						Assert.IsTrue(model.ItemIsSelected' "#3.2.5");  						Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#3.2.6"); // one for binding' and one when it actually changes.  					}    					Assert.AreEqual(1' itemSelectedWasChanged' "#3.3.1");  					Assert.AreNotEqual(itemIsSelected' initiallySelected' "#3.3.2");  				}  				else  				{  					Assert.AreEqual(1' selectedIndexChangedCount' "#4.1.1");  					Assert.AreEqual(1' selectedIndexesChangedCount' "#4.1.2");  					Assert.IsTrue(selectedIndex >= 0' "#4.1.3");  					Assert.AreEqual(2' model.SelectedIndexChangedCount' "#4.1.4"); // one for binding' one when it actually changes.  					Assert.IsTrue(model.ItemIsSelected' "#4.1.5");  					Assert.AreEqual(2' model.ItemIsSelectedChangedCount' "#4.1.6"); // set when binding    					if (initiallySelected)  						Assert.AreEqual(0' itemSelectedWasChanged' "#4.2.1");  					else  						Assert.AreEqual(1' itemSelectedWasChanged' "#4.2.2");    					Assert.IsTrue(itemIsSelected' "#4.2.3");  				}  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: CollectionAssert.AreEquivalent(new[] { 0' 1' 2 }' control.SelectedIndexes' "#5.1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: Assert.AreEqual(2' selectedIndexesChangedCount' "#5.3");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: Assert.AreEqual(3' selectedIndexesChangedCount' "#6.3");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: Assert.AreEqual(2' item1SelectedChanged' "#6.7.1");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: Assert.AreEqual(2' item2SelectedChanged' "#6.7.2");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SegmentedButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SegmentedButtonTests.cs,SelectAllAndClearSelectionShouldTriggerSelectedChanges,The following statement contains a magic number: Assert.AreEqual(2' item3SelectedChanged' "#6.7.3");
Magic Number,Eto.Test.UnitTests.Forms.Controls,SliderTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SliderTests.cs,TickFrequencyShouldAllowZero,The following statement contains a magic number: Invoke(() =>  			{  				var slider = new Slider();  				slider.TickFrequency = 0;  				Assert.AreEqual(0' slider.TickFrequency);  				slider.Value = 10;  				slider.TickFrequency = 20;  				Assert.AreEqual(20' slider.TickFrequency);  				Assert.AreEqual(10' slider.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SliderTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SliderTests.cs,TickFrequencyShouldAllowZero,The following statement contains a magic number: Invoke(() =>  			{  				var slider = new Slider();  				slider.TickFrequency = 0;  				Assert.AreEqual(0' slider.TickFrequency);  				slider.Value = 10;  				slider.TickFrequency = 20;  				Assert.AreEqual(20' slider.TickFrequency);  				Assert.AreEqual(10' slider.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SliderTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SliderTests.cs,TickFrequencyShouldAllowZero,The following statement contains a magic number: Invoke(() =>  			{  				var slider = new Slider();  				slider.TickFrequency = 0;  				Assert.AreEqual(0' slider.TickFrequency);  				slider.Value = 10;  				slider.TickFrequency = 20;  				Assert.AreEqual(20' slider.TickFrequency);  				Assert.AreEqual(10' slider.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SliderTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SliderTests.cs,TickFrequencyShouldAllowZero,The following statement contains a magic number: Invoke(() =>  			{  				var slider = new Slider();  				slider.TickFrequency = 0;  				Assert.AreEqual(0' slider.TickFrequency);  				slider.Value = 10;  				slider.TickFrequency = 20;  				Assert.AreEqual(20' slider.TickFrequency);  				Assert.AreEqual(10' slider.Value);  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					Position = 50'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'   				it =>  				{  					Assert.AreEqual(50' it.Position' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					Position = 50'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'   				it =>  				{  					Assert.AreEqual(50' it.Position' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					Position = 50'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'   				it =>  				{  					Assert.AreEqual(50' it.Position' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					Position = 50'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'   				it =>  				{  					Assert.AreEqual(50' it.Position' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,RelativePositionShouldNotChange,The following statement contains a magic number: double pos = fix == SplitterFixedPanel.None ? (1 / 3.0) : 50;
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,RelativePositionShouldNotChange,The following statement contains a magic number: double pos = fix == SplitterFixedPanel.None ? (1 / 3.0) : 50;
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,RelativePositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					RelativePosition = pos'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'  				it =>  				{  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,RelativePositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					RelativePosition = pos'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'  				it =>  				{  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,RelativePositionShouldNotChange,The following statement contains a magic number: Shown(  				form => new Splitter()  				{  					Size = new Size(300' 300)'  					Orientation = orient'  					FixedPanel = fix'  					RelativePosition = pos'  					Panel1 = new Panel  					{  						BackgroundColor = Colors.White  					}'  					Panel2 = new Panel  					{  						BackgroundColor = Colors.Black  					}  				}'  				it =>  				{  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeBasic,The following statement contains a magic number: var sz = new Size(50' 50);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeBasic,The following statement contains a magic number: var sz = new Size(50' 50);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest1,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 1====+   					// |        |     |   					// | tested |     |   Tested splitter is placed inside two other splitters  					// |        |     |   to overcome minimal window/form size problems  					// +--------+     |   ...or non-desktop plaforms  					// |        |     |   					// +--------+-----+   					var it = new Splitter  					{  						ID = "main.panel1.panel1"'  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						ID = "main"'  						Panel1 = new Splitter  						{  							ID = "main.panel1"'  							Orientation = Orientation.Vertical'  							Panel1 = it'  							Panel2 = new Panel()  						}'  						Panel2 = new Panel()  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' $"#1 {fix}; {orient}; Replay:{replay}");  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' $"#2 {fix}; {orient}; Replay:{replay}");  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' $"#3 {fix}; {orient}; Replay:{replay}");  					if (ReplayTests)  						replay = !replay;  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeComplexTest2,The following statement contains a magic number: Shown(  				form =>  				{  					// +====test 2====+  					// |              |  					// |-----+--------|  Tested splitter is placed inside two other splitters  					// |     |        |  to overcome minimal window/form size problems  					// |     | tested |  ...or non-desktop plaforms  					// |     |        |  					// +-----+--------+  					var it = new Splitter  					{  						Orientation = orient'  						FixedPanel = fix'  						Panel1 = new Panel  						{  							Size = new Size(40' 40)'  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							Size = new Size(60' 60)'  							BackgroundColor = Colors.Black  						}  					};  					form.Content = new Splitter  					{  						Orientation = Orientation.Vertical'  						FixedPanel = SplitterFixedPanel.Panel2'  						Panel1 = new Panel()'  						Panel2 = new Splitter  						{  							FixedPanel = SplitterFixedPanel.Panel2'  							Panel1 = new Panel()'  							Panel2 = it  						}  					};  					return it;  				}'   				it =>  				{  					Assert.AreEqual(40' it.Position' "{0}; {1}"' fix' orient);  					Assert.AreEqual(fix == SplitterFixedPanel.Panel1 ? 40 : fix == SplitterFixedPanel.Panel2 ? 60 : 0.4' it.RelativePosition' "{0}; {1}"' fix' orient);  					var sz = orient == Orientation.Horizontal ? new Size(100 + it.SplitterWidth' 60) : new Size(60' 100 + it.SplitterWidth);  					Assert.AreEqual(sz' it.Size' "{0}; {1}"' fix' orient);  				}' replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,PositionShouldTrackInitialResize,The following statement contains a magic number: Shown(  				form =>  				{  					var it = new Splitter()  					{  						Orientation = orient'  						FixedPanel	= fix'  						Position	= 50'  						Panel1 = new Panel  						{  							BackgroundColor = Colors.White  						}'  						Panel2 = new Panel  						{  							BackgroundColor = Colors.Black  						}  					};  					it.Size = new Size(100' 100) + it.SplitterWidth;  					form.ClientSize = new Size(150' 150) + it.SplitterWidth;  					return it;  				}'  				it =>  				{  					double pos = fix == SplitterFixedPanel.None ? 0.5 : 50.0;  					Assert.AreEqual(pos' it.RelativePosition' 1e-2' "Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  					if (ReplayTests)  						replay = !replay;  				}'  				replay: ReplayTests);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following statement contains a magic number: Form(form =>  			{  				var posLabel = new Label();  				var label = new Label  				{   					Text = "Drag the splitter right"'  					TextAlignment = TextAlignment.Center'  					VerticalAlignment = VerticalAlignment.Center   				};  				int stage = 0;  				var splitter = new Splitter  				{  					Panel1 = new Panel { BackgroundColor = SystemColors.ControlBackground' Size = new Size(100' 100) }'  					Panel2 = new Panel { BackgroundColor = SystemColors.ControlBackground }  				};  				int? startingPosition = null;  				double? startingRelativePosition = null;  				form.Shown += (sender' e) =>  				{  					startingPosition = splitter.Position;  					startingRelativePosition = splitter.RelativePosition;  					posLabel.Text = startingPosition?.ToString();  					if (startingPosition == 0)  					{  						message = "#2 - Initial splitter position not set properly before Shown event";  						form.Close();  					}  				};  				splitter.PositionChanged += (sender' e) =>  				{  					posLabel.Text = splitter.Position.ToString();  					if (success || startingPosition == null)  						return;    					switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}  				};    				form.Size = new Size(300' 300);  				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items =  					{  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Padding = 10'  							Items = { new StackLayoutItem(label' true)' posLabel }  						}'  						new StackLayoutItem(splitter' true)  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following statement contains a magic number: Form(form =>  			{  				var posLabel = new Label();  				var label = new Label  				{   					Text = "Drag the splitter right"'  					TextAlignment = TextAlignment.Center'  					VerticalAlignment = VerticalAlignment.Center   				};  				int stage = 0;  				var splitter = new Splitter  				{  					Panel1 = new Panel { BackgroundColor = SystemColors.ControlBackground' Size = new Size(100' 100) }'  					Panel2 = new Panel { BackgroundColor = SystemColors.ControlBackground }  				};  				int? startingPosition = null;  				double? startingRelativePosition = null;  				form.Shown += (sender' e) =>  				{  					startingPosition = splitter.Position;  					startingRelativePosition = splitter.RelativePosition;  					posLabel.Text = startingPosition?.ToString();  					if (startingPosition == 0)  					{  						message = "#2 - Initial splitter position not set properly before Shown event";  						form.Close();  					}  				};  				splitter.PositionChanged += (sender' e) =>  				{  					posLabel.Text = splitter.Position.ToString();  					if (success || startingPosition == null)  						return;    					switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}  				};    				form.Size = new Size(300' 300);  				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items =  					{  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Padding = 10'  							Items = { new StackLayoutItem(label' true)' posLabel }  						}'  						new StackLayoutItem(splitter' true)  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following statement contains a magic number: Form(form =>  			{  				var posLabel = new Label();  				var label = new Label  				{   					Text = "Drag the splitter right"'  					TextAlignment = TextAlignment.Center'  					VerticalAlignment = VerticalAlignment.Center   				};  				int stage = 0;  				var splitter = new Splitter  				{  					Panel1 = new Panel { BackgroundColor = SystemColors.ControlBackground' Size = new Size(100' 100) }'  					Panel2 = new Panel { BackgroundColor = SystemColors.ControlBackground }  				};  				int? startingPosition = null;  				double? startingRelativePosition = null;  				form.Shown += (sender' e) =>  				{  					startingPosition = splitter.Position;  					startingRelativePosition = splitter.RelativePosition;  					posLabel.Text = startingPosition?.ToString();  					if (startingPosition == 0)  					{  						message = "#2 - Initial splitter position not set properly before Shown event";  						form.Close();  					}  				};  				splitter.PositionChanged += (sender' e) =>  				{  					posLabel.Text = splitter.Position.ToString();  					if (success || startingPosition == null)  						return;    					switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}  				};    				form.Size = new Size(300' 300);  				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items =  					{  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Padding = 10'  							Items = { new StackLayoutItem(label' true)' posLabel }  						}'  						new StackLayoutItem(splitter' true)  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following statement contains a magic number: Form(form =>  			{  				var posLabel = new Label();  				var label = new Label  				{   					Text = "Drag the splitter right"'  					TextAlignment = TextAlignment.Center'  					VerticalAlignment = VerticalAlignment.Center   				};  				int stage = 0;  				var splitter = new Splitter  				{  					Panel1 = new Panel { BackgroundColor = SystemColors.ControlBackground' Size = new Size(100' 100) }'  					Panel2 = new Panel { BackgroundColor = SystemColors.ControlBackground }  				};  				int? startingPosition = null;  				double? startingRelativePosition = null;  				form.Shown += (sender' e) =>  				{  					startingPosition = splitter.Position;  					startingRelativePosition = splitter.RelativePosition;  					posLabel.Text = startingPosition?.ToString();  					if (startingPosition == 0)  					{  						message = "#2 - Initial splitter position not set properly before Shown event";  						form.Close();  					}  				};  				splitter.PositionChanged += (sender' e) =>  				{  					posLabel.Text = splitter.Position.ToString();  					if (success || startingPosition == null)  						return;    					switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}  				};    				form.Size = new Size(300' 300);  				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items =  					{  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Padding = 10'  							Items = { new StackLayoutItem(label' true)' posLabel }  						}'  						new StackLayoutItem(splitter' true)  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following statement contains a magic number: Form(form =>  			{  				var posLabel = new Label();  				var label = new Label  				{   					Text = "Drag the splitter right"'  					TextAlignment = TextAlignment.Center'  					VerticalAlignment = VerticalAlignment.Center   				};  				int stage = 0;  				var splitter = new Splitter  				{  					Panel1 = new Panel { BackgroundColor = SystemColors.ControlBackground' Size = new Size(100' 100) }'  					Panel2 = new Panel { BackgroundColor = SystemColors.ControlBackground }  				};  				int? startingPosition = null;  				double? startingRelativePosition = null;  				form.Shown += (sender' e) =>  				{  					startingPosition = splitter.Position;  					startingRelativePosition = splitter.RelativePosition;  					posLabel.Text = startingPosition?.ToString();  					if (startingPosition == 0)  					{  						message = "#2 - Initial splitter position not set properly before Shown event";  						form.Close();  					}  				};  				splitter.PositionChanged += (sender' e) =>  				{  					posLabel.Text = splitter.Position.ToString();  					if (success || startingPosition == null)  						return;    					switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}  				};    				form.Size = new Size(300' 300);  				form.Content = new StackLayout  				{  					HorizontalContentAlignment = HorizontalAlignment.Stretch'  					Items =  					{  						new StackLayout  						{  							Orientation = Orientation.Horizontal'  							Padding = 10'  							Items = { new StackLayoutItem(label' true)' posLabel }  						}'  						new StackLayoutItem(splitter' true)  					}  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,CheckSelectionTextCaretAfterSettingText,The following statement contains a magic number: Invoke(() =>  			{  				int selectionChanged = 0;  				int textChanged = 0;  				string val;  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChanged++;  				textArea.SelectionChanged += (sender' e) => selectionChanged++;  				Assert.AreEqual(Range.FromLength(0' 0)' textArea.Selection' "#1");    				textArea.Text = val = "Hello there";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#2");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#3");  				Assert.AreEqual(1' textChanged' "#4");  				Assert.AreEqual(1' selectionChanged' "#5");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#6");  				Assert.AreEqual(6' textArea.CaretIndex' "#7");  				Assert.AreEqual(1' textChanged' "#8");  				Assert.AreEqual(2' selectionChanged' "#9");    				textArea.Text = val = "Some other text";  				Assert.AreEqual(Range.FromLength(val.Length' 0)' textArea.Selection' "#10");  				Assert.AreEqual(val.Length' textArea.CaretIndex' "#11");  				Assert.AreEqual(2' textChanged' "#12");  				Assert.AreEqual(3' selectionChanged' "#13");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextAreaTests<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextAreaTests.cs,SettingSelectedTextShouldTriggerTextChanged,The following statement contains a magic number: Shown(form =>  			{  				var textArea = new T();  				textArea.TextChanged += (sender' e) => textChangedCount++;  				textArea.SelectionChanged += (sender' e) => selectionChangedCount++;  				textArea.Text = "Hello there friend";  				Assert.AreEqual(1' textChangedCount' "#1-1");  				Assert.AreEqual(Range.FromLength(textArea.Text.TrimEnd().Length' 0)' textArea.Selection' "#1-2");  				Assert.AreEqual(1' selectionChangedCount' "#1-3");    				textArea.Selection = Range.FromLength(6' 5);  				Assert.AreEqual(1' textChangedCount' "#2-1");  				Assert.AreEqual(2' selectionChangedCount' "#2-2");  				Assert.AreEqual(Range.FromLength(6' 5)' textArea.Selection' "#2-3");    				return textArea;    			}' textArea =>  			{  				Assert.AreEqual(1' textChangedCount' "#4-1");  				Assert.AreEqual(2' selectionChangedCount' "#4-2");    				textArea.SelectedText = "my";  				Assert.AreEqual(2' textChangedCount' "#5-1");  				Assert.AreEqual(3' selectionChangedCount' "#5-2");  				Assert.AreEqual("Hello my friend"' textArea.Text.TrimEnd()' "#5-3");  				Assert.AreEqual(Range.FromLength(6' 2)' textArea.Selection' "#5-4");    				textArea.Selection = textArea.Selection.WithLength(textArea.Selection.Length() + 1);  				Assert.AreEqual(4' selectionChangedCount' "#6");    				textArea.SelectedText = null;  				Assert.AreEqual(3' textChangedCount' "#7-1");  				Assert.AreEqual(5' selectionChangedCount' "#7-2");  				Assert.AreEqual("Hello friend"' textArea.Text.TrimEnd()' "#7-3");  				Assert.AreEqual(Range.FromLength(6' 0)' textArea.Selection' "#7-4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldStartInInitialPosition,The following statement contains a magic number: ManualForm("Caret should be at index 2' between the 'e' and 'l'."' form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldStartInInitialPosition,The following statement contains a magic number: ManualForm("Caret should be at index 2' between the 'e' and 'l'."' form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldStartInInitialPosition,The following statement contains a magic number: ManualForm("Caret should be at index 2' between the 'e' and 'l'."' form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldRetainPositionOnInitialLoad,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(2' textBox.CaretIndex' "#3");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldRetainPositionOnInitialLoad,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(2' textBox.CaretIndex' "#3");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldRetainPositionOnInitialLoad,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(2' textBox.CaretIndex' "#3");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldRetainPositionOnInitialLoad,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(2' textBox.CaretIndex' "#3");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldRetainPositionOnInitialLoad,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = "Hello";  				textBox.CaretIndex = 2;  				Assert.AreEqual(2' textBox.CaretIndex' "#1");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#2");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(2' textBox.CaretIndex' "#3");  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#4");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,SelectionShouldStartInInitialPosition,The following statement contains a magic number: var selection = new Range<int>(1' text.Length - 2);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,SelectionShouldRetainPositionOnInitialLoad,The following statement contains a magic number: var selection = new Range<int>(1' text.Length - 2);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,SelectionShouldBeSetAfterFocus,The following statement contains a magic number: var selection = new Range<int>(1' text.Length - 2);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: var selection = new Range<int>(1' text.Length - 2);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = text;  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#1");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#2");  				textBox.CaretIndex = 2;  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#3");  				Assert.AreEqual(2' textBox.CaretIndex' "#4");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#5");  				Assert.AreEqual(2' textBox.CaretIndex' "#6");  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#7");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#8");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = text;  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#1");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#2");  				textBox.CaretIndex = 2;  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#3");  				Assert.AreEqual(2' textBox.CaretIndex' "#4");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#5");  				Assert.AreEqual(2' textBox.CaretIndex' "#6");  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#7");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#8");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = text;  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#1");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#2");  				textBox.CaretIndex = 2;  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#3");  				Assert.AreEqual(2' textBox.CaretIndex' "#4");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#5");  				Assert.AreEqual(2' textBox.CaretIndex' "#6");  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#7");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#8");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = text;  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#1");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#2");  				textBox.CaretIndex = 2;  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#3");  				Assert.AreEqual(2' textBox.CaretIndex' "#4");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#5");  				Assert.AreEqual(2' textBox.CaretIndex' "#6");  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#7");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#8");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,CaretIndexShouldUpdateSelection,The following statement contains a magic number: Shown(form =>  			{  				var textBox = new T();  				textBox.Text = text;  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#1");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#2");  				textBox.CaretIndex = 2;  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#3");  				Assert.AreEqual(2' textBox.CaretIndex' "#4");  				return textBox;  			}' textBox =>  			{  				Assert.AreEqual(new Range<int>(2' 1)' textBox.Selection' "#5");  				Assert.AreEqual(2' textBox.CaretIndex' "#6");  				textBox.Selection = selection;  				Assert.AreEqual(selection' textBox.Selection' "#7");  				Assert.AreEqual(selection.Start' textBox.CaretIndex' "#8");  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,InsertingTextShouldFireTextChanging,The following statement contains a magic number: Form(form =>  			{  				var textToSelect = oldText?.Substring(rangeStart' rangeLength) ?? string.Empty;  				var tb = new TextBox  				{  					AutoSelectMode = AutoSelectMode.Never'  					Text = oldText'  					Selection = Range.FromLength(rangeStart' rangeLength)  				};  				tb.TextChanging += (sender' e) =>  				{  					args = e;  					form.Close();  				};  				tb.Focus();    				Assert.AreEqual(textToSelect' tb.SelectedText' "#1");    				new Clipboard().Text = text;    				var help = new Label  				{  					Text = $"Select '{textToSelect}'' and paste '{text}' (which should be on the clipboard)"  				};    				form.Content = new StackLayout  				{  					Padding = 10'  					Spacing = 10'  					Items = { help' tb }  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextBoxBase<T>,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextBoxTests.cs,InsertingTextShouldFireTextChanging,The following statement contains a magic number: Form(form =>  			{  				var textToSelect = oldText?.Substring(rangeStart' rangeLength) ?? string.Empty;  				var tb = new TextBox  				{  					AutoSelectMode = AutoSelectMode.Never'  					Text = oldText'  					Selection = Range.FromLength(rangeStart' rangeLength)  				};  				tb.TextChanging += (sender' e) =>  				{  					args = e;  					form.Close();  				};  				tb.Focus();    				Assert.AreEqual(textToSelect' tb.SelectedText' "#1");    				new Clipboard().Text = text;    				var help = new Label  				{  					Text = $"Select '{textToSelect}'' and paste '{text}' (which should be on the clipboard)"  				};    				form.Content = new StackLayout  				{  					Padding = 10'  					Spacing = 10'  					Items = { help' tb }  				};  			}' -1);
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' ""' ""' 0' 13 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' null' ""' 0' 13 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' "some new text"' "new"' 5' 3 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' "some new text"' "new"' 5' 3 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old"' "some new text"' "new text"' 5' 3 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old"' "some new text"' "new text"' 5' 3 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' "some new"' "new"' 5' 8 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' "some new"' "new"' 5' 8 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old text"' "new text"' "new"' 0' 8 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old and boring text"' "some new text"' "new"' 5' 14 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TextChangingEventArgsTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TextChangingEventArgsTests.cs,GetTextChangingCases,The following statement contains a magic number: yield return new object[] { "some old and boring text"' "some new text"' "new"' 5' 14 };
Magic Number,Eto.Test.UnitTests.Forms.Controls,TreeGridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TreeGridViewTests.cs,DrawableCellAsFirstColumnShouldNotBeWhite,The following statement contains a magic number: ManualForm("Both cells should show the same"' form =>  			{  				TreeGridView tree = new TreeGridView();    				// add first drawable (it will be rendered all white!  				var drawableCell1 = new DrawableCell();  				drawableCell1.Paint += drawableCell_Paint;  				tree.Columns.Add(new GridColumn { HeaderText = "not working"' DataCell = drawableCell1' Width = 200 });    				// add the second drawable  				var drawableCell2 = new DrawableCell();  				drawableCell2.Paint += drawableCell_Paint;  				tree.Columns.Add(new GridColumn { HeaderText = "working"' DataCell = drawableCell2' Width = 200 });    				// add some data to the tree just to populate it  				TreeGridItemCollection model = new TreeGridItemCollection();  				TreeGridItem item1 = new TreeGridItem();  				item1.Values = new object[] { "text" };  				TreeGridItem item2 = new TreeGridItem();  				item2.Values = new object[] { "text" };  				item1.Children.Add(item2);  				item1.Expanded = true;  				model.Add(item1);    				tree.DataStore = model;    				return tree;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TreeGridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TreeGridViewTests.cs,DrawableCellAsFirstColumnShouldNotBeWhite,The following statement contains a magic number: ManualForm("Both cells should show the same"' form =>  			{  				TreeGridView tree = new TreeGridView();    				// add first drawable (it will be rendered all white!  				var drawableCell1 = new DrawableCell();  				drawableCell1.Paint += drawableCell_Paint;  				tree.Columns.Add(new GridColumn { HeaderText = "not working"' DataCell = drawableCell1' Width = 200 });    				// add the second drawable  				var drawableCell2 = new DrawableCell();  				drawableCell2.Paint += drawableCell_Paint;  				tree.Columns.Add(new GridColumn { HeaderText = "working"' DataCell = drawableCell2' Width = 200 });    				// add some data to the tree just to populate it  				TreeGridItemCollection model = new TreeGridItemCollection();  				TreeGridItem item1 = new TreeGridItem();  				item1.Values = new object[] { "text" };  				TreeGridItem item2 = new TreeGridItem();  				item2.Values = new object[] { "text" };  				item1.Children.Add(item2);  				item1.Expanded = true;  				model.Add(item1);    				tree.DataStore = model;    				return tree;  			});
Magic Number,Eto.Test.UnitTests.Forms.Controls,TreeGridViewTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\TreeGridViewTests.cs,ClickingWithEmptyDataShouldNotCrash,The following statement contains a magic number: Form(form =>  			{  				var dd = new TreeGridItemCollection();    				dd.Add(new TreeGridItem { Values = new[] { "Hello" } });  				var control = new TreeGridView();  				control.AllowEmptySelection = allowEmptySelection;  				control.AllowMultipleSelection = allowMultipleSelection;  				control.Columns.Add(new GridColumn  				{  					DataCell = new TextBoxCell(0)'  					Width = 100'  					HeaderText = "Text Cell"  				});  				control.DataStore = dd;  				Application.Instance.AsyncInvoke(() => {  					// can crash when had selection initially but no selection after.  					try  					{  						control.DataStore = new TreeGridItemCollection();  					}  					catch (Exception ex)  					{  						exception = ex;  					}  				Application.Instance.AsyncInvoke(form.Close);  				});    				form.Content = control;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,DynamicLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\DynamicLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The following statement contains a magic number: TestBase.Invoke(() =>  			{  				var layout = new DynamicLayout();    				var items = new Control[] { new Label()' new Button()' new TextBox() };    				foreach (var item in items)  					layout.Add(item);    				CollectionAssert.AreEqual(items' layout.Children' "#1. Items do not match");    				foreach (var item in items)  					Assert.AreEqual(layout' item.Parent' "#2. Items should have parent set to dynamic layout");    				layout.Rows.RemoveAt(0);  				Assert.IsNull(items[0].Parent' "#3. Item should have parent cleared when removed from dynamic layout");    				layout.Rows[0] = new Button();  				Assert.IsNull(items[1].Parent' "#4. Item should have parent cleared when replaced with another item in the dynamic layout");    				Assert.AreEqual(layout' items[2].Parent' "#5. Item should not have changed parent as it is still in the dynamic layout");  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,PixelLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\PixelLayoutTests.cs,SettingChildSizeShouldNotChangePosition,The following statement contains a magic number: ManualForm("Panels should be at all four corners'\ngreen on top' blue on bottom.\nThe boxes should not move when the form is resized"' form =>  			{    				var layout = new PixelLayout { Size = new Size(300' 300) };    				var tl = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tl' 0' 0);    				var tr = new Panel { BackgroundColor = Colors.Green' Size = new Size(200' 200) };  				layout.Add(tr' 200' 0);    				var bl = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(bl' 0' 200);    				var br = new Panel { BackgroundColor = Colors.Blue' Size = new Size(200' 200) };  				layout.Add(br' 200' 200);    				tl.Size = tr.Size = bl.Size = br.Size = new Size(100' 100);    				return layout;  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,StackLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\StackLayoutTests.cs,RemoveItemsIndividuallyShouldClearParent,The following statement contains a magic number: Invoke(() =>  			{  				var stackLayout = new StackLayout();    				var items = new Control[] { new Label()' new Button()' new TextBox() };    				foreach (var item in items)  					stackLayout.Items.Add(item);    				CollectionAssert.AreEqual(items' stackLayout.Children' "#1. Items do not match");    				foreach (var item in items)  					Assert.AreEqual(stackLayout' item.Parent' "#2. Items should have parent set to stack layout");    				stackLayout.Items.RemoveAt(0);  				Assert.IsNull(items[0].Parent' "#3. Item should have parent cleared when removed from stack layout");    				stackLayout.Items[0] = new Button();  				Assert.IsNull(items[1].Parent' "#4. Item should have parent cleared when replaced with another item in the stack layout");    				Assert.AreEqual(stackLayout' items[2].Parent' "#5. Item should not have changed parent as it is still in the stack layout");  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,StackLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\StackLayoutTests.cs,UpdateShouldKeepAlignment,The following statement contains a magic number: ManualForm(  				"Label should stay centered vertically after clicking the button"'  				form =>  				{  					StackLayout content = null;  					Action command = () =>  					{  						if (content == null)  							return;  						content.Items[1] = new ComboBox { Items = { "Zus"' "Wim"' "Jet" }' SelectedIndex = 1 };  					};    					return content = new StackLayout  					{  						VerticalContentAlignment = VerticalAlignment.Center'  						Orientation = Orientation.Horizontal'  						Height = 100' // so we can exaggerate the issue  						Items =  						{  							"Hello"'  							new ComboBox { Items = { "Aap"' "Noot"' "Mies" }' SelectedIndex = 1 }'  							"There"'  							new Button  							{  								Text = "Click"'  								Command = new RelayCommand(command)  							}  						}  					};  				});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ConstructorWithRowsShouldHaveCorrectSize,The following statement contains a magic number: Invoke(() =>  			{  				var layout = new TableLayout(  								new TableRow(  									new Label()'  									new TextBox()  								)'  								new TableRow(  									new Label()'  									new TextBox()  								)  							);  				Assert.AreEqual(layout.Dimensions' new Size(2' 2)' "Table size should be 2x2");  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ConstructorWithRowsShouldHaveCorrectSize,The following statement contains a magic number: Invoke(() =>  			{  				var layout = new TableLayout(  								new TableRow(  									new Label()'  									new TextBox()  								)'  								new TableRow(  									new Label()'  									new TextBox()  								)  							);  				Assert.AreEqual(layout.Dimensions' new Size(2' 2)' "Table size should be 2x2");  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,MultipleScaledRowsShouldAutoSizeCorrectly,The following statement contains a magic number: ManualForm("The two lines of text above should be fully visible and have equal space between them"' form =>  			{  				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Label { Text = "This is some text that should be fully visible" }) { ScaleHeight = true }'  						new TableRow(new Panel () ) { ScaleHeight = true }'  						new TableRow(new Label { Text = "This is some other text that should be fully visible" }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,MultipleScaledRowsShouldAutoSizeCorrectly,The following statement contains a magic number: ManualForm("The two lines of text above should be fully visible and have equal space between them"' form =>  			{  				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Label { Text = "This is some text that should be fully visible" }) { ScaleHeight = true }'  						new TableRow(new Panel () ) { ScaleHeight = true }'  						new TableRow(new Label { Text = "This is some other text that should be fully visible" }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowsOfDifferentHeightShouldMakeAllRowsMaxHeight,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high"' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new TableLayout  				{  					Spacing = new Size(10' 10)'  					Rows =  					{  						new TableRow(new ProgressBar { Indeterminate = true })'  						new TableRow(new Panel { Content = new Label { Text = "There should be space below" } }) { ScaleHeight = true }'  						new TableRow(panel) { ScaleHeight = true }'  						new TableRow(new Panel { Content = new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." } }) { ScaleHeight = true }'  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,ScaledRowSizeShouldChangeWhenInAScrollable,The following statement contains a magic number: ManualForm("This form should be tall enough to make the blue box 80px high' and should dissapear when clicked."' form =>  			{  				var drawable = new Drawable();  				drawable.Paint += (sender' e) =>  				{  					var p = new Pen(Colors.Red' 1);  					e.Graphics.DrawRectangle(p' 0' 0' 79' 79);  				};    				var panel = new Panel { BackgroundColor = Colors.Blue' Content = drawable' Size = new Size(80' 80) };  				drawable.MouseDown += (sender' e) => panel.Visible = false;    				return new Scrollable  				{  					ExpandContentWidth = false'  					ExpandContentHeight = false'  					Content = new TableLayout  					{  						Spacing = new Size(10' 10)'  						Rows =  						{  							new TableRow(new ProgressBar { Indeterminate = true })'  							new TableRow(new Label { Text = "There should be space below" }) { ScaleHeight = true }'  							new TableRow(panel) { ScaleHeight = true }'  							new TableRow(new Label { Text = "And the blue box should be 80px high and show the red rectangle fully." }) { ScaleHeight = true }'  						}  					}  				};  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,LabelInAutoSizedColumnShouldHaveCorrectWidth,The following statement contains a magic number: Shown(form =>  			{  				var label = new Label { Text = "Hello Then" };    				form.ClientSize = new Size(400' 200);  				form.Content = new TableLayout  				{  					Rows = {  						new TableRow(new TextBox()' label' null)'  						null  					}  				};  				return label;  			}' label =>  			{  				Assert.Greater(label.Width' 0' "Label didn't get correct width!");  				Assert.Greater(label.Height' 0' "Label didn't get correct height!");  			});
Magic Number,Eto.Test.UnitTests.Forms.Layout,TableLayoutTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Layout\TableLayoutTests.cs,LabelInAutoSizedColumnShouldHaveCorrectWidth,The following statement contains a magic number: Shown(form =>  			{  				var label = new Label { Text = "Hello Then" };    				form.ClientSize = new Size(400' 200);  				form.Content = new TableLayout  				{  					Rows = {  						new TableRow(new TextBox()' label' null)'  						null  					}  				};  				return label;  			}' label =>  			{  				Assert.Greater(label.Width' 0' "Label didn't get correct width!");  				Assert.Greater(label.Height' 0' "Label didn't get correct height!");  			});
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,ManualForm,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = description };  				var c = init(form' label);    				var layout = new StackLayout  				{  					Spacing = 10'  					Items =  					{  						new StackLayoutItem(c' HorizontalAlignment.Stretch' true)'  						label  					}  				};    				if (allowFail || allowPass)  				{  					var table = new TableLayout { Spacing = new Size(2' 2) };  					var row = new TableRow();  					table.Rows.Add(row);    					if (allowFail)  					{  						var failButton = new Button { Text = "Fail" };  						failButton.Click += (sender' e) =>  						{  							try  							{  								Assert.Fail(description);  							}  							catch (Exception ex)  							{  								exception = ex;  							}  							finally  							{  								form.Close();  							}  						};  						row.Cells.Add(failButton);  					}    					if (allowPass)  					{  						var passButton = new Button { Text = "Pass" };  						passButton.Click += (sender' e) => form.Close();  						row.Cells.Add(passButton);  					}  					layout.Items.Add(new StackLayoutItem(table' HorizontalAlignment.Center));  				}    				form.Content = layout;  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,ManualForm,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = description };  				var c = init(form' label);    				var layout = new StackLayout  				{  					Spacing = 10'  					Items =  					{  						new StackLayoutItem(c' HorizontalAlignment.Stretch' true)'  						label  					}  				};    				if (allowFail || allowPass)  				{  					var table = new TableLayout { Spacing = new Size(2' 2) };  					var row = new TableRow();  					table.Rows.Add(row);    					if (allowFail)  					{  						var failButton = new Button { Text = "Fail" };  						failButton.Click += (sender' e) =>  						{  							try  							{  								Assert.Fail(description);  							}  							catch (Exception ex)  							{  								exception = ex;  							}  							finally  							{  								form.Close();  							}  						};  						row.Cells.Add(failButton);  					}    					if (allowPass)  					{  						var passButton = new Button { Text = "Pass" };  						passButton.Click += (sender' e) => form.Close();  						row.Cells.Add(passButton);  					}  					layout.Items.Add(new StackLayoutItem(table' HorizontalAlignment.Center));  				}    				form.Content = layout;  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,ManualForm,The following statement contains a magic number: Form(form =>  			{  				var label = new Label { Text = description };  				var c = init(form' label);    				var layout = new StackLayout  				{  					Spacing = 10'  					Items =  					{  						new StackLayoutItem(c' HorizontalAlignment.Stretch' true)'  						label  					}  				};    				if (allowFail || allowPass)  				{  					var table = new TableLayout { Spacing = new Size(2' 2) };  					var row = new TableRow();  					table.Rows.Add(row);    					if (allowFail)  					{  						var failButton = new Button { Text = "Fail" };  						failButton.Click += (sender' e) =>  						{  							try  							{  								Assert.Fail(description);  							}  							catch (Exception ex)  							{  								exception = ex;  							}  							finally  							{  								form.Close();  							}  						};  						row.Cells.Add(failButton);  					}    					if (allowPass)  					{  						var passButton = new Button { Text = "Pass" };  						passButton.Click += (sender' e) => form.Close();  						row.Cells.Add(passButton);  					}  					layout.Items.Add(new StackLayoutItem(table' HorizontalAlignment.Center));  				}    				form.Content = layout;  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,ManualDialog,The following statement contains a magic number: Dialog(dialog =>  			{  				var label = new Label { Text = description };  				var c = init(dialog' label);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					try  					{  						Assert.Fail(description);  					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						dialog.Close();  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dialog.Close();    				dialog.Content = new StackLayout  				{  					Spacing = 10'  					Items =  					{  						new StackLayoutItem(c' HorizontalAlignment.Stretch' true)'  						label'  						new StackLayoutItem(TableLayout.Horizontal(2' failButton' passButton)' HorizontalAlignment.Center)  					}  				};  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,ManualDialog,The following statement contains a magic number: Dialog(dialog =>  			{  				var label = new Label { Text = description };  				var c = init(dialog' label);    				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					try  					{  						Assert.Fail(description);  					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						dialog.Close();  					}  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) => dialog.Close();    				dialog.Content = new StackLayout  				{  					Spacing = 10'  					Items =  					{  						new StackLayoutItem(c' HorizontalAlignment.Stretch' true)'  						label'  						new StackLayoutItem(TableLayout.Horizontal(2' failButton' passButton)' HorizontalAlignment.Center)  					}  				};  			}' timeout: -1);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Paint,The following statement contains a magic number: Form(form =>  			{  				var drawable = new Drawable { Size = size ?? new Size(200' 200) };  				drawable.Paint += (sender' e) =>  				{  					try  					{  						paint(drawable' e);  						finished = true;  					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						if (application != null)  							application.AsyncInvoke(form.Close);  						else  							form.Close();  					}  				};  				form.Content = drawable;  			}' timeout);
Magic Number,Eto.Test.UnitTests,TestBase,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\TestBase.cs,Paint,The following statement contains a magic number: Form(form =>  			{  				var drawable = new Drawable { Size = size ?? new Size(200' 200) };  				drawable.Paint += (sender' e) =>  				{  					try  					{  						paint(drawable' e);  						finished = true;  					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						if (application != null)  							application.AsyncInvoke(form.Close);  						else  							form.Close();  					}  				};  				form.Content = drawable;  			}' timeout);
Duplicate Code,Eto.Test.Sections.Drawing,PixelOffsetTransforms,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\PixelOffsetTransforms.cs,ScissorsTest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 55)' (56' 93))
Missing Default,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following switch statement is missing a default case: switch (dragMode.SelectedKey)  				{  					case "over":  						info.RestrictToOver();  						break;  					case "insert":  						info.RestrictToInsert();  						break;  					case "node":  						info.RestrictToNode(treeDestData[2]);  						break;  					case "none":  						info.Item = info.Parent = null;  						break;  				}
Missing Default,Eto.Test.Sections.Behaviors,DragDropSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Behaviors\DragDropSection.cs,DragDropSection,The following switch statement is missing a default case: switch (dragMode.SelectedKey)  				{  					case "over":  						info.RestrictToOver();  						break;  					case "insert":  						info.RestrictToInsert();  						break;  					case "node":  						info.Index = 2;  						info.Position = GridDragPosition.Over;  						break;  					case "none":  						info.Index = -1;  						break;  				}
Missing Default,Eto.Test.Sections.Controls,ScrollableSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Controls\ScrollableSection.cs,ScrollableSection,The following switch statement is missing a default case: switch (sizeMode.SelectedIndex) {                      case 0:                          scrollable.Content.Size = new Size(-1' -1);                          break;                      case 1:  						scrollable.Content.Size = new Size(800' 800);  						break;                      case 2:                          scrollable.Content.Size = new Size(30' 30);                          break;                      case 3:                          scrollable.Content.Size = new Size(1' 1);                          break;                    }
Missing Default,Eto.Test.Sections.Drawing,ClearSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\ClearSection.cs,DrawSample,The following switch statement is missing a default case: switch (clipMode)  				{  					case ClearClipMode.GraphicsPath:  						var path = GraphicsPath.GetRoundRect(new RectangleF(10' 10' 180' 180)' 20);  						graphics.SetClip(path);  						break;  					case ClearClipMode.Rectangle:  						graphics.SetClip(new RectangleF(10' 10' 180' 180));  						break;  				}
Missing Default,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following switch statement is missing a default case: switch (random.Next(useTexturesAndGradients ? 5 : 2))  				{  					case 0:  						draw = g => g.DrawRectangle(colorPen' rect);  						erase = g => g.DrawRectangle(blackPen' rect);  						break;  					case 1:  						draw = g => g.DrawEllipse(colorPen' rect);  						erase = g => g.DrawEllipse(blackPen' rect);  						break;  					case 2:  						switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}  						draw = g => g.FillEllipse(fillBrush' rect);  						erase = g => g.FillEllipse(blackBrush' rect);  						break;  					case 3:  						switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}  						draw = g => g.FillRectangle(fillBrush' rect);  						erase = g => g.FillRectangle(blackBrush' rect);  						break;  					case 4:  						var font = Fonts.Sans(random.Next(20) + 4);  						draw = g => g.DrawText(font' color' 0' 0' "Some Text");  						erase = g => g.DrawText(font' Colors.Black' 0' 0' "Some Text");  						break;  				}
Missing Default,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following switch statement is missing a default case: switch (random.Next(2))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  						}
Missing Default,Eto.Test.Sections.Drawing,Box,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Drawing\DrawLoopSection.cs,Box,The following switch statement is missing a default case: switch (random.Next(3))  						{  							case 0:  								fillBrush = new LinearGradientBrush(GetRandomColor(random)' GetRandomColor(random)' PointF.Empty' new PointF(size.Width' size.Height));  								break;  							case 1:  								fillBrush = new TextureBrush(renderer.texture)  								{  									Transform = Matrix.FromScale(size / 80)  								};  								break;  							case 2:  								fillBrush = new RadialGradientBrush(GetRandomColor(random)' GetRandomColor(random)' (PointF)size / 2' (PointF)size / 2' size);  								break;  						}
Missing Default,Eto.Test.Sections.Printing,PrintDialogSection,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\Sections\Printing\PrintDialogSection.cs,GetPrintDocument,The following switch statement is missing a default case: switch (e.CurrentPage)  				{  					case 0:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(50' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(new Point(pageSize) - new Size(150' 150)' new Size(100' 100)));  						break;  					case 1:  						e.Graphics.DrawRectangle(Pens.Blue' new Rectangle(pageSize.Width - 150' 50' 100' 100));  						e.Graphics.DrawRectangle(Pens.Green' new Rectangle(50' pageSize.Height - 150' 100' 100));  						break;  				}
Missing Default,Eto.Test.UnitTests.Forms,ToolItemCollectionTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\ToolItemCollectionTests.cs,MixedCommandsAndToolItemsShouldBeInCorrectOrder,The following switch statement is missing a default case: switch (i % 5)  					{  						case 0:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 1:  							toolbar.Items.Add(new ButtonToolItem { Text = i.ToString() });  							break;  						case 2:  							toolbar.Items.Add(new Command { ToolBarText = i.ToString() });  							break;  						case 3:  							toolbar.Items.AddSeparator();  							break;  						case 4:  							// convert to toolitem first  							ToolItem toolItem = new Command { ToolBarText = i.ToString() };  							toolbar.Items.Add(toolItem);  							break;  					}
Missing Default,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,NoPositionShouldAutoSizeBasic,The following switch statement is missing a default case: switch (fix)  					{  						case SplitterFixedPanel.Panel1:  							if (orient == Orientation.Horizontal)  								Assert.AreEqual(sz.Width' it.Panel1.Width'  									"P1.Width! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							else  								Assert.AreEqual(sz.Height' it.Panel1.Height'  									"P1.Height! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							break;  						case SplitterFixedPanel.Panel2:  							if (orient == Orientation.Horizontal)  								Assert.AreEqual(sz.Width' it.Panel2.Width'  									"P2.Width! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							else  								Assert.AreEqual(sz.Height' it.Panel2.Height'  									"P2.Height! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							break;  						case SplitterFixedPanel.None:  							if (orient == Orientation.Horizontal)  								Assert.AreEqual(it.Panel1.Width' it.Panel2.Width' 1'  									"Width! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							else  								Assert.AreEqual(it.Panel1.Height' it.Panel2.Height' 1'  									"Height! Fix: {0}; {1} [replay={2}]"' fix' orient' replay);  							break;  					}
Missing Default,Eto.Test.UnitTests.Forms.Controls,SplitterTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test\UnitTests\Forms\Controls\SplitterTests.cs,SplitterShouldRegisterChangeNotifications,The following switch statement is missing a default case: switch (stage)  					{  						case 0:  							if (splitter.Position > startingPosition.Value)  							{  								if (splitter.RelativePosition <= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be greater than the starting position";  									form.Close();  									return;  								}  								label.Text = "Now' slide to the left";  								startingPosition = splitter.Position;  								stage++;  							}  							break;  						case 1:  							if (splitter.Position < startingPosition.Value)  							{  								if (splitter.RelativePosition >= startingRelativePosition.Value)  								{  									success = false;  									message = "Relative position was not updated' it should be less than the starting position";  								}  								else  									success = true;  								form.Close();  							}  							break;  					}
