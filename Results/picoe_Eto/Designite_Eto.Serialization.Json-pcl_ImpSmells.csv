Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Eto.Serialization.Json.Converters,DynamicLayoutConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\DynamicLayoutConverter.cs,ReadJson,Cyclomatic complexity of the method is 13
Complex Method,Eto.Serialization.Json.Converters,FontConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,Cyclomatic complexity of the method is 24
Complex Method,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,Cyclomatic complexity of the method is 8
Complex Method,Eto.Serialization.Json.Converters,TableLayoutConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\TableLayoutConverter.cs,ReadJson,Cyclomatic complexity of the method is 17
Long Statement,Eto.Serialization.Json,JsonReader,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\JsonReader.cs,GetStream,The length of the statement  "				?? throw new InvalidOperationException($"Embedded resource '{type.FullName}.jeto' not found in assembly '{type.GetAssembly()}'"); " is 129.
Long Statement,Eto.Serialization.Json,JsonReader,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\JsonReader.cs,Load,The length of the statement  "					throw new ArgumentException(nameof(resourceName)' $"Embedded resource '{resourceName}' not found in assembly '{typeof(T).GetAssembly()}'"); " is 139.
Long Statement,Eto.Serialization.Json.Converters,FontConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The length of the statement  "					var typeface = family.Typefaces.FirstOrDefault(r => string.Equals(r.Name' typefaceName' StringComparison.OrdinalIgnoreCase)); " is 125.
Long Statement,Eto.Serialization.Json.Converters,FontConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The length of the statement  "				throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Font must be defined as a string or an object with Family' Typeface' Size' Style' and Decoration properties")); " is 191.
Long Statement,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,The length of the statement  "								throw new JsonSerializationException(string.Format(CultureInfo.CurrentCulture' "Could not find attachable property {0}.{1}"' type.Name' memberName)); " is 149.
Long Statement,Eto,TypeHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto\TypeHelper.cs,GetConstructor,The length of the statement  "			return type.GetTypeInfo().DeclaredConstructors.FirstOrDefault(r => r.GetParameters().Select(p => p.ParameterType).SequenceEqual(args)); " is 135.
Magic Number,Eto.Serialization.Json.Converters,PropertyStoreConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\PropertyStoreConverter.cs,ReadJson,The following statement contains a magic number: parameters.Length != 2
Missing Default,Eto.Serialization.Json.Converters,FontConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Serialization.Json\Converters\FontConverter.cs,ReadJson,The following switch statement is missing a default case: switch (property.Name.ToLowerInvariant())  					{  						case "family":  							familyName = property.Value.ToString();  							break;  						case "systemfont":  							SystemFont tsystemfont;  							if (Enum.TryParse(property.Value.ToString()' true' out tsystemfont))  								systemFont = tsystemfont;  							break;  						case "typeface":  							typefaceName = property.Value.ToString();  							break;  						case "size":  							float ret;  							if (float.TryParse(property.Value.ToString()' out ret) && ret > 0)  								size = ret;  							break;  						case "style":  						case "fontstyle":  							if (property.Value.Type == JTokenType.String)  							{  								FontStyle tstyle;  								if (Enum.TryParse(property.Value.ToString()' true' out tstyle))  									fontStyle |= tstyle;  							}  							else  							{  								foreach (var style in property.Value)  								{  									FontStyle tstyle;  									if (Enum.TryParse(style.ToString()' true' out tstyle))  										fontStyle |= tstyle;  								}  							}  							break;  						case "decoration":  						case "fontdecoration":  							if (property.Value.Type == JTokenType.String)  							{  								FontDecoration tdecoration;  								if (Enum.TryParse(property.Value.ToString()' true' out tdecoration))  									decoration |= tdecoration;  							}  							else  							{  								foreach (var style in property.Value)  								{  									FontDecoration tdecoration;  									if (Enum.TryParse(style.ToString()' true' out tdecoration))  										decoration |= tdecoration;  								}  							}  							break;  					}
