Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,ButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\ButtonTests.cs,ButtonNaturalSizeShouldBeConsistent,The following statement contains a magic number: Form(form => {  				button = new Button();  				button.Text = "Click Me";  				panel = new Panel { Content = button };  				form.Content = TableLayout.AutoSized(panel);  				form.ClientSize = new Size(200' 200);    				var handler = button?.Handler as ButtonHandler;  				Assert.IsNotNull(handler' "#1.1");    				var b = new EtoButton(NSButtonType.MomentaryPushIn);  				var originalSize = b.GetAlignmentRectForFrame(new CGRect(CGPoint.Empty' b.FittingSize)).Size;  				Assert.AreEqual(21' originalSize.Height' "#2.1");    				var preferred = handler.GetPreferredSize(SizeF.PositiveInfinity);  				Assert.AreEqual(originalSize.Height' preferred.Height' "#2.1");  				Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#2.2");    				form.Shown += async (sender' e) =>  				{  					try  					{  						// need to use invokes to wait for the layout pass to complete  						panel.Size = new Size(-1' 22);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.RegularSquare' handler.Control.BezelStyle' "#3.1");  							Assert.AreEqual(22' handler.Widget.Height' "#3.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#4.1");  							Assert.AreEqual(21' handler.Widget.Height' "#4.2");  						});  						panel.Size = new Size(-1' 20);  						await Task.Delay(1000);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.SmallSquare' handler.Control.BezelStyle' "#5.1");  							Assert.AreEqual(20' handler.Widget.Height' "#5.2");  						});  						panel.Size = new Size(-1' -1);  						await Application.Instance.InvokeAsync(() =>  						{  							Assert.AreEqual(NSBezelStyle.Rounded' handler.Control.BezelStyle' "#6.1");  							Assert.AreEqual(21' handler.Widget.Height' "#6.2");  						});    					}  					catch (Exception ex)  					{  						exception = ex;  					}  					finally  					{  						form.Close();  					}  				};        			}' -1);
Magic Number,Eto.Test.Mac.UnitTests,CheckBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\CheckBoxTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<CheckBoxHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<CheckBoxHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,CheckBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\CheckBoxTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<CheckBoxHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<CheckBoxHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,CheckBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\CheckBoxTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<CheckBoxHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<CheckBoxHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,CheckBoxTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\CheckBoxTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<CheckBoxHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<CheckBoxHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new CheckBox { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\LabelTests.cs,LabelWithDifferentFontSizesShouldShowCorrectly,The following statement contains a magic number: ManualForm("Labels should show correctly."' form =>  			{  				return new TableLayout  				{  					Rows =  					{  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Small Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(8) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Normal Font"' Wrap = WrapMode.None })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  						new TableLayout(new Label { Text = "Large Font"' Wrap = WrapMode.None' Font = SystemFonts.Default(48) })'  						new Panel {BackgroundColor = Colors.White' Height = 10}'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\NativeParentWindowTests.cs,DialogShouldAllowAttachingToNativeWindow,The following statement contains a magic number: Invoke(() =>  			{  				var nswindow = new NSWindow(new CGRect(100' 100' 300' 300)' NSWindowStyle.Titled' NSBackingStore.Buffered' false);  				nswindow.ReleasedWhenClosed = false;    				var showDialog = new Button { Text = "Show Attached Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var dlg = new Dialog();  					dlg.DisplayMode = DialogDisplayMode.Attached;    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => dlg.Close();    					dlg.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as attached"'  							closeButton  						}  					};    					dlg.ShowModal(showDialog);  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nswindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nswindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				nswindow.ContentView = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nswindow.MakeKeyAndOrderFront(nswindow);  			});
Magic Number,Eto.Test.Mac.UnitTests,RadioButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\RadioButtonTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<RadioButtonHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<RadioButtonHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,RadioButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\RadioButtonTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<RadioButtonHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<RadioButtonHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,RadioButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\RadioButtonTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<RadioButtonHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<RadioButtonHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
Magic Number,Eto.Test.Mac.UnitTests,RadioButtonTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Mac\UnitTests\RadioButtonTests.cs,ButtonShouldNotBeClipped,The following statement contains a magic number: ManualForm("All buttons should be fully visible without any clipping"' form =>  			{  				form.Styles.Add<RadioButtonHandler>("small"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Small;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Small));  				});  				form.Styles.Add<RadioButtonHandler>("mini"' c =>  				{  					c.Control.Cell.ControlSize = NSControlSize.Mini;  					c.Control.Font = NSFont.SystemFontOfSize(NSFont.SystemFontSizeForControlSize(NSControlSize.Mini));  				});    				return new TableLayout  				{  					Rows =  					{  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Normal" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Small"' Style = "small" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  						new TableLayout(new TableRow(null' new RadioButton { Text = "Mini"' Style = "mini" }' null))'  						new Panel { Height = 10' BackgroundColor = Colors.White }'  					}  				};  			});
