Implementation smell,Namespace,Class,File,Method,Description
Long Method,Eto,LogicalScreenHelper<T>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\LogicalScreenHelper.cs,GetLogicalLocation,The method has 148 lines of code.
Long Method,Eto.CustomControls,HttpServer,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\HttpServer.cs,ListenerCallback,The method has 102 lines of code.
Long Method,Eto.Wpf,KeyMapWinForms,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\KeyMap.cs,GetMap,The method has 115 lines of code.
Long Method,Eto.Wpf,KeyMap,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\KeyMap.cs,GetKeyMap,The method has 113 lines of code.
Long Method,Eto.Wpf,Platform,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Platform.cs,AddTo,The method has 131 lines of code.
Long Method,Eto.Wpf.Forms.Controls,TextBoxHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TextBoxHandler.cs,AttachEvent,The method has 100 lines of code.
Long Method,Eto.Wpf.Forms.Controls,TreeViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TreeViewHandler.cs,AttachEvent,The method has 102 lines of code.
Long Method,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,AttachEvent,The method has 141 lines of code.
Complex Method,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,Cyclomatic complexity of the method is 8
Complex Method,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,Cyclomatic complexity of the method is 9
Complex Method,Eto,LogicalScreenHelper<T>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\LogicalScreenHelper.cs,GetLogicalLocation,Cyclomatic complexity of the method is 30
Complex Method,Eto.CustomControls,TreeController,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\CustomControls\TreeController.cs,GetItemAtRow,Cyclomatic complexity of the method is 8
Complex Method,Eto.CustomControls,HttpServer,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\HttpServer.cs,ListenerCallback,Cyclomatic complexity of the method is 13
Complex Method,Eto.Wpf,WpfExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfExtensions.cs,FindVisualChildren,Cyclomatic complexity of the method is 8
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 9
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,ConvertPixelFormat,Cyclomatic complexity of the method is 16
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 9
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,ConvertPixelFormat,Cyclomatic complexity of the method is 16
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 9
Complex Method,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,ConvertPixelFormat,Cyclomatic complexity of the method is 16
Complex Method,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,Cyclomatic complexity of the method is 8
Complex Method,System.Runtime.InteropServices.ComTypes,ComDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,GetManagedData,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddPath,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms.Controls,ComboBoxHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ComboBoxHandler.cs,HandleTextChanged,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,UpdateFacesToFamilyVariant,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,ResolveWpfTypeface,Cyclomatic complexity of the method is 11
Complex Method,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,UpdateFamilyVariantToFaces,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,AttachEvent,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,HandleMouseUp,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms.Controls,DrawableHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DrawableHandler.cs,UpdateTiles,Cyclomatic complexity of the method is 12
Complex Method,Eto.Wpf.Forms.Controls,DrawableHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DrawableHandler.cs,Invalidate,Cyclomatic complexity of the method is 12
Complex Method,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetInitialPosition,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms.Controls,TreeGridViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TreeGridViewHandler.cs,AttachEvent,Cyclomatic complexity of the method is 10
Complex Method,Eto.Wpf.Forms.Controls,TreeViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TreeViewHandler.cs,AttachEvent,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,HandleControlDataContextChanged,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms,DataObjectHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DataObjectHandler.cs,GetAsData,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms,WindowsFormsHostHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WindowsFormsHostHandler.cs,AttachEvent,Cyclomatic complexity of the method is 14
Complex Method,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms,MessageBoxHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\MessageBoxHandler.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms,EtoGrid,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,MeasureOverride,Cyclomatic complexity of the method is 15
Complex Method,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,AttachEvent,Cyclomatic complexity of the method is 26
Complex Method,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,GetNativeParentWindow,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Forms,WpfWindow<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfWindow.cs,AttachEvent,Cyclomatic complexity of the method is 11
Complex Method,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,Cyclomatic complexity of the method is 10
Complex Method,Eto.Wpf.CustomControls,SelectableTreeView,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\SelectableTreeView.cs,SelectTreeViewItemForBinding,Cyclomatic complexity of the method is 10
Complex Method,Eto.Wpf.CustomControls,SelectableTreeView,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\SelectableTreeView.cs,SelectTreeViewItemForBinding,Cyclomatic complexity of the method is 10
Complex Method,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,Cyclomatic complexity of the method is 27
Complex Method,Eto.Wpf.CustomControls.FontDialog,TypefaceListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\typefacelistitem.cs,CompareTo,Cyclomatic complexity of the method is 10
Long Parameter List,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The method has 6 parameters. Parameters: point0' point1' point2' point3' tension' numberOfPoints
Long Parameter List,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,PeekMessage,The method has 5 parameters. Parameters: wMsg' hwnd' msgMin' msgMax' remove
Long Parameter List,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DoDragDrop,The method has 5 parameters. Parameters: dragSource' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DoDragDrop,The method has 5 parameters. Parameters: dragSource' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DoDragDrop,The method has 5 parameters. Parameters: dragSource' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,System.Windows,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DragEnter,The method has 6 parameters. Parameters: window' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DragEnter,The method has 6 parameters. Parameters: window' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,DragEnter,The method has 6 parameters. Parameters: window' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows.Forms,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DragEnter,The method has 6 parameters. Parameters: control' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows.Forms,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DragEnter,The method has 6 parameters. Parameters: control' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows.Forms,DropTargetHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DragEnter,The method has 6 parameters. Parameters: control' data' cursorOffset' effect' descriptionMessage' descriptionInsert
Long Parameter List,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DoDragDrop,The method has 5 parameters. Parameters: control' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DoDragDrop,The method has 5 parameters. Parameters: control' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,DoDragDrop,The method has 5 parameters. Parameters: control' dragImage' cursorOffset' allowedEffects' data
Long Parameter List,Eto.Wpf.Drawing,CachedBitmapFrame,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\CachedBitmapFrame.cs,Get,The method has 5 parameters. Parameters: image' scale' width' height' scalingMode
Long Parameter List,Eto.Wpf.Drawing,RadialGradientBrushHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\RadialGradientBrushHandler.cs,Create,The method has 5 parameters. Parameters: startColor' endColor' center' gradientOrigin' radius
Long Parameter List,Eto.Wpf.Drawing,BitmapDataHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,BitmapDataHandler,The method has 5 parameters. Parameters: image' data' scanWidth' bitsPerPixel' controlObject
Long Parameter List,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,FontHandler,The method has 5 parameters. Parameters: family' size' style' weight' stretch
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,GraphicsHandler,The method has 5 parameters. Parameters: visual' context' bounds' initialClip' shouldDispose
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawRectangle,The method has 5 parameters. Parameters: pen' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawLine,The method has 5 parameters. Parameters: pen' startx' starty' endx' endy
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillRectangle,The method has 5 parameters. Parameters: brush' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The method has 5 parameters. Parameters: pen' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The method has 5 parameters. Parameters: brush' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawArc,The method has 7 parameters. Parameters: pen' x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillPie,The method has 7 parameters. Parameters: brush' x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The method has 5 parameters. Parameters: image' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawText,The method has 5 parameters. Parameters: font' b' x' y' text
Long Parameter List,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The method has 6 parameters. Parameters: x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,MatrixHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\MatrixHandler.cs,Create,The method has 6 parameters. Parameters: xx' yx' xy' yy' dx' dy
Long Parameter List,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,ApplyFont,The method has 5 parameters. Parameters: family' typeface' weight' stretch' style
Long Parameter List,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,WebBrowserV1_NewWindow,The method has 6 parameters. Parameters: URL' Flags' TargetFrameName' PostData' Headers' Processed
Long Parameter List,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,FormatCell,The method has 5 parameters. Parameters: column' cell' element' gridcell' dataItem
Long Parameter List,Eto.Wpf.Forms.Controls,FormatEventArgs,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,FormatEventArgs,The method has 5 parameters. Parameters: column' gridcell' item' row' element
Long Parameter List,Eto.Wpf.Forms.Controls,IGridHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridColumnHandler.cs,FormatCell,The method has 5 parameters. Parameters: column' cell' element' gridcell' dataItem
Long Parameter List,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,WebEvents_NewWindow,The method has 6 parameters. Parameters: url' flags' targetFrameName' postData' headers' processed
Long Parameter List,Eto.Wpf.Forms.Cells,WpfCellEventArgs,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,WpfCellEventArgs,The method has 5 parameters. Parameters: grid' cell' row' item' cellState
Long Parameter List,Eto.Wpf.Forms.Cells,DataGridProgressBarColumn,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\ProgressCellHandler.cs,SetValue,The method has 5 parameters. Parameters: cell' grid' bar' text' dataItem
Long Parameter List,Eto.Wpf.Forms,WpfDragEventArgs,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfDragEventArgs.cs,WpfDragEventArgs,The method has 7 parameters. Parameters: source' data' allowedEffects' location' modifiers' buttons' controlObject
Long Parameter List,Eto.Wpf.Forms,PerMonitorDpiHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\PerMonitorDpiHelper.cs,HwndHook,The method has 5 parameters. Parameters: hwnd' message' wparam' lparam' handled
Long Parameter List,Eto.Wpf.IO,Shell32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\IO\ShellIcon.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,BaseBitmapData,The method has 5 parameters. Parameters: image' data' scanWidth' bitsPerPixel' controlObject
Long Identifier,Eto.Wpf.Forms.Controls,EtoButtonSpinner,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TextStepperHandler.cs,,The length of the parameter MouseWheelActiveTriggerProperty is 31.
Long Identifier,Eto.Wpf.Forms.Cells,CellProperties,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CellHandler.cs,,The length of the parameter ControlEditInitializedProperty is 30.
Long Identifier,Eto.Wpf.Forms,DataObjectHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DataObjectHandler.cs,,The length of the parameter UniformResourceLocatorW_Format is 30.
Long Identifier,Eto.Wpf.Forms,EnableThemingInScope,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\EnableThemingInScope.cs,,The length of the parameter enableThemingActivationContext is 30.
Long Identifier,Eto.Wpf.Forms,EnableThemingInScope,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\EnableThemingInScope.cs,,The length of the parameter ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID is 36.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter _fontFamilyTextBoxSelectionStart is 32.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter DiscretionaryLigaturesProperty is 30.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter SelectedTextDecorationsProperty is 31.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToWpf,The length of the statement  "			return swm.Color.FromArgb((byte)(value.A * byte.MaxValue)' (byte)(value.R * byte.MaxValue)' (byte)(value.G * byte.MaxValue)' (byte)(value.B * byte.MaxValue)); " is 158.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToEtoSize,The length of the statement  "			return new Size((int)(double.IsNaN(value.Width) ? -1 : Math.Ceiling(value.Width))' (int)(double.IsNaN(value.Height) ? -1 : Math.Ceiling(value.Height))); " is 152.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,GetSize,The length of the statement  "			return new Size((int)(double.IsNaN(element.Width) ? -1 : Math.Ceiling(element.Width))' (int)(double.IsNaN(element.Height) ? -1 : Math.Ceiling(element.Height))); " is 160.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontFamilyProperty' swc.Control.FontFamilyProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontStyleProperty' swc.Control.FontStyleProperty.DefaultMetadata.DefaultValue); " is 122.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontWeightProperty' swc.Control.FontWeightProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontSizeProperty' swc.Control.FontSizeProperty.DefaultMetadata.DefaultValue); " is 120.
Long Statement,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,SetEtoFamily,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontFamilyProperty' swc.Control.FontFamilyProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfExtensions.cs,RenderWithCollect,The length of the statement  "			// fix memory leak with RenderTargetBitmap.  See http://stackoverflow.com/questions/14786490/wpf-memory-leak-using-rendertargetbitmap " is 133.
Long Statement,DragDropLib,EnumFORMATETC,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,Next,The length of the statement  "					throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,DragDropLib,EnumFORMATETC,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,Next,The length of the statement  "					throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,DragDropLib,EnumFORMATETC,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,Next,The length of the statement  "					throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,DragDropLib,EnumFORMATETC,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,Next,The length of the statement  "					throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,DragDropLib,EnumFORMATETC,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,Next,The length of the statement  "					throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The length of the statement  "			if (IsFormatEqual(format' DataFormats.Bitmap) && (data is System.Drawing.Bitmap || data is System.Windows.Media.Imaging.BitmapSource)) " is 134.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The length of the statement  "			if (IsFormatEqual(format' DataFormats.Bitmap) && (data is System.Drawing.Bitmap || data is System.Windows.Media.Imaging.BitmapSource)) " is 134.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The length of the statement  "			if (IsFormatEqual(format' DataFormats.Bitmap) && (data is System.Drawing.Bitmap || data is System.Windows.Media.Imaging.BitmapSource)) " is 134.
Long Statement,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragImage,The length of the statement  "					throw new Exception("A NotImplementedException was caught. This could be because you forgot to construct your DataObject using a DragDropLib.DataObject"' ex); " is 158.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,RegisterDefaultDragSource,The length of the statement  "			entry.adviseConnection = ComTypes.ComDataObjectExtensions.Advise(((ComTypes.IDataObject)data)' new AdviseSink(data)' DropDescriptionFormat' 0); " is 143.
Long Statement,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,InvalidateRequired,The length of the statement  "				return (s_dropDescriptions[dataObject] & DropDescriptionFlags.InvalidateRequired) == DropDescriptionFlags.InvalidateRequired; " is 125.
Long Statement,System.Runtime.InteropServices.ComTypes,ComDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.cs,GetTypeConverterForType,The length of the statement  "			TypeConverterAttribute[] typeConverterAttrs = (TypeConverterAttribute[])dataType.GetCustomAttributes(typeof(TypeConverterAttribute)' true); " is 139.
Long Statement,Eto.Wpf.Drawing,CachedBitmapFrame,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\CachedBitmapFrame.cs,Get,The length of the statement  "			// There's no way to get around it other than just not creating that many and using GC.Collect/WaitForPendingFinalizers. " is 120.
Long Statement,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,Clone,The length of the statement  "				var target = new swmi.WriteableBitmap(rect.Width' rect.Height' Control.DpiX' Control.DpiY' Control.Format' Control.Palette); " is 124.
Long Statement,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,MeasureString,The length of the statement  "			var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' WpfTypeface' WpfSize' measureBrush); " is 144.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawText,The length of the statement  "				var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' fontHandler.WpfTypeface' fontHandler.WpfSize' brush); " is 161.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,MeasureString,The length of the statement  "				var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' fontHandler.WpfTypeface' fontHandler.WpfSize' brush); " is 161.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,Close,The length of the statement  "				var newbmp = new swmi.RenderTargetBitmap(bmp.PixelWidth' bmp.PixelHeight' bmp.DpiX' bmp.DpiY' swm.PixelFormats.Pbgra32); " is 120.
Long Statement,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The length of the statement  "			figure.Segments.Add (new swm.ArcSegment (new sw.Point (xe' ye)' new sw.Size (dx' dy)' 0' isLargeArc' sweepDirection' true)); " is 124.
Long Statement,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The length of the statement  "			var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride); " is 143.
Long Statement,Eto.Wpf.Drawing,LinearGradientBrushHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\LinearGradientBrushHandler.cs,Create,The length of the statement  "			return new FrozenBrushWrapper(new swm.LinearGradientBrush(startColor.ToWpf()' endColor.ToWpf()' startPoint.ToWpf()' endPoint.ToWpf()) " is 133.
Long Statement,Eto.Wpf.Drawing,TransformStack,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\TransformStack.cs,RestoreTransform,The length of the statement  "				throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "RestoreTransform called without SaveTransform")); " is 128.
Long Statement,Eto.Wpf.Forms.Controls,ExpanderHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ExpanderHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.Expander.IsExpandedProperty' PropertyChangeNotifier.Register(swc.Expander.IsExpandedProperty' HandleIsExpandedChanged' Control)); " is 155.
Long Statement,Eto.Wpf.Forms.Controls,EtoButtonSpinner,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TextStepperHandler.cs,OnSpin,The length of the statement  "			spin |= ((TextBox != null) && TextBox.IsFocused && (activeTrigger == mwc.Primitives.MouseWheelActiveTrigger.FocusedMouseOver)); " is 127.
Long Statement,Eto.Wpf.Forms.Controls,EtoButtonSpinner,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TextStepperHandler.cs,OnSpin,The length of the statement  "			spin |= ((TextBox != null) && TextBox.IsFocused && (activeTrigger == mwc.Primitives.MouseWheelActiveTrigger.Focused) && (sw.Input.Mouse.Captured is Spinner)); " is 158.
Long Statement,Eto.Wpf.Forms.Controls,TextStepperHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TextStepperHandler.cs,AttachEvent,The length of the statement  "					Control.Spin += (sender' e) => Callback.OnStep(Widget' new StepperEventArgs(e.Direction == Xceed.Wpf.Toolkit.SpinDirection.Increase ? StepperDirection.Up : StepperDirection.Down)); " is 180.
Long Statement,Eto.Wpf.Forms.Controls,StepperHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\StepperHandler.cs,AttachEvent,The length of the statement  "					Control.Spin += (sender' e) => Callback.OnStep(Widget' new StepperEventArgs(e.Direction == Xceed.Wpf.Toolkit.SpinDirection.Increase ? StepperDirection.Up : StepperDirection.Down)); " is 180.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetBold,The length of the statement  "			SetRange(range' tr => tr.ApplyPropertyValue(swd.TextElement.FontWeightProperty' bold ? sw.FontWeights.Bold : sw.FontWeights.Normal)); " is 133.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,HasDecorations,The length of the statement  "			var existingDecorations = range.GetRealPropertyValue(swd.Inline.TextDecorationsProperty' out realRange) as sw.TextDecorationCollection; " is 135.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "						existingDecorations = new sw.TextDecorationCollection(existingDecorations); // copy so we don't update existing elements " is 120.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "							new swd.TextRange(elementRange.Start' range.Start).ApplyPropertyValue(swd.Inline.TextDecorationsProperty' existingDecorations); " is 127.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "							new swd.TextRange(range.End' elementRange.End).ApplyPropertyValue(swd.Inline.TextDecorationsProperty' existingDecorations); " is 123.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetItalic,The length of the statement  "			SetRange(range' tr => tr.ApplyPropertyValue(swd.TextElement.FontStyleProperty' italic ? sw.FontStyles.Italic : sw.FontStyles.Normal)); " is 134.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,ResolveWpfTypeface,The length of the statement  "			if (family.Source.Length <= familyName.Length + 1 || !family.Source.StartsWith(familyName' StringComparison.OrdinalIgnoreCase)) " is 127.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,AttachEvent,The length of the statement  "					Control.MouseDoubleClick += (sender' e) => Callback.OnCellDoubleClick(Widget' CreateCellMouseArgs(e.OriginalSource' e)); " is 120.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,Initialize,The length of the statement  "			Control.InputBindings.Add(new swi.KeyBinding(swi.ApplicationCommands.NotACommand' swi.Key.C' swi.ModifierKeys.Control)); " is 120.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,Initialize,The length of the statement  "			Control.InputBindings.Add(new swi.KeyBinding(swi.ApplicationCommands.NotACommand' swi.Key.Delete' swi.ModifierKeys.None)); " is 122.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,RestoreColumnFocus,The length of the statement  "				Control.CurrentCell = new swc.DataGridCellInfo(Control.SelectedItem' CurrentColumn ?? Control.CurrentColumn ?? Control.Columns[0]); " is 131.
Long Statement,Eto.Wpf.Forms.Controls,DrawableHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DrawableHandler.cs,SetMaxTiles,The length of the statement  "			maxTiles = new Size(((int)Control.ActualWidth + tileSize.Width - 1) / tileSize.Width' ((int)Control.ActualHeight + tileSize.Height - 1) / tileSize.Height); " is 155.
Long Statement,Eto.Wpf.Forms.Controls,EtoTile,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DrawableHandler.cs,OnRender,The length of the statement  "				var graphics = new Graphics(new GraphicsHandler(this' drawingContext' bounds.ToWpf()' new RectangleF(Handler.ClientSize)' false)); " is 130.
Long Statement,Eto.Wpf.Forms.Controls,GridViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridViewHandler.cs,HandleDragOver,The length of the statement  "						var b = new swm.DrawingBrush { Drawing = d' TileMode = swm.TileMode.None' Stretch = swm.Stretch.None' AlignmentX = swm.AlignmentX.Left }; " is 137.
Long Statement,Eto.Wpf.Forms.Controls,EtoDoubleUpDown,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\NumericStepperHandler.cs,ConvertTextToValue,The length of the statement  "				trimmedText = Regex.Replace(trimmedText' $@"(?!\d|{Regex.Escape(h.CultureInfo.NumberFormat.NumberDecimalSeparator)}|{Regex.Escape(h.CultureInfo.NumberFormat.NegativeSign)})."' ""); // strip any non-numeric value " is 211.
Long Statement,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.RowDefinition.HeightProperty' PropertyChangeNotifier.Register(swc.RowDefinition.HeightProperty' HandlePositionChanged' Control.RowDefinitions[0])); " is 173.
Long Statement,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.ColumnDefinition.WidthProperty' PropertyChangeNotifier.Register(swc.ColumnDefinition.WidthProperty' HandlePositionChanged' Control.ColumnDefinitions[0])); " is 180.
Long Statement,Eto.Wpf.Forms.Controls,TreeGridViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TreeGridViewHandler.cs,HandleDragOver,The length of the statement  "						var b = new swm.DrawingBrush { Drawing = d' TileMode = swm.TileMode.None' Stretch = swm.Stretch.None' AlignmentX = swm.AlignmentX.Left }; " is 137.
Long Statement,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,EditableBlock,The length of the statement  "			var binding = new sw.Data.Binding { Path = new sw.PropertyPath("Text")' RelativeSource = relativeSource' Mode = swd.BindingMode.TwoWay' UpdateSourceTrigger = swd.UpdateSourceTrigger.LostFocus }; " is 194.
Long Statement,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Initialize,The length of the statement  "					control.DataContextChanged += (sender' e) => SetValue(control.GetParent<swc.DataGridCell>()' (swc.ComboBox)sender' e.NewValue); " is 127.
Long Statement,Eto.Wpf.Forms.Cells,EtoCanvas,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\DrawableCellHandler.cs,OnRender,The length of the statement  "				var graphics = new Graphics(new GraphicsHandler(this' dc' new sw.Rect(RenderSize)' new RectangleF(RenderSize.ToEto())' false)); " is 127.
Long Statement,Eto.Wpf.Forms,TrayIndicatorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TrayIndicatorHandler.cs,GetKeyCode,The length of the statement  "			var keyboardHook = (Win32.KeyboardLowLevelHook) Marshal.PtrToStructure(structPointer' typeof(Win32.KeyboardLowLevelHook)); " is 122.
Long Statement,Eto.Wpf.Forms,TrayIndicatorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TrayIndicatorHandler.cs,InstallHooks,The length of the statement  "				_mouseHookHandle = Win32.SetWindowsHookEx(WhMouseLowLevel' _mouseHookProcRef' Win32.GetModuleHandle(module.ModuleName)' 0); " is 123.
Long Statement,Eto.Wpf.Forms,VistaSelectFolderDialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\VistaSelectFolderDialogHandler.cs,ShowDialog,The length of the statement  "			// use reflection since adding a parameter requires us to reference PresentationFramework which we don't want in winforms " is 121.
Long Statement,Eto.Wpf.Forms,ApplicationHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ApplicationHandler.cs,ApplyThemes,The length of the statement  "			Control.Resources.MergedDictionaries.Add(new sw.ResourceDictionary { Source = new Uri($"pack://application:'''/{assemblyName};component/themes/generic.xaml"' UriKind.RelativeOrAbsolute) }); " is 189.
Long Statement,Eto.Wpf.Forms,ApplicationHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ApplicationHandler.cs,Initialize,The length of the statement  "			// When running on non-english windows it can cause a NullReferenceException in System.Windows.Media.FontFamily.LookupFontFamilyAndFace " is 135.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[2] { 0x02' 0x00 }' 0' 2);                 // ICONDIR: Specifies image type: 1 for icon (.ICO) image' 2 for cursor (.CUR) image. Other values are invalid " is 180.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[2] { 0x01' 0x00 }' 0' 2);                 // ICONDIR: Specifies number of images in the file. " is 121.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[1] { (byte)image.Width }' 0' 1);          // ICONDIRENTRY: Specifies image width in pixels. Can be any number between 0 and 255. Value 0 means image width is 256 pixels. " is 197.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[1] { (byte)image.Height }' 0' 1);         // ICONDIRENTRY: Specifies image height in pixels. Can be any number between 0 and 255. Value 0 means image height is 256 pixels. " is 199.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[1] { 0x00 }' 0' 1);                       // ICONDIRENTRY: Specifies number of colors in the color palette. Should be 0 if the image does not use a color palette. " is 190.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[2] { (byte)hotspot.X' 0x00 }' 0' 2);      // ICONDIRENTRY: Specifies the horizontal coordinates of the hotspot in number of pixels from the left. " is 173.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[2] { (byte)hotspot.Y' 0x00 }' 0' 2);      // ICONDIRENTRY: Specifies the vertical coordinates of the hotspot in number of pixels from the top. " is 170.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the size of the image's data in bytes " is 134.
Long Statement,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The length of the statement  "					cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file " is 165.
Long Statement,Eto.Wpf.Forms,FontDialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\FontDialogHandler.cs,ShowDialog,The length of the statement  "				fontHandler = new FontHandler(Control.SelectedFontFamily' Control.SelectedFontPointSize' Control.SelectedFontStyle' Control.SelectedFontWeight' Control.SelectedFontStretch); " is 173.
Long Statement,Eto.Wpf.Forms,TableLayoutHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,SetChildrenSizes,The length of the statement  "						childControl.ParentMinimumSize = new sw.Size(Math.Max(0' maxx - margin.Horizontal())' Math.Max(0' maxy - margin.Vertical())); " is 125.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "			// for example' when a TextBox has a large amount of text' we do not grow the text box to fit that content in Eto's sizing model. " is 129.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "				ContainerControl.MinWidth = Math.Max(0' double.IsNaN(UserPreferredSize.Width) ? defaultSize.Width : UserPreferredSize.Width); " is 125.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "				ContainerControl.MinHeight = Math.Max(0' double.IsNaN(UserPreferredSize.Height) ? defaultSize.Height : UserPreferredSize.Height); " is 129.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,GetDragEventArgs,The length of the statement  "			return new WpfDragEventArgs(source' dragData' data.AllowedEffects.ToEto()' location' modifiers' buttons' controlObject); " is 120.
Long Statement,Eto.Wpf.Forms,WpfWindow<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfWindow.cs,Initialize,The length of the statement  "				foreach (var binding in Control.InputBindings.Cast<swi.InputBinding>().Select(r => r.Command).OfType<IWpfValidateBinding>()) " is 124.
Long Statement,Eto.Wpf.Forms,WpfWindow<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfWindow.cs,AttachEvent,The length of the statement  "						var method = typeof(WpfWindow<TControl' TWidget' TCallback>).GetMethod(nameof(HandleLogicalPixelSizeChanged)' BindingFlags.Instance | BindingFlags.NonPublic); " is 158.
Long Statement,Eto.Wpf.Forms.Menu,CheckMenuItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Menu\CheckMenuItemHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.MenuItem.IsCheckedProperty' PropertyChangeNotifier.Register(swc.MenuItem.IsCheckedProperty' HandleIsCheckedChanged' Control)); " is 152.
Long Statement,Eto.Wpf.Forms.Menu,RadioMenuItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Menu\RadioMenuItemHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.MenuItem.IsCheckedProperty' PropertyChangeNotifier.Register(swc.MenuItem.IsCheckedProperty' HandleIsCheckedChanged' Control)); " is 152.
Long Statement,Eto.Wpf.Forms.Menu,ContextMenuHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Menu\ContextMenuHandler.cs,AttachEvent,The length of the statement  "					Widget.Properties.Set(swc.ContextMenu.IsOpenProperty' PropertyChangeNotifier.Register(swc.ContextMenu.IsOpenProperty' HandleIsOpenChanged' Control)); " is 149.
Long Statement,Eto.Wpf.CustomControls,GlassHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\GlassHelper.cs,ExtendGlassFrame,The length of the statement  "					throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "The Window must be shown before extending glass.")); " is 131.
Long Statement,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The length of the statement  "			if ((stretch == Stretch.Uniform || stretch == Stretch.UniformToFill || stretch == Stretch.Fill) && (widthSet || heightSet)) " is 123.
Long Statement,Eto.Wpf.CustomControls,OverlayIcon,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\OverlayIcon.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Eto.Wpf;V2.5.0.0;component/customcontrols/overlayicon.xaml"' System.UriKind.Relative); " is 132.
Long Statement,Eto.Wpf.CustomControls,SelectableTreeView,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\SelectableTreeView.cs,OnCurrentItemChanged,The length of the statement  "			treeView.OnCurrentItemChanged (new RoutedPropertyChangedEventArgs<object>(args.OldValue' newValue' CurrentItemChangedEvent)); " is 125.
Long Statement,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Eto.Wpf;V2.5.0.0;component/customcontrols/fontdialog/fontchooser.xaml"' System.UriKind.Relative); " is 143.
Long Statement,Eto.Wpf.CustomControls.FontDialog,NameDictionaryExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\NameDictionaryExtensions.cs,GetRelatedness,The length of the statement  "				if (IsPrefixOf(TrimSuffix(userCulture.IetfLanguageTag)' keyCulture.IetfLanguageTag) || userCulture.Equals(keyCulture.Parent)) " is 125.
Long Statement,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,GetPixel,The length of the statement  "			throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by GetPixel. Must be 24 or 32 bits per pixel' or 8 bit indexed")); " is 175.
Long Statement,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,SetPixel,The length of the statement  "				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel")); " is 156.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\research\architectureSmells\repos\picoe_Eto\artifacts\obj\Windows\Eto.Wpf\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html) || IsFormatEqual(format' DataFormats.Xaml)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html) || IsFormatEqual(format' DataFormats.Xaml)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html) || IsFormatEqual(format' DataFormats.Xaml)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "data is Stream  				|| IsFormatEqual(format' DataFormats.Html)  				|| IsFormatEqual(format' DataFormats.Text) || IsFormatEqual(format' DataFormats.Rtf)  				|| IsFormatEqual(format' DataFormats.OemText)  				|| IsFormatEqual(format' DataFormats.UnicodeText) || IsFormatEqual(format' "ApplicationTrust")  				|| IsFormatEqual(format' DataFormats.FileDrop)  				|| IsFormatEqual(format' "FileName")  				|| IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetCompatibleTymed,The conditional expression  "IsFormatEqual(format' DataFormats.Serializable) || (data is System.Runtime.Serialization.ISerializable)  				|| ((data != null) && data.GetType().IsSerializable)"  is complex.
Complex Conditional,Eto.Wpf.Drawing,CachedBitmapFrame,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\CachedBitmapFrame.cs,Get,The conditional expression  "_cachedFrame != null && scale == _scale && width == _width && height == _height && scalingMode == _scalingMode"  is complex.
Complex Conditional,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The conditional expression  "(ImageInterpolation == ImageInterpolation.High || ImageInterpolation == ImageInterpolation.Default)                  && (width != size.Width || height != size.Height)"  is complex.
Complex Conditional,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,GetImageClosestToSize,The conditional expression  "(wpfBitmap.Width == size.Width && wpfBitmap.Height == size.Height)  				|| size.Height == 0  				|| size.Width == 0  				|| scale <= 0"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,UpdateFamilyVariantToFaces,The conditional expression  "stretch != sw.FontStretches.Normal  					|| (weight != sw.FontWeights.Normal && weight != sw.FontWeights.Bold)  					|| style != sw.FontStyles.Normal"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,FlowDocumentExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,GetRealPropertyValue,The conditional expression  "needsContinue && (element is swd.Inline || element is swd.Paragraph || element is swc.TextBlock)"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,HandleMouseDown,The conditional expression  "row != null && row.IsSelected  					&& (  						(cell?.Column.IsReadOnly == false && !cell.IsEditing && cell.IsFocused)  						|| Control.SelectedItems.Count > 1  					)"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,HandleMouseDown,The conditional expression  "!e.Handled  				&& !AllowEmptySelection  				&& e.LeftButton == swi.MouseButtonState.Pressed  				&& swi.Keyboard.Modifiers == swi.ModifierKeys.Control"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,HandleMouseDown,The conditional expression  "row != null && row.IsSelected  					&& cell != null  					&& Control.SelectedItems.Count == 1"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,DateTimePickerHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DateTimePickerHandler.cs,UpDown_ValueChanged,The conditional expression  "last != val && (last == null || val == null || Math.Abs((last.Value - val.Value).TotalSeconds) >= 1)"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,HandlePanelVisibleChanged,The conditional expression  "(panel1 != null && panel1.Visible) || (panel2 != null && panel2.Visible)"  is complex.
Complex Conditional,Eto.Wpf.Forms,TrayIndicatorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TrayIndicatorHandler.cs,MouseEventProc,The conditional expression  "menu.IsVisible && code == 0 && (wParam == WmLeftButtonDown || wParam == WmRightButtonDown)"  is complex.
Complex Conditional,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,HandleMouseDown,The conditional expression  "WpfFrameworkElementHelper.ShouldCaptureMouse  				&& (  					// capture mouse automatically so mouse moves outside control are captured until released  					// but only if the control that was clicked is this control  					(!UseMousePreview && (e.OriginalSource == ContainerControl || e.OriginalSource == Control))  					|| e.Handled  				)"  is complex.
Complex Conditional,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The conditional expression  "(stretch == Stretch.Uniform || stretch == Stretch.UniformToFill || stretch == Stretch.Fill) && (widthSet || heightSet)"  is complex.
Empty Catch Block,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The method has an empty catch block.
Empty Catch Block,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The method has an empty catch block.
Empty Catch Block,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,InitializeFromWindow,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.Forms,WpfShellDropBehavior,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfShellDropBehavior.cs,Element_PreviewDrop,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.Forms,WpfShellDropBehavior,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfShellDropBehavior.cs,Element_PreviewDragLeave,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.Forms,WpfShellDropBehavior,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfShellDropBehavior.cs,Element_PreviewDragOver,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.Forms,WpfShellDropBehavior,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfShellDropBehavior.cs,Element_PreviewDragEnter,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.CustomControls.FontDialog,NameDictionaryExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\NameDictionaryExtensions.cs,GetRelatedness,The method has an empty catch block.
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,The following statement contains a magic number: pointList.Count == 2
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AX = SX1 + SX2 + 2 * point1.X - 2 * point2.X;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AX = SX1 + SX2 + 2 * point1.X - 2 * point2.X;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AY = SY1 + SY2 + 2 * point1.Y - 2 * point2.Y;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AY = SY1 + SY2 + 2 * point1.Y - 2 * point2.Y;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,SplineHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,Conversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Mac\SDConversions.cs,DegreesToRadians,The following statement contains a magic number: return (float)Math.PI * angle / 180.0f;
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,SignedHIWORD,The following statement contains a magic number: return (short)((n >> 16) & 0xFFFF);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ScreenToLogical,The following statement contains a magic number: var screen = swf.Screen.FromPoint(new sd.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ScreenToLogical,The following statement contains a magic number: var screen = swf.Screen.FromPoint(new sd.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var header = new byte[40];
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var width = BitConverter.ToInt32(header' 4);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var height = BitConverter.ToInt32(header' 8);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var bpp = BitConverter.ToInt16(header' 14);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var compression = BitConverter.ToInt32(header' 16);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: bpp != 32
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var segments = new byte[sizeof(int) * 3];
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var gcomp = BitConverter.ToInt32(segments' 4);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var bcomp = BitConverter.ToInt32(segments' 8);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: compression == 3
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var af = a / 255f;
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: var ms = new MemoryStream(size.Width * size.Height * bd.BytesPerPixel + 40);
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: const float InchesPerMeter = 39.37f;
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: Write(ms' BitConverter.GetBytes((uint)40));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: var hasAlpha = bd.BytesPerPixel == 4;
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.B * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.B * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.G * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.G * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.R * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: ms.WriteByte((byte)(p.R * p.A * 255f + .5f));
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3
Magic Number,Eto,Win32,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3
Magic Number,Eto,ScreenHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.dpi.cs,GetLogicalPixelSize,The following statement contains a magic number: return (uint)graphics.DpiY / 96f;
Magic Number,Eto,ScreenHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\Win32.dpi.cs,GetLogicalPixelSize,The following statement contains a magic number: return dpiX / 96f;
Magic Number,Eto.CustomControls,HttpServer,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: int currentPort = rnd.Next(49152' 65536);
Magic Number,Eto.CustomControls,HttpServer,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: int currentPort = rnd.Next(49152' 65536);
Magic Number,Eto.CustomControls,HttpServer,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: i < 100
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToEto,The following statement contains a magic number: return new Color(color.R / 255f' color.G / 255f' color.B / 255f' color.A / 255f);
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToEto,The following statement contains a magic number: return new Color(color.R / 255f' color.G / 255f' color.B / 255f' color.A / 255f);
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToEto,The following statement contains a magic number: return new Color(color.R / 255f' color.G / 255f' color.B / 255f' color.A / 255f);
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToEto,The following statement contains a magic number: return new Color(color.R / 255f' color.G / 255f' color.B / 255f' color.A / 255f);
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToSD,The following statement contains a magic number: return sd.Color.FromArgb((byte)(color.A * 255)' (byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToSD,The following statement contains a magic number: return sd.Color.FromArgb((byte)(color.A * 255)' (byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToSD,The following statement contains a magic number: return sd.Color.FromArgb((byte)(color.A * 255)' (byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,Eto.Wpf,WinConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.WinForms\WinConversions.shared.cs,ToSD,The following statement contains a magic number: return sd.Color.FromArgb((byte)(color.A * 255)' (byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToEto,The following statement contains a magic number: return new Color { A = value.A / 255f' R = value.R / 255f' G = value.G / 255f' B = value.B / 255f };
Magic Number,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToEto,The following statement contains a magic number: return new Color { A = value.A / 255f' R = value.R / 255f' G = value.G / 255f' B = value.B / 255f };
Magic Number,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToEto,The following statement contains a magic number: return new Color { A = value.A / 255f' R = value.R / 255f' G = value.G / 255f' B = value.B / 255f };
Magic Number,Eto.Wpf,WpfConversions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\WpfConversions.cs,ToEto,The following statement contains a magic number: return new Color { A = value.A / 255f' R = value.R / 255f' G = value.G / 255f' B = value.B / 255f };
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpix = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpiy = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpix = (int)(96 * m.M11);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpiy = (int)(96 * m.M22);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpix = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpiy = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpix = (int)(96 * m.M11);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpiy = (int)(96 * m.M22);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpix = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDragImage,The following statement contains a magic number: int dpiy = 96;
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpix = (int)(96 * m.M11);
Magic Number,System.Windows,WpfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Wpf.cs,GetDeviceDpi,The following statement contains a magic number: dpiy = (int)(96 * m.M22);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: IntPtr num = Marshal.AllocHGlobal(4);
Magic Number,System.Windows.Forms,SwfDataObjectExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetBoolFormat,The following statement contains a magic number: Marshal.Copy(BitConverter.GetBytes(val ? 1 : 0)' 0' num' 4);
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,SetDragCursor,The following statement contains a magic number: switch (effects)  				{  					default:  					case DragDropEffects.None:  						wparam = (IntPtr)1;  						break;  					case DragDropEffects.Copy:  						wparam = (IntPtr)3;  						break;  					case DragDropEffects.Move:  						wparam = (IntPtr)2;  						break;  					case DragDropEffects.Link:  						wparam = (IntPtr)4;  						break;  				}
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf = new byte[4];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: 4 != ((MemoryStream)data).Read(buf' 0' 4)
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: buf.Length < 4
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,System.Windows.Forms,DragSourceHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\DragDropLib.Swf.cs,GetIntPtrFromData,The following statement contains a magic number: int p = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
Magic Number,Eto.Wpf.Drawing,CachedBitmapFrame,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\CachedBitmapFrame.cs,Get,The following statement contains a magic number: var target = new swmi.RenderTargetBitmap(scaledwidth' scaledheight' 96 * scale' 96 * scale' swm.PixelFormats.Default);
Magic Number,Eto.Wpf.Drawing,CachedBitmapFrame,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\CachedBitmapFrame.cs,Get,The following statement contains a magic number: var target = new swmi.RenderTargetBitmap(scaledwidth' scaledheight' 96 * scale' 96 * scale' swm.PixelFormats.Default);
Magic Number,Eto.Wpf.Drawing,FormattedTextHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FormattedTextHandler.cs,SetMaxSize,The following statement contains a magic number: formattedText.MaxTextWidth = Math.Min(3579139' MaximumSize.Width);
Magic Number,Eto.Wpf.Drawing,FormattedTextHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FormattedTextHandler.cs,SetMaxSize,The following statement contains a magic number: formattedText.MaxTextHeight = Math.Min(3579139' MaximumSize.Height);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,Create,The following statement contains a magic number: var bf = new swmi.WriteableBitmap(width' height' 96' 96' format' null);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,Create,The following statement contains a magic number: var bf = new swmi.WriteableBitmap(width' height' 96' 96' format' null);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: var pixelStride = (rect.Width * control.Format.BitsPerPixel + 7) / 8;
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: var pixelStride = (rect.Width * control.Format.BitsPerPixel + 7) / 8;
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(red: pixels[0]' green: pixels[1]' blue: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,PointsToPixels,The following statement contains a magic number: return points * (96.0 / 72.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,PointsToPixels,The following statement contains a magic number: return points * (96.0 / 72.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,PixelsToPoints,The following statement contains a magic number: return pixels * (72.0 / 96.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontHandler.cs,PixelsToPoints,The following statement contains a magic number: return pixels * (72.0 / 96.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double startRadians = startDegrees * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double sweepRadians = sweepDegrees * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double dx = rect.Width / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double dy = rect.Height / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: var centerPoint = new sw.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: var centerPoint = new sw.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: bool isLargeArc = Math.Abs(sweepDegrees) > 180;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawArc,The following statement contains a magic number: sweepAngle >= 360f
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,FillPie,The following statement contains a magic number: sweepAngle >= 360f
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The following statement contains a magic number: src = new swmi.TransformedBitmap(                      src'                      new swm.ScaleTransform(width / size.Width * 96 / src.DpiX' height / size.Height * 96 / src.DpiY' 0' 0)                      );
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The following statement contains a magic number: src = new swmi.TransformedBitmap(                      src'                      new swm.ScaleTransform(width / size.Width * 96 / src.DpiX' height / size.Height * 96 / src.DpiY' 0' 0)                      );
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,ApplyOffset,The following statement contains a magic number: Control.PushTransform(new swm.TranslateTransform(0.5' 0.5));
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,ApplyOffset,The following statement contains a magic number: Control.PushTransform(new swm.TranslateTransform(0.5' 0.5));
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,Clear,The following statement contains a magic number: var newbmp = new swmi.RenderTargetBitmap((int)bounds.Width' (int)bounds.Height' 96' 96' swm.PixelFormats.Pbgra32);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsHandler.cs,Clear,The following statement contains a magic number: var newbmp = new swmi.RenderTargetBitmap((int)bounds.Width' (int)bounds.Height' 96' 96' swm.PixelFormats.Pbgra32);
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double startRadians = startAngle * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double sweepRadians = sweepAngle * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double dx = width / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double dy = height / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: bool isLargeArc = Math.Abs (sweepAngle) > 180;
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,CopyStream,The following statement contains a magic number: var buffer = new byte[32768];
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: int count = BitConverter.ToInt16(srcBuf' 4);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: writer.Write(srcBuf' pos' sICONDIR - 2);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: writer.Write(srcBuf' pos' sICONDIRENTRY - 4);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: pos += 8;
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: pos += 4;
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: numColors = (int)Math.Pow(2' bitsPerPixel);
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: ApplicationHandler.InvokeIfNecessary (() => {  				Control = new swmi.WriteableBitmap (width' height' 96' 96' format' new swmi.BitmapPalette (colors));  			});
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: ApplicationHandler.InvokeIfNecessary (() => {  				Control = new swmi.WriteableBitmap (width' height' 96' 96' format' new swmi.BitmapPalette (colors));  			});
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The following statement contains a magic number: var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride);
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The following statement contains a magic number: var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride);
Magic Number,Eto.Wpf.Drawing,LinearGradientBrushHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\LinearGradientBrushHandler.cs,Create,The following statement contains a magic number: matrix.RotateAtPrepend(angle - 45' startPoint.X' startPoint.Y);
Magic Number,Eto.Wpf.Drawing,PenHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\PenHandler.cs,Create,The following statement contains a magic number: pen.MiterLimit = 10f;
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ButtonHandler.cs,Initialize,The following statement contains a magic number: label = new WpfLabel  			{  				IsHitTestVisible = false'  				VerticalAlignment = sw.VerticalAlignment.Center'  				HorizontalAlignment = sw.HorizontalAlignment.Center'  				Padding = new sw.Thickness(3' 0' 3' 0)'  				Visibility = sw.Visibility.Collapsed  			};
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ButtonHandler.cs,Initialize,The following statement contains a magic number: label = new WpfLabel  			{  				IsHitTestVisible = false'  				VerticalAlignment = sw.VerticalAlignment.Center'  				HorizontalAlignment = sw.HorizontalAlignment.Center'  				Padding = new sw.Thickness(3' 0' 3' 0)'  				Visibility = sw.Visibility.Collapsed  			};
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ButtonHandler.cs,SetImagePosition,The following statement contains a magic number: switch (ImagePosition)  			{  				case ButtonImagePosition.Left:  					col = 0; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Right:  					col = 2; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Above:  					col = 1; row = 0;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Below:  					col = 1; row = 2;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Overlay:  					col = 1; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ButtonHandler.cs,SetImagePosition,The following statement contains a magic number: switch (ImagePosition)  			{  				case ButtonImagePosition.Left:  					col = 0; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Right:  					col = 2; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Above:  					col = 1; row = 0;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Below:  					col = 1; row = 2;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Overlay:  					col = 1; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Wpf.Forms.Controls,EtoComboBox,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\DropDownHandler.cs,FindMaxSize,The following statement contains a magic number: maxWidth += toggle != null ? toggle.DesiredSize.Width : 20;
Magic Number,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridHandler.cs,HandleMouseUp,The following statement contains a magic number: info.ClickCount >= 2
Magic Number,Eto.Wpf.Forms.Controls,GridViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\GridViewHandler.cs,GetDragEventArgs,The following statement contains a magic number: location.Y + 4 > rowLocation.Y + row.ActualHeight - row.BorderThickness.Vertical()
Magic Number,Eto.Wpf.Forms.Controls,ProgressBarHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\ProgressBarHandler.cs,ProgressBarHandler,The following statement contains a magic number: Control = new EtoProgressBar  			{  				Handler = this'  				Minimum = 0'  				Maximum = 100'  			};
Magic Number,Eto.Wpf.Forms.Controls,SliderHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SliderHandler.cs,SliderHandler,The following statement contains a magic number: Control = new EtoSlider  			{  				Handler = this'  				Minimum = 0'  				Maximum = 100'  				TickPlacement = swc.Primitives.TickPlacement.BottomRight  			};
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: splitter.SetValue(swc.Grid.RowSpanProperty' 3);
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: pane1.SetValue(swc.Grid.RowSpanProperty' 3);
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: pane2.SetValue(swc.Grid.RowSpanProperty' 3);
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: swc.Grid.SetColumn(pane2' 2);
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following statement contains a magic number: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following statement contains a magic number: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetHiddenPanels,The following statement contains a magic number: SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetHiddenPanels,The following statement contains a magic number: SetLength(2' new sw.GridLength(0' sw.GridUnitType.Pixel));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: relative = fixedPanel == SplitterFixedPanel.Panel1 ? Math.Max(0' newPosition)  				: fixedPanel == SplitterFixedPanel.Panel2 ? Math.Max(0' size - newPosition)  				: size <= 0 ? 0.5 : Math.Max(0.0' Math.Min(1.0' newPosition / (double)size));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetRelative,The following statement contains a magic number: SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));
Magic Number,Eto.Wpf.Forms.Controls,TreeGridViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\TreeGridViewHandler.cs,GetDragEventArgs,The following statement contains a magic number: location.Y + 4 > rowLocation.Y + row.ActualHeight - row.BorderThickness.Vertical()
Magic Number,Eto.Wpf.Forms.Controls,WpfTextBindingBlock,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfTextBindingBlock,The following statement contains a magic number: SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2'0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfTextBindingBlock,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfTextBindingBlock,The following statement contains a magic number: SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2'0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfImageBindingBlock,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfImageBindingBlock,The following statement contains a magic number: SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,TextBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MaxHeightProperty' 16.0);
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MaxWidthProperty' 16.0);
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,ImageConverter,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,Convert,The following statement contains a magic number: return item.Image.ToWpf(16);
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,DataGridProgressBarColumn,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Cells\ProgressCellHandler.cs,SetValue,The following statement contains a magic number: text.Text = (int)(bar.Value * 100f) + "%";
Magic Number,Eto.Wpf.Forms,NotificationHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\NotificationHandler.cs,Show,The following statement contains a magic number: notifyIcon.ShowBalloonTip(3000' Title' Message' (swf.ToolTipIcon)NotificationIcon);
Magic Number,Eto.Wpf.Forms,PerMonitorDpiHelper,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\PerMonitorDpiHelper.cs,SetScale,The following statement contains a magic number: var scale = dpi / 96.0;
Magic Number,Eto.Wpf.Forms,ClipboardHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ClipboardHandler.cs,Retry,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Eto.Wpf.Forms,ClipboardHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ClipboardHandler.cs,Retry,The following statement contains a magic number: i < 10
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x00' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x00' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x02' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x02' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x01' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { 0x01' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { (byte)hotspot.X' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { (byte)hotspot.X' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { (byte)hotspot.Y' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[2] { (byte)hotspot.Y' 0x00 }' 0' 2);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the size of the image's data in bytes                                            (byte)((pngStream.Length & 0x000000FF))'  										  (byte)((pngStream.Length & 0x0000FF00) >> 0x08)'  										  (byte)((pngStream.Length & 0x00FF0000) >> 0x10)'  										  (byte)((pngStream.Length & 0xFF000000) >> 0x18)  									   }' 0' 4);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the size of the image's data in bytes                                            (byte)((pngStream.Length & 0x000000FF))'  										  (byte)((pngStream.Length & 0x0000FF00) >> 0x08)'  										  (byte)((pngStream.Length & 0x00FF0000) >> 0x10)'  										  (byte)((pngStream.Length & 0xFF000000) >> 0x18)  									   }' 0' 4);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file                                            (byte)0x16'  										  (byte)0x00'  										  (byte)0x00'  										  (byte)0x00'  									   }' 0' 4);
Magic Number,Eto.Wpf.Forms,CursorHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\CursorHandler.cs,Create,The following statement contains a magic number: cursorStream.Write(new byte[4] {                                      // ICONDIRENTRY: Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file                                            (byte)0x16'  										  (byte)0x00'  										  (byte)0x00'  										  (byte)0x00'  									   }' 0' 4);
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DialogHandler.cs,HandleLoaded,The following statement contains a magic number: Location = bounds.Location + (bounds.Size - Control.GetSize()) / 2;
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DialogHandler.cs,ReloadButtons,The following statement contains a magic number: gridButtons.ColumnDefinitions.Add(new swc.ColumnDefinition { Width = new sw.GridLength(100' sw.GridUnitType.Star) });
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DialogHandler.cs,ReloadButtons,The following statement contains a magic number: gridButtons.Margin = new sw.Thickness(hasButtons ? 8 : 0);
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\DialogHandler.cs,AddButton,The following statement contains a magic number: native.Margin = new sw.Thickness(6' 0' 0' 0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,SetMargins,The following statement contains a magic number: margin.Left = Math.Floor(spacing.Width / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,SetMargins,The following statement contains a magic number: margin.Right = Math.Ceiling(spacing.Width / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,SetMargins,The following statement contains a magic number: margin.Top = Math.Floor(spacing.Height / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\TableLayoutHandler.cs,SetMargins,The following statement contains a magic number: margin.Bottom = Math.Ceiling(spacing.Height / 2.0);
Magic Number,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\WpfFrameworkElement.cs,HandleMouseDown,The following statement contains a magic number: !(Control is swc.Control) && e.ClickCount == 2
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var doneButton = new swc.Button { Content = "OK"' IsDefault = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var doneButton = new swc.Button { Content = "OK"' IsDefault = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var cancelButton = new swc.Button { Content = "Cancel"' IsCancel = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var cancelButton = new swc.Button { Content = "Cancel"' IsCancel = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetQuitItem,The following statement contains a magic number: item.Order = 1000;
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetAboutItem,The following statement contains a magic number: item.Order = 1000;
Magic Number,Eto.Wpf.CustomControls,EditableTextBlock,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\EditableTextBlock.cs,EditableTextBlock,The following statement contains a magic number: textBlock.SetValue(FrameworkElement.MarginProperty' new Thickness(2));
Magic Number,Eto.Wpf.CustomControls,EditableTextBlock,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\EditableTextBlock.cs,TextBlock_MouseDown,The following statement contains a magic number: e.ButtonState == MouseButtonState.Pressed && e.ClickCount >= 2 && e.ChangedButton == MouseButton.Left
Magic Number,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,IsZero,The following statement contains a magic number: return Math.Abs(value) < 2.2204460492503131E-15;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: samplePara.FontSize = 16.0;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: samplePara.Margin = new Thickness(0' 0' 0' 8);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: samplePara.Margin = new Thickness(0' 0' 0' 8);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: table.CellSpacing = 5;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: leftColumn.Width = new GridLength(2.0' GridUnitType.Star);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: rightColumn.Width = new GridLength(3.0' GridUnitType.Star);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,SelectListItem,The following statement contains a magic number: int i = first + (limit - first) / 2;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,FuzzyEqual,The following statement contains a magic number: return Math.Abs(a - b) < 0.01;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PointsToPixels,The following statement contains a magic number: return value * (96.0 / 72.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PointsToPixels,The following statement contains a magic number: return value * (96.0 / 72.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PixelsToPoints,The following statement contains a magic number: return value * (72.0 / 96.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PixelsToPoints,The following statement contains a magic number: return value * (72.0 / 96.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,NameDictionaryExtensions,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\NameDictionaryExtensions.cs,GetRelatedness,The following statement contains a magic number: return 2;
Magic Number,Eto.Wpf.CustomControls.TreeGridView,TreeToggleButton,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\TreeGridView\TreeToggleButton.cs,Create,The following statement contains a magic number: var button = new TreeToggleButton { Controller = controller' Width = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,RadioToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\RadioToolItemHandler.cs,RadioToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,RadioToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\RadioToolItemHandler.cs,RadioToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,CheckToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\CheckToolItemHandler.cs,CheckToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,CheckToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\CheckToolItemHandler.cs,CheckToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,EtoSpaceSeparator,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\SeparatorToolItemHandler.cs,EtoSpaceSeparator,The following statement contains a magic number: Width = Height = 16;
Magic Number,Eto.Wpf.Forms.ToolBar,ButtonToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\ButtonToolItemHandler.cs,ButtonToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,ButtonToolItemHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\ToolBar\ButtonToolItemHandler.cs,ButtonToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,GetPixel,The following statement contains a magic number: BytesPerPixel == 4
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,GetPixel,The following statement contains a magic number: BytesPerPixel == 3
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\research\architectureSmells\repos\picoe_Eto\src\Shared\BaseBitmapData.cs,SetPixel,The following statement contains a magic number: BytesPerPixel == 4
Missing Default,Eto.Wpf.Drawing,FontFamilyHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Drawing\FontFamilyHandler.cs,Create,The following switch statement is missing a default case: switch (familyName.ToUpperInvariant ()) {  			case FontFamilies.MonospaceFamilyName:  				familyName = "Courier New";  				break;  			case FontFamilies.SansFamilyName:  				familyName = "Tahoma' Arial' Verdana' Trebuchet' MS Sans Serif' Helvetica";  				break;  			case FontFamilies.SerifFamilyName:  				familyName = "Times New Roman";  				break;  			case FontFamilies.CursiveFamilyName:  				familyName = "Comic Sans MS' Monotype Corsiva' Papryus";  				break;  			case FontFamilies.FantasyFamilyName:  				familyName = "Impact' Juice ITC";  				break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,AttachEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.OpenNewWindowEvent:  					control.NewWindow += WebBrowserV1_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,SwfWebViewHandler,The following switch statement is missing a default case: switch (e.KeyCode)  				{  					case swf.Keys.Down:  					case swf.Keys.Up:  					case swf.Keys.Left:  					case swf.Keys.Right:  					case swf.Keys.PageDown:  					case swf.Keys.PageUp:  						// enable scrolling via keyboard  						e.IsInputKey = true;  						return;  				}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,SwfWebViewHandler,The following switch statement is missing a default case: switch (e.KeyData)  					{  						case (swf.Keys.C | swf.Keys.Control):  							doc.ExecCommand("Copy"' false' null);  							break;  						case (swf.Keys.V | swf.Keys.Control):  							if (doc.ActiveElement != null && ValidInputTags.Contains(doc.ActiveElement.TagName.ToLowerInvariant()))  								doc.ExecCommand("Paste"' false' null);  							break;  						case (swf.Keys.X | swf.Keys.Control):  							if (doc.ActiveElement != null && ValidInputTags.Contains(doc.ActiveElement.TagName.ToLowerInvariant()))  								doc.ExecCommand("Cut"' false' null);  							break;  						case (swf.Keys.A | swf.Keys.Control):  							doc.ExecCommand("SelectAll"' false' null);  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following switch statement is missing a default case: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (fixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel2:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = relative / width;  							break;  					}  					break;  				case SplitterFixedPanel.Panel2:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = (width - relative) / width;  							break;  					}  					break;  				case SplitterFixedPanel.None:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width * relative;  							break;  						case SplitterFixedPanel.Panel2:  							relative = width - (width * relative);  							break;  					}  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel2:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = relative / width;  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = (width - relative) / width;  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width * relative;  							break;  						case SplitterFixedPanel.Panel2:  							relative = width - (width * relative);  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,RemoveEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.DocumentTitleChangedEvent:  					webEvents.TitleChange -= WebEvents_TitleChange;  					break;  				case WebView.OpenNewWindowEvent:  					webEvents.NewWindow -= WebEvents_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,AttachEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.DocumentTitleChangedEvent:  					webEvents.TitleChange += WebEvents_TitleChange;  					break;  				case WebView.OpenNewWindowEvent:  					webEvents.NewWindow += WebEvents_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretch)  						{  							case Stretch.Uniform:  								{  									double num3 = (widthFactor < heightFactor) ? widthFactor : heightFactor;  									heightFactor = (widthFactor = num3);  									break;  								}  							case Stretch.UniformToFill:  								{  									double num4 = (widthFactor > heightFactor) ? widthFactor : heightFactor;  									heightFactor = (widthFactor = num4);  									break;  								}  						}
Missing Default,Eto.Wpf.CustomControls,MultiSizeImage,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretchDirection)  				{  					case StretchDirection.UpOnly:  						if (widthFactor < 1.0)  							widthFactor = 1.0;  						if (heightFactor < 1.0)  							heightFactor = 1.0;  						break;  					case StretchDirection.DownOnly:  						if (widthFactor > 1.0)  							widthFactor = 1.0;  						if (heightFactor > 1.0)  							heightFactor = 1.0;  						break;  				}
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,OnTextDecorationsChanged,The following switch statement is missing a default case: switch (td.Location)                      {                          case TextDecorationLocation.Underline:                              underline = true;                              break;                          case TextDecorationLocation.Baseline:                              baseline = true;                              break;                          case TextDecorationLocation.Strikethrough:                              strikethrough = true;                              break;                          case TextDecorationLocation.OverLine:                              overline = true;                              break;                      }
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,OnComboBoxPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                      // Move up from the current position.                      MoveListPosition(listBox' -1);                      e.Handled = true;                      break;                    case Key.Down:                      // Move down from the current position' unless the item at the current position is                      // not already selected in which case select it.                      if (listBox.Items.CurrentPosition == listBox.SelectedIndex)                      {                          MoveListPosition(listBox' +1);                      }                      else                      {                          MoveListPosition(listBox' 0);                      }                      e.Handled = true;                      break;              }
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\research\architectureSmells\repos\picoe_Eto\src\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
