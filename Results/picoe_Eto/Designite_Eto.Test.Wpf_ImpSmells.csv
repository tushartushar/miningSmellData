Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Eto.Test.Wpf,Startup,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\Startup.cs,Main,The length of the statement  "			Style.Add<Eto.Wpf.Forms.FormHandler>(null' handler => TextOptions.SetTextFormattingMode(handler.Control' TextFormattingMode.Display)); " is 134.
Long Statement,Eto.Test.Wpf,Startup,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\Startup.cs,Main,The length of the statement  "			Style.Add<Eto.Wpf.Forms.DialogHandler>(null' handler => TextOptions.SetTextFormattingMode(handler.Control' TextFormattingMode.Display)); " is 136.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The length of the statement  "			Assert.AreEqual(new PointF(-1000 / pixelSize3' 10 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[1])); " is 132.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The length of the statement  "			Assert.AreEqual(new PointF(-500 / pixelSize2' 1010 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[2])); " is 133.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The length of the statement  "			helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' -1000' 1000' 1000)' LogicalPixelSize = pixelSize3 }); " is 121.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The length of the statement  "			helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 1000' 1000' 1000)' LogicalPixelSize = pixelSize3 }); " is 120.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Long Statement,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The length of the statement  "			helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 }); " is 131.
Magic Number,Eto.Test.Wpf.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\LabelTests.cs,LabelShouldNotConstantlyInvalidateMeasure,The following statement contains a magic number: ManualForm("Set screen resolution to 150% and ensure it doesn't constantly use CPU"' form =>  			{  				return new Panel  				{  					Content = new Scrollable  					{  						Border = BorderType.None'  						Content = new TableLayout  						{  							Spacing = new Size(5' 5)'  							Rows =  							{  							  new TableRow("A"' new Label { Text = "Increment:" })'  							  new TableRow("B"' new TextStepper { Width = 70 }' null)'  							  null  							}  						}  					}  				};  			});
Magic Number,Eto.Test.Wpf.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\LabelTests.cs,LabelShouldNotConstantlyInvalidateMeasure,The following statement contains a magic number: ManualForm("Set screen resolution to 150% and ensure it doesn't constantly use CPU"' form =>  			{  				return new Panel  				{  					Content = new Scrollable  					{  						Border = BorderType.None'  						Content = new TableLayout  						{  							Spacing = new Size(5' 5)'  							Rows =  							{  							  new TableRow("A"' new Label { Text = "Increment:" })'  							  new TableRow("B"' new TextStepper { Width = 70 }' null)'  							  null  							}  						}  					}  				};  			});
Magic Number,Eto.Test.Wpf.UnitTests,LabelTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\LabelTests.cs,LabelShouldNotConstantlyInvalidateMeasure,The following statement contains a magic number: ManualForm("Set screen resolution to 150% and ensure it doesn't constantly use CPU"' form =>  			{  				return new Panel  				{  					Content = new Scrollable  					{  						Border = BorderType.None'  						Content = new TableLayout  						{  							Spacing = new Size(5' 5)'  							Rows =  							{  							  new TableRow("A"' new Label { Text = "Increment:" })'  							  new TableRow("B"' new TextStepper { Width = 70 }' null)'  							  null  							}  						}  					}  				};  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(300' 300);  				nativeWindow.FormClosed += (sender' e) => ev.Set();  				var wpfhost = new swf.Integration.ElementHost();  				wpfhost.Dock = swf.DockStyle.Fill;    				nativeWindow.Controls.Add(wpfhost);    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = showDialog.ParentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				wpfhost.Child = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(300' 300);  				nativeWindow.FormClosed += (sender' e) => ev.Set();  				var wpfhost = new swf.Integration.ElementHost();  				wpfhost.Dock = swf.DockStyle.Fill;    				nativeWindow.Controls.Add(wpfhost);    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = showDialog.ParentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				wpfhost.Child = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(300' 300);  				nativeWindow.FormClosed += (sender' e) => ev.Set();  				var wpfhost = new swf.Integration.ElementHost();  				wpfhost.Dock = swf.DockStyle.Fill;    				nativeWindow.Controls.Add(wpfhost);    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = showDialog.ParentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				wpfhost.Child = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(300' 300);  				nativeWindow.FormClosed += (sender' e) => ev.Set();  				var wpfhost = new swf.Integration.ElementHost();  				wpfhost.Dock = swf.DockStyle.Fill;    				nativeWindow.Controls.Add(wpfhost);    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = showDialog.ParentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				wpfhost.Child = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWinForms,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new swf.Form();  				nativeWindow.MinimumSize = new System.Drawing.Size(300' 300);  				nativeWindow.FormClosed += (sender' e) => ev.Set();  				var wpfhost = new swf.Integration.ElementHost();  				wpfhost.Dock = swf.DockStyle.Fill;    				nativeWindow.Controls.Add(wpfhost);    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = showDialog.ParentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				wpfhost.Child = panel.ToNative(true);    				var parentWindow = panel.ParentWindow;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWpf,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new sw.Window();  				nativeWindow.SizeToContent = sw.SizeToContent.WidthAndHeight;  				nativeWindow.Closed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var wpfPanel = panel.ToNative(true);    				nativeWindow.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  				nativeWindow.VerticalContentAlignment = sw.VerticalAlignment.Stretch;  				nativeWindow.Content = wpfPanel;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWpf,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new sw.Window();  				nativeWindow.SizeToContent = sw.SizeToContent.WidthAndHeight;  				nativeWindow.Closed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var wpfPanel = panel.ToNative(true);    				nativeWindow.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  				nativeWindow.VerticalContentAlignment = sw.VerticalAlignment.Stretch;  				nativeWindow.Content = wpfPanel;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,NativeParentWindowTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\NativeParentWindowTests.cs,FormShouldAllowOwningToWpf,The following statement contains a magic number: Invoke(() =>  			{  				var nativeWindow = new sw.Window();  				nativeWindow.SizeToContent = sw.SizeToContent.WidthAndHeight;  				nativeWindow.Closed += (sender' e) => ev.Set();    				var showDialog = new Button { Text = "Show Owned Dialog" };  				showDialog.Click += (sender' e) =>  				{  					var parentWindow = showDialog.ParentWindow;  					if (parentWindow == null)  					{  						passed = false;  						nativeWindow.Close();  						return;  					}    					var form = new Form();    					var closeButton = new Button { Text = "Close" };  					closeButton.Click += (sender2' e2) => form.Close();    					form.Content = new StackLayout  					{  						Padding = 10'  						Spacing = 10'  						Items = {  							"This should show as a child to the parent' and should not be able to go behind it"'  							closeButton  						}  					};    					form.Owner = parentWindow;  					form.Show();  				};    				var passButton = new Button { Text = "Pass" };  				passButton.Click += (sender' e) =>  				{  					passed = true;  					nativeWindow.Close();  					ev.Set();  				};  				var failButton = new Button { Text = "Fail" };  				failButton.Click += (sender' e) =>  				{  					passed = false;  					nativeWindow.Close();  					ev.Set();  				};    				var panel = new StackLayout  				{  					Items = {  						new Panel { Padding = 20' Content = showDialog }'  						TableLayout.Horizontal(failButton' passButton)  					}  				};    				var wpfPanel = panel.ToNative(true);    				nativeWindow.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  				nativeWindow.VerticalContentAlignment = sw.VerticalAlignment.Stretch;  				nativeWindow.Content = wpfPanel;    				nativeWindow.Show();  			});
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ThreeMonitorSource,The following statement contains a magic number: z < 4
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ThreeMonitorSource,The following statement contains a magic number: x < 4
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,TwoMonitorSource,The following statement contains a magic number: x < 4
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 10' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 10' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 10' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 10' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1010' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1010' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1010' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1010' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: Assert.AreEqual(new PointF(-1000 / pixelSize3' 10 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: Assert.AreEqual(new PointF(-1000 / pixelSize3' 10 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: Assert.AreEqual(new PointF(-500 / pixelSize2' 1010 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: Assert.AreEqual(new PointF(-500 / pixelSize2' 1010 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect1,The following statement contains a magic number: Assert.AreEqual(new PointF(-500 / pixelSize2' 1010 / helper.GetMaxLogicalPixelSize())' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-500' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: Assert.AreEqual(new PointF(-500 / pixelSize2' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: Assert.AreEqual(new PointF(-500 / pixelSize2' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: Assert.AreEqual(new PointF(-1000 / pixelSize3' 0)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect2,The following statement contains a magic number: Assert.AreEqual(new PointF(-1000 / pixelSize3' 0)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' -500' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' -500' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' -500' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' -1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' -1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' -1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' -1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: Assert.AreEqual(new PointF(0' -500 / pixelSize2)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' -1000 / pixelSize3)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' -1000 / pixelSize3)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect3,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' -1000 / pixelSize3)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(0' 1000' 500' 500)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 1000' 1000' 1000)' LogicalPixelSize = pixelSize3 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: Assert.AreEqual(new PointF(0' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect4,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' 1000 / pixelSize1)' helper.GetLogicalLocation(helper.Screens[2]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect5,The following statement contains a magic number: Assert.AreEqual(new PointF(1000 / pixelSize1' 0)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: helper.Screens.Add(helper.Primary = new TestScreen { Bounds = new sd.Rectangle(0' 0' 1000' 1000)' LogicalPixelSize = pixelSize1 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: helper.Screens.Add(new TestScreen { Bounds = new sd.Rectangle(-1000' 0' 1000' 1000)' LogicalPixelSize = pixelSize2 });
Magic Number,Eto.Test.Wpf.UnitTests,ScreenTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScreenTests.cs,ScreenLocationsShouldBeCorrect6,The following statement contains a magic number: Assert.AreEqual(new PointF(-1000 / pixelSize2' 0)' helper.GetLogicalLocation(helper.Screens[1]));
Magic Number,Eto.Test.Wpf.UnitTests,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScrollableTests.cs,ScrollableShouldSetScrollSize,The following statement contains a magic number: Invoke(() =>              {                  var form = new Form();                    var scrollable = new Scrollable();                  form.Content = scrollable;                    scrollable.ScrollSize = new Size(1000' 1000);              });
Magic Number,Eto.Test.Wpf.UnitTests,ScrollableTests,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\ScrollableTests.cs,ScrollableShouldSetScrollSize,The following statement contains a magic number: Invoke(() =>              {                  var form = new Form();                    var scrollable = new Scrollable();                  form.Content = scrollable;                    scrollable.ScrollSize = new Size(1000' 1000);              });
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: target.TranslateTransform(5f' 5f);
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: target.TranslateTransform(5f' 5f);
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 5f' 5f));
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 5f' 5f));
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: target.TranslateTransform(10f' 10f);
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: target.TranslateTransform(10f' 10f);
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 15f' 15f));
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 15f' 15f));
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 5f' 5f));
Magic Number,Eto.Test.Wpf.UnitTests,TransformStackTest,C:\research\architectureSmells\repos\picoe_Eto\test\Eto.Test.Wpf\UnitTests\TransformStackTest.cs,TransformStack_TranlateSaveRestore_Verify,The following statement contains a magic number: Assert.IsTrue(MatrixTests.Equals(current' 1f' 0f' 0f' 1f' 5f' 5f));
