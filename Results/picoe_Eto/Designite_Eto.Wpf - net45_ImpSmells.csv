Implementation smell,Namespace,Class,File,Method,Description
Long Method,Eto.Wpf.Forms.Controls,TextBoxHandler<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\TextBoxHandler.cs,AttachEvent,The method has 100 lines of code.
Long Method,Eto.Wpf.Forms.Controls,TreeViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\TreeViewHandler.cs,AttachEvent,The method has 102 lines of code.
Long Method,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,AttachEvent,The method has 129 lines of code.
Long Method,Eto.Wpf,KeyMap,C:\repos\picoe_Eto\Source\Eto.Wpf\KeyMap.cs,GetKeyMap,The method has 105 lines of code.
Long Method,Eto.Wpf,Platform,C:\repos\picoe_Eto\Source\Eto.Wpf\Platform.cs,AddTo,The method has 125 lines of code.
Complex Method,Eto.CustomControls,TreeController,C:\repos\picoe_Eto\Source\Eto.WinForms\CustomControls\TreeController.cs,GetItemAtRow,Cyclomatic complexity of the method is 8
Complex Method,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddPath,Cyclomatic complexity of the method is 9
Complex Method,Eto.Wpf.Forms.Controls,DrawableHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DrawableHandler.cs,UpdateTiles,Cyclomatic complexity of the method is 12
Complex Method,Eto.Wpf.CustomControls.FontDialog,TypefaceListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\typefacelistitem.cs,CompareTo,Cyclomatic complexity of the method is 10
Long Parameter List,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The method has 6 parameters. Parameters: point0' point1' point2' point3' tension' numberOfPoints
Long Parameter List,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,PeekMessage,The method has 5 parameters. Parameters: wMsg' hwnd' msgMin' msgMax' remove
Long Parameter List,Eto.Wpf.Drawing,RadialGradientBrushHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\RadialGradientBrushHandler.cs,Create,The method has 5 parameters. Parameters: startColor' endColor' center' gradientOrigin' radius
Long Parameter List,Eto.Wpf.Drawing,BitmapDataHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,BitmapDataHandler,The method has 5 parameters. Parameters: image' data' scanWidth' bitsPerPixel' controlObject
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,GraphicsHandler,The method has 5 parameters. Parameters: visual' context' bounds' initialClip' shouldDispose
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawRectangle,The method has 5 parameters. Parameters: pen' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawLine,The method has 5 parameters. Parameters: pen' startx' starty' endx' endy
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillRectangle,The method has 5 parameters. Parameters: brush' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The method has 5 parameters. Parameters: pen' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The method has 5 parameters. Parameters: brush' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawArc,The method has 7 parameters. Parameters: pen' x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillPie,The method has 7 parameters. Parameters: brush' x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The method has 5 parameters. Parameters: image' x' y' width' height
Long Parameter List,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawText,The method has 5 parameters. Parameters: font' b' x' y' text
Long Parameter List,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The method has 6 parameters. Parameters: x' y' width' height' startAngle' sweepAngle
Long Parameter List,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,Resize,The method has 5 parameters. Parameters: image' scale' width' height' scalingMode
Long Parameter List,Eto.Wpf.Drawing,MatrixHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\MatrixHandler.cs,Create,The method has 6 parameters. Parameters: xx' yx' xy' yy' dx' dy
Long Parameter List,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,WebBrowserV1_NewWindow,The method has 6 parameters. Parameters: URL' Flags' TargetFrameName' PostData' Headers' Processed
Long Parameter List,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,FormatCell,The method has 5 parameters. Parameters: column' cell' element' gridcell' dataItem
Long Parameter List,Eto.Wpf.Forms.Controls,FormatEventArgs,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,FormatEventArgs,The method has 5 parameters. Parameters: column' gridcell' item' row' element
Long Parameter List,Eto.Wpf.Forms.Controls,IGridHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridColumnHandler.cs,FormatCell,The method has 5 parameters. Parameters: column' cell' element' gridcell' dataItem
Long Parameter List,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,WebEvents_NewWindow,The method has 6 parameters. Parameters: url' flags' targetFrameName' postData' headers' processed
Long Parameter List,Eto.Wpf.Forms.Cells,DataGridProgressBarColumn,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\ProgressCellHandler.cs,SetValue,The method has 5 parameters. Parameters: cell' grid' bar' text' dataItem
Long Parameter List,Eto.Wpf.Forms,PerMonitorDpiHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\PerMonitorDpiHelper.cs,HwndHook,The method has 5 parameters. Parameters: hwnd' message' wparam' lparam' handled
Long Parameter List,Eto.Wpf.IO,Shell32,C:\repos\picoe_Eto\Source\Eto.WinForms\IO\ShellIcon.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,BaseBitmapData,The method has 5 parameters. Parameters: image' data' scanWidth' bitsPerPixel' controlObject
Long Identifier,Eto.Wpf.Forms.Cells,CellProperties,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CellHandler.cs,,The length of the parameter ControlEditInitializedProperty is 30.
Long Identifier,Eto.Wpf.Forms,EnableThemingInScope,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\EnableThemingInScope.cs,,The length of the parameter enableThemingActivationContext is 30.
Long Identifier,Eto.Wpf.Forms,EnableThemingInScope,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\EnableThemingInScope.cs,,The length of the parameter ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID is 36.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter _fontFamilyTextBoxSelectionStart is 32.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter DiscretionaryLigaturesProperty is 30.
Long Identifier,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,,The length of the parameter SelectedTextDecorationsProperty is 31.
Long Statement,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,Clone,The length of the statement  "				var target = new swmi.WriteableBitmap(rect.Width' rect.Height' Control.DpiX' Control.DpiY' Control.Format' Control.Palette); " is 124.
Long Statement,Eto.Wpf.Drawing,FontHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontHandler.cs,MeasureString,The length of the statement  "			var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' WpfTypeface' PixelSize' measureBrush); " is 146.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawText,The length of the statement  "				var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' fontHandler.WpfTypeface' fontHandler.PixelSize' brush); " is 163.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,MeasureString,The length of the statement  "				var formattedText = new swm.FormattedText(text' CultureInfo.CurrentUICulture' sw.FlowDirection.LeftToRight' fontHandler.WpfTypeface' fontHandler.PixelSize' brush); " is 163.
Long Statement,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,Close,The length of the statement  "				var newbmp = new swmi.RenderTargetBitmap(bmp.PixelWidth' bmp.PixelHeight' bmp.DpiX' bmp.DpiY' swm.PixelFormats.Pbgra32); " is 120.
Long Statement,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The length of the statement  "			figure.Segments.Add (new swm.ArcSegment (new sw.Point (xe' ye)' new sw.Size (dx' dy)' 0' isLargeArc' sweepDirection' true)); " is 124.
Long Statement,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The length of the statement  "			var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride); " is 143.
Long Statement,Eto.Wpf.Drawing,LinearGradientBrushHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\LinearGradientBrushHandler.cs,Create,The length of the statement  "			return new FrozenBrushWrapper(new swm.LinearGradientBrush(startColor.ToWpf()' endColor.ToWpf()' startPoint.ToWpf()' endPoint.ToWpf()) " is 133.
Long Statement,Eto.Wpf.Drawing,TransformStack,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\TransformStack.cs,RestoreTransform,The length of the statement  "				throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "RestoreTransform called without SaveTransform")); " is 128.
Long Statement,Eto.Wpf.Forms.Controls,TextStepperHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\TextStepperHandler.cs,AttachEvent,The length of the statement  "					Control.Spin += (sender' e) => Callback.OnStep(Widget' new StepperEventArgs(e.Direction == Xceed.Wpf.Toolkit.SpinDirection.Increase ? StepperDirection.Up : StepperDirection.Down)); " is 180.
Long Statement,Eto.Wpf.Forms.Controls,StepperHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\StepperHandler.cs,AttachEvent,The length of the statement  "					Control.Spin += (sender' e) => Callback.OnStep(Widget' new StepperEventArgs(e.Direction == Xceed.Wpf.Toolkit.SpinDirection.Increase ? StepperDirection.Up : StepperDirection.Down)); " is 180.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetBold,The length of the statement  "			SetRange(range' tr => tr.ApplyPropertyValue(swd.TextElement.FontWeightProperty' bold ? sw.FontWeights.Bold : sw.FontWeights.Normal)); " is 133.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,HasDecorations,The length of the statement  "			var existingDecorations = range.GetRealPropertyValue(swd.Inline.TextDecorationsProperty' out realRange) as sw.TextDecorationCollection; " is 135.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "						existingDecorations = new sw.TextDecorationCollection(existingDecorations); // copy so we don't update existing elements " is 120.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "							new swd.TextRange(elementRange.Start' range.Start).ApplyPropertyValue(swd.Inline.TextDecorationsProperty' existingDecorations); " is 127.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetDecorations,The length of the statement  "							new swd.TextRange(range.End' elementRange.End).ApplyPropertyValue(swd.Inline.TextDecorationsProperty' existingDecorations); " is 123.
Long Statement,Eto.Wpf.Forms.Controls,RichTextAreaHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,SetItalic,The length of the statement  "			SetRange(range' tr => tr.ApplyPropertyValue(swd.TextElement.FontStyleProperty' italic ? sw.FontStyles.Italic : sw.FontStyles.Normal)); " is 134.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,AttachEvent,The length of the statement  "					Control.MouseDoubleClick += (sender' e) => Callback.OnCellDoubleClick(Widget' CreateCellMouseArgs(e.OriginalSource' e)); " is 120.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,Initialize,The length of the statement  "			Control.InputBindings.Add(new swi.KeyBinding(swi.ApplicationCommands.NotACommand' swi.Key.C' swi.ModifierKeys.Control)); " is 120.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,Initialize,The length of the statement  "			Control.InputBindings.Add(new swi.KeyBinding(swi.ApplicationCommands.NotACommand' swi.Key.Delete' swi.ModifierKeys.None)); " is 122.
Long Statement,Eto.Wpf.Forms.Controls,GridHandler<TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\GridHandler.cs,RestoreColumnFocus,The length of the statement  "				Control.CurrentCell = new swc.DataGridCellInfo(Control.SelectedItem' CurrentColumn ?? Control.CurrentColumn ?? Control.Columns[0]); " is 131.
Long Statement,Eto.Wpf.Forms.Controls,DrawableHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DrawableHandler.cs,SetMaxTiles,The length of the statement  "			maxTiles = new Size(((int)Control.ActualWidth + tileSize.Width - 1) / tileSize.Width' ((int)Control.ActualHeight + tileSize.Height - 1) / tileSize.Height); " is 155.
Long Statement,Eto.Wpf.Forms.Controls,EtoTile,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DrawableHandler.cs,OnRender,The length of the statement  "				var graphics = new Graphics(new GraphicsHandler(this' drawingContext' bounds.ToWpf()' new RectangleF(Handler.ClientSize)' false)); " is 130.
Long Statement,Eto.Wpf.Forms.Controls,EtoDoubleUpDown,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\NumericStepperHandler.cs,ConvertTextToValue,The length of the statement  "				trimmedText = Regex.Replace(trimmedText' $@"(?!\d|{Regex.Escape(h.CultureInfo.NumberFormat.NumberDecimalSeparator)}|{Regex.Escape(h.CultureInfo.NumberFormat.NegativeSign)})."' ""); // strip any non-numeric value " is 211.
Long Statement,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,AttachEvent,The length of the statement  "					var heightDescriptor = DependencyPropertyDescriptor.FromProperty(swc.RowDefinition.HeightProperty' typeof(swc.ItemsControl)); " is 125.
Long Statement,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,AttachEvent,The length of the statement  "					var widthDescriptor = DependencyPropertyDescriptor.FromProperty(swc.ColumnDefinition.WidthProperty' typeof(swc.ItemsControl)); " is 126.
Long Statement,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,EditableBlock,The length of the statement  "			var binding = new sw.Data.Binding { Path = new sw.PropertyPath("Text")' RelativeSource = relativeSource' Mode = swd.BindingMode.TwoWay' UpdateSourceTrigger = swd.UpdateSourceTrigger.LostFocus }; " is 194.
Long Statement,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Initialize,The length of the statement  "					control.DataContextChanged += (sender' e) => SetValue(control.GetParent<swc.DataGridCell>()' (swc.ComboBox)sender' e.NewValue); " is 127.
Long Statement,Eto.Wpf.Forms.Cells,EtoCanvas,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\DrawableCellHandler.cs,OnRender,The length of the statement  "				var graphics = new Graphics(new GraphicsHandler(this' dc' new sw.Rect(RenderSize)' new RectangleF(RenderSize.ToEto())' false)); " is 127.
Long Statement,Eto.Wpf.Forms,VistaSelectFolderDialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\VistaSelectFolderDialogHandler.cs,ShowDialog,The length of the statement  "			// use reflection since adding a parameter requires us to reference PresentationFramework which we don't want in winforms " is 121.
Long Statement,Eto.Wpf.Forms,ApplicationHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ApplicationHandler.cs,ApplyThemes,The length of the statement  "			Control.Resources.MergedDictionaries.Add(new sw.ResourceDictionary { Source = new Uri($"pack://application:'''/{assemblyName};component/themes/wpftoolkit/ButtonSpinner.xaml"' UriKind.RelativeOrAbsolute) }); " is 206.
Long Statement,Eto.Wpf.Forms,FontDialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\FontDialogHandler.cs,ShowDialog,The length of the statement  "				var fontHandler = new FontHandler(Control.SelectedFontFamily' Control.SelectedFontPointSize' Control.SelectedFontStyle' Control.SelectedFontWeight); " is 148.
Long Statement,Eto.Wpf.Forms,TableLayoutHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\TableLayoutHandler.cs,SetChildrenSizes,The length of the statement  "						childControl.ParentMinimumSize = new sw.Size(Math.Max(0' maxx - margin.Horizontal())' Math.Max(0' maxy - margin.Vertical())); " is 125.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "			// for example' when a TextBox has a large amount of text' we do not grow the text box to fit that content in Eto's sizing model. " is 129.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "				ContainerControl.MinWidth = Math.Max(0' double.IsNaN(UserPreferredSize.Width) ? defaultSize.Width : UserPreferredSize.Width); " is 125.
Long Statement,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,SetSize,The length of the statement  "				ContainerControl.MinHeight = Math.Max(0' double.IsNaN(UserPreferredSize.Height) ? defaultSize.Height : UserPreferredSize.Height); " is 129.
Long Statement,Eto.Wpf.Forms,WpfWindow<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfWindow.cs,Initialize,The length of the statement  "				foreach (var binding in Control.InputBindings.Cast<swi.InputBinding>().Select(r => r.Command).OfType<IWpfValidateBinding>()) " is 124.
Long Statement,Eto.Wpf.Forms,WpfWindow<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfWindow.cs,AttachEvent,The length of the statement  "						var method = typeof(WpfWindow<TControl' TWidget' TCallback>).GetMethod(nameof(HandleLogicalPixelSizeChanged)' BindingFlags.Instance | BindingFlags.NonPublic); " is 158.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,ToWpf,The length of the statement  "			return swm.Color.FromArgb((byte)(value.A * byte.MaxValue)' (byte)(value.R * byte.MaxValue)' (byte)(value.G * byte.MaxValue)' (byte)(value.B * byte.MaxValue)); " is 158.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,ToEtoSize,The length of the statement  "			return new Size((int)(double.IsNaN(value.Width) ? -1 : value.Width)' (int)(double.IsNaN(value.Height) ? -1 : value.Height)); " is 124.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,GetSize,The length of the statement  "			return new Size((int)(double.IsNaN(element.Width) ? -1 : Math.Round(element.Width))' (int)(double.IsNaN(element.Height) ? -1 : Math.Round(element.Height))); " is 156.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontFamilyProperty' swc.Control.FontFamilyProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontStyleProperty' swc.Control.FontStyleProperty.DefaultMetadata.DefaultValue); " is 122.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontWeightProperty' swc.Control.FontWeightProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,SetEtoFont,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontSizeProperty' swc.Control.FontSizeProperty.DefaultMetadata.DefaultValue); " is 120.
Long Statement,Eto.Wpf,WpfConversions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfConversions.cs,SetEtoFamily,The length of the statement  "				control.ApplyPropertyValue(swd.TextElement.FontFamilyProperty' swc.Control.FontFamilyProperty.DefaultMetadata.DefaultValue); " is 124.
Long Statement,Eto.Wpf,WpfExtensions,C:\repos\picoe_Eto\Source\Eto.Wpf\WpfExtensions.cs,RenderWithCollect,The length of the statement  "			// fix memory leak with RenderTargetBitmap.  See http://stackoverflow.com/questions/14786490/wpf-memory-leak-using-rendertargetbitmap " is 133.
Long Statement,Eto.Wpf.CustomControls,GlassHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\GlassHelper.cs,ExtendGlassFrame,The length of the statement  "					throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "The Window must be shown before extending glass.")); " is 131.
Long Statement,Eto.Wpf.CustomControls,MultiSizeImage,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The length of the statement  "			if ((stretch == Stretch.Uniform || stretch == Stretch.UniformToFill || stretch == Stretch.Fill) && (widthSet || heightSet)) " is 123.
Long Statement,Eto.Wpf.CustomControls,OverlayIcon,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\OverlayIcon.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Eto.Wpf;component/customcontrols/overlayicon.xaml"' System.UriKind.Relative); " is 123.
Long Statement,Eto.Wpf.CustomControls,SelectableTreeView,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\SelectableTreeView.cs,OnCurrentItemChanged,The length of the statement  "			treeView.OnCurrentItemChanged (new RoutedPropertyChangedEventArgs<object>(args.OldValue' newValue' CurrentItemChangedEvent)); " is 125.
Long Statement,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Eto.Wpf;component/customcontrols/fontdialog/fontchooser.xaml"' System.UriKind.Relative); " is 134.
Long Statement,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,GetPixel,The length of the statement  "			throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by GetPixel. Must be 24 or 32 bits per pixel' or 8 bit indexed")); " is 175.
Long Statement,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,SetPixel,The length of the statement  "				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel")); " is 156.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\picoe_Eto\BuildOutput\obj\Eto.Wpf - net45\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The conditional expression  "(ImageInterpolation == ImageInterpolation.High || ImageInterpolation == ImageInterpolation.Default)                  && (width != size.Width || height != size.Height)"  is complex.
Complex Conditional,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,GetImageClosestToSize,The conditional expression  "(wpfBitmap.Width == size.Width && wpfBitmap.Height == size.Height)  				|| size.Height == 0  				|| size.Width == 0"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,FlowDocumentExtensions,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\RichTextAreaHandler.cs,GetRealPropertyValue,The conditional expression  "needsContinue && (element is swd.Inline || element is swd.Paragraph || element is swc.TextBlock)"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,DateTimePickerHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DateTimePickerHandler.cs,UpDown_ValueChanged,The conditional expression  "last != val && (last == null || val == null || Math.Abs((last.Value - val.Value).TotalSeconds) >= 1)"  is complex.
Complex Conditional,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,HandlePanelVisibleChanged,The conditional expression  "(panel1 != null && panel1.Visible) || (panel2 != null && panel2.Visible)"  is complex.
Complex Conditional,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,HandleMouseDown,The conditional expression  "WpfFrameworkElementHelper.ShouldCaptureMouse  				&& (  					// capture mouse automatically so mouse moves outside control are captured until released  					// but only if the control that was clicked is this control  					(!UseMousePreview && (e.OriginalSource == ContainerControl || e.OriginalSource == Control))  					|| e.Handled  				)"  is complex.
Complex Conditional,Eto.Wpf.CustomControls,MultiSizeImage,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The conditional expression  "(stretch == Stretch.Uniform || stretch == Stretch.UniformToFill || stretch == Stretch.Fill) && (widthSet || heightSet)"  is complex.
Empty Catch Block,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The method has an empty catch block.
Empty Catch Block,Eto.Wpf.CustomControls.FontDialog,NameDictionaryHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\namedictionaryhelper.cs,GetRelatedness,The method has an empty catch block.
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,The following statement contains a magic number: if (pointList.Count == 2) {  				pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[1]' tension);  				if (pts != null) {  					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			} else {  				for (int i = 0; i < pointList.Count - 1; i++) {  					if (i == 0)  						pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[2]' tension);  					else if (i == pointList.Count - 2)  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 1]' tension);  					else  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 2]' tension);    					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			}
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,The following statement contains a magic number: if (pointList.Count == 2) {  				pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[1]' tension);  				if (pts != null) {  					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			} else {  				for (int i = 0; i < pointList.Count - 1; i++) {  					if (i == 0)  						pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[2]' tension);  					else if (i == pointList.Count - 2)  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 1]' tension);  					else  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 2]' tension);    					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			}
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,The following statement contains a magic number: if (pointList.Count == 2) {  				pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[1]' tension);  				if (pts != null) {  					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			} else {  				for (int i = 0; i < pointList.Count - 1; i++) {  					if (i == 0)  						pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[2]' tension);  					else if (i == pointList.Count - 2)  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 1]' tension);  					else  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 2]' tension);    					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			}
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,SplineCurve,The following statement contains a magic number: if (pointList.Count == 2) {  				pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[1]' tension);  				if (pts != null) {  					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			} else {  				for (int i = 0; i < pointList.Count - 1; i++) {  					if (i == 0)  						pts = CalculateSplineCurve (pointList[0]' pointList[0]' pointList[1]' pointList[2]' tension);  					else if (i == pointList.Count - 2)  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 1]' tension);  					else  						pts = CalculateSplineCurve (pointList[i - 1]' pointList[i]' pointList[i + 1]' pointList[i + 2]' tension);    					for (int j = 0; j < pts.Length; j++)  						yield return pts[j];  				}  			}
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AX = SX1 + SX2 + 2 * point1.X - 2 * point2.X;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AX = SX1 + SX2 + 2 * point1.X - 2 * point2.X;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AY = SY1 + SY2 + 2 * point1.Y - 2 * point2.Y;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float AY = SY1 + SY2 + 2 * point1.Y - 2 * point2.Y;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BX = -2 * SX1 - SX2 - 3 * point1.X + 3 * point2.X;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,SplineHelper,C:\repos\picoe_Eto\Source\Eto.Mac\Drawing\SplineHelper.cs,CalculateSplineCurve,The following statement contains a magic number: float BY = -2 * SY1 - SY2 - 3 * point1.Y + 3 * point2.Y;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,SignedHIWORD,The following statement contains a magic number: return (short)((n >> 16) & 0xFFFF);
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ScreenToLogical,The following statement contains a magic number: var screen = swf.Screen.FromPoint(new sd.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2));
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ScreenToLogical,The following statement contains a magic number: var screen = swf.Screen.FromPoint(new sd.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2));
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var header = new byte[40];
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var width = BitConverter.ToInt32(header' 4);
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var height = BitConverter.ToInt32(header' 8);
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var bpp = BitConverter.ToInt16(header' 14);
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: var compression = BitConverter.ToInt32(header' 16);
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: if (bpp != 32)  				return null;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: if (compression == 3) // BI_BITFIELDS  			{  				// three dwords' each specifies the bits each RGB components takes  				// we require each takes one byte  				var segments = new byte[sizeof(int) * 3];  				ms.Read(segments' 0' segments.Length);  				var rcomp = BitConverter.ToInt32(segments' 0);  				var gcomp = BitConverter.ToInt32(segments' 4);  				var bcomp = BitConverter.ToInt32(segments' 8);  				if (rcomp != 0xFF0000 || gcomp != 0xFF00 || bcomp != 0xFF)  					return null;  			}  			else if (compression != 0) // BI_RGB  				return null;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: if (compression == 3) // BI_BITFIELDS  			{  				// three dwords' each specifies the bits each RGB components takes  				// we require each takes one byte  				var segments = new byte[sizeof(int) * 3];  				ms.Read(segments' 0' segments.Length);  				var rcomp = BitConverter.ToInt32(segments' 0);  				var gcomp = BitConverter.ToInt32(segments' 4);  				var bcomp = BitConverter.ToInt32(segments' 8);  				if (rcomp != 0xFF0000 || gcomp != 0xFF00 || bcomp != 0xFF)  					return null;  			}  			else if (compression != 0) // BI_RGB  				return null;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: if (compression == 3) // BI_BITFIELDS  			{  				// three dwords' each specifies the bits each RGB components takes  				// we require each takes one byte  				var segments = new byte[sizeof(int) * 3];  				ms.Read(segments' 0' segments.Length);  				var rcomp = BitConverter.ToInt32(segments' 0);  				var gcomp = BitConverter.ToInt32(segments' 4);  				var bcomp = BitConverter.ToInt32(segments' 8);  				if (rcomp != 0xFF0000 || gcomp != 0xFF00 || bcomp != 0xFF)  					return null;  			}  			else if (compression != 0) // BI_RGB  				return null;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,FromDIB,The following statement contains a magic number: if (compression == 3) // BI_BITFIELDS  			{  				// three dwords' each specifies the bits each RGB components takes  				// we require each takes one byte  				var segments = new byte[sizeof(int) * 3];  				ms.Read(segments' 0' segments.Length);  				var rcomp = BitConverter.ToInt32(segments' 0);  				var gcomp = BitConverter.ToInt32(segments' 4);  				var bcomp = BitConverter.ToInt32(segments' 8);  				if (rcomp != 0xFF0000 || gcomp != 0xFF00 || bcomp != 0xFF)  					return null;  			}  			else if (compression != 0) // BI_RGB  				return null;
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: using (var bd = bitmap.Lock())  			{  				if (bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3) // only 32bpp or 24bpp supported  				{  					var ms = new MemoryStream(bitmap.Width * bitmap.Height * bd.BytesPerPixel + 40);  					// write BITMAPINFOHEADER  					const float InchesPerMeter = 39.37f;  					var pelsPerMeter = Math.Round(dpi * InchesPerMeter); // convert dpi to ppm  					Write(ms' BitConverter.GetBytes((uint)40));  // biSize  					Write(ms' BitConverter.GetBytes((uint)bitmap.Width)); // biWidth  					Write(ms' BitConverter.GetBytes((uint)bitmap.Height));// biHeight  					Write(ms' BitConverter.GetBytes((ushort)1));  // biPlanes  					Write(ms' BitConverter.GetBytes((ushort)bd.BitsPerPixel)); // biBitCount  					Write(ms' BitConverter.GetBytes((uint)0));    //  biCompression (BI_RGB' uncompressed)  					Write(ms' BitConverter.GetBytes((uint)0));    //  biSizeImage  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biXPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biYPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrUsed  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrImportant    					var hasAlpha = bd.BytesPerPixel == 4;  					// write RGB data' dibs are flipped vertically  					for (int y = bitmap.Height - 1; y >= 0; y--)  					{  						for (int x = 0; x < bitmap.Width; x++)  						{  							var p = bd.GetPixel(x' y);  							// need to write RGB premultiplied by alpha (and round up)  							ms.WriteByte((byte)(p.B * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.G * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.R * p.A * 255f + .5f));  							if (hasAlpha)  								ms.WriteByte((byte)p.Ab);  						}  					}    					ms.Position = 0;  					return ms;  				}  			}
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: using (var bd = bitmap.Lock())  			{  				if (bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3) // only 32bpp or 24bpp supported  				{  					var ms = new MemoryStream(bitmap.Width * bitmap.Height * bd.BytesPerPixel + 40);  					// write BITMAPINFOHEADER  					const float InchesPerMeter = 39.37f;  					var pelsPerMeter = Math.Round(dpi * InchesPerMeter); // convert dpi to ppm  					Write(ms' BitConverter.GetBytes((uint)40));  // biSize  					Write(ms' BitConverter.GetBytes((uint)bitmap.Width)); // biWidth  					Write(ms' BitConverter.GetBytes((uint)bitmap.Height));// biHeight  					Write(ms' BitConverter.GetBytes((ushort)1));  // biPlanes  					Write(ms' BitConverter.GetBytes((ushort)bd.BitsPerPixel)); // biBitCount  					Write(ms' BitConverter.GetBytes((uint)0));    //  biCompression (BI_RGB' uncompressed)  					Write(ms' BitConverter.GetBytes((uint)0));    //  biSizeImage  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biXPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biYPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrUsed  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrImportant    					var hasAlpha = bd.BytesPerPixel == 4;  					// write RGB data' dibs are flipped vertically  					for (int y = bitmap.Height - 1; y >= 0; y--)  					{  						for (int x = 0; x < bitmap.Width; x++)  						{  							var p = bd.GetPixel(x' y);  							// need to write RGB premultiplied by alpha (and round up)  							ms.WriteByte((byte)(p.B * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.G * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.R * p.A * 255f + .5f));  							if (hasAlpha)  								ms.WriteByte((byte)p.Ab);  						}  					}    					ms.Position = 0;  					return ms;  				}  			}
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: using (var bd = bitmap.Lock())  			{  				if (bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3) // only 32bpp or 24bpp supported  				{  					var ms = new MemoryStream(bitmap.Width * bitmap.Height * bd.BytesPerPixel + 40);  					// write BITMAPINFOHEADER  					const float InchesPerMeter = 39.37f;  					var pelsPerMeter = Math.Round(dpi * InchesPerMeter); // convert dpi to ppm  					Write(ms' BitConverter.GetBytes((uint)40));  // biSize  					Write(ms' BitConverter.GetBytes((uint)bitmap.Width)); // biWidth  					Write(ms' BitConverter.GetBytes((uint)bitmap.Height));// biHeight  					Write(ms' BitConverter.GetBytes((ushort)1));  // biPlanes  					Write(ms' BitConverter.GetBytes((ushort)bd.BitsPerPixel)); // biBitCount  					Write(ms' BitConverter.GetBytes((uint)0));    //  biCompression (BI_RGB' uncompressed)  					Write(ms' BitConverter.GetBytes((uint)0));    //  biSizeImage  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biXPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biYPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrUsed  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrImportant    					var hasAlpha = bd.BytesPerPixel == 4;  					// write RGB data' dibs are flipped vertically  					for (int y = bitmap.Height - 1; y >= 0; y--)  					{  						for (int x = 0; x < bitmap.Width; x++)  						{  							var p = bd.GetPixel(x' y);  							// need to write RGB premultiplied by alpha (and round up)  							ms.WriteByte((byte)(p.B * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.G * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.R * p.A * 255f + .5f));  							if (hasAlpha)  								ms.WriteByte((byte)p.Ab);  						}  					}    					ms.Position = 0;  					return ms;  				}  			}
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: using (var bd = bitmap.Lock())  			{  				if (bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3) // only 32bpp or 24bpp supported  				{  					var ms = new MemoryStream(bitmap.Width * bitmap.Height * bd.BytesPerPixel + 40);  					// write BITMAPINFOHEADER  					const float InchesPerMeter = 39.37f;  					var pelsPerMeter = Math.Round(dpi * InchesPerMeter); // convert dpi to ppm  					Write(ms' BitConverter.GetBytes((uint)40));  // biSize  					Write(ms' BitConverter.GetBytes((uint)bitmap.Width)); // biWidth  					Write(ms' BitConverter.GetBytes((uint)bitmap.Height));// biHeight  					Write(ms' BitConverter.GetBytes((ushort)1));  // biPlanes  					Write(ms' BitConverter.GetBytes((ushort)bd.BitsPerPixel)); // biBitCount  					Write(ms' BitConverter.GetBytes((uint)0));    //  biCompression (BI_RGB' uncompressed)  					Write(ms' BitConverter.GetBytes((uint)0));    //  biSizeImage  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biXPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biYPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrUsed  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrImportant    					var hasAlpha = bd.BytesPerPixel == 4;  					// write RGB data' dibs are flipped vertically  					for (int y = bitmap.Height - 1; y >= 0; y--)  					{  						for (int x = 0; x < bitmap.Width; x++)  						{  							var p = bd.GetPixel(x' y);  							// need to write RGB premultiplied by alpha (and round up)  							ms.WriteByte((byte)(p.B * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.G * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.R * p.A * 255f + .5f));  							if (hasAlpha)  								ms.WriteByte((byte)p.Ab);  						}  					}    					ms.Position = 0;  					return ms;  				}  			}
Magic Number,Eto,Win32,C:\repos\picoe_Eto\Source\Eto.WinForms\Win32.cs,ToDIB,The following statement contains a magic number: using (var bd = bitmap.Lock())  			{  				if (bd.BytesPerPixel == 4 || bd.BytesPerPixel == 3) // only 32bpp or 24bpp supported  				{  					var ms = new MemoryStream(bitmap.Width * bitmap.Height * bd.BytesPerPixel + 40);  					// write BITMAPINFOHEADER  					const float InchesPerMeter = 39.37f;  					var pelsPerMeter = Math.Round(dpi * InchesPerMeter); // convert dpi to ppm  					Write(ms' BitConverter.GetBytes((uint)40));  // biSize  					Write(ms' BitConverter.GetBytes((uint)bitmap.Width)); // biWidth  					Write(ms' BitConverter.GetBytes((uint)bitmap.Height));// biHeight  					Write(ms' BitConverter.GetBytes((ushort)1));  // biPlanes  					Write(ms' BitConverter.GetBytes((ushort)bd.BitsPerPixel)); // biBitCount  					Write(ms' BitConverter.GetBytes((uint)0));    //  biCompression (BI_RGB' uncompressed)  					Write(ms' BitConverter.GetBytes((uint)0));    //  biSizeImage  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biXPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)pelsPerMeter)); //  biYPelsPerMeter  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrUsed  					Write(ms' BitConverter.GetBytes((uint)0));    //  biClrImportant    					var hasAlpha = bd.BytesPerPixel == 4;  					// write RGB data' dibs are flipped vertically  					for (int y = bitmap.Height - 1; y >= 0; y--)  					{  						for (int x = 0; x < bitmap.Width; x++)  						{  							var p = bd.GetPixel(x' y);  							// need to write RGB premultiplied by alpha (and round up)  							ms.WriteByte((byte)(p.B * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.G * p.A * 255f + .5f));  							ms.WriteByte((byte)(p.R * p.A * 255f + .5f));  							if (hasAlpha)  								ms.WriteByte((byte)p.Ab);  						}  					}    					ms.Position = 0;  					return ms;  				}  			}
Magic Number,Eto.CustomControls,HttpServer,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  				int currentPort = rnd.Next (49152' 65536);    				try {  					listener = new HttpListener ();  					listener.Prefixes.Add ("http://localhost:" + currentPort + "/");  					listener.Start ();    					this.port = currentPort;  					listener.BeginGetContext (ListenerCallback' null);  					return;  				}  				catch (Exception x) {  					listener.Close ();  					Debug.WriteLine ("HttpListener.Start:\n" + x);  				}  			}
Magic Number,Eto.CustomControls,HttpServer,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  				int currentPort = rnd.Next (49152' 65536);    				try {  					listener = new HttpListener ();  					listener.Prefixes.Add ("http://localhost:" + currentPort + "/");  					listener.Start ();    					this.port = currentPort;  					listener.BeginGetContext (ListenerCallback' null);  					return;  				}  				catch (Exception x) {  					listener.Close ();  					Debug.WriteLine ("HttpListener.Start:\n" + x);  				}  			}
Magic Number,Eto.CustomControls,HttpServer,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\HttpServer.cs,HttpServer,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  				int currentPort = rnd.Next (49152' 65536);    				try {  					listener = new HttpListener ();  					listener.Prefixes.Add ("http://localhost:" + currentPort + "/");  					listener.Start ();    					this.port = currentPort;  					listener.BeginGetContext (ListenerCallback' null);  					return;  				}  				catch (Exception x) {  					listener.Close ();  					Debug.WriteLine ("HttpListener.Start:\n" + x);  				}  			}
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,Create,The following statement contains a magic number: var bf = new swmi.WriteableBitmap(width' height' 96' 96' format' null);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,Create,The following statement contains a magic number: var bf = new swmi.WriteableBitmap(width' height' 96' 96' format' null);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: var pixelStride = (rect.Width * control.Format.BitsPerPixel + 7) / 8;
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: var pixelStride = (rect.Width * control.Format.BitsPerPixel + 7) / 8;
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Rgb24)  				return Color.FromArgb(red: pixels[0]' green: pixels[1]' blue: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Bgr24)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Bgr32)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Bgra32)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Bgra32)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Pbgra32)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,BitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\BitmapHandler.cs,GetPixel,The following statement contains a magic number: if (control.Format == swm.PixelFormats.Pbgra32)  				return Color.FromArgb(blue: pixels[0]' green: pixels[1]' red: pixels[2]' alpha: pixels[3]);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontHandler.cs,PointsToPixels,The following statement contains a magic number: return points * (96.0 / 72.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontHandler.cs,PointsToPixels,The following statement contains a magic number: return points * (96.0 / 72.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontHandler.cs,PixelsToPoints,The following statement contains a magic number: return points * (72.0 / 96.0);
Magic Number,Eto.Wpf.Drawing,FontHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontHandler.cs,PixelsToPoints,The following statement contains a magic number: return points * (72.0 / 96.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawEllipse,The following statement contains a magic number: Control.DrawEllipse(null' pen.ToWpf(true)' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,FillEllipse,The following statement contains a magic number: Control.DrawEllipse(brush.ToWpf()' null' new sw.Point(x + width / 2.0' y + height / 2.0)' width / 2.0' height / 2.0);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double startRadians = startDegrees * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double sweepRadians = sweepDegrees * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double dx = rect.Width / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: double dy = rect.Height / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: var centerPoint = new sw.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: var centerPoint = new sw.Point(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,CreateArcDrawing,The following statement contains a magic number: using (var ctx = streamGeom.Open())  			{  				bool isLargeArc = Math.Abs(sweepDegrees) > 180;  				var sweepDirection = sweepDegrees < 0 ? swm.SweepDirection.Counterclockwise : swm.SweepDirection.Clockwise;    				if (closed)  				{  					ctx.BeginFigure(centerPoint' true' true);  					ctx.LineTo(new sw.Point(xs' ys)' true' true);  				}  				else  					ctx.BeginFigure(new sw.Point(xs' ys)' true' false);  				ctx.ArcTo(new sw.Point(xe' ye)' new sw.Size(dx' dy)' 0' isLargeArc' sweepDirection' true' false);  				if (closed)  					ctx.LineTo(centerPoint' true' true);  			}
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The following statement contains a magic number: if ((ImageInterpolation == ImageInterpolation.High || ImageInterpolation == ImageInterpolation.Default)                  && (width != size.Width || height != size.Height))              {                  // better image quality by using transformed bitmap' plus it is actually faster                  src = new swmi.TransformedBitmap(                      src'                      new swm.ScaleTransform(width / size.Width * 96 / src.DpiX' height / size.Height * 96 / src.DpiY' 0' 0)                      );              }
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,DrawImage,The following statement contains a magic number: if ((ImageInterpolation == ImageInterpolation.High || ImageInterpolation == ImageInterpolation.Default)                  && (width != size.Width || height != size.Height))              {                  // better image quality by using transformed bitmap' plus it is actually faster                  src = new swmi.TransformedBitmap(                      src'                      new swm.ScaleTransform(width / size.Width * 96 / src.DpiX' height / size.Height * 96 / src.DpiY' 0' 0)                      );              }
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,ApplyOffset,The following statement contains a magic number: if (isOffset)  				Control.PushTransform(new swm.TranslateTransform(0.5' 0.5));
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,ApplyOffset,The following statement contains a magic number: if (isOffset)  				Control.PushTransform(new swm.TranslateTransform(0.5' 0.5));
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,Clear,The following statement contains a magic number: if (drawingVisual != null)  			{  				CloseGroup();  				// bitmap  				Control.Close();  				var newbmp = new swmi.RenderTargetBitmap((int)bounds.Width' (int)bounds.Height' 96' 96' swm.PixelFormats.Pbgra32);  				newbmp.RenderWithCollect(visual);    				swm.Geometry maskgeometry;  				if (clipPath != null)  				{  					maskgeometry = clipPath;  				}  				else  				{  					maskgeometry = new swm.RectangleGeometry(rect.ToWpf());  				}  				var boundsgeometry = new swm.RectangleGeometry(bounds);  				maskgeometry = swm.Geometry.Combine(boundsgeometry' maskgeometry' swm.GeometryCombineMode.Exclude' null);  				var dr = new swm.GeometryDrawing(swm.Brushes.Black' null' maskgeometry);  				var db = new swm.DrawingBrush(dr);    				visual = drawingVisual = new swm.DrawingVisual();  				Control = drawingVisual.RenderOpen();  				Control.PushOpacityMask(db);  				Control.DrawImage(newbmp' bounds);  				Control.Pop();    				ApplyAll();  			}  			else  			{  				// drawable  				if (brush == null || brush.Color.A < 1.0f)  					Widget.FillRectangle(Brushes.Black' rect);  			}
Magic Number,Eto.Wpf.Drawing,GraphicsHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsHandler.cs,Clear,The following statement contains a magic number: if (drawingVisual != null)  			{  				CloseGroup();  				// bitmap  				Control.Close();  				var newbmp = new swmi.RenderTargetBitmap((int)bounds.Width' (int)bounds.Height' 96' 96' swm.PixelFormats.Pbgra32);  				newbmp.RenderWithCollect(visual);    				swm.Geometry maskgeometry;  				if (clipPath != null)  				{  					maskgeometry = clipPath;  				}  				else  				{  					maskgeometry = new swm.RectangleGeometry(rect.ToWpf());  				}  				var boundsgeometry = new swm.RectangleGeometry(bounds);  				maskgeometry = swm.Geometry.Combine(boundsgeometry' maskgeometry' swm.GeometryCombineMode.Exclude' null);  				var dr = new swm.GeometryDrawing(swm.Brushes.Black' null' maskgeometry);  				var db = new swm.DrawingBrush(dr);    				visual = drawingVisual = new swm.DrawingVisual();  				Control = drawingVisual.RenderOpen();  				Control.PushOpacityMask(db);  				Control.DrawImage(newbmp' bounds);  				Control.Pop();    				ApplyAll();  			}  			else  			{  				// drawable  				if (brush == null || brush.Color.A < 1.0f)  					Widget.FillRectangle(Brushes.Black' rect);  			}
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double startRadians = startAngle * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double sweepRadians = sweepAngle * Math.PI / 180.0;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double dx = width / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: double dy = height / 2;
Magic Number,Eto.Wpf.Drawing,GraphicsPathHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\GraphicsPathHandler.cs,AddArc,The following statement contains a magic number: bool isLargeArc = Math.Abs (sweepAngle) > 180;
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,CopyStream,The following statement contains a magic number: var buffer = new byte[32768];
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,Resize,The following statement contains a magic number: var target = new swmi.RenderTargetBitmap(width' height' 96 * scale' 96 * scale' swm.PixelFormats.Default);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,Resize,The following statement contains a magic number: var target = new swmi.RenderTargetBitmap(width' height' 96 * scale' 96 * scale' swm.PixelFormats.Default);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: int count = BitConverter.ToInt16(srcBuf' 4);
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				using (var destStream = new MemoryStream())  				using (var writer = new BinaryWriter(destStream))  				{  					// Copy ICONDIR and ICONDIRENTRY.  					int pos = 0;  					writer.Write(srcBuf' pos' sICONDIR - 2);  					writer.Write((short)1);    // ICONDIR.idCount == 1;    					pos += sICONDIR;  					pos += sICONDIRENTRY * i;    					writer.Write(srcBuf' pos' sICONDIRENTRY - 4); // write out icon info (minus old offset)  					writer.Write(sICONDIR + sICONDIRENTRY);    // write offset of icon data  					pos += 8;    					// Copy picture and mask data.  					int imgSize = BitConverter.ToInt32(srcBuf' pos);       // ICONDIRENTRY.dwBytesInRes  					pos += 4;  					int imgOffset = BitConverter.ToInt32(srcBuf' pos);    // ICONDIRENTRY.dwImageOffset  					if (imgOffset + imgSize > srcBuf.Length)  						throw new InvalidDataException(string.Format(CultureInfo.CurrentCulture' "Icon not a valid format"));  					writer.Write(srcBuf' imgOffset' imgSize);  					writer.Flush();    					// Create new icon.  					destStream.Seek(0' SeekOrigin.Begin);  					splitIcons.Add(swmi.BitmapFrame.Create(destStream));  				}  			}
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				using (var destStream = new MemoryStream())  				using (var writer = new BinaryWriter(destStream))  				{  					// Copy ICONDIR and ICONDIRENTRY.  					int pos = 0;  					writer.Write(srcBuf' pos' sICONDIR - 2);  					writer.Write((short)1);    // ICONDIR.idCount == 1;    					pos += sICONDIR;  					pos += sICONDIRENTRY * i;    					writer.Write(srcBuf' pos' sICONDIRENTRY - 4); // write out icon info (minus old offset)  					writer.Write(sICONDIR + sICONDIRENTRY);    // write offset of icon data  					pos += 8;    					// Copy picture and mask data.  					int imgSize = BitConverter.ToInt32(srcBuf' pos);       // ICONDIRENTRY.dwBytesInRes  					pos += 4;  					int imgOffset = BitConverter.ToInt32(srcBuf' pos);    // ICONDIRENTRY.dwImageOffset  					if (imgOffset + imgSize > srcBuf.Length)  						throw new InvalidDataException(string.Format(CultureInfo.CurrentCulture' "Icon not a valid format"));  					writer.Write(srcBuf' imgOffset' imgSize);  					writer.Flush();    					// Create new icon.  					destStream.Seek(0' SeekOrigin.Begin);  					splitIcons.Add(swmi.BitmapFrame.Create(destStream));  				}  			}
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				using (var destStream = new MemoryStream())  				using (var writer = new BinaryWriter(destStream))  				{  					// Copy ICONDIR and ICONDIRENTRY.  					int pos = 0;  					writer.Write(srcBuf' pos' sICONDIR - 2);  					writer.Write((short)1);    // ICONDIR.idCount == 1;    					pos += sICONDIR;  					pos += sICONDIRENTRY * i;    					writer.Write(srcBuf' pos' sICONDIRENTRY - 4); // write out icon info (minus old offset)  					writer.Write(sICONDIR + sICONDIRENTRY);    // write offset of icon data  					pos += 8;    					// Copy picture and mask data.  					int imgSize = BitConverter.ToInt32(srcBuf' pos);       // ICONDIRENTRY.dwBytesInRes  					pos += 4;  					int imgOffset = BitConverter.ToInt32(srcBuf' pos);    // ICONDIRENTRY.dwImageOffset  					if (imgOffset + imgSize > srcBuf.Length)  						throw new InvalidDataException(string.Format(CultureInfo.CurrentCulture' "Icon not a valid format"));  					writer.Write(srcBuf' imgOffset' imgSize);  					writer.Flush();    					// Create new icon.  					destStream.Seek(0' SeekOrigin.Begin);  					splitIcons.Add(swmi.BitmapFrame.Create(destStream));  				}  			}
Magic Number,Eto.Wpf.Drawing,IconHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IconHandler.cs,SplitIcon,The following statement contains a magic number: for (int i = 0; i < count; i++)  			{  				using (var destStream = new MemoryStream())  				using (var writer = new BinaryWriter(destStream))  				{  					// Copy ICONDIR and ICONDIRENTRY.  					int pos = 0;  					writer.Write(srcBuf' pos' sICONDIR - 2);  					writer.Write((short)1);    // ICONDIR.idCount == 1;    					pos += sICONDIR;  					pos += sICONDIRENTRY * i;    					writer.Write(srcBuf' pos' sICONDIRENTRY - 4); // write out icon info (minus old offset)  					writer.Write(sICONDIR + sICONDIRENTRY);    // write offset of icon data  					pos += 8;    					// Copy picture and mask data.  					int imgSize = BitConverter.ToInt32(srcBuf' pos);       // ICONDIRENTRY.dwBytesInRes  					pos += 4;  					int imgOffset = BitConverter.ToInt32(srcBuf' pos);    // ICONDIRENTRY.dwImageOffset  					if (imgOffset + imgSize > srcBuf.Length)  						throw new InvalidDataException(string.Format(CultureInfo.CurrentCulture' "Icon not a valid format"));  					writer.Write(srcBuf' imgOffset' imgSize);  					writer.Flush();    					// Create new icon.  					destStream.Seek(0' SeekOrigin.Begin);  					splitIcons.Add(swmi.BitmapFrame.Create(destStream));  				}  			}
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: numColors = (int)Math.Pow(2' bitsPerPixel);
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: ApplicationHandler.InvokeIfNecessary (() => {  				Control = new swmi.WriteableBitmap (width' height' 96' 96' format' new swmi.BitmapPalette (colors));  			});
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,Create,The following statement contains a magic number: ApplicationHandler.InvokeIfNecessary (() => {  				Control = new swmi.WriteableBitmap (width' height' 96' 96' format' new swmi.BitmapPalette (colors));  			});
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The following statement contains a magic number: var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride);
Magic Number,Eto.Wpf.Drawing,IndexedBitmapHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\IndexedBitmapHandler.cs,SetPalette,The following statement contains a magic number: var bs = swmi.BitmapSource.Create (old.PixelWidth' old.PixelHeight' 96' 96' old.Format' pal' old.BackBuffer' bufferSize' old.BackBufferStride);
Magic Number,Eto.Wpf.Drawing,LinearGradientBrushHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\LinearGradientBrushHandler.cs,Create,The following statement contains a magic number: matrix.RotateAtPrepend(angle - 45' startPoint.X' startPoint.Y);
Magic Number,Eto.Wpf.Drawing,PenHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\PenHandler.cs,SetDashStyle,The following statement contains a magic number: if (dashStyle == null || dashStyle.IsSolid)  				swmpen.DashStyle = swm.DashStyles.Solid;  			else {  				var dashes = dashStyle.Dashes;  				double[] wpfdashes;  				if (swmpen.DashCap == swm.PenLineCap.Flat)  					wpfdashes = Array.ConvertAll (dashStyle.Dashes' x => (double)x);  				else {  					wpfdashes = new double[dashes.Length];  					for (int i = 0; i < wpfdashes.Length; i++) {  						var dash = (double)dashes[i];  						if ((i % 2) == 1) {  							// gap must include square/round thickness  							dash += 1;  						} else {  							// dash must exclude square/round thickness  							dash -= 1;  						}  						wpfdashes[i] = dash;  					}  				}  				swmpen.DashStyle = new swm.DashStyle (wpfdashes' dashStyle.Offset);  			}
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\ButtonHandler.cs,ButtonHandler,The following statement contains a magic number: label = new WpfLabel  			{  				VerticalAlignment = sw.VerticalAlignment.Center'  				HorizontalAlignment = sw.HorizontalAlignment.Center'  				Padding = new sw.Thickness(3' 0' 3' 0)'  				Visibility = sw.Visibility.Collapsed  			};
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\ButtonHandler.cs,ButtonHandler,The following statement contains a magic number: label = new WpfLabel  			{  				VerticalAlignment = sw.VerticalAlignment.Center'  				HorizontalAlignment = sw.HorizontalAlignment.Center'  				Padding = new sw.Thickness(3' 0' 3' 0)'  				Visibility = sw.Visibility.Collapsed  			};
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\ButtonHandler.cs,SetImagePosition,The following statement contains a magic number: switch (ImagePosition)  			{  				case ButtonImagePosition.Left:  					col = 0; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Right:  					col = 2; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Above:  					col = 1; row = 0;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Below:  					col = 1; row = 2;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Overlay:  					col = 1; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Wpf.Forms.Controls,ButtonHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\ButtonHandler.cs,SetImagePosition,The following statement contains a magic number: switch (ImagePosition)  			{  				case ButtonImagePosition.Left:  					col = 0; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Right:  					col = 2; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Stretch;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				case ButtonImagePosition.Above:  					col = 1; row = 0;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Below:  					col = 1; row = 2;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = hideLabel ? sw.VerticalAlignment.Center : sw.VerticalAlignment.Stretch;  					break;  				case ButtonImagePosition.Overlay:  					col = 1; row = 1;  					Control.HorizontalContentAlignment = sw.HorizontalAlignment.Center;  					Control.VerticalContentAlignment = sw.VerticalAlignment.Center;  					break;  				default:  					throw new NotSupportedException();  			}
Magic Number,Eto.Wpf.Forms.Controls,EtoComboBox,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DropDownHandler.cs,FindMaxSize,The following statement contains a magic number: maxWidth += toggle != null ? toggle.DesiredSize.Width : 20;
Magic Number,Eto.Wpf.Forms.Controls,DrawableHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\DrawableHandler.cs,Invalidate,The following statement contains a magic number: if (tiled)  			{  				foreach (var tile in visibleTiles.Values)  				{  					if (tile.Bounds.Intersects(rect))  						tile.InvalidateVisual();  				}  			}  			else if (OptimizedInvalidateRect)  			{  				if (((rect.Width * rect.Height) / (Control.ActualWidth * Control.ActualHeight)) > 0.9)  				{  					Invalidate(false);  					return;  				}    				if (invalidateTiles == null)  					invalidateTiles = new List<EtoTile>();    				var overlappingTiles = new List<EtoTile>();  				foreach (var overlappingTile in invalidateTiles)  				{  					if (rect == overlappingTile.Bounds)  					{  						overlappingTile.InvalidateVisual();  						return;  					}  					else if (rect.Intersects(overlappingTile.Bounds))  					{  						rect.Union(overlappingTile.Bounds);  						overlappingTiles.Add(overlappingTile);  					}  				}    				EtoTile tile;  				if (unusedTiles.Count > 0)  				{  					tile = unusedTiles[unusedTiles.Count - 1];  					tile.Bounds = rect;  					tile.Visibility = sw.Visibility.Visible;  					unusedTiles.Remove(tile);  				}  				else  				{  					tile = new EtoTile  					{  						Handler = this'  						SnapsToDevicePixels = true  					};  					tile.Bounds = rect;  					Control.Children.Add(tile);  				}  				invalidateTiles.Add(tile);    				foreach (var overlappingTile in overlappingTiles)  				{  					overlappingTile.Visibility = sw.Visibility.Collapsed;  					invalidateTiles.Remove(overlappingTile);  					unusedTiles.Add(overlappingTile);  				}  			}  			else  				base.Invalidate(rect' invalidateChildren);
Magic Number,Eto.Wpf.Forms.Controls,ProgressBarHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\ProgressBarHandler.cs,ProgressBarHandler,The following statement contains a magic number: Control = new EtoProgressBar  			{  				Handler = this'  				Minimum = 0'  				Maximum = 100'  			};
Magic Number,Eto.Wpf.Forms.Controls,SliderHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SliderHandler.cs,SliderHandler,The following statement contains a magic number: Control = new EtoSlider  			{  				Handler = this'  				Minimum = 0'  				Maximum = 100'  				TickPlacement = swc.Primitives.TickPlacement.BottomRight  			};
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateOrientation,The following statement contains a magic number: if (orientation == Orientation.Horizontal)  			{    				splitter.ResizeDirection = swc.GridResizeDirection.Columns;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Left;  				splitter.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 3);  				pane1.SetValue(swc.Grid.RowSpanProperty' 3);  				pane2.SetValue(swc.Grid.RowSpanProperty' 3);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 1);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 1);    				swc.Grid.SetColumn(splitter' 1);  				swc.Grid.SetRow(splitter' 0);  				swc.Grid.SetColumn(pane2' 2);  				swc.Grid.SetRow(pane2' 0);    				splitter.Width = splitterWidth;  				splitter.Height = double.NaN;  			}  			else  			{  				splitter.ResizeDirection = swc.GridResizeDirection.Rows;  				splitter.HorizontalAlignment = sw.HorizontalAlignment.Stretch;  				splitter.VerticalAlignment = sw.VerticalAlignment.Top;  				pane2.VerticalAlignment = sw.VerticalAlignment.Stretch;    				splitter.SetValue(swc.Grid.RowSpanProperty' 1);  				pane1.SetValue(swc.Grid.RowSpanProperty' 1);  				pane2.SetValue(swc.Grid.RowSpanProperty' 1);    				splitter.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane1.SetValue(swc.Grid.ColumnSpanProperty' 3);  				pane2.SetValue(swc.Grid.ColumnSpanProperty' 3);    				swc.Grid.SetColumn(splitter' 0);  				swc.Grid.SetRow(splitter' 1);  				swc.Grid.SetColumn(pane2' 0);  				swc.Grid.SetRow(pane2' 2);    				splitter.Width = double.NaN;  				splitter.Height = splitterWidth;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following statement contains a magic number: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following statement contains a magic number: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelative,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  				relative = pos;  			else  			{  				var sz = GetAvailableSize();  				if (fixedPanel == SplitterFixedPanel.Panel2)  					relative = sz <= 0 ? 0 : sz - pos;  				else  					relative = sz <= 0 ? 0.5 : pos / (double)sz;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetHiddenPanels,The following statement contains a magic number: if (panel1 == null || !panel1.Visible)  			{  				SetLength(0' new sw.GridLength(0' sw.GridUnitType.Pixel));  				SetLength(1' new sw.GridLength(0' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  				return true;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetHiddenPanels,The following statement contains a magic number: if (panel2 == null || !panel2.Visible)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(1' new sw.GridLength(0' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(0' sw.GridUnitType.Pixel));  				return true;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: if (!Control.IsLoaded)  			{  				position = newPosition;  				relative = double.NaN;  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  				return;  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: relative = fixedPanel == SplitterFixedPanel.Panel1 ? Math.Max(0' newPosition)  				: fixedPanel == SplitterFixedPanel.Panel2 ? Math.Max(0' size - newPosition)  				: size <= 0 ? 0.5 : Math.Max(0.0' Math.Min(1.0' newPosition / (double)size));
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetPosition,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' newPosition)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' size - newPosition)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetRelative,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' 1 - relative)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetRelative,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' 1 - relative)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,SetRelative,The following statement contains a magic number: if (fixedPanel == SplitterFixedPanel.Panel1)  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  				SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  			}  			else if (fixedPanel == SplitterFixedPanel.Panel2)  			{  				SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Pixel));  			}  			else  			{  				SetLength(0' new sw.GridLength(Math.Max(0' relative)' sw.GridUnitType.Star));  				SetLength(2' new sw.GridLength(Math.Max(0' 1 - relative)' sw.GridUnitType.Star));  			}
Magic Number,Eto.Wpf.Forms.Controls,WpfTextBindingBlock,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfTextBindingBlock,The following statement contains a magic number: if (setMargin)  				SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2'0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfTextBindingBlock,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfTextBindingBlock,The following statement contains a magic number: if (setMargin)  				SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2'0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfImageBindingBlock,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,WpfImageBindingBlock,The following statement contains a magic number: SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 0' 2' 0));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,TextBlock,The following statement contains a magic number: if (setMargin)  				factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MaxHeightProperty' 16.0);
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MaxWidthProperty' 16.0);
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,WpfListItemHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,ImageBlock,The following statement contains a magic number: factory.SetValue(sw.FrameworkElement.MarginProperty' new sw.Thickness(0' 2' 2' 2));
Magic Number,Eto.Wpf.Forms.Controls,ImageConverter,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfListItemHelper.cs,Convert,The following statement contains a magic number: return item.Image.ToWpf(16);
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,CreateImage,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness(0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms.Cells,Column,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Cells\CustomCellHandler.cs,Image,The following statement contains a magic number: var image = new swc.Image { StretchDirection = swc.StretchDirection.DownOnly' Margin = new sw.Thickness (0' 2' 2' 2) };
Magic Number,Eto.Wpf.Forms,NotificationHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\NotificationHandler.cs,Show,The following statement contains a magic number: if (indicator != null)  			{  				var tray = indicator.ControlObject as Swf.NotifyIcon;  				tray.ShowBalloonTip(3000' Title' Message' Swf.ToolTipIcon.None);  				tray.BalloonTipClicked += Tray_BalloonTipClicked;  			}  			else  			{  				// TODO: Check for Windows 10 and implement the nightmarish Notification API  			}
Magic Number,Eto.Wpf.Forms,PerMonitorDpiHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\PerMonitorDpiHelper.cs,SetScale,The following statement contains a magic number: var scale = dpi / 96.0;
Magic Number,Eto.Wpf.Forms,ClipboardHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ClipboardHandler.cs,Retry,The following statement contains a magic number: for (int i = 0; i < 10; i++)  			{  				try  				{  					return getValue();  				}  				catch (COMException ex)  				{  					// cannot open clipboard' so retry 10 times after 100ms  					// WPF sometimes throws this when trying to get a value  					// as it appears to retry when getting the data object' but not when   					if (ex.HResult != unchecked((int)0x800401D0) || i == 9)  						throw;  				}  				Thread.Sleep(100);  			}
Magic Number,Eto.Wpf.Forms,ClipboardHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ClipboardHandler.cs,Retry,The following statement contains a magic number: for (int i = 0; i < 10; i++)  			{  				try  				{  					return getValue();  				}  				catch (COMException ex)  				{  					// cannot open clipboard' so retry 10 times after 100ms  					// WPF sometimes throws this when trying to get a value  					// as it appears to retry when getting the data object' but not when   					if (ex.HResult != unchecked((int)0x800401D0) || i == 9)  						throw;  				}  				Thread.Sleep(100);  			}
Magic Number,Eto.Wpf.Forms,ClipboardHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ClipboardHandler.cs,Retry,The following statement contains a magic number: for (int i = 0; i < 10; i++)  			{  				try  				{  					return getValue();  				}  				catch (COMException ex)  				{  					// cannot open clipboard' so retry 10 times after 100ms  					// WPF sometimes throws this when trying to get a value  					// as it appears to retry when getting the data object' but not when   					if (ex.HResult != unchecked((int)0x800401D0) || i == 9)  						throw;  				}  				Thread.Sleep(100);  			}
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\DialogHandler.cs,HandleLoaded,The following statement contains a magic number: if (parentWindowBounds != null && !LocationSet)  			{  				var bounds = parentWindowBounds.Value;    				Location = bounds.Location + (bounds.Size - Control.GetSize()) / 2;  				parentWindowBounds = null;  			}
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\DialogHandler.cs,ReloadButtons,The following statement contains a magic number: gridButtons.ColumnDefinitions.Add(new swc.ColumnDefinition { Width = new sw.GridLength(100' sw.GridUnitType.Star) });
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\DialogHandler.cs,ReloadButtons,The following statement contains a magic number: gridButtons.Margin = new sw.Thickness(hasButtons ? 8 : 0);
Magic Number,Eto.Wpf.Forms,DialogHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\DialogHandler.cs,AddButton,The following statement contains a magic number: native.Margin = new sw.Thickness(6' 0' 0' 0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\TableLayoutHandler.cs,GetMargins,The following statement contains a magic number: if (x > 0) margin.Left = Math.Floor(spacing.Width / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\TableLayoutHandler.cs,GetMargins,The following statement contains a magic number: if (x < Control.ColumnDefinitions.Count - 1) margin.Right = Math.Ceiling(spacing.Width / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\TableLayoutHandler.cs,GetMargins,The following statement contains a magic number: if (y > 0) margin.Top = Math.Floor(spacing.Height / 2.0);
Magic Number,Eto.Wpf.Forms,TableLayoutHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\TableLayoutHandler.cs,GetMargins,The following statement contains a magic number: if (y < Control.RowDefinitions.Count - 1) margin.Bottom = Math.Ceiling(spacing.Height / 2.0);
Magic Number,Eto.Wpf.Forms,WpfFrameworkElement<TControl;TWidget;TCallback>,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\WpfFrameworkElement.cs,HandleMouseDown,The following statement contains a magic number: if (!(Control is swc.Control) && e.ClickCount == 2)  				Callback.OnMouseDoubleClick(Widget' args);
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var doneButton = new swc.Button { Content = "OK"' IsDefault = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var doneButton = new swc.Button { Content = "OK"' IsDefault = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var cancelButton = new swc.Button { Content = "Cancel"' IsCancel = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms,XceedColorDialog,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ColorDialogHandler.cs,XceedColorDialog,The following statement contains a magic number: var cancelButton = new swc.Button { Content = "Cancel"' IsCancel = true' MinWidth = 80' Margin = new sw.Thickness(5) };
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetQuitItem,The following statement contains a magic number: item.Order = 1000;
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetQuitItem,The following statement contains a magic number: if (quitItem != null)  				ApplicationMenu.Items.Remove(quitItem);  			else  				ApplicationMenu.Items.AddSeparator(999);
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetAboutItem,The following statement contains a magic number: item.Order = 1000;
Magic Number,Eto.Wpf.Forms.Menu,MenuBarHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Menu\MenuBarHandler.cs,SetAboutItem,The following statement contains a magic number: if (aboutItem != null)  				HelpMenu.Items.Remove(aboutItem);  			else  				HelpMenu.Items.AddSeparator(999);
Magic Number,Eto.Wpf.CustomControls,EditableTextBlock,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\EditableTextBlock.cs,EditableTextBlock,The following statement contains a magic number: textBlock.SetValue(FrameworkElement.MarginProperty' new Thickness(2));
Magic Number,Eto.Wpf.CustomControls,EditableTextBlock,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\EditableTextBlock.cs,TextBlock_MouseDown,The following statement contains a magic number: if (e.ButtonState == MouseButtonState.Pressed && e.ClickCount >= 2 && e.ChangedButton == MouseButton.Left)  			{  				IsInEditMode = true;  				e.Handled = true;  			}
Magic Number,Eto.Wpf.CustomControls,MultiSizeImage,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\MultiSizeImage.cs,IsZero,The following statement contains a magic number: return Math.Abs(value) < 2.2204460492503131E-15;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (Typeface face in selectedFamily.GetTypefaces())              {                  var labelPara = new Paragraph(new Run(TypefaceListItem.GetDisplayName(face)));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = face.Weight;                  samplePara.FontStyle = face.Style;                  samplePara.FontStretch = face.Stretch;                  samplePara.FontSize = 16.0;                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (Typeface face in selectedFamily.GetTypefaces())              {                  var labelPara = new Paragraph(new Run(TypefaceListItem.GetDisplayName(face)));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = face.Weight;                  samplePara.FontStyle = face.Style;                  samplePara.FontStretch = face.Stretch;                  samplePara.FontSize = 16.0;                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeSamplesTab,The following statement contains a magic number: foreach (double sizeInPoints in new double[] { 9.0' 10.0' 11.0' 12.0' 13.0' 14.0' 15.0' 16.0' 17.0 })              {                  string labelText = string.Format("{0} {1}"' sizeInPoints' _pointsText);                  var labelPara = new Paragraph(new Run(labelText));                  labelPara.Margin = new Thickness(0);                  doc.Blocks.Add(labelPara);                    var samplePara = new Paragraph(new Run(_previewSampleText));                  samplePara.FontFamily = selectedFamily;                  samplePara.FontWeight = selectedFace.Weight;                  samplePara.FontStyle = selectedFace.Style;                  samplePara.FontStretch = selectedFace.Stretch;                  samplePara.FontSize = FontSizeListItem.PointsToPixels(sizeInPoints);                  samplePara.Margin = new Thickness(0' 0' 0' 8);                  doc.Blocks.Add(samplePara);              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeFeaturePage,The following statement contains a magic number: if (page == null)              {                  grid.Children.Clear();                  grid.RowDefinitions.Clear();              }              else              {                  // Get the property value and metadata.                  object value = GetValue(chooserProperty);                  var metadata = (TypographicPropertyMetadata)chooserProperty.GetMetadata(typeof(FontChooser));                    // Look up the sample text.                  string sampleText = (metadata.SampleTextTag != null) ? LookupString(metadata.SampleTextTag) :                                      _defaultSampleText;                    if (page == _currentFeaturePage)                  {                      // Update the state of the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              var radioButton = (RadioButton)grid.Children[i * 2];                              radioButton.IsChecked = true;                          }                            // Apply properties to the sample text block.                          var sample = (TextBlock)grid.Children[i * 2 + 1];                          sample.Text = sampleText;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                      }                  }                  else                  {                      grid.Children.Clear();                      grid.RowDefinitions.Clear();                        // Add row definitions.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var row = new RowDefinition();                          row.Height = GridLength.Auto;                          grid.RowDefinitions.Add(row);                      }                        // Add the controls.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          string tag = page.Items[i].Tag;                          var radioContent = new TextBlock(new Run(LookupString(tag)));                          radioContent.TextWrapping = TextWrapping.Wrap;                            // Add the radio button.                          var radioButton = new RadioButton();                          radioButton.Name = tag;                          radioButton.Content = radioContent;                          radioButton.Margin = new Thickness(5.0' 0.0' 0.0' 0.0);                          radioButton.VerticalAlignment = VerticalAlignment.Center;                          Grid.SetRow(radioButton' i);                          grid.Children.Add(radioButton);                            // Check the radio button if it matches the current property value.                          if (page.Items[i].Value.Equals(value))                          {                              radioButton.IsChecked = true;                          }                            // Hook up the event.  						radioButton.Checked += featureRadioButton_Checked;                            // Add the block with sample text.                          var sample = new TextBlock(new Run(sampleText));                          sample.Margin = new Thickness(5.0' 5.0' 5.0' 0.0);                          sample.TextWrapping = TextWrapping.WrapWithOverflow;                          ApplyPropertiesToObjectExcept(sample' chooserProperty);                          sample.SetValue(metadata.TargetProperty' page.Items[i].Value);                          Grid.SetRow(sample' i);                          Grid.SetColumn(sample' 1);                          grid.Children.Add(sample);                      }                        // Add borders between rows.                      for (int i = 0; i < page.Items.Length; ++i)                      {                          var border = new Border();                          border.BorderThickness = new Thickness(0.0' 0.0' 0.0' 1.0);                          border.BorderBrush = SystemColors.ControlLightBrush;                          Grid.SetRow(border' i);                          Grid.SetColumnSpan(border' 2);                          grid.Children.Add(border);                      }                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: if (selectedTypeface.TryGetGlyphTypeface(out glyphTypeface))              {                  // Create a table with two columns.                  var table = new Table();                  table.CellSpacing = 5;                  var leftColumn = new TableColumn();                  leftColumn.Width = new GridLength(2.0' GridUnitType.Star);                  table.Columns.Add(leftColumn);                  var rightColumn = new TableColumn();                  rightColumn.Width = new GridLength(3.0' GridUnitType.Star);                  table.Columns.Add(rightColumn);                    var rowGroup = new TableRowGroup();                  AddTableRow(rowGroup' "Family:"' glyphTypeface.FamilyNames);                  AddTableRow(rowGroup' "Face:"' glyphTypeface.FaceNames);                  AddTableRow(rowGroup' "Description:"' glyphTypeface.Descriptions);                  AddTableRow(rowGroup' "Version:"' glyphTypeface.VersionStrings);                  AddTableRow(rowGroup' "Copyright:"' glyphTypeface.Copyrights);                  AddTableRow(rowGroup' "Trademark:"' glyphTypeface.Trademarks);                  AddTableRow(rowGroup' "Manufacturer:"' glyphTypeface.ManufacturerNames);                  AddTableRow(rowGroup' "Designer:"' glyphTypeface.DesignerNames);                  AddTableRow(rowGroup' "Designer URL:"' glyphTypeface.DesignerUrls);                  AddTableRow(rowGroup' "Vendor URL:"' glyphTypeface.VendorUrls);                  AddTableRow(rowGroup' "Win32 Family:"' glyphTypeface.Win32FamilyNames);                  AddTableRow(rowGroup' "Win32 Face:"' glyphTypeface.Win32FaceNames);                    try                  {                      AddTableRow(rowGroup' "Font File URI:"' glyphTypeface.FontUri.ToString());                  }                  catch (System.Security.SecurityException)                  {                      // Font file URI is privileged information; just skip it if we don't have access.                  }                    table.RowGroups.Add(rowGroup);                    fontDescriptionBox.Document = new FlowDocument(table);                    fontLicenseBox.Text = NameDictionaryHelper.GetDisplayName(glyphTypeface.LicenseDescriptions);              }              else              {                  fontDescriptionBox.Document = new FlowDocument();                  fontLicenseBox.Text = String.Empty;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: if (selectedTypeface.TryGetGlyphTypeface(out glyphTypeface))              {                  // Create a table with two columns.                  var table = new Table();                  table.CellSpacing = 5;                  var leftColumn = new TableColumn();                  leftColumn.Width = new GridLength(2.0' GridUnitType.Star);                  table.Columns.Add(leftColumn);                  var rightColumn = new TableColumn();                  rightColumn.Width = new GridLength(3.0' GridUnitType.Star);                  table.Columns.Add(rightColumn);                    var rowGroup = new TableRowGroup();                  AddTableRow(rowGroup' "Family:"' glyphTypeface.FamilyNames);                  AddTableRow(rowGroup' "Face:"' glyphTypeface.FaceNames);                  AddTableRow(rowGroup' "Description:"' glyphTypeface.Descriptions);                  AddTableRow(rowGroup' "Version:"' glyphTypeface.VersionStrings);                  AddTableRow(rowGroup' "Copyright:"' glyphTypeface.Copyrights);                  AddTableRow(rowGroup' "Trademark:"' glyphTypeface.Trademarks);                  AddTableRow(rowGroup' "Manufacturer:"' glyphTypeface.ManufacturerNames);                  AddTableRow(rowGroup' "Designer:"' glyphTypeface.DesignerNames);                  AddTableRow(rowGroup' "Designer URL:"' glyphTypeface.DesignerUrls);                  AddTableRow(rowGroup' "Vendor URL:"' glyphTypeface.VendorUrls);                  AddTableRow(rowGroup' "Win32 Family:"' glyphTypeface.Win32FamilyNames);                  AddTableRow(rowGroup' "Win32 Face:"' glyphTypeface.Win32FaceNames);                    try                  {                      AddTableRow(rowGroup' "Font File URI:"' glyphTypeface.FontUri.ToString());                  }                  catch (System.Security.SecurityException)                  {                      // Font file URI is privileged information; just skip it if we don't have access.                  }                    table.RowGroups.Add(rowGroup);                    fontDescriptionBox.Document = new FlowDocument(table);                    fontLicenseBox.Text = NameDictionaryHelper.GetDisplayName(glyphTypeface.LicenseDescriptions);              }              else              {                  fontDescriptionBox.Document = new FlowDocument();                  fontLicenseBox.Text = String.Empty;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,InitializeDescriptiveTextTab,The following statement contains a magic number: if (selectedTypeface.TryGetGlyphTypeface(out glyphTypeface))              {                  // Create a table with two columns.                  var table = new Table();                  table.CellSpacing = 5;                  var leftColumn = new TableColumn();                  leftColumn.Width = new GridLength(2.0' GridUnitType.Star);                  table.Columns.Add(leftColumn);                  var rightColumn = new TableColumn();                  rightColumn.Width = new GridLength(3.0' GridUnitType.Star);                  table.Columns.Add(rightColumn);                    var rowGroup = new TableRowGroup();                  AddTableRow(rowGroup' "Family:"' glyphTypeface.FamilyNames);                  AddTableRow(rowGroup' "Face:"' glyphTypeface.FaceNames);                  AddTableRow(rowGroup' "Description:"' glyphTypeface.Descriptions);                  AddTableRow(rowGroup' "Version:"' glyphTypeface.VersionStrings);                  AddTableRow(rowGroup' "Copyright:"' glyphTypeface.Copyrights);                  AddTableRow(rowGroup' "Trademark:"' glyphTypeface.Trademarks);                  AddTableRow(rowGroup' "Manufacturer:"' glyphTypeface.ManufacturerNames);                  AddTableRow(rowGroup' "Designer:"' glyphTypeface.DesignerNames);                  AddTableRow(rowGroup' "Designer URL:"' glyphTypeface.DesignerUrls);                  AddTableRow(rowGroup' "Vendor URL:"' glyphTypeface.VendorUrls);                  AddTableRow(rowGroup' "Win32 Family:"' glyphTypeface.Win32FamilyNames);                  AddTableRow(rowGroup' "Win32 Face:"' glyphTypeface.Win32FaceNames);                    try                  {                      AddTableRow(rowGroup' "Font File URI:"' glyphTypeface.FontUri.ToString());                  }                  catch (System.Security.SecurityException)                  {                      // Font file URI is privileged information; just skip it if we don't have access.                  }                    table.RowGroups.Add(rowGroup);                    fontDescriptionBox.Document = new FlowDocument(table);                    fontLicenseBox.Text = NameDictionaryHelper.GetDisplayName(glyphTypeface.LicenseDescriptions);              }              else              {                  fontDescriptionBox.Document = new FlowDocument();                  fontLicenseBox.Text = String.Empty;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,SelectListItem,The following statement contains a magic number: while (first < limit)              {                  int i = first + (limit - first) / 2;                  var item = (IComparable)(itemList[i]);                  int comparison = item.CompareTo(value);                  if (comparison < 0)                  {                      // Value must be after i                      first = i + 1;                  }                  else if (comparison > 0)                  {                      // Value must be before i                      limit = i;                  }                  else                  {                      // Exact match; select the item.                      list.SelectedIndex = i;                      itemList.MoveCurrentToPosition(i);                      list.ScrollIntoView(itemList[i]);                      return true;                  }              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,FuzzyEqual,The following statement contains a magic number: return Math.Abs(a - b) < 0.01;
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PointsToPixels,The following statement contains a magic number: return value * (96.0 / 72.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PointsToPixels,The following statement contains a magic number: return value * (96.0 / 72.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PixelsToPoints,The following statement contains a magic number: return value * (72.0 / 96.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,FontSizeListItem,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontsizelistitem.cs,PixelsToPoints,The following statement contains a magic number: return value * (72.0 / 96.0);
Magic Number,Eto.Wpf.CustomControls.FontDialog,NameDictionaryHelper,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\namedictionaryhelper.cs,GetRelatedness,The following statement contains a magic number: try              {                  // Get equivalent cultures.                  CultureInfo keyCulture = CultureInfo.GetCultureInfoByIetfLanguageTag(keyLang.IetfLanguageTag);                  CultureInfo userCulture = CultureInfo.GetCultureInfoByIetfLanguageTag(userLang.IetfLanguageTag);                  if (!userCulture.IsNeutralCulture)                  {                      userCulture = userCulture.Parent;                  }                    // If the key is a prefix or parent of the user language it's a good match.                  if (IsPrefixOf(keyLang.IetfLanguageTag' userLang.IetfLanguageTag) || userCulture.Equals(keyCulture))                  {                      return 2;                  }                    // If the key and user language share a common prefix or parent neutral culture' it's a reasonable match.                  if (IsPrefixOf(TrimSuffix(userLang.IetfLanguageTag)' keyLang.IetfLanguageTag) || userCulture.Equals(keyCulture.Parent))                  {                      return 1;                  }              }              catch (ArgumentException)              {                  // Language tag with no corresponding CultureInfo.              }
Magic Number,Eto.Wpf.CustomControls.TreeGridView,TreeToggleButton,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\TreeGridView\TreeToggleButton.cs,Create,The following statement contains a magic number: var button = new TreeToggleButton { Controller = controller' Width = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,RadioToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\RadioToolItemHandler.cs,RadioToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,RadioToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\RadioToolItemHandler.cs,RadioToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,CheckToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\CheckToolItemHandler.cs,CheckToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,CheckToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\CheckToolItemHandler.cs,CheckToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,EtoSpaceSeparator,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\SeparatorToolItemHandler.cs,EtoSpaceSeparator,The following statement contains a magic number: Width = Height = 16;
Magic Number,Eto.Wpf.Forms.ToolBar,ButtonToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\ButtonToolItemHandler.cs,ButtonToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Wpf.Forms.ToolBar,ButtonToolItemHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\ToolBar\ButtonToolItemHandler.cs,ButtonToolItemHandler,The following statement contains a magic number: swcImage = new swc.Image { MaxHeight = 16' MaxWidth = 16 };
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,GetPixel,The following statement contains a magic number: if (BytesPerPixel == 4)  			{  				var col = TranslateDataToArgb(*((int*)pos));  				return Color.FromArgb(col);  			}
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,GetPixel,The following statement contains a magic number: if (BytesPerPixel == 3)  			{  				var col = TranslateDataToArgb(*((int*)pos));  				return Color.FromRgb(col);  			}
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,SetPixel,The following statement contains a magic number: if (BytesPerPixel == 4)  			{  				*((int*)pos) = col;  			}  			else if (BytesPerPixel == 3)  			{  				*(pos++) = (byte)(col & 0xFF);  				*(pos++) = (byte)((col >> 8) & 0xFF);  				*(pos++) = (byte)((col >> 16) & 0xFF);  			}  			else  				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel"));
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,SetPixel,The following statement contains a magic number: if (BytesPerPixel == 4)  			{  				*((int*)pos) = col;  			}  			else if (BytesPerPixel == 3)  			{  				*(pos++) = (byte)(col & 0xFF);  				*(pos++) = (byte)((col >> 8) & 0xFF);  				*(pos++) = (byte)((col >> 16) & 0xFF);  			}  			else  				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel"));
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,SetPixel,The following statement contains a magic number: if (BytesPerPixel == 4)  			{  				*((int*)pos) = col;  			}  			else if (BytesPerPixel == 3)  			{  				*(pos++) = (byte)(col & 0xFF);  				*(pos++) = (byte)((col >> 8) & 0xFF);  				*(pos++) = (byte)((col >> 16) & 0xFF);  			}  			else  				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel"));
Magic Number,Eto.Shared.Drawing,BaseBitmapData,C:\repos\picoe_Eto\Source\Shared\BaseBitmapData.cs,SetPixel,The following statement contains a magic number: if (BytesPerPixel == 4)  			{  				*((int*)pos) = col;  			}  			else if (BytesPerPixel == 3)  			{  				*(pos++) = (byte)(col & 0xFF);  				*(pos++) = (byte)((col >> 8) & 0xFF);  				*(pos++) = (byte)((col >> 16) & 0xFF);  			}  			else  				throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' "This PixelFormat is not supported by SetPixel. Must be 3 or 4 bytes per pixel"));
Missing Default,Eto.Wpf.Drawing,FontFamilyHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Drawing\FontFamilyHandler.cs,Create,The following switch statement is missing a default case: switch (familyName.ToUpperInvariant ()) {  			case FontFamilies.MonospaceFamilyName:  				familyName = "Courier New";  				break;  			case FontFamilies.SansFamilyName:  				familyName = "Tahoma' Arial' Verdana' Trebuchet' MS Sans Serif' Helvetica";  				break;  			case FontFamilies.SerifFamilyName:  				familyName = "Times New Roman";  				break;  			case FontFamilies.CursiveFamilyName:  				familyName = "Comic Sans MS' Monotype Corsiva' Papryus";  				break;  			case FontFamilies.FantasyFamilyName:  				familyName = "Impact' Juice ITC";  				break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,AttachEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.OpenNewWindowEvent:  					control.NewWindow += WebBrowserV1_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,SwfWebViewHandler,The following switch statement is missing a default case: switch (e.KeyCode)  				{  					case swf.Keys.Down:  					case swf.Keys.Up:  					case swf.Keys.Left:  					case swf.Keys.Right:  					case swf.Keys.PageDown:  					case swf.Keys.PageUp:  						// enable scrolling via keyboard  						e.IsInputKey = true;  						return;  				}
Missing Default,Eto.Wpf.Forms.Controls,SwfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SwfWebViewHandler.cs,SwfWebViewHandler,The following switch statement is missing a default case: switch (e.KeyData)  					{  						case (swf.Keys.C | swf.Keys.Control):  							doc.ExecCommand("Copy"' false' null);  							break;  						case (swf.Keys.V | swf.Keys.Control):  							if (doc.ActiveElement != null && ValidInputTags.Contains(doc.ActiveElement.TagName.ToLowerInvariant()))  								doc.ExecCommand("Paste"' false' null);  							break;  						case (swf.Keys.X | swf.Keys.Control):  							if (doc.ActiveElement != null && ValidInputTags.Contains(doc.ActiveElement.TagName.ToLowerInvariant()))  								doc.ExecCommand("Cut"' false' null);  							break;  						case (swf.Keys.A | swf.Keys.Control):  							doc.ExecCommand("SelectAll"' false' null);  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateColumnSizing,The following switch statement is missing a default case: switch (FixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.Panel2:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  				case SplitterFixedPanel.None:  					SetLength(0' new sw.GridLength(1' sw.GridUnitType.Star));  					SetLength(2' new sw.GridLength(1' sw.GridUnitType.Star));  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (fixedPanel)  			{  				case SplitterFixedPanel.Panel1:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel2:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = relative / width;  							break;  					}  					break;  				case SplitterFixedPanel.Panel2:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = (width - relative) / width;  							break;  					}  					break;  				case SplitterFixedPanel.None:  					switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width * relative;  							break;  						case SplitterFixedPanel.Panel2:  							relative = width - (width * relative);  							break;  					}  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel2:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = relative / width;  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width - relative - SplitterWidth;  							break;  						case SplitterFixedPanel.None:  							relative = (width - relative) / width;  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,SplitterHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\SplitterHandler.cs,UpdateRelativePosition,The following switch statement is missing a default case: switch (newFixedPanel)  					{  						case SplitterFixedPanel.Panel1:  							relative = width * relative;  							break;  						case SplitterFixedPanel.Panel2:  							relative = width - (width * relative);  							break;  					}
Missing Default,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,RemoveEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.DocumentTitleChangedEvent:  					webEvents.TitleChange -= WebEvents_TitleChange;  					break;  				case WebView.OpenNewWindowEvent:  					webEvents.NewWindow -= WebEvents_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.Forms.Controls,WpfWebViewHandler,C:\repos\picoe_Eto\Source\Eto.Wpf\Forms\Controls\WpfWebViewHandler.cs,AttachEvent,The following switch statement is missing a default case: switch (handler)  			{  				case WebView.DocumentTitleChangedEvent:  					webEvents.TitleChange += WebEvents_TitleChange;  					break;  				case WebView.OpenNewWindowEvent:  					webEvents.NewWindow += WebEvents_NewWindow;  					break;  			}
Missing Default,Eto.Wpf.CustomControls,MultiSizeImage,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretch)  						{  							case Stretch.Uniform:  								{  									double num3 = (widthFactor < heightFactor) ? widthFactor : heightFactor;  									heightFactor = (widthFactor = num3);  									break;  								}  							case Stretch.UniformToFill:  								{  									double num4 = (widthFactor > heightFactor) ? widthFactor : heightFactor;  									heightFactor = (widthFactor = num4);  									break;  								}  						}
Missing Default,Eto.Wpf.CustomControls,MultiSizeImage,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\MultiSizeImage.cs,ComputeScaleFactor,The following switch statement is missing a default case: switch (stretchDirection)  				{  					case StretchDirection.UpOnly:  						if (widthFactor < 1.0)  							widthFactor = 1.0;  						if (heightFactor < 1.0)  							heightFactor = 1.0;  						break;  					case StretchDirection.DownOnly:  						if (widthFactor > 1.0)  							widthFactor = 1.0;  						if (heightFactor > 1.0)  							heightFactor = 1.0;  						break;  				}
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,OnTextDecorationsChanged,The following switch statement is missing a default case: switch (td.Location)                      {                          case TextDecorationLocation.Underline:                              underline = true;                              break;                          case TextDecorationLocation.Baseline:                              baseline = true;                              break;                          case TextDecorationLocation.Strikethrough:                              strikethrough = true;                              break;                          case TextDecorationLocation.OverLine:                              overline = true;                              break;                      }
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,OnComboBoxPreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                      // Move up from the current position.                      MoveListPosition(listBox' -1);                      e.Handled = true;                      break;                    case Key.Down:                      // Move down from the current position' unless the item at the current position is                      // not already selected in which case select it.                      if (listBox.Items.CurrentPosition == listBox.SelectedIndex)                      {                          MoveListPosition(listBox' +1);                      }                      else                      {                          MoveListPosition(listBox' 0);                      }                      e.Handled = true;                      break;              }
Missing Default,Eto.Wpf.CustomControls.FontDialog,FontChooser,C:\repos\picoe_Eto\Source\Eto.Wpf\CustomControls\FontDialog\fontchooser.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.selectionControls = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.fontFamilyTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.fontFamilyList = ((System.Windows.Controls.ListBox)(target));              return;              case 4:              this.typefaceList = ((System.Windows.Controls.ListBox)(target));              return;              case 5:              this.sizeTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.sizeList = ((System.Windows.Controls.ListBox)(target));              return;              case 7:              this.decorations = ((System.Windows.Controls.DockPanel)(target));              return;              case 8:              this.underlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.baselineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.strikethroughCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.overlineCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 13:              this.samplesTab = ((System.Windows.Controls.TabItem)(target));              return;              case 14:              this.fontFamilyNameRun = ((System.Windows.Documents.Run)(target));              return;              case 15:              this.fontFamilySamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 16:              this.typefaceNameRun = ((System.Windows.Documents.Run)(target));              return;              case 17:              this.typefaceSamples = ((System.Windows.Controls.RichTextBox)(target));              return;              case 18:              this.typographyTab = ((System.Windows.Controls.TabItem)(target));              return;              case 19:              this.featureList = ((System.Windows.Controls.ListBox)(target));              return;              case 20:              this.typographyFeaturePage = ((System.Windows.Controls.Grid)(target));              return;              case 21:              this.descriptiveTextTab = ((System.Windows.Controls.TabItem)(target));              return;              case 22:              this.fontDescriptionBox = ((System.Windows.Controls.RichTextBox)(target));              return;              case 23:              this.fontLicenseBox = ((System.Windows.Controls.TextBox)(target));              return;              case 24:              this.preview = ((System.Windows.Controls.DockPanel)(target));              return;              case 25:              this.previewTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 26:                            #line 178 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOKButtonClicked);                            #line default              #line hidden              return;              case 27:                            #line 179 "CustomControls\FontDialog\fontchooser.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClicked);                            #line default              #line hidden              return;              }
