Implementation smell,Namespace,Class,File,Method,Description
Long Method,App1.Data,SampleDataSource,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,SampleDataSource,The method has 188 lines of code.
Complex Method,App1.Common,RichTextColumns,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Parameter List,App1.Data,SampleDataCommon,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,SampleDataCommon,The method has 5 parameters. Parameters: uniqueId' title' subtitle' imagePath' description
Long Parameter List,App1.Data,SampleDataItem,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,SampleDataItem,The method has 8 parameters. Parameters: frame' uniqueId' title' subtitle' imagePath' description' content' group
Long Parameter List,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,SampleDataGroup,The method has 6 parameters. Parameters: frame' uniqueId' title' subtitle' imagePath' description
Long Statement,App1.Data,SampleDataSource,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,GetGroups,The length of the statement  "            if (!uniqueId.Equals("AllGroups")) throw new ArgumentException("Only 'AllGroups' is supported as a collection of groups"); " is 122.
Long Statement,App1.Common,SuspensionManager,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,App1.Common,SuspensionManager,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,App1,App,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following statement contains a magic number: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
Magic Number,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,App1.Common,LayoutAwarePage,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Missing Default,App1.Data,SampleDataGroup,C:\repos\jlaanstra_Windows.UI.Interactivity\App1\DataModel\SampleDataSource.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex'Items[e.NewStartingIndex]);                          if (TopItems.Count > 12)                          {                              TopItems.RemoveAt(12);                          }                      }                      break;                  case NotifyCollectionChangedAction.Move:                      if (e.OldStartingIndex < 12 && e.NewStartingIndex < 12)                      {                          TopItems.Move(e.OldStartingIndex' e.NewStartingIndex);                      }                      else if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          TopItems.Add(Items[11]);                      }                      else if (e.NewStartingIndex < 12)                      {                          TopItems.Insert(e.NewStartingIndex' Items[e.NewStartingIndex]);                          TopItems.RemoveAt(12);                      }                      break;                  case NotifyCollectionChangedAction.Remove:                      if (e.OldStartingIndex < 12)                      {                          TopItems.RemoveAt(e.OldStartingIndex);                          if (Items.Count >= 12)                          {                              TopItems.Add(Items[11]);                          }                      }                      break;                  case NotifyCollectionChangedAction.Replace:                      if (e.OldStartingIndex < 12)                      {                          TopItems[e.OldStartingIndex] = Items[e.OldStartingIndex];                      }                      break;                  case NotifyCollectionChangedAction.Reset:                      TopItems.Clear();                      while (TopItems.Count < Items.Count && TopItems.Count < 12)                      {                          TopItems.Add(Items[TopItems.Count]);                      }                      break;              }
