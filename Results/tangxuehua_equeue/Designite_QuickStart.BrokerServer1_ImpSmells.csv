Implementation smell,Namespace,Class,File,Method,Description
Long Statement,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The length of the statement  "            var brokerAddress = string.IsNullOrEmpty(bindingAddress) ? SocketUtils.GetLocalIPV4() : IPAddress.Parse(bindingAddress); " is 120.
Long Statement,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The length of the statement  "            setting.BrokerInfo.ProducerAddress = new IPEndPoint(brokerAddress' int.Parse(ConfigurationManager.AppSettings["producerPort"])).ToAddress(); " is 140.
Long Statement,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The length of the statement  "            setting.BrokerInfo.ConsumerAddress = new IPEndPoint(brokerAddress' int.Parse(ConfigurationManager.AppSettings["consumerPort"])).ToAddress(); " is 140.
Long Statement,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The length of the statement  "            setting.BrokerInfo.AdminAddress = new IPEndPoint(brokerAddress' int.Parse(ConfigurationManager.AppSettings["adminPort"])).ToAddress(); " is 134.
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: var setting = new BrokerSetting(                  isMessageStoreMemoryMode: bool.Parse(ConfigurationManager.AppSettings["isMemoryMode"])'                  chunkFileStoreRootPath: ConfigurationManager.AppSettings["fileStoreRootPath"]'                  chunkFlushInterval: int.Parse(ConfigurationManager.AppSettings["flushInterval"])'                  chunkCacheMaxCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMaxCount"])'                  chunkCacheMinCount: int.Parse(ConfigurationManager.AppSettings["chunkCacheMinCount"])'                  messageChunkDataSize: int.Parse(ConfigurationManager.AppSettings["chunkSize"]) * 1024 * 1024'                  chunkWriteBuffer: int.Parse(ConfigurationManager.AppSettings["chunkWriteBuffer"]) * 1024'                  enableCache: bool.Parse(ConfigurationManager.AppSettings["enableCache"])'                  syncFlush: bool.Parse(ConfigurationManager.AppSettings["syncFlush"])'                  messageChunkLocalCacheSize: 30 * 10000'                  queueChunkLocalCacheSize: 10000)              {                  NotifyWhenMessageArrived = bool.Parse(ConfigurationManager.AppSettings["notifyWhenMessageArrived"])'                  MessageWriteQueueThreshold = int.Parse(ConfigurationManager.AppSettings["messageWriteQueueThreshold"])'                  DeleteMessageIgnoreUnConsumed = bool.Parse(ConfigurationManager.AppSettings["deleteMessageIgnoreUnConsumed"])              };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,Main,The following statement contains a magic number: setting.NameServerList = new List<IPEndPoint> { new IPEndPoint(nameServerAddress' 9493) };
Magic Number,QuickStart.BrokerServer1,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.BrokerServer1\Program.cs,InitializeEQueue,The following statement contains a magic number: var configuration = ECommonConfiguration                  .Create()                  .UseAutofac()                  .RegisterCommonComponents()                  .UseSerilog()                  .UseJsonNet()                  .RegisterUnhandledExceptionHandler()                  .RegisterEQueueComponents()                  .UseDeleteMessageByCountStrategy(5)                  .BuildContainer();
