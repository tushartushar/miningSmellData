Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessages,The method has 140 lines of code.
Long Parameter List,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessages,The method has 6 parameters. Parameters: producer' mode' batchSize' messageCount' topic' payload
Long Statement,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,InitializeEQueue,The length of the statement  "                    _logger.InfoFormat("{0}' {1}' totalCount: {2}' throughput: {3}' averageThrughput: {4}' rt: {5:F3}ms' averageRT: {6:F3}ms"' _performanceService.Name' logContextText' x.TotalCount' x.Throughput' x.AverageThroughput' x.RT' x.AverageRT); " is 233.
Long Statement,QuickStart.ProducerClient,ResponseHandler,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,HandleResponse,The length of the statement  "                    _performanceService.IncrementKeyCount(_mode' (DateTime.Now - sendResult.MessageStoreResult.CreatedTime).TotalMilliseconds); " is 123.
Magic Number,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessageTest,The following statement contains a magic number: var setting = new ProducerSetting                  {                      ClusterName = clusterName'                      NameServerList = new List<IPEndPoint> { new IPEndPoint(nameServerAddress' 9493) }                  };
Magic Number,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessages,The following statement contains a magic number: sendAction = index =>                  {                      if (batchSize == 1)                      {                          var message = new Message(topic' 100' payload);                          producer.SendOneway(message' index.ToString()).ContinueWith(t =>                          {                              _performanceService.IncrementKeyCount(_mode' (DateTime.Now - message.CreatedTime).TotalMilliseconds);                          });                      }                      else                      {                          var messages = new List<Message>();                          for (var i = 0; i < batchSize; i++)                          {                              messages.Add(new Message(topic' 100' payload));                          }                          producer.BatchSendOneway(messages' index.ToString()).ContinueWith(t =>                          {                              var currentTime = DateTime.Now;                              foreach (var message in messages)                              {                                  _performanceService.IncrementKeyCount(_mode' (currentTime - message.CreatedTime).TotalMilliseconds);                              }                          });                      }                  };
Magic Number,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessages,The following statement contains a magic number: sendAction = index =>                  {                      if (batchSize == 1)                      {                          var message = new Message(topic' 100' payload);                          producer.SendOneway(message' index.ToString()).ContinueWith(t =>                          {                              _performanceService.IncrementKeyCount(_mode' (DateTime.Now - message.CreatedTime).TotalMilliseconds);                          });                      }                      else                      {                          var messages = new List<Message>();                          for (var i = 0; i < batchSize; i++)                          {                              messages.Add(new Message(topic' 100' payload));                          }                          producer.BatchSendOneway(messages' index.ToString()).ContinueWith(t =>                          {                              var currentTime = DateTime.Now;                              foreach (var message in messages)                              {                                  _performanceService.IncrementKeyCount(_mode' (currentTime - message.CreatedTime).TotalMilliseconds);                              }                          });                      }                  };
Magic Number,QuickStart.ProducerClient,Program,D:\research\architectureSmells\repos1\tangxuehua_equeue\src\Samples\QuickStart\QuickStart.ProducerClient\Program.cs,SendMessages,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  for (var i = 0L; i < messageCount; i++)                  {                      try                      {                          sendAction(i);                      }                      catch (Exception ex)                      {                          _hasError = true;                          _logger.ErrorFormat("Send message failed' errorMsg:{0}"' ex.Message);                      }                        if (_hasError)                      {                          Thread.Sleep(3000);                          _hasError = false;                      }                  }              });
