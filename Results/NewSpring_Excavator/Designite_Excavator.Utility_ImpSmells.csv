Implementation smell,Namespace,Class,File,Method,Description
Long Method,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttribute,The method has 186 lines of code.
Long Method,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttributeValue,The method has 117 lines of code.
Complex Method,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttributeValue,Cyclomatic complexity of the method is 8
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddDevice,The method has 10 parameters. Parameters: rockContext' deviceName' deviceDescription' deviceTypeId' locationId' ipAddress' dateCreated' deviceForeignKey' instantSave' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddFinancialAccount,The method has 11 parameters. Parameters: rockContext' fundName' fundDescription' accountGL' fundCampusId' parentAccountId' isActive' dateCreated' accountForeignKey' instantSave' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddNamedLocation,The method has 9 parameters. Parameters: rockContext' parentLocationId' locationName' locationActive' locationCapacity' dateCreated' locationForeignKey' instantSave' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddGroup,The method has 11 parameters. Parameters: rockContext' groupTypeId' parentGroupId' groupName' groupActive' campusId' dateCreated' groupForeignKey' instantSave' creatorPersonAliasId' scheduleId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddGroupType,The method has 15 parameters. Parameters: rockContext' typeName' typeDescription' typeParentId' inheritedGroupTypeId' typePurposeValueId' typeTakesAttendance' attendanceIsWeekendService' showInGroupList' showInNavigation' typeOrder' instantSave' dateCreated' typeForeignKey' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddNamedSchedule,The method has 9 parameters. Parameters: rockContext' scheduleName' iCalendarContent' dayOfWeek' timeOfDay' dateCreated' scheduleForeignKey' instantSave' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,GetGroupTypeRole,The method has 10 parameters. Parameters: rockContext' groupTypeId' roleName' roleDescription' isLeader' roleOrder' instantSave' dateCreated' roleForeignKey' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,GetAttributeCategory,The method has 5 parameters. Parameters: rockContext' categoryName' findOnly' entityTypeId' importPeronAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,FindEntityAttribute,The method has 5 parameters. Parameters: rockContext' categoryName' attributeName' entityTypeId' attributeForeignKey
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddCommunication,The method has 11 parameters. Parameters: rockContext' mediumEntityTypeId' itemCaption' communicationText' isBulkEmail' itemStatus' recipients' instantSave' dateCreated' itemForeignKey' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityNote,The method has 13 parameters. Parameters: rockContext' noteEntityTypeId' noteEntityId' noteCaption' noteText' isAlert' isPrivate' noteTypeName' noteTypeId' instantSave' noteCreated' noteForeignKey' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttribute,The method has 13 parameters. Parameters: rockContext' entityTypeId' entityTypeQualifierName' entityTypeQualifierValue' foreignKey' categoryName' attributeName' key' fieldTypeId' instantSave' definedTypeForeignId' definedTypeForeignKey' importPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttributeValue,The method has 6 parameters. Parameters: rockContext' attribute' entity' value' changes' csv
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddUserLogin,The method has 10 parameters. Parameters: rockContext' authProviderTypeId' personId' username' password' isConfirmed' instantSave' userCreated' userForeignKey' creatorPersonAliasId
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddPrayerRequest,The method has 18 parameters. Parameters: rockContext' categoryName' requestText' requestDate' foreignKey' firstName' lastName' email' expireDate' allowComments' isPublic' isApproved' approvedDate' approvedByAliasId' createdByAliasId' requestedByAliasId' answerText' instantSave
Long Parameter List,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddPersonPreviousName,The method has 5 parameters. Parameters: rockContext' personPreviousName' personAliasId' fk' instantSave
Long Identifier,Excavator.Utility,CachedTypes,C:\repos\NewSpring_Excavator\Excavator.Utility\CachedTypes.cs,,The length of the parameter EmailCommunicationMediumTypeId is 30.
Long Identifier,Excavator.Utility,CachedTypes,C:\repos\NewSpring_Excavator\Excavator.Utility\CachedTypes.cs,,The length of the parameter NoActivityPersonRecordReasonId is 30.
Long Identifier,Excavator.Utility,CachedTypes,C:\repos\NewSpring_Excavator\Excavator.Utility\CachedTypes.cs,,The length of the parameter TransactionSourceTypeWebsiteId is 30.
Long Identifier,Excavator.Utility,CachedTypes,C:\repos\NewSpring_Excavator\Excavator.Utility\CachedTypes.cs,,The length of the parameter AllowCheckInByKnownRelationshipId is 33.
Long Identifier,Excavator.Utility,CachedTypes,C:\repos\NewSpring_Excavator\Excavator.Utility\CachedTypes.cs,,The length of the parameter ImpliedRelationshipOwnerRoleId is 30.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,GetGroupTypeRole,The length of the statement  "                return queryable.OrderByDescending( r => r.Id == r.GroupType.DefaultGroupRoleId ).ThenBy( r => r.Order ).FirstOrDefault(); " is 122.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,GetAttributeCategory,The length of the statement  "                .FirstOrDefault( c => c.EntityTypeQualifierValue == entityTypeId.ToString() && c.Name.ToUpper() == categoryName.ToUpper() ); " is 124.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,FindEntityAttribute,The length of the statement  "                        ( ( string.IsNullOrEmpty( categoryName ) ) || ( a.Categories.Count( c => c.Name.ToUpper() == categoryName.ToUpper() ) > 0 ) ) " is 125.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttribute,The length of the statement  "                        || ( !( definedTypeForeignKey == null || definedTypeForeignKey.Trim() == string.Empty ) && !( t.ForeignKey == null || t.ForeignKey.Trim() == string.Empty ) && t.ForeignKey.Equals( definedTypeForeignKey' StringComparison.CurrentCultureIgnoreCase ) ) " is 248.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttribute,The length of the statement  "                        definedType = typeService.Queryable().FirstOrDefault( t => t.Name.Equals( attributeName + " Defined Type" ) || ( t.ForeignId != null && t.ForeignId == definedTypeForeignId ) || ( !( t.ForeignKey == null || t.ForeignKey.Trim() == string.Empty ) && t.ForeignKey == definedTypeForeignKey ) ); " is 289.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttributeValue,The length of the statement  "                    attributeValue = rockContext.AttributeValues.Local.AsQueryable().FirstOrDefault( av => av.AttributeId == attribute.Id && av.EntityId == entity.Id ); " is 148.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddUserLogin,The length of the statement  "            if ( string.IsNullOrWhiteSpace( username ) || !authProviderTypeId.HasValue || rockContext.UserLogins.Any( u => u.UserName.Equals( username' StringComparison.CurrentCultureIgnoreCase ) ) ) " is 187.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,StripPrefix,The length of the statement  "                textValue = textValue.StartsWith( campus.Name' StringComparison.CurrentCultureIgnoreCase ) ? textValue.Substring( campus.Name.Length ) : textValue; " is 147.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,StripPrefix,The length of the statement  "                textValue = textValue.StartsWith( campus.ShortCode' StringComparison.CurrentCultureIgnoreCase ) ? textValue.Substring( campus.ShortCode.Length ) : textValue; " is 157.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,StripSuffix,The length of the statement  "                textValue = textValue.EndsWith( campus.Name' StringComparison.CurrentCultureIgnoreCase ) ? textValue.Substring( 0' textValue.IndexOf( campus.Name ) ) : textValue; " is 162.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,StripSuffix,The length of the statement  "                textValue = textValue.EndsWith( campus.ShortCode' StringComparison.CurrentCultureIgnoreCase ) ? textValue.Substring( 0' textValue.IndexOf( campus.ShortCode ) ) : textValue; " is 172.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddPrayerRequest,The length of the statement  "                    prayerRequest = rockContext.PrayerRequests.AsQueryable().FirstOrDefault( p => p.ForeignKey.ToLower().Equals( foreignKey.ToLower() ) ); " is 134.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddPrayerRequest,The length of the statement  "                        var category = rockContext.Categories.AsNoTracking().FirstOrDefault( c => c.EntityTypeId.Equals( prayerRequest.TypeId ) && c.Name.ToUpper().Equals( categoryName.ToUpper() ) ); " is 175.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,ParseDateOrDefault,The length of the statement  "            if ( DateTime.TryParseExact( stringValue' dateFormats' CultureInfo.InvariantCulture' DateTimeStyles.None' out parsed ) ) " is 120.
Long Statement,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,TryParseBool,The length of the statement  "            // There are a couple of built-in ways to convert values to boolean' but unfortunately they skip things like YES/NO' 1/0' T/F " is 125.
Complex Conditional,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityNote,The conditional expression  "noteEntityTypeId <= 0 || noteEntityId <= 0 || ( noteTypeId == null && string.IsNullOrEmpty( noteTypeName ) )"  is complex.
Magic Number,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddFinancialAccount,The following statement contains a magic number: var account = new FinancialAccount              {                  Name = fundName.Truncate( 50 )'                  Description = fundDescription'                  PublicName = fundName.Truncate( 50 )'                  GlCode = accountGL'                  IsTaxDeductible = true'                  IsActive = isActive ?? true'                  IsPublic = false'                  Order = 0'                  CampusId = fundCampusId'                  ParentAccountId = parentAccountId'                  CreatedDateTime = dateCreated'                  CreatedByPersonAliasId = creatorPersonAliasId'                  ForeignKey = accountForeignKey'                  ForeignId = accountForeignKey.AsIntegerOrNull()              };
Magic Number,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddFinancialAccount,The following statement contains a magic number: var account = new FinancialAccount              {                  Name = fundName.Truncate( 50 )'                  Description = fundDescription'                  PublicName = fundName.Truncate( 50 )'                  GlCode = accountGL'                  IsTaxDeductible = true'                  IsActive = isActive ?? true'                  IsPublic = false'                  Order = 0'                  CampusId = fundCampusId'                  ParentAccountId = parentAccountId'                  CreatedDateTime = dateCreated'                  CreatedByPersonAliasId = creatorPersonAliasId'                  ForeignKey = accountForeignKey'                  ForeignId = accountForeignKey.AsIntegerOrNull()              };
Magic Number,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddEntityAttribute,The following statement contains a magic number: if ( attribute == null && fieldTypeId != -1 )              {                  attribute = new Attribute                  {                      Name = attributeName'                      FieldTypeId = fieldTypeId'                      EntityTypeId = entityTypeId'                      EntityTypeQualifierColumn = entityTypeQualifierName'                      EntityTypeQualifierValue = entityTypeQualifierValue'                      DefaultValue = string.Empty'                      IsMultiValue = false'                      IsGridColumn = false'                      IsRequired = false'                      Order = 0'                      CreatedByPersonAliasId = importPersonAliasId'                      ModifiedByPersonAliasId = importPersonAliasId'                      ForeignId = foreignKey.AsIntegerOrNull()'                      ForeignKey = foreignKey                  };                    if ( !string.IsNullOrEmpty( key ) )                  {                      attribute.Key = key;                  }                  else                  {                      if ( !string.IsNullOrEmpty( categoryName ) )                      {                          attribute.Key = $"{categoryName.RemoveWhitespace()}_{attributeName.RemoveWhitespace()}";                      }                      else                      {                          attribute.Key = attributeName.RemoveWhitespace();                      }                  }                    var attributeQualifiers = new List<AttributeQualifier>();                    // Do specific value type settings.                  if ( fieldTypeId == DateFieldTypeId )                  {                      attribute.Description = attributeName + " Date created by import";                        // Add date attribute qualifiers                      attributeQualifier = new AttributeQualifier                      {                          Key = "format"'                          Value = ""'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "displaydiff"'                          Value = "false"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "displaycurrentoption"'                          Value = "false"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                  }                  else if ( fieldTypeId == BooleanFieldTypeId )                  {                      attribute.Description = attributeName + " Boolean created by import";                        //                      // Add boolean attribute qualifiers                      //                      attributeQualifier = new AttributeQualifier                      {                          Key = "truetext"'                          Value = "Yes"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "falsetext"'                          Value = "No"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                  }                  else if ( fieldTypeId == DefinedValueFieldTypeId )                  {                      var typeService = new DefinedTypeService( rockContext );                      DefinedType definedType = null;                        // Check for the defined type by the original name only' id' or key.                      var definedTypeExists = typeService.Queryable().Any( t => t.Name.Equals( attributeName + " Defined Type" )                          || ( definedTypeForeignId.HasValue && t.ForeignId.HasValue && t.ForeignId == definedTypeForeignId )                          || ( !( definedTypeForeignKey == null || definedTypeForeignKey.Trim() == string.Empty ) && !( t.ForeignKey == null || t.ForeignKey.Trim() == string.Empty ) && t.ForeignKey.Equals( definedTypeForeignKey' StringComparison.CurrentCultureIgnoreCase ) )                          );                        if ( !definedTypeExists )                      {                          definedType = new DefinedType                          {                              IsSystem = false'                              Order = 0'                              FieldTypeId = FieldTypeCache.Read( Rock.SystemGuid.FieldType.TEXT' rockContext ).Id'                              Name = attributeName.Left( 87 ) + " Defined Type"'                              Description = attributeName + " Defined Type created by import"'                              ForeignId = definedTypeForeignId'                              ForeignKey = definedTypeForeignKey                          };                            typeService.Add( definedType );                          rockContext.SaveChanges();                      }                      else                      {                          definedType = typeService.Queryable().FirstOrDefault( t => t.Name.Equals( attributeName + " Defined Type" ) || ( t.ForeignId != null && t.ForeignId == definedTypeForeignId ) || ( !( t.ForeignKey == null || t.ForeignKey.Trim() == string.Empty ) && t.ForeignKey == definedTypeForeignKey ) );                      }                        attribute.Description = attributeName + " Defined Type created by import";                        //                      // Add defined value attribute qualifiers                      //                      attributeQualifier = new AttributeQualifier                      {                          Key = "definedtype"'                          Value = definedType.Id.ToString()'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "allowmultiple"'                          Value = "False"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "displaydescription"'                          Value = "false"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                  }                  else if ( fieldTypeId == SingleSelectFieldTypeId )                  {                      attribute.Description = attributeName + " Single Select created by import";                      attributeQualifier = new AttributeQualifier                      {                          Key = "values"'                          Value = "Pass'Fail"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                        attributeQualifier = new AttributeQualifier                      {                          Key = "fieldtype"'                          Value = "ddl"'                          IsSystem = false                      };                        attribute.AttributeQualifiers.Add( attributeQualifier );                  }                  else                  {                      attribute.Description = attributeName + " created by import";                  }              }
Magic Number,Excavator.Utility,Extensions,C:\repos\NewSpring_Excavator\Excavator.Utility\AddMethods.cs,AddPrayerRequest,The following statement contains a magic number: if ( !string.IsNullOrWhiteSpace( requestText ) )              {                  rockContext = rockContext ?? new RockContext();                    if ( !string.IsNullOrWhiteSpace( foreignKey ) )                  {                      prayerRequest = rockContext.PrayerRequests.AsQueryable().FirstOrDefault( p => p.ForeignKey.ToLower().Equals( foreignKey.ToLower() ) );                  }                    if ( prayerRequest == null )                  {                      var prayerRequestDate = (DateTime)ParseDateOrDefault( requestDate' ExcavatorComponent.ImportDateTime );                        prayerRequest = new PrayerRequest                      {                          FirstName = string.IsNullOrWhiteSpace( firstName ) ? "-" : firstName'                          LastName = lastName'                          Email = email'                          Text = requestText'                          EnteredDateTime = prayerRequestDate'                          ExpirationDate = ParseDateOrDefault( expireDate' prayerRequestDate.AddDays( 14 ) )'                          AllowComments = allowComments'                          IsPublic = isPublic'                          IsApproved = isApproved'                          ApprovedOnDateTime = (bool)isApproved ? ParseDateOrDefault( approvedDate' ExcavatorComponent.ImportDateTime ) : null'                          ApprovedByPersonAliasId = approvedByAliasId'                          CreatedByPersonAliasId = createdByAliasId'                          RequestedByPersonAliasId = requestedByAliasId'                          ForeignKey = foreignKey'                          ForeignId = foreignKey.AsType<int?>()'                          Answer = answerText                      };                        if ( !string.IsNullOrWhiteSpace( categoryName ) )                      {                          //                          // Try to find an existing category.                          //                          var category = rockContext.Categories.AsNoTracking().FirstOrDefault( c => c.EntityTypeId.Equals( prayerRequest.TypeId ) && c.Name.ToUpper().Equals( categoryName.ToUpper() ) );                            //                          // If not found' create one.                          //                          if ( category == null )                          {                              category = new Category                              {                                  IsSystem = false'                                  EntityTypeId = prayerRequest.TypeId'                                  Name = categoryName'                                  Order = 0'                                  ParentCategoryId = AllChurchCategoryId                              };                                rockContext.Categories.Add( category );                              rockContext.SaveChanges( DisableAuditing );                          }                            prayerRequest.CategoryId = category.Id;                      }                        if ( instantSave )                      {                          rockContext.PrayerRequests.Add( prayerRequest );                          rockContext.SaveChanges( DisableAuditing );                      }                  }              }
