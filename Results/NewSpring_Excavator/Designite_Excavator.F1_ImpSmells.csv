Implementation smell,Namespace,Class,File,Method,Description
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The method has 200 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The method has 230 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The method has 108 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The method has 100 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The method has 101 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The method has 310 lines of code.
Long Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The method has 164 lines of code.
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,Cyclomatic complexity of the method is 10
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,Cyclomatic complexity of the method is 16
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,Cyclomatic complexity of the method is 8
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,Cyclomatic complexity of the method is 10
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,Cyclomatic complexity of the method is 22
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,Cyclomatic complexity of the method is 14
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,Cyclomatic complexity of the method is 10
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,Cyclomatic complexity of the method is 11
Complex Method,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,Cyclomatic complexity of the method is 35
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            HouseholdIdAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 137.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                HouseholdIdAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 172.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            IndividualIdAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                IndividualIdAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 173.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            SecondaryEmailAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                SecondaryEmailAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 175.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            InFellowshipLoginAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 143.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                InFellowshipLoginAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 178.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,GetPersonKeys,The length of the statement  "                return ImportedPeople.Where( p => p.GroupForeignId == householdId && ( includeVisitors || p.FamilyRoleId != FamilyRole.Visitor ) ) " is 130.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,GetFamilyByHouseholdId,The length of the statement  "            return ImportedPeople.Where( p => p.GroupForeignId == householdId && ( includeVisitors || p.FamilyRoleId != FamilyRole.Visitor ) ).ToList(); " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "            var importedCommunicationCount = new CommunicationService( lookupContext ).Queryable().Count( c => c.ForeignKey != null ); " is 122.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "            ReportProgress( 0' $"Verifying contact items ({totalRows:N0} found' {importedNoteCount + importedCommunicationCount:N0} already exist)." ); " is 139.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                            CommunicationStatus.Approved' recipients' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                        var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' itemCaption' itemText' false' false' itemType' " is 128.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The length of the statement  "                if ( personKeys != null && ( !string.IsNullOrWhiteSpace( noteText ) || !string.IsNullOrWhiteSpace( confidentialText ) ) ) " is 121.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The length of the statement  "                        var confidential = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' string.Empty' confidentialText' false' false' " is 135.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The length of the statement  "                    var noteTypeId = noteType.StartsWith( "General"' StringComparison.InvariantCultureIgnoreCase ) ? (int?)PersonalNoteTypeId : null; " is 129.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The length of the statement  "                    var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' string.Empty' text' false' false' noteType' noteTypeId' false' dateCreated' " is 157.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var definedTypePhoneType = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE )' lookupContext ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var otherNumberTypeId = definedTypePhoneType.DefinedValues.Where( dv => dv.Value.StartsWith( "Other" ) ).Select( v => (int?)v.Id ).FirstOrDefault(); " is 148.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var personAttributes = new AttributeService( lookupContext ).GetByEntityTypeId( PersonEntityTypeId ).AsNoTracking().ToList(); " is 125.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var twitterAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Twitter"' StringComparison.InvariantCultureIgnoreCase ) ); " is 134.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var facebookAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Facebook"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var instagramAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Instagram"' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            ReportProgress( 0' $"Verifying communication import ({totalRows:N0} found' {existingNumbers.Count:N0} already exist)." ); " is 121.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) ) " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "                                    var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) ) " is 145.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "                                    var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId ); " is 167.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCommunication,The length of the statement  "                            var existingValue = rockContext.AttributeValues.FirstOrDefault( v => v.Attribute.Key == attributeCache.Key && v.EntityId == person.Id ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The length of the statement  "            ReportProgress( 0' $"Verifying check number import ({totalRows:N0} found' {importedBankAccounts.Count:N0} already exist)." ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The length of the statement  "                        if ( !importedBankAccounts.Any( a => a.PersonAliasId == personKeys.PersonAliasId && a.AccountNumberSecured == encodedNumber ) ) " is 127.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var transactionTypeContributionId = DefinedValueCache.Read( Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_CONTRIBUTION.AsGuid()' lookupContext ).Id; " is 148.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeACH = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_ACH ) ) ).Id; " is 154.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCash = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH ) ) ).Id; " is 156.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCheck = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK ) ) ).Id; " is 158.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCreditCard = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CREDIT_CARD ) ) ).Id; " is 169.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeNonCash = currencyTypes.DefinedValues.Where( dv => dv.Value.Equals( "Non-Cash" ) ).Select( dv => (int?)dv.Id ).FirstOrDefault(); " is 144.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var creditCardTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE ) ).DefinedValues; " is 128.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var refundReasons = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON )' lookupContext ).DefinedValues; " is 150.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            ReportProgress( 0' $"Verifying contribution import ({totalRows:N0} found' {importedContributions.Count:N0} already exist)." ); " is 126.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                    var contributionType = contributionFields.Contains( "Contribution_Type_Name" ) ? row["Contribution_Type_Name"] as string : string.Empty; " is 136.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                    var subFundGLAccount = contributionFields.Contains( "Sub_Fund_GL_Account" ) ? row["Sub_Fund_GL_Account"] as string : string.Empty; " is 130.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                        var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 163.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' fundGLAccount' null' null' isFundActive.AsBooleanOrNull()' receivedDate' fundName.RemoveSpecialCharacters() ); " is 213.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name' StringComparison.CurrentCultureIgnoreCase ) || subFund.StartsWith( c.ShortCode' StringComparison.CurrentCultureIgnoreCase ) ); " is 203.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 178.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                                childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' subFundGLAccount' campusFundId' parentAccount.Id' isFundActive.AsBooleanOrNull()' receivedDate' subFund.RemoveSpecialCharacters() ); " is 232.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) ) " is 124.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "            var pledgeFrequencies = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_FREQUENCY )' lookupContext ).DefinedValues; " is 138.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "            var oneTimePledgeFrequencyId = pledgeFrequencies.FirstOrDefault( f => f.Guid == new Guid( Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_ONE_TIME ) ).Id; " is 157.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                            if ( frequency.Equals( "one time"' StringComparison.CurrentCultureIgnoreCase ) || frequency.Equals( "as can"' StringComparison.CurrentCultureIgnoreCase ) ) " is 155.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                    .Where( f => f.Value.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) || f.Description.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) ) " is 173.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                            var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 163.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' string.Empty' null' null' null' startDate' fundName.RemoveSpecialCharacters() ); " is 183.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 178.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                    childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' string.Empty' campusFundId' parentAccount.Id' null' startDate' subFund.RemoveSpecialCharacters() ); " is 199.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "            var customLocationTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.GROUP_LOCATION_TYPE )' lookupContext ).DefinedValues; " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                var otherGroupLocationType = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.GROUP_LOCATION_TYPE' otherGroupLocationName ); " is 135.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                        var familyAddress = locationService.Get( street1' street2' city' state' zip.Left( 5 )' country' verifyLocation: false ); " is 120.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                            else if ( addressType.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) || addressType.StartsWith( "Org"' StringComparison.CurrentCultureIgnoreCase ) ) " is 165.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                                var customTypeId = customLocationTypes.Where( dv => dv.Value.Equals( addressType' StringComparison.CurrentCultureIgnoreCase ) ) " is 127.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The length of the statement  "            var staffGroupId = new GroupService( lookupContext ).GetByGuid( new Guid( Rock.SystemGuid.Group.GROUP_STAFF_MEMBERS ) ).Id; " is 123.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The length of the statement  "                        var user = AddUserLogin( lookupContext' rockAuthenticatedTypeId' personKeys.PersonId' userName.Trim()' null' isEnabled' false' createdDate' userId.ToString()' ImportPersonAliasId ); " is 181.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The length of the statement  "            var importedCompanyCount = new PersonService( lookupContext ).Queryable().Count( p => p.ForeignId != null && p.RecordTypeValueId == BusinessRecordTypeId ); " is 155.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The length of the statement  "                        ReportProgress( percentComplete' $"{completedItems - importedCompanyCount:N0} companies imported ({percentComplete}% complete)." ); " is 131.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCompanies,The length of the statement  "                            var existingValue = rockContext.AttributeValues.FirstOrDefault( v => v.Attribute.Key == attributeCache.Key && v.EntityId == groupMember.Person.Id ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCompanies,The length of the statement  "                            groupMember.Person.Aliases.Add( new PersonAlias { AliasPersonId = groupMember.Person.Id' AliasPersonGuid = groupMember.Person.Guid } ); " is 135.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var maritalStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS )' lookupContext ).DefinedValues; " is 141.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var connectionStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS )' lookupContext ).DefinedValues; " is 147.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var titleTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_TITLE )' lookupContext ).DefinedValues; " is 124.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var suffixTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_SUFFIX )' lookupContext ).DefinedValues; " is 126.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var personAttributes = new AttributeService( lookupContext ).GetByEntityTypeId( PersonEntityTypeId ).AsNoTracking().ToList(); " is 125.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var previousChurchAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "PreviousChurch"' StringComparison.InvariantCultureIgnoreCase ) ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var membershipDateAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "MembershipDate"' StringComparison.InvariantCultureIgnoreCase ) ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var firstVisitAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "FirstVisit"' StringComparison.InvariantCultureIgnoreCase ) ); " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var allergyNoteAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Allergy"' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var employerAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Employer"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var positionAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Position"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var schoolAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "School"' StringComparison.InvariantCultureIgnoreCase ) ); " is 132.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 140.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 142.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 163.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus ); " is 122.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) ) " is 135.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            else if ( memberStatus.Equals( "Dropped"' StringComparison.CurrentCultureIgnoreCase ) || memberStatus.StartsWith( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) ) " is 171.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( memberStatus' StringComparison.CurrentCultureIgnoreCase ) ) " is 144.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                    var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' memberStatus ); " is 127.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            AddEntityAttributeValue( lookupContext' membershipDateAttribute' person' membershipDate.Value.ToString( "yyyy-MM-dd" ) ); " is 121.
Long Statement,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                        ReportProgress( percentComplete' $"{completedItems - importedPeopleCount:N0} people imported ({percentComplete}% complete)." ); " is 127.
Complex Conditional,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The conditional expression  "personKeys != null && !string.IsNullOrWhiteSpace( text ) && noteTypeActive == true && !noteExcluded"  is complex.
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,TransformData,The following statement contains a magic number: if ( isValidImport )              {                  ReportProgress( 0' "Checking for table dependencies..." );                  // Order tables so dependencies are imported first                  if ( tableList.Any( n => tableDependencies.Contains( n.Name ) ) )                  {                      tableList = tableList.OrderByDescending( n => tableDependencies.IndexOf( n.Name ) ).ToList();                  }                    // get list of objects to grab their rowcounts                  var objectNameIds = Database.Dmvs.Objects.Where( o => !o.IsMSShipped ).ToDictionary( t => t.Name' t => t.ObjectID );                    ReportProgress( 0' "Starting data import..." );                  foreach ( var table in tableList )                  {                      var totalRows = Database.Dmvs.Partitions.FirstOrDefault( p => p.ObjectID == objectNameIds[table.Name] ).Rows;                        switch ( table.Name )                      {                          case "Account":                              MapBankAccount( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Batch":                              MapBatch( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Communication":                              MapCommunication( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Company":                              MapCompany( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "ContactFormData":                              MapContactFormData( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Contribution":                              MapContribution( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Household_Address":                              MapFamilyAddress( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "IndividualContactNotes":                              MapIndividualContactNotes( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Individual_Household":                              MapPerson( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Notes":                              MapNotes( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Pledge":                              MapPledge( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            case "Users":                              MapUsers( scanner.ScanTable( table.Name ).AsQueryable()' totalRows );                              break;                            default:                              break;                      }                  }                    ReportProgress( 100' "Import completed.  " );              }              else              {                  ReportProgress( 0' "No imported people exist. Please include the Individual_Household table during the import." );              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,TransformData,The following statement contains a magic number: return 100;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  // ContactFormData joins to IndividualContactNotes on ContactInstItemID                  var itemForeignKey = row["ContactInstItemID"] as int?;                  var householdId = row["HouseholdID"] as int?;                  var itemIndividualId = row["ContactItemIndividualID"] as int?;                  var individualId = row["ContactIndividualID"] as int?;                  var createdDate = row["ContactActivityDate"] as DateTime?;                  var modifiedDate = row["ContactDatetime"] as DateTime?;                  var itemType = row["ContactFormName"] as string;                  var itemCaption = row["ContactItemName"] as string;                  var noteText1 = row["ContactNote"] as string;                  var noteText2 = row["ContactItemNote"] as string;                  var itemUserId = row["ContactItemAssignedUserID"] as int?;                  var contactUserId = row["ContactAssignedUserID"] as int?;                  var initialContactUserId = row["InitialContactCreatedByUserID"] as int?;                  var isConfidential = row["IsContactItemConfidential"] as int?;                  var itemText = !string.IsNullOrWhiteSpace( noteText1 ) ? $"{noteText1}<br>{noteText2}" : noteText2 ?? string.Empty;                    // look up the person this contact form is for                  var personKeys = GetPersonKeys( itemIndividualId ?? individualId' householdId );                  if ( personKeys != null && ( !string.IsNullOrWhiteSpace( itemCaption ) || !string.IsNullOrWhiteSpace( itemText ) ) )                  {                      var assignedUserId = itemUserId ?? contactUserId ?? initialContactUserId ?? 0;                      var userPersonAliasId = PortalUsers.ContainsKey( assignedUserId ) ? (int?)PortalUsers[assignedUserId] : null;                      if ( itemType.Equals( "Email"' StringComparison.CurrentCultureIgnoreCase ) )                      {                          // create the recipient list for this contact                          var recipients = new List<CommunicationRecipient> {                              new CommunicationRecipient {                                  Status = CommunicationRecipientStatus.Delivered'                                  PersonAliasId = personKeys.PersonAliasId'                                  CreatedDateTime = createdDate ?? modifiedDate'                                  CreatedByPersonAliasId = userPersonAliasId'                                  ModifiedByPersonAliasId = userPersonAliasId'                                  ForeignKey = personKeys.PersonForeignId.ToString()'                                  ForeignId = personKeys.PersonForeignId                              }                          };                            // create an email record for this contact form                          var emailSubject = !string.IsNullOrWhiteSpace( itemCaption ) ? itemCaption.Left( 100 ) : itemText.Left( 100 );                          var communication = AddCommunication( lookupContext' EmailCommunicationMediumTypeId' emailSubject' itemText' false'                              CommunicationStatus.Approved' recipients' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId );                            communicationList.Add( communication );                      }                      else                      {                          //strip campus from note type                          var campusId = GetCampusId( itemType );                          if ( campusId.HasValue )                          {                              itemType = StripPrefix( itemType' campusId );                          }                            // create a note for this contact form                          var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' itemCaption' itemText' false' false' itemType'                              null' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId );                            noteList.Add( note );                      }                        completedItems++;                        if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems:N0} contact items imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveCommunications( communicationList );                          SaveNotes( noteList );                          ReportPartialProgress();                            communicationList.Clear();                          noteList.Clear();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  // ContactFormData joins to IndividualContactNotes on ContactInstItemID                  var itemForeignKey = row["ContactInstItemID"] as int?;                  var householdId = row["HouseholdID"] as int?;                  var itemIndividualId = row["ContactItemIndividualID"] as int?;                  var individualId = row["ContactIndividualID"] as int?;                  var createdDate = row["ContactActivityDate"] as DateTime?;                  var modifiedDate = row["ContactDatetime"] as DateTime?;                  var itemType = row["ContactFormName"] as string;                  var itemCaption = row["ContactItemName"] as string;                  var noteText1 = row["ContactNote"] as string;                  var noteText2 = row["ContactItemNote"] as string;                  var itemUserId = row["ContactItemAssignedUserID"] as int?;                  var contactUserId = row["ContactAssignedUserID"] as int?;                  var initialContactUserId = row["InitialContactCreatedByUserID"] as int?;                  var isConfidential = row["IsContactItemConfidential"] as int?;                  var itemText = !string.IsNullOrWhiteSpace( noteText1 ) ? $"{noteText1}<br>{noteText2}" : noteText2 ?? string.Empty;                    // look up the person this contact form is for                  var personKeys = GetPersonKeys( itemIndividualId ?? individualId' householdId );                  if ( personKeys != null && ( !string.IsNullOrWhiteSpace( itemCaption ) || !string.IsNullOrWhiteSpace( itemText ) ) )                  {                      var assignedUserId = itemUserId ?? contactUserId ?? initialContactUserId ?? 0;                      var userPersonAliasId = PortalUsers.ContainsKey( assignedUserId ) ? (int?)PortalUsers[assignedUserId] : null;                      if ( itemType.Equals( "Email"' StringComparison.CurrentCultureIgnoreCase ) )                      {                          // create the recipient list for this contact                          var recipients = new List<CommunicationRecipient> {                              new CommunicationRecipient {                                  Status = CommunicationRecipientStatus.Delivered'                                  PersonAliasId = personKeys.PersonAliasId'                                  CreatedDateTime = createdDate ?? modifiedDate'                                  CreatedByPersonAliasId = userPersonAliasId'                                  ModifiedByPersonAliasId = userPersonAliasId'                                  ForeignKey = personKeys.PersonForeignId.ToString()'                                  ForeignId = personKeys.PersonForeignId                              }                          };                            // create an email record for this contact form                          var emailSubject = !string.IsNullOrWhiteSpace( itemCaption ) ? itemCaption.Left( 100 ) : itemText.Left( 100 );                          var communication = AddCommunication( lookupContext' EmailCommunicationMediumTypeId' emailSubject' itemText' false'                              CommunicationStatus.Approved' recipients' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId );                            communicationList.Add( communication );                      }                      else                      {                          //strip campus from note type                          var campusId = GetCampusId( itemType );                          if ( campusId.HasValue )                          {                              itemType = StripPrefix( itemType' campusId );                          }                            // create a note for this contact form                          var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' itemCaption' itemText' false' false' itemType'                              null' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId );                            noteList.Add( note );                      }                        completedItems++;                        if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems:N0} contact items imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveCommunications( communicationList );                          SaveNotes( noteList );                          ReportPartialProgress();                            communicationList.Clear();                          noteList.Clear();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: ReportProgress( 100' $"Finished contact item import: {completedItems:N0} items imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The following statement contains a magic number: ReportProgress( 100' $"Finished contact note import: {completedItems:N0} notes imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The following statement contains a magic number: ReportProgress( 100' $"Finished note import: {completedItems:N0} notes imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) )              {                  foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var value = row["Communication_Value"] as string;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var peopleToUpdate = new List<PersonKeys>();                        if ( individualId != null )                      {                          var matchingPerson = GetPersonKeys( individualId' householdId' includeVisitors: false );                          if ( matchingPerson != null )                          {                              peopleToUpdate.Add( matchingPerson );                          }                      }                      else                      {                          peopleToUpdate = GetFamilyByHouseholdId( householdId' includeVisitors: false );                      }                        if ( peopleToUpdate.Any() && !string.IsNullOrWhiteSpace( value ) )                      {                          var lastUpdated = row["LastUpdatedDate"] as DateTime?;                          var communicationComment = row["Communication_Comment"] as string;                          var type = row["Communication_Type"] as string;                          var isListed = (bool)row["Listed"];                          value = value.RemoveWhitespace();                            // Communication value is a number                          if ( type.Contains( "Phone" ) || type.Contains( "Mobile" ) )                          {                              var extension = string.Empty;                              var countryCode = PhoneNumber.DefaultCountryCode();                              var normalizedNumber = string.Empty;                              var countryIndex = value.IndexOf( '+' );                              var extensionIndex = value.LastIndexOf( 'x' ) > 0 ? value.LastIndexOf( 'x' ) : value.Length;                              if ( countryIndex >= 0 )                              {                                  countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();                                  normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();                                  extension = value.Substring( extensionIndex );                              }                              else if ( extensionIndex > 0 )                              {                                  normalizedNumber = value.Substring( 0' extensionIndex ).AsNumeric();                                  extension = value.Substring( extensionIndex ).AsNumeric();                              }                              else                              {                                  normalizedNumber = value.AsNumeric();                              }                                if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                              {                                  foreach ( var personKeys in peopleToUpdate )                                  {                                      var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( v => (int?)v.Id ).FirstOrDefault() ?? otherNumberTypeId;                                        var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId );                                      if ( !numberExists )                                      {                                          var newNumber = new PhoneNumber();                                          newNumber.CreatedByPersonAliasId = ImportPersonAliasId;                                          newNumber.ModifiedDateTime = lastUpdated;                                          newNumber.PersonId = (int)personKeys.PersonId;                                          newNumber.IsMessagingEnabled = type.StartsWith( "Mobile"' StringComparison.CurrentCultureIgnoreCase );                                          newNumber.CountryCode = countryCode;                                          newNumber.IsUnlisted = !isListed;                                          newNumber.Extension = extension.Left( 20 ) ?? string.Empty;                                          newNumber.Number = normalizedNumber.Left( 20 );                                          newNumber.Description = communicationComment;                                          newNumber.NumberFormatted = PhoneNumber.FormattedNumber( countryCode' newNumber.Number' true );                                          newNumber.NumberTypeValueId = matchingNumberTypeId;                                            newNumbers.Add( newNumber );                                          existingNumbers.Add( newNumber );                                      }                                  }                                    completed++;                              }                          }                          else                          {                              var personKeys = peopleToUpdate.FirstOrDefault();                              var person = !newPeopleAttributes.ContainsKey( personKeys.PersonId )                                  ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                  : newPeopleAttributes[personKeys.PersonId];                                if ( person != null )                              {                                  if ( person.Attributes == null || person.AttributeValues == null )                                  {                                      // make sure we have valid objects to assign to                                      person.Attributes = new Dictionary<string' AttributeCache>();                                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                                  }                                    // Check for an InFellowship ID/email before checking other types of email                                  var isLoginValue = type.IndexOf( "InFellowship"' StringComparison.OrdinalIgnoreCase ) >= 0;                                  var personAlreadyHasLogin = person.Attributes.ContainsKey( InFellowshipLoginAttribute.Key );                                  if ( isLoginValue && !personAlreadyHasLogin )                                  {                                      // add F1 authentication capability                                      AddEntityAttributeValue( lookupContext' InFellowshipLoginAttribute' person' value );                                      //AddUserLogin( f1AuthProviderId' person' value );                                  }                                    // also add the Infellowship Email to anyone who doesn't have one                                  if ( value.IsEmail() )                                  {                                      // person email is empty                                      if ( string.IsNullOrWhiteSpace( person.Email ) )                                      {                                          person.Email = value.Left( 75 );                                          person.IsEmailActive = isListed;                                          person.EmailPreference = isListed ? EmailPreference.EmailAllowed : EmailPreference.DoNotEmail;                                          person.ModifiedDateTime = lastUpdated;                                          person.EmailNote = communicationComment;                                          lookupContext.SaveChanges( DisableAuditing );                                      }                                      // this is a different email' assign it to SecondaryEmail                                      else if ( !person.Email.Equals( value ) && !person.Attributes.ContainsKey( SecondaryEmailAttribute.Key ) )                                      {                                          AddEntityAttributeValue( lookupContext' SecondaryEmailAttribute' person' value );                                      }                                  }                                  else if ( type.Contains( "Twitter" ) && !person.Attributes.ContainsKey( twitterAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' twitterAttribute' person' value );                                  }                                  else if ( type.Contains( "Facebook" ) && !person.Attributes.ContainsKey( facebookAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' facebookAttribute' person' value );                                  }                                  else if ( type.Contains( "Instagram" ) && !person.Attributes.ContainsKey( instagramAttribute.Key ) )                                  {                                      AddEntityAttributeValue( lookupContext' instagramAttribute' person' value );                                  }                                    if ( !newPeopleAttributes.ContainsKey( personKeys.PersonId ) )                                  {                                      newPeopleAttributes.Add( personKeys.PersonId' person );                                  }                                  else                                  {                                      newPeopleAttributes[personKeys.PersonId] = person;                                  }                              }                                completed++;                          }                            if ( completed % percentage < 1 )                          {                              var percentComplete = completed / percentage;                              ReportProgress( percentComplete' $"{completed:N0} communication items imported ({percentComplete}% complete)." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              if ( newNumbers.Any() || newPeopleAttributes.Any() )                              {                                  SaveCommunication( newNumbers' newPeopleAttributes );                              }                                // reset so context doesn't bloat                              lookupContext = new RockContext();                              personService = new PersonService( lookupContext );                              newPeopleAttributes.Clear();                              newNumbers.Clear();                              ReportPartialProgress();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: ReportProgress( 100' $"Finished communications import: {completed:N0} items imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The following statement contains a magic number: ReportProgress( 100' $"Finished check number import: {completedItems:N0} numbers imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var batchId = row["BatchID"] as int?;                  if ( batchId.HasValue && !ImportedBatches.ContainsKey( (int)batchId ) )                  {                      var batch = new FinancialBatch                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ForeignKey = batchId.ToString()'                          ForeignId = batchId'                          Note = string.Empty'                          Status = BatchStatus.Closed'                          AccountingSystemCode = string.Empty                      };                        var name = row["BatchName"] as string;                      if ( !string.IsNullOrWhiteSpace( name ) )                      {                          name = name.Trim();                          batch.Name = name.Truncate( 50 );                          batch.CampusId = GetCampusId( name );                      }                        var batchDate = row["BatchDate"] as DateTime?;                      if ( batchDate.HasValue )                      {                          batch.BatchStartDateTime = batchDate;                          batch.BatchEndDateTime = batchDate;                      }                        var amount = row["BatchAmount"] as decimal?;                      if ( amount.HasValue )                      {                          batch.ControlAmount = amount.Value;                      }                        newBatches.Add( batch );                      completedItems++;                      if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems:N0} batches imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveFinancialBatches( newBatches );                          newBatches.ForEach( b => ImportedBatches.Add( (int)b.ForeignId' (int?)b.Id ) );                          newBatches.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: ReportProgress( 100' $"Finished batch import: {completedItems:N0} batches imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var individualId = row["Individual_ID"] as int?;                  var householdId = row["Household_ID"] as int?;                  var contributionId = row["ContributionID"] as int?;                    if ( contributionId.HasValue && !importedContributions.ContainsKey( (int)contributionId ) )                  {                      var transaction = new FinancialTransaction                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ModifiedByPersonAliasId = ImportPersonAliasId'                          TransactionTypeValueId = transactionTypeContributionId'                          ForeignKey = contributionId.ToString()'                          ForeignId = contributionId                      };                        int? giverAliasId = null;                      var personKeys = GetPersonKeys( individualId' householdId );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          giverAliasId = personKeys.PersonAliasId;                          transaction.CreatedByPersonAliasId = giverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                        var summary = row["Memo"] as string;                      if ( !string.IsNullOrWhiteSpace( summary ) )                      {                          transaction.Summary = summary;                      }                        var batchId = row["BatchID"] as int?;                      if ( batchId.HasValue && ImportedBatches.Any( b => b.Key.Equals( batchId ) ) )                      {                          transaction.BatchId = ImportedBatches.FirstOrDefault( b => b.Key.Equals( batchId ) ).Value;                      }                      else                      {                          // use the default batch for any non-matching transactions                          transaction.BatchId = defaultBatchId;                      }                        var receivedDate = row["Received_Date"] as DateTime?;                      if ( receivedDate.HasValue )                      {                          transaction.TransactionDateTime = receivedDate;                          transaction.CreatedDateTime = receivedDate;                          transaction.ModifiedDateTime = ImportDateTime;                      }                        var contributionFields = row.Columns.Select( c => c.Name ).ToList();                      var cardType = contributionFields.Contains( "Card_Type" ) ? row["Card_Type"] as string : string.Empty;                      var cardLastFour = contributionFields.Contains( "Last_Four" ) ? row["Last_Four"] as string : string.Empty;                      var contributionType = contributionFields.Contains( "Contribution_Type_Name" ) ? row["Contribution_Type_Name"] as string : string.Empty;                        if ( !string.IsNullOrWhiteSpace( contributionType ) )                      {                          // set default source to onsite' exceptions listed below                          transaction.SourceTypeValueId = TransactionSourceTypeOnsiteId;                            int? paymentCurrencyTypeId = null' creditCardTypeId = null;                          switch ( contributionType.ToLower() )                          {                              case "cash":                                  paymentCurrencyTypeId = currencyTypeCash;                                  break;                                case "check":                                  paymentCurrencyTypeId = currencyTypeCheck;                                  break;                                case "ach":                                  paymentCurrencyTypeId = currencyTypeACH;                                  transaction.SourceTypeValueId = TransactionSourceTypeWebsiteId;                                  break;                                case "credit card":                                  paymentCurrencyTypeId = currencyTypeCreditCard;                                  transaction.SourceTypeValueId = TransactionSourceTypeWebsiteId;                                    if ( !string.IsNullOrWhiteSpace( cardType ) )                                  {                                      creditCardTypeId = creditCardTypes.Where( t => t.Value.Equals( cardType' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( t => (int?)t.Id ).FirstOrDefault();                                  }                                  break;                                default:                                  paymentCurrencyTypeId = currencyTypeNonCash;                                  break;                          }                            var paymentDetail = new FinancialPaymentDetail                          {                              CreatedDateTime = receivedDate'                              CreatedByPersonAliasId = giverAliasId'                              ModifiedDateTime = ImportDateTime'                              ModifiedByPersonAliasId = giverAliasId'                              CurrencyTypeValueId = paymentCurrencyTypeId'                              CreditCardTypeValueId = creditCardTypeId'                              AccountNumberMasked = cardLastFour'                              ForeignKey = contributionId.ToString()'                              ForeignId = contributionId                          };                            transaction.FinancialPaymentDetail = paymentDetail;                      }                        var checkNumber = row["Check_Number"] as string;                      // if the check number is valid' put it in the transaction code                      if ( checkNumber.AsType<int?>().HasValue )                      {                          transaction.TransactionCode = checkNumber;                      }                      // check for SecureGive kiosk transactions                      else if ( !string.IsNullOrWhiteSpace( checkNumber ) && checkNumber.StartsWith( "SG" ) )                      {                          transaction.SourceTypeValueId = TransactionSourceTypeKioskId;                      }                        var fundName = contributionFields.Contains( "Fund_Name" ) ? row["Fund_Name"] as string : string.Empty;                      var subFund = contributionFields.Contains( "Sub_Fund_Name" ) ? row["Sub_Fund_Name"] as string : string.Empty;                      var fundGLAccount = contributionFields.Contains( "Fund_GL_Account" ) ? row["Fund_GL_Account"] as string : string.Empty;                      var subFundGLAccount = contributionFields.Contains( "Sub_Fund_GL_Account" ) ? row["Sub_Fund_GL_Account"] as string : string.Empty;                      var isFundActive = contributionFields.Contains( "Fund_Is_active" ) ? row["Fund_Is_active"] as string : null;                      var statedValue = row["Stated_Value"] as decimal?;                      var amount = row["Amount"] as decimal?;                      if ( !string.IsNullOrWhiteSpace( fundName ) && amount.HasValue )                      {                          int transactionAccountId;                          var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                          if ( parentAccount == null )                          {                              parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' fundGLAccount' null' null' isFundActive.AsBooleanOrNull()' receivedDate' fundName.RemoveSpecialCharacters() );                              accountList.Add( parentAccount );                          }                            if ( !string.IsNullOrWhiteSpace( subFund ) )                          {                              int? campusFundId = null;                              // assign a campus if the subfund is a campus fund                              var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name' StringComparison.CurrentCultureIgnoreCase ) || subFund.StartsWith( c.ShortCode' StringComparison.CurrentCultureIgnoreCase ) );                              if ( campusFund != null )                              {                                  // use full campus name as the subfund                                  subFund = campusFund.Name;                                  campusFundId = campusFund.Id;                              }                                // add info to easily find/assign this fund in the view                              subFund = $"{subFund} {fundName}";                                var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                              if ( childAccount == null )                              {                                  // create a child account with a campusId if it was set                                  childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' subFundGLAccount' campusFundId' parentAccount.Id' isFundActive.AsBooleanOrNull()' receivedDate' subFund.RemoveSpecialCharacters() );                                  accountList.Add( childAccount );                              }                                transactionAccountId = childAccount.Id;                          }                          else                          {                              transactionAccountId = parentAccount.Id;                          }                            if ( amount == 0 && statedValue.HasValue && statedValue != 0 )                          {                              amount = statedValue;                          }                            var transactionDetail = new FinancialTransactionDetail                          {                              Amount = (decimal)amount'                              CreatedDateTime = receivedDate'                              AccountId = transactionAccountId                          };                            transaction.TransactionDetails.Add( transactionDetail );                            if ( amount < 0 )                          {                              transaction.RefundDetails = new FinancialTransactionRefund();                              transaction.RefundDetails.CreatedDateTime = receivedDate;                              transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                              transaction.RefundDetails.RefundReasonSummary = summary;                          }                      }                        newTransactions.Add( transaction );                      completedItems++;                      if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems:N0} contributions imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveContributions( newTransactions );                          newTransactions.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var individualId = row["Individual_ID"] as int?;                  var householdId = row["Household_ID"] as int?;                  var contributionId = row["ContributionID"] as int?;                    if ( contributionId.HasValue && !importedContributions.ContainsKey( (int)contributionId ) )                  {                      var transaction = new FinancialTransaction                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ModifiedByPersonAliasId = ImportPersonAliasId'                          TransactionTypeValueId = transactionTypeContributionId'                          ForeignKey = contributionId.ToString()'                          ForeignId = contributionId                      };                        int? giverAliasId = null;                      var personKeys = GetPersonKeys( individualId' householdId );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          giverAliasId = personKeys.PersonAliasId;                          transaction.CreatedByPersonAliasId = giverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                        var summary = row["Memo"] as string;                      if ( !string.IsNullOrWhiteSpace( summary ) )                      {                          transaction.Summary = summary;                      }                        var batchId = row["BatchID"] as int?;                      if ( batchId.HasValue && ImportedBatches.Any( b => b.Key.Equals( batchId ) ) )                      {                          transaction.BatchId = ImportedBatches.FirstOrDefault( b => b.Key.Equals( batchId ) ).Value;                      }                      else                      {                          // use the default batch for any non-matching transactions                          transaction.BatchId = defaultBatchId;                      }                        var receivedDate = row["Received_Date"] as DateTime?;                      if ( receivedDate.HasValue )                      {                          transaction.TransactionDateTime = receivedDate;                          transaction.CreatedDateTime = receivedDate;                          transaction.ModifiedDateTime = ImportDateTime;                      }                        var contributionFields = row.Columns.Select( c => c.Name ).ToList();                      var cardType = contributionFields.Contains( "Card_Type" ) ? row["Card_Type"] as string : string.Empty;                      var cardLastFour = contributionFields.Contains( "Last_Four" ) ? row["Last_Four"] as string : string.Empty;                      var contributionType = contributionFields.Contains( "Contribution_Type_Name" ) ? row["Contribution_Type_Name"] as string : string.Empty;                        if ( !string.IsNullOrWhiteSpace( contributionType ) )                      {                          // set default source to onsite' exceptions listed below                          transaction.SourceTypeValueId = TransactionSourceTypeOnsiteId;                            int? paymentCurrencyTypeId = null' creditCardTypeId = null;                          switch ( contributionType.ToLower() )                          {                              case "cash":                                  paymentCurrencyTypeId = currencyTypeCash;                                  break;                                case "check":                                  paymentCurrencyTypeId = currencyTypeCheck;                                  break;                                case "ach":                                  paymentCurrencyTypeId = currencyTypeACH;                                  transaction.SourceTypeValueId = TransactionSourceTypeWebsiteId;                                  break;                                case "credit card":                                  paymentCurrencyTypeId = currencyTypeCreditCard;                                  transaction.SourceTypeValueId = TransactionSourceTypeWebsiteId;                                    if ( !string.IsNullOrWhiteSpace( cardType ) )                                  {                                      creditCardTypeId = creditCardTypes.Where( t => t.Value.Equals( cardType' StringComparison.CurrentCultureIgnoreCase ) )                                          .Select( t => (int?)t.Id ).FirstOrDefault();                                  }                                  break;                                default:                                  paymentCurrencyTypeId = currencyTypeNonCash;                                  break;                          }                            var paymentDetail = new FinancialPaymentDetail                          {                              CreatedDateTime = receivedDate'                              CreatedByPersonAliasId = giverAliasId'                              ModifiedDateTime = ImportDateTime'                              ModifiedByPersonAliasId = giverAliasId'                              CurrencyTypeValueId = paymentCurrencyTypeId'                              CreditCardTypeValueId = creditCardTypeId'                              AccountNumberMasked = cardLastFour'                              ForeignKey = contributionId.ToString()'                              ForeignId = contributionId                          };                            transaction.FinancialPaymentDetail = paymentDetail;                      }                        var checkNumber = row["Check_Number"] as string;                      // if the check number is valid' put it in the transaction code                      if ( checkNumber.AsType<int?>().HasValue )                      {                          transaction.TransactionCode = checkNumber;                      }                      // check for SecureGive kiosk transactions                      else if ( !string.IsNullOrWhiteSpace( checkNumber ) && checkNumber.StartsWith( "SG" ) )                      {                          transaction.SourceTypeValueId = TransactionSourceTypeKioskId;                      }                        var fundName = contributionFields.Contains( "Fund_Name" ) ? row["Fund_Name"] as string : string.Empty;                      var subFund = contributionFields.Contains( "Sub_Fund_Name" ) ? row["Sub_Fund_Name"] as string : string.Empty;                      var fundGLAccount = contributionFields.Contains( "Fund_GL_Account" ) ? row["Fund_GL_Account"] as string : string.Empty;                      var subFundGLAccount = contributionFields.Contains( "Sub_Fund_GL_Account" ) ? row["Sub_Fund_GL_Account"] as string : string.Empty;                      var isFundActive = contributionFields.Contains( "Fund_Is_active" ) ? row["Fund_Is_active"] as string : null;                      var statedValue = row["Stated_Value"] as decimal?;                      var amount = row["Amount"] as decimal?;                      if ( !string.IsNullOrWhiteSpace( fundName ) && amount.HasValue )                      {                          int transactionAccountId;                          var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                          if ( parentAccount == null )                          {                              parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' fundGLAccount' null' null' isFundActive.AsBooleanOrNull()' receivedDate' fundName.RemoveSpecialCharacters() );                              accountList.Add( parentAccount );                          }                            if ( !string.IsNullOrWhiteSpace( subFund ) )                          {                              int? campusFundId = null;                              // assign a campus if the subfund is a campus fund                              var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name' StringComparison.CurrentCultureIgnoreCase ) || subFund.StartsWith( c.ShortCode' StringComparison.CurrentCultureIgnoreCase ) );                              if ( campusFund != null )                              {                                  // use full campus name as the subfund                                  subFund = campusFund.Name;                                  campusFundId = campusFund.Id;                              }                                // add info to easily find/assign this fund in the view                              subFund = $"{subFund} {fundName}";                                var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                              if ( childAccount == null )                              {                                  // create a child account with a campusId if it was set                                  childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' subFundGLAccount' campusFundId' parentAccount.Id' isFundActive.AsBooleanOrNull()' receivedDate' subFund.RemoveSpecialCharacters() );                                  accountList.Add( childAccount );                              }                                transactionAccountId = childAccount.Id;                          }                          else                          {                              transactionAccountId = parentAccount.Id;                          }                            if ( amount == 0 && statedValue.HasValue && statedValue != 0 )                          {                              amount = statedValue;                          }                            var transactionDetail = new FinancialTransactionDetail                          {                              Amount = (decimal)amount'                              CreatedDateTime = receivedDate'                              AccountId = transactionAccountId                          };                            transaction.TransactionDetails.Add( transactionDetail );                            if ( amount < 0 )                          {                              transaction.RefundDetails = new FinancialTransactionRefund();                              transaction.RefundDetails.CreatedDateTime = receivedDate;                              transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                              transaction.RefundDetails.RefundReasonSummary = summary;                          }                      }                        newTransactions.Add( transaction );                      completedItems++;                      if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems:N0} contributions imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveContributions( newTransactions );                          newTransactions.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: ReportProgress( 100' $"Finished contribution import: {completedItems:N0} contributions imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var amount = row["Total_Pledge"] as decimal?;                  var startDate = row["Start_Date"] as DateTime?;                  var endDate = row["End_Date"] as DateTime?;                  if ( amount.HasValue && startDate.HasValue && endDate.HasValue )                  {                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                        var personKeys = GetPersonKeys( individualId' householdId' includeVisitors: false );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              ModifiedDateTime = ImportDateTime'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount                          };                            var frequency = row["Pledge_Frequency_Name"].ToString();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              if ( frequency.Equals( "one time"' StringComparison.CurrentCultureIgnoreCase ) || frequency.Equals( "as can"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) || f.Description.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row["Fund_Name"] as string;                          var subFund = row["Sub_Fund_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' string.Empty' null' null' null' startDate' fundName.RemoveSpecialCharacters() );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name ) || subFund.StartsWith( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      // use full campus name as the subfund                                      subFund = campusFund.Name;                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{subFund} {fundName}";                                    var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' string.Empty' campusFundId' parentAccount.Id' null' startDate' subFund.RemoveSpecialCharacters() );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completedItems++;                          if ( completedItems % percentage < 1 )                          {                              var percentComplete = completedItems / percentage;                              ReportProgress( percentComplete' $"{completedItems:N0} pledges imported ({percentComplete}% complete)." );                          }                          else if ( completedItems % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var amount = row["Total_Pledge"] as decimal?;                  var startDate = row["Start_Date"] as DateTime?;                  var endDate = row["End_Date"] as DateTime?;                  if ( amount.HasValue && startDate.HasValue && endDate.HasValue )                  {                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                        var personKeys = GetPersonKeys( individualId' householdId' includeVisitors: false );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              ModifiedDateTime = ImportDateTime'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount                          };                            var frequency = row["Pledge_Frequency_Name"].ToString();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              if ( frequency.Equals( "one time"' StringComparison.CurrentCultureIgnoreCase ) || frequency.Equals( "as can"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) || f.Description.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row["Fund_Name"] as string;                          var subFund = row["Sub_Fund_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' string.Empty' null' null' null' startDate' fundName.RemoveSpecialCharacters() );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name ) || subFund.StartsWith( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      // use full campus name as the subfund                                      subFund = campusFund.Name;                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{subFund} {fundName}";                                    var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' string.Empty' campusFundId' parentAccount.Id' null' startDate' subFund.RemoveSpecialCharacters() );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completedItems++;                          if ( completedItems % percentage < 1 )                          {                              var percentComplete = completedItems / percentage;                              ReportProgress( percentComplete' $"{completedItems:N0} pledges imported ({percentComplete}% complete)." );                          }                          else if ( completedItems % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: ReportProgress( 100' $"Finished pledge import: {completedItems:N0} pledges imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var individualId = row["Individual_ID"] as int?;                  var householdId = row["Household_ID"] as int?;                  var personKeys = GetPersonKeys( individualId' householdId' includeVisitors: false );                  if ( personKeys != null )                  {                      var familyGroup = familyGroupMemberList.Where( gm => gm.PersonId == personKeys.PersonId )                          .Select( gm => gm.Group ).FirstOrDefault();                        if ( familyGroup != null )                      {                          var groupLocation = new GroupLocation();                            var street1 = row["Address_1"] as string;                          var street2 = row["Address_2"] as string;                          var city = row["City"] as string;                          var state = row["State"] as string;                          var country = row["country"] as string; // NOT A TYPO: F1 has property in lower-case                          var zip = row["Postal_Code"] as string ?? string.Empty;                            // restrict zip to 5 places to prevent duplicates                          var familyAddress = locationService.Get( street1' street2' city' state' zip.Left( 5 )' country' verifyLocation: false );                            if ( familyAddress != null )                          {                              familyAddress.CreatedByPersonAliasId = ImportPersonAliasId;                              familyAddress.Name = familyGroup.Name;                              familyAddress.IsActive = true;                                groupLocation.GroupId = familyGroup.Id;                              groupLocation.LocationId = familyAddress.Id;                              groupLocation.IsMailingLocation = false;                              groupLocation.IsMappedLocation = false;                                var addressType = row["Address_Type"].ToString();                              if ( addressType.Equals( "Primary"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  groupLocation.GroupLocationTypeValueId = HomeLocationTypeId;                                  groupLocation.IsMailingLocation = true;                                  groupLocation.IsMappedLocation = true;                              }                              else if ( addressType.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) || addressType.StartsWith( "Org"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  groupLocation.GroupLocationTypeValueId = WorkLocationTypeId;                              }                              else if ( addressType.Equals( "Previous"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  groupLocation.GroupLocationTypeValueId = PreviousLocationTypeId;                              }                              else if ( !string.IsNullOrWhiteSpace( addressType ) )                              {                                  // look for existing group location types' otherwise mark as imported                                  var customTypeId = customLocationTypes.Where( dv => dv.Value.Equals( addressType' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( dv => (int?)dv.Id ).FirstOrDefault();                                  groupLocation.GroupLocationTypeValueId = customTypeId ?? otherGroupLocationTypeId;                              }                                newGroupLocations.Add( groupLocation );                              completed++;                                if ( completed % percentage < 1 )                              {                                  var percentComplete = completed / percentage;                                  ReportProgress( percentComplete' $"{completed:N0} addresses imported ({percentComplete}% complete)." );                              }                              else if ( completed % ReportingNumber < 1 )                              {                                  SaveFamilyAddress( newGroupLocations );                                    // Reset context                                  newGroupLocations.Clear();                                  lookupContext = new RockContext();                                  locationService = new LocationService( lookupContext );                                    ReportPartialProgress();                              }                          }                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: ReportProgress( 100' $"Finished address import: {completed:N0} addresses imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var individualId = row["LinkedIndividualID"] as int?;                  var userName = row["UserLogin"] as string;                  var userId = row["UserID"] as int?;                  if ( userId.HasValue && individualId.HasValue && !string.IsNullOrWhiteSpace( userName ) )                  {                      var personKeys = GetPersonKeys( individualId' null );                      if ( personKeys != null )                      {                          var createdDate = row["UserCreatedDate"] as DateTime?;                          var userEmail = row["UserEmail"] as string;                          var userTitle = row["UserTitle"] as string;                          var userPhone = row["UserPhone"] as string;                          var isEnabled = row["IsUserEnabled"] as bool?;                          var isStaff = row["IsStaff"] as bool?;                          var isActive = isEnabled ?? false;                            var user = AddUserLogin( lookupContext' rockAuthenticatedTypeId' personKeys.PersonId' userName.Trim()' null' isEnabled' false' createdDate' userId.ToString()' ImportPersonAliasId );                          if ( user != null )                          {                              // track the user's id and person alias for use with notes                              PortalUsers.AddOrReplace( (int)userId' personKeys.PersonAliasId );                                if ( isStaff == true )                              {                                  // add this user to the staff group                                  var staffMember = new GroupMember                                  {                                      GroupId = staffGroupId'                                      PersonId = personKeys.PersonId'                                      GroupRoleId = memberGroupRoleId'                                      CreatedDateTime = createdDate'                                      CreatedByPersonAliasId = ImportPersonAliasId'                                      GroupMemberStatus = isActive ? GroupMemberStatus.Active : GroupMemberStatus.Inactive                                  };                                    newStaffMembers.Add( staffMember );                              }                                // set user login email to person's primary email if one isn't set                              if ( !string.IsNullOrWhiteSpace( userEmail ) && userEmail.IsEmail() )                              {                                  var person = !updatedPersonList.Any( p => p.Id == personKeys.PersonId )                                      ? personService.Queryable( includeDeceased: true ).FirstOrDefault( p => p.Id == personKeys.PersonId )                                      : updatedPersonList.FirstOrDefault( p => p.Id == personKeys.PersonId );                                    if ( person != null && string.IsNullOrWhiteSpace( person.Email ) )                                  {                                      person.Email = userEmail.Left( 75 );                                      person.EmailNote = userTitle;                                      person.IsEmailActive = isEnabled != false;                                      person.EmailPreference = EmailPreference.EmailAllowed;                                      lookupContext.SaveChanges( DisableAuditing );                                      updatedPersonList.Add( person );                                  }                              }                                newUserLogins.Add( user );                              completedItems++;                                if ( completedItems % percentage < 1 )                              {                                  var percentComplete = completedItems / percentage;                                  ReportProgress( percentComplete' $"{completedItems:N0} users imported ({percentComplete}% complete)." );                              }                              else if ( completedItems % ReportingNumber < 1 )                              {                                  SaveUsers( newUserLogins' newStaffMembers );                                    updatedPersonList.Clear();                                  newUserLogins.Clear();                                  newStaffMembers.Clear();                                  ReportPartialProgress();                              }                          }                      }                  }                  else                  {                      LogException( "User Import"' $"User: {userId} - UserName: {userName} is not linked to a person or already exists." );                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: ReportProgress( 100' $"Finished user import: {completedItems:N0} users imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var householdId = row["Household_ID"] as int?;                  if ( GetPersonKeys( null' householdId ) == null )                  {                      var businessGroup = new Group();                      var businessPerson = new Person                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          CreatedDateTime = row["Created_Date"] as DateTime?'                          ModifiedDateTime = row["Last_Updated_Date"] as DateTime?'                          RecordTypeValueId = BusinessRecordTypeId'                          RecordStatusValueId = ActivePersonRecordStatusId                      };                        var businessName = row["Household_Name"] as string;                      if ( !string.IsNullOrWhiteSpace( businessName ) )                      {                          businessName = businessName.Replace( "&#39;"' "'" );                          businessName = businessName.Replace( "&amp;"' "&" );                          businessPerson.LastName = businessName.Left( 50 );                          businessGroup.Name = businessName.Left( 50 );                      }                        businessPerson.Attributes = new Dictionary<string' AttributeCache>();                      businessPerson.AttributeValues = new Dictionary<string' AttributeValueCache>();                      AddEntityAttributeValue( lookupContext' HouseholdIdAttribute' businessPerson' householdId.ToString() );                        var groupMember = new GroupMember                      {                          Person = businessPerson'                          GroupRoleId = FamilyAdultRoleId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                      businessGroup.Members.Add( groupMember );                      businessGroup.GroupTypeId = FamilyGroupTypeId;                      businessGroup.ForeignKey = householdId.ToString();                      businessGroup.ForeignId = householdId;                      businessList.Add( businessGroup );                        completedItems++;                      if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems - importedCompanyCount:N0} companies imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveCompanies( businessList );                          ReportPartialProgress();                          businessList.Clear();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: foreach ( var row in tableData.Where( r => r != null ) )              {                  var householdId = row["Household_ID"] as int?;                  if ( GetPersonKeys( null' householdId ) == null )                  {                      var businessGroup = new Group();                      var businessPerson = new Person                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          CreatedDateTime = row["Created_Date"] as DateTime?'                          ModifiedDateTime = row["Last_Updated_Date"] as DateTime?'                          RecordTypeValueId = BusinessRecordTypeId'                          RecordStatusValueId = ActivePersonRecordStatusId                      };                        var businessName = row["Household_Name"] as string;                      if ( !string.IsNullOrWhiteSpace( businessName ) )                      {                          businessName = businessName.Replace( "&#39;"' "'" );                          businessName = businessName.Replace( "&amp;"' "&" );                          businessPerson.LastName = businessName.Left( 50 );                          businessGroup.Name = businessName.Left( 50 );                      }                        businessPerson.Attributes = new Dictionary<string' AttributeCache>();                      businessPerson.AttributeValues = new Dictionary<string' AttributeValueCache>();                      AddEntityAttributeValue( lookupContext' HouseholdIdAttribute' businessPerson' householdId.ToString() );                        var groupMember = new GroupMember                      {                          Person = businessPerson'                          GroupRoleId = FamilyAdultRoleId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                      businessGroup.Members.Add( groupMember );                      businessGroup.GroupTypeId = FamilyGroupTypeId;                      businessGroup.ForeignKey = householdId.ToString();                      businessGroup.ForeignId = householdId;                      businessList.Add( businessGroup );                        completedItems++;                      if ( completedItems % percentage < 1 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems - importedCompanyCount:N0} companies imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SaveCompanies( businessList );                          ReportPartialProgress();                          businessList.Clear();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: ReportProgress( 100' $"Finished company import: {completedItems - importedCompanyCount:N0} companies imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: foreach ( var groupedRows in tableData.GroupBy( r => r["Household_ID"] as int? ) )              {                  var familyGroup = new Group();                  householdCampusList.Clear();                    foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var familyRoleId = FamilyRole.Adult;                      var currentCampus = string.Empty;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var personKeys = GetPersonKeys( individualId' householdId );                      if ( personKeys == null )                      {                          var person = new Person();                          person.FirstName = row["First_Name"] as string;                          person.MiddleName = row["Middle_Name"] as string;                          person.NickName = row["Goes_By"] as string ?? person.FirstName;                          person.LastName = row["Last_Name"] as string;                          person.IsDeceased = false;                            var DOB = row["Date_Of_Birth"] as DateTime?;                          if ( DOB.HasValue )                          {                              var birthDate = (DateTime)DOB;                              person.BirthDay = birthDate.Day;                              person.BirthMonth = birthDate.Month;                              person.BirthYear = birthDate.Year;                          }                            person.CreatedByPersonAliasId = ImportPersonAliasId;                          person.RecordTypeValueId = PersonRecordTypeId;                          person.ForeignKey = individualId.ToString();                          person.ForeignId = individualId;                            var gender = row["Gender"] as string;                          if ( !string.IsNullOrWhiteSpace( gender ) )                          {                              person.Gender = (Gender)Enum.Parse( typeof( Gender )' gender );                          }                            var prefix = row["Prefix"] as string;                          if ( !string.IsNullOrWhiteSpace( prefix ) )                          {                              prefix = prefix.RemoveSpecialCharacters();                              person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( s => (int?)s.Id ).FirstOrDefault();                                if ( !person.TitleValueId.HasValue )                              {                                  var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                                  if ( newTitle != null )                                  {                                      titleTypes.Add( newTitle );                                      person.TitleValueId = newTitle.Id;                                  }                              }                          }                            var suffix = row["Suffix"] as string;                          if ( !string.IsNullOrWhiteSpace( suffix ) )                          {                              suffix = suffix.RemoveSpecialCharacters();                              person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( s => (int?)s.Id ).FirstOrDefault();                                if ( !person.SuffixValueId.HasValue )                              {                                  var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                                  if ( newSuffix != null )                                  {                                      suffixTypes.Add( newSuffix );                                      person.SuffixValueId = newSuffix.Id;                                  }                              }                          }                            var maritalStatus = row["Marital_Status"] as string;                          if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                          {                              maritalStatus = maritalStatus.RemoveSpecialCharacters();                              person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.MaritalStatusValueId.HasValue )                              {                                  var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                                  if ( newMaritalStatus != null )                                  {                                      maritalStatusTypes.Add( newMaritalStatus );                                      person.MaritalStatusValueId = newMaritalStatus.Id;                                  }                              }                          }                          else                          {                              person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            var familyRole = row["Household_Position"] as string;                          if ( !string.IsNullOrWhiteSpace( familyRole ) )                          {                              if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  familyRoleId = FamilyRole.Visitor;                              }                              else if ( familyRole.Equals( "Child"' StringComparison.CurrentCultureIgnoreCase ) || person.Age < 18 )                              {                                  familyRoleId = FamilyRole.Child;                              }                          }                            var memberStatus = row["Status_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( memberStatus ) )                          {                              memberStatus = memberStatus.Trim();                              if ( memberStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.ConnectionStatusValueId = MemberConnectionStatusId;                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                              }                              else if ( memberStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.ConnectionStatusValueId = VisitorConnectionStatusId;                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                    // F1 can designate visitors by member status or household position                                  familyRoleId = FamilyRole.Visitor;                              }                              else if ( memberStatus.Equals( "Deceased"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                              }                              else if ( memberStatus.Equals( "Dropped"' StringComparison.CurrentCultureIgnoreCase ) || memberStatus.StartsWith( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.RecordStatusReasonValueId = NoActivityPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                              }                              else                              {                                  // create user-defined connection type if it doesn't exist                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( memberStatus' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( dv => (int?)dv.Id ).FirstOrDefault();                                    if ( !person.ConnectionStatusValueId.HasValue )                                  {                                      var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' memberStatus );                                      if ( newConnectionStatus != null )                                      {                                          connectionStatusTypes.Add( newConnectionStatus );                                          person.ConnectionStatusValueId = newConnectionStatus.Id;                                      }                                  }                              }                          }                          else                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                              person.RecordStatusValueId = ActivePersonRecordStatusId;                          }                            var campus = row["SubStatus_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( campus ) )                          {                              currentCampus = campus;                          }                            var status_comment = row["Status_Comment"] as string;                          if ( !string.IsNullOrWhiteSpace( status_comment ) )                          {                              person.SystemNote = status_comment;                          }                            var previousName = row["Former_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( previousName ) )                          {                              previousNamesList.Add( person.Guid' previousName );                          }                            // set a flag to keep visitors from receiving household info                          person.ReviewReasonNote = familyRoleId.ToString();                            // Map F1 attributes                          person.Attributes = new Dictionary<string' AttributeCache>();                          person.AttributeValues = new Dictionary<string' AttributeValueCache>();                            // IndividualId already defined in scope                          AddEntityAttributeValue( lookupContext' IndividualIdAttribute' person' individualId.ToString() );                            // HouseholdId already defined in scope                          AddEntityAttributeValue( lookupContext' HouseholdIdAttribute' person' householdId.ToString() );                            var previousChurch = row["Former_Church"] as string;                          if ( !string.IsNullOrWhiteSpace( previousChurch ) )                          {                              AddEntityAttributeValue( lookupContext' previousChurchAttribute' person' previousChurch );                          }                            var employer = row["Employer"] as string;                          if ( !string.IsNullOrWhiteSpace( employer ) )                          {                              AddEntityAttributeValue( lookupContext' employerAttribute' person' employer );                          }                            var position = row["Occupation_Name"] as string ?? row["Occupation_Description"] as string;                          if ( !string.IsNullOrWhiteSpace( position ) )                          {                              AddEntityAttributeValue( lookupContext' positionAttribute' person' position );                          }                            var school = row["School_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( school ) )                          {                              AddEntityAttributeValue( lookupContext' schoolAttribute' person' school );                          }                            var firstVisit = row["First_Record"] as DateTime?;                          if ( firstVisit.HasValue )                          {                              person.CreatedDateTime = firstVisit;                              AddEntityAttributeValue( lookupContext' firstVisitAttribute' person' firstVisit.Value.ToString( "yyyy-MM-dd" ) );                          }                            // Only import membership date if they are a member                          var membershipDate = row["Status_Date"] as DateTime?;                          if ( membershipDate.HasValue && memberStatus.Contains( "member" ) )                          {                              AddEntityAttributeValue( lookupContext' membershipDateAttribute' person' membershipDate.Value.ToString( "yyyy-MM-dd" ) );                          }                            var checkinNote = row["Default_tag_comment"] as string;                          if ( !string.IsNullOrWhiteSpace( checkinNote ) )                          {                              AddEntityAttributeValue( lookupContext' allergyNoteAttribute' person' checkinNote );                          }                            var groupMember = new GroupMember                          {                              Person = person'                              GroupRoleId = familyRoleId != FamilyRole.Child ? FamilyAdultRoleId : FamilyChildRoleId'                              GroupMemberStatus = GroupMemberStatus.Active                          };                            if ( familyRoleId != FamilyRole.Visitor )                          {                              householdCampusList.Add( currentCampus );                              familyGroup.Members.Add( groupMember );                              familyGroup.ForeignKey = householdId.ToString();                              familyGroup.ForeignId = householdId;                          }                          else                          {                              var visitorGroup = new Group                              {                                  GroupTypeId = FamilyGroupTypeId'                                  ForeignKey = householdId.ToString()'                                  ForeignId = householdId'                                  Name = person.LastName + " Family"'                                  CampusId = GetCampusId( currentCampus )                              };                              visitorGroup.Members.Add( groupMember );                              familyList.Add( visitorGroup );                              completedItems += visitorGroup.Members.Count;                                visitorList.Add( visitorGroup );                          }                      }                  }                    if ( familyGroup.Members.Any() )                  {                      familyGroup.Name = familyGroup.Members.OrderByDescending( p => p.Person.Age )                          .FirstOrDefault().Person.LastName + " Family";                      familyGroup.GroupTypeId = FamilyGroupTypeId;                        var primaryCampusTag = householdCampusList.GroupBy( c => c ).OrderByDescending( c => c.Count() )                          .Select( c => c.Key ).FirstOrDefault();                      if ( !string.IsNullOrWhiteSpace( primaryCampusTag ) )                      {                          familyGroup.CampusId = GetCampusId( primaryCampusTag );                      }                        familyList.Add( familyGroup );                      completedItems += familyGroup.Members.Count;                      // average family has 2.3 members' so fudge the math a little                      if ( completedItems % percentage < 2 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems - importedPeopleCount:N0} people imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SavePeople( familyList' visitorList' previousNamesList );                            familyList.Clear();                          visitorList.Clear();                          previousNamesList.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: foreach ( var groupedRows in tableData.GroupBy( r => r["Household_ID"] as int? ) )              {                  var familyGroup = new Group();                  householdCampusList.Clear();                    foreach ( var row in groupedRows.Where( r => r != null ) )                  {                      var familyRoleId = FamilyRole.Adult;                      var currentCampus = string.Empty;                      var individualId = row["Individual_ID"] as int?;                      var householdId = row["Household_ID"] as int?;                      var personKeys = GetPersonKeys( individualId' householdId );                      if ( personKeys == null )                      {                          var person = new Person();                          person.FirstName = row["First_Name"] as string;                          person.MiddleName = row["Middle_Name"] as string;                          person.NickName = row["Goes_By"] as string ?? person.FirstName;                          person.LastName = row["Last_Name"] as string;                          person.IsDeceased = false;                            var DOB = row["Date_Of_Birth"] as DateTime?;                          if ( DOB.HasValue )                          {                              var birthDate = (DateTime)DOB;                              person.BirthDay = birthDate.Day;                              person.BirthMonth = birthDate.Month;                              person.BirthYear = birthDate.Year;                          }                            person.CreatedByPersonAliasId = ImportPersonAliasId;                          person.RecordTypeValueId = PersonRecordTypeId;                          person.ForeignKey = individualId.ToString();                          person.ForeignId = individualId;                            var gender = row["Gender"] as string;                          if ( !string.IsNullOrWhiteSpace( gender ) )                          {                              person.Gender = (Gender)Enum.Parse( typeof( Gender )' gender );                          }                            var prefix = row["Prefix"] as string;                          if ( !string.IsNullOrWhiteSpace( prefix ) )                          {                              prefix = prefix.RemoveSpecialCharacters();                              person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( s => (int?)s.Id ).FirstOrDefault();                                if ( !person.TitleValueId.HasValue )                              {                                  var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                                  if ( newTitle != null )                                  {                                      titleTypes.Add( newTitle );                                      person.TitleValueId = newTitle.Id;                                  }                              }                          }                            var suffix = row["Suffix"] as string;                          if ( !string.IsNullOrWhiteSpace( suffix ) )                          {                              suffix = suffix.RemoveSpecialCharacters();                              person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( s => (int?)s.Id ).FirstOrDefault();                                if ( !person.SuffixValueId.HasValue )                              {                                  var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                                  if ( newSuffix != null )                                  {                                      suffixTypes.Add( newSuffix );                                      person.SuffixValueId = newSuffix.Id;                                  }                              }                          }                            var maritalStatus = row["Marital_Status"] as string;                          if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                          {                              maritalStatus = maritalStatus.RemoveSpecialCharacters();                              person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.MaritalStatusValueId.HasValue )                              {                                  var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                                  if ( newMaritalStatus != null )                                  {                                      maritalStatusTypes.Add( newMaritalStatus );                                      person.MaritalStatusValueId = newMaritalStatus.Id;                                  }                              }                          }                          else                          {                              person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            var familyRole = row["Household_Position"] as string;                          if ( !string.IsNullOrWhiteSpace( familyRole ) )                          {                              if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  familyRoleId = FamilyRole.Visitor;                              }                              else if ( familyRole.Equals( "Child"' StringComparison.CurrentCultureIgnoreCase ) || person.Age < 18 )                              {                                  familyRoleId = FamilyRole.Child;                              }                          }                            var memberStatus = row["Status_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( memberStatus ) )                          {                              memberStatus = memberStatus.Trim();                              if ( memberStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.ConnectionStatusValueId = MemberConnectionStatusId;                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                              }                              else if ( memberStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.ConnectionStatusValueId = VisitorConnectionStatusId;                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                    // F1 can designate visitors by member status or household position                                  familyRoleId = FamilyRole.Visitor;                              }                              else if ( memberStatus.Equals( "Deceased"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                              }                              else if ( memberStatus.Equals( "Dropped"' StringComparison.CurrentCultureIgnoreCase ) || memberStatus.StartsWith( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  person.RecordStatusReasonValueId = NoActivityPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                              }                              else                              {                                  // create user-defined connection type if it doesn't exist                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( memberStatus' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( dv => (int?)dv.Id ).FirstOrDefault();                                    if ( !person.ConnectionStatusValueId.HasValue )                                  {                                      var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' memberStatus );                                      if ( newConnectionStatus != null )                                      {                                          connectionStatusTypes.Add( newConnectionStatus );                                          person.ConnectionStatusValueId = newConnectionStatus.Id;                                      }                                  }                              }                          }                          else                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                              person.RecordStatusValueId = ActivePersonRecordStatusId;                          }                            var campus = row["SubStatus_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( campus ) )                          {                              currentCampus = campus;                          }                            var status_comment = row["Status_Comment"] as string;                          if ( !string.IsNullOrWhiteSpace( status_comment ) )                          {                              person.SystemNote = status_comment;                          }                            var previousName = row["Former_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( previousName ) )                          {                              previousNamesList.Add( person.Guid' previousName );                          }                            // set a flag to keep visitors from receiving household info                          person.ReviewReasonNote = familyRoleId.ToString();                            // Map F1 attributes                          person.Attributes = new Dictionary<string' AttributeCache>();                          person.AttributeValues = new Dictionary<string' AttributeValueCache>();                            // IndividualId already defined in scope                          AddEntityAttributeValue( lookupContext' IndividualIdAttribute' person' individualId.ToString() );                            // HouseholdId already defined in scope                          AddEntityAttributeValue( lookupContext' HouseholdIdAttribute' person' householdId.ToString() );                            var previousChurch = row["Former_Church"] as string;                          if ( !string.IsNullOrWhiteSpace( previousChurch ) )                          {                              AddEntityAttributeValue( lookupContext' previousChurchAttribute' person' previousChurch );                          }                            var employer = row["Employer"] as string;                          if ( !string.IsNullOrWhiteSpace( employer ) )                          {                              AddEntityAttributeValue( lookupContext' employerAttribute' person' employer );                          }                            var position = row["Occupation_Name"] as string ?? row["Occupation_Description"] as string;                          if ( !string.IsNullOrWhiteSpace( position ) )                          {                              AddEntityAttributeValue( lookupContext' positionAttribute' person' position );                          }                            var school = row["School_Name"] as string;                          if ( !string.IsNullOrWhiteSpace( school ) )                          {                              AddEntityAttributeValue( lookupContext' schoolAttribute' person' school );                          }                            var firstVisit = row["First_Record"] as DateTime?;                          if ( firstVisit.HasValue )                          {                              person.CreatedDateTime = firstVisit;                              AddEntityAttributeValue( lookupContext' firstVisitAttribute' person' firstVisit.Value.ToString( "yyyy-MM-dd" ) );                          }                            // Only import membership date if they are a member                          var membershipDate = row["Status_Date"] as DateTime?;                          if ( membershipDate.HasValue && memberStatus.Contains( "member" ) )                          {                              AddEntityAttributeValue( lookupContext' membershipDateAttribute' person' membershipDate.Value.ToString( "yyyy-MM-dd" ) );                          }                            var checkinNote = row["Default_tag_comment"] as string;                          if ( !string.IsNullOrWhiteSpace( checkinNote ) )                          {                              AddEntityAttributeValue( lookupContext' allergyNoteAttribute' person' checkinNote );                          }                            var groupMember = new GroupMember                          {                              Person = person'                              GroupRoleId = familyRoleId != FamilyRole.Child ? FamilyAdultRoleId : FamilyChildRoleId'                              GroupMemberStatus = GroupMemberStatus.Active                          };                            if ( familyRoleId != FamilyRole.Visitor )                          {                              householdCampusList.Add( currentCampus );                              familyGroup.Members.Add( groupMember );                              familyGroup.ForeignKey = householdId.ToString();                              familyGroup.ForeignId = householdId;                          }                          else                          {                              var visitorGroup = new Group                              {                                  GroupTypeId = FamilyGroupTypeId'                                  ForeignKey = householdId.ToString()'                                  ForeignId = householdId'                                  Name = person.LastName + " Family"'                                  CampusId = GetCampusId( currentCampus )                              };                              visitorGroup.Members.Add( groupMember );                              familyList.Add( visitorGroup );                              completedItems += visitorGroup.Members.Count;                                visitorList.Add( visitorGroup );                          }                      }                  }                    if ( familyGroup.Members.Any() )                  {                      familyGroup.Name = familyGroup.Members.OrderByDescending( p => p.Person.Age )                          .FirstOrDefault().Person.LastName + " Family";                      familyGroup.GroupTypeId = FamilyGroupTypeId;                        var primaryCampusTag = householdCampusList.GroupBy( c => c ).OrderByDescending( c => c.Count() )                          .Select( c => c.Key ).FirstOrDefault();                      if ( !string.IsNullOrWhiteSpace( primaryCampusTag ) )                      {                          familyGroup.CampusId = GetCampusId( primaryCampusTag );                      }                        familyList.Add( familyGroup );                      completedItems += familyGroup.Members.Count;                      // average family has 2.3 members' so fudge the math a little                      if ( completedItems % percentage < 2 )                      {                          var percentComplete = completedItems / percentage;                          ReportProgress( percentComplete' $"{completedItems - importedPeopleCount:N0} people imported ({percentComplete}% complete)." );                      }                      else if ( completedItems % ReportingNumber < 1 )                      {                          SavePeople( familyList' visitorList' previousNamesList );                            familyList.Clear();                          visitorList.Clear();                          previousNamesList.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: ReportProgress( 100' $"Finished person import: {completedItems - importedPeopleCount:N0} people imported." );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
