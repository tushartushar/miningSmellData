Implementation smell,Namespace,Class,File,Method,Description
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The method has 117 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The method has 200 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The method has 230 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The method has 108 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The method has 100 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The method has 119 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The method has 308 lines of code.
Long Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The method has 164 lines of code.
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,TransformData,Cyclomatic complexity of the method is 17
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,Cyclomatic complexity of the method is 12
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,Cyclomatic complexity of the method is 12
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,Cyclomatic complexity of the method is 8
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,Cyclomatic complexity of the method is 29
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,Cyclomatic complexity of the method is 9
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,Cyclomatic complexity of the method is 11
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,Cyclomatic complexity of the method is 28
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,Cyclomatic complexity of the method is 15
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,Cyclomatic complexity of the method is 14
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,Cyclomatic complexity of the method is 12
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,Cyclomatic complexity of the method is 8
Complex Method,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,Cyclomatic complexity of the method is 42
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            HouseholdIdAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 137.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                HouseholdIdAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 172.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            IndividualIdAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                IndividualIdAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 173.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            SecondaryEmailAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                SecondaryEmailAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 175.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "            InFellowshipLoginAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( attributeKey' StringComparison.InvariantCultureIgnoreCase ) ); " is 143.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,LoadGlobalObjects,The length of the statement  "                InFellowshipLoginAttribute = AddEntityAttribute( lookupContext' PersonEntityTypeId' string.Empty' string.Empty' string.Format( "{0} imported {1}"' attributeKey' ImportDateTime )' " is 178.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,GetPersonKeys,The length of the statement  "                return ImportedPeople.Where( p => p.GroupForeignId == householdId && ( includeVisitors || p.FamilyRoleId != FamilyRole.Visitor ) ) " is 130.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,GetFamilyByHouseholdId,The length of the statement  "            return ImportedPeople.Where( p => p.GroupForeignId == householdId && ( includeVisitors || p.FamilyRoleId != FamilyRole.Visitor ) ).ToList(); " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "            var importedCommunicationCount = new CommunicationService( lookupContext ).Queryable().Count( c => c.ForeignKey != null ); " is 122.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "            ReportProgress( 0' $"Verifying contact items ({totalRows:N0} found' {importedNoteCount + importedCommunicationCount:N0} already exist)." ); " is 139.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                            CommunicationStatus.Approved' recipients' false' createdDate ?? modifiedDate' itemForeignKey.ToString()' userPersonAliasId ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                    else if ( !string.IsNullOrWhiteSpace( itemCaption ) && itemCaption.EndsWith( "Prayer Request"' StringComparison.CurrentCultureIgnoreCase ) ) " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                        var request = AddPrayerRequest( lookupContext' null' personKeys.PersonAliasId' requestor.FirstName' requestor.LastName' requestor.Email' itemText ?? itemCaption' string.Empty' " is 175.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                            !itemStatus.Equals( "Closed"' StringComparison.CurrentCultureIgnoreCase )' false' createdDate ?? modifiedDate' approvalDate' itemForeignKey.ToString()' userPersonAliasId ); " is 172.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The length of the statement  "                        var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' itemCaption' itemText' false' false' itemType' " is 128.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The length of the statement  "                if ( personKeys != null && ( !string.IsNullOrWhiteSpace( noteText ) || !string.IsNullOrWhiteSpace( confidentialText ) ) ) " is 121.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The length of the statement  "                        var confidential = AddEntityNote( lookupContext' noteEntityTypeId' noteEntityId' string.Empty' confidentialText' false' false' " is 126.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The length of the statement  "                    var noteTypeId = noteType.StartsWith( "General"' StringComparison.InvariantCultureIgnoreCase ) ? (int?)PersonalNoteTypeId : null; " is 129.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The length of the statement  "                    var note = AddEntityNote( lookupContext' PersonEntityTypeId' personKeys.PersonId' string.Empty' text' false' false' noteType' noteTypeId' false' dateCreated' " is 157.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var definedTypePhoneType = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE )' lookupContext ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var otherNumberTypeId = definedTypePhoneType.DefinedValues.Where( dv => dv.Value.StartsWith( "Other" ) ).Select( v => (int?)v.Id ).FirstOrDefault(); " is 148.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var personAttributes = new AttributeService( lookupContext ).GetByEntityTypeId( PersonEntityTypeId ).AsNoTracking().ToList(); " is 125.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var twitterAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Twitter"' StringComparison.InvariantCultureIgnoreCase ) ); " is 134.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var facebookAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Facebook"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            var instagramAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Instagram"' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            ReportProgress( 0' $"Verifying communication import ({totalRows:N0} found' {existingNumbers.Count:N0} already exist)." ); " is 121.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "            foreach ( var groupedRows in tableData.OrderByDescending( r => r["LastUpdatedDate"] ).GroupBy<Row' int?>( r => r["Household_ID"] as int? ) ) " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "                                    var matchingNumberTypeId = definedTypePhoneType.DefinedValues.Where( v => type.StartsWith( v.Value' StringComparison.CurrentCultureIgnoreCase ) ) " is 145.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The length of the statement  "                                    var numberExists = existingNumbers.Any( n => n.PersonId == personKeys.PersonId && n.Number.Equals( normalizedNumber ) && n.NumberTypeValueId == matchingNumberTypeId ); " is 167.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCommunication,The length of the statement  "                            var existingValue = rockContext.AttributeValues.FirstOrDefault( v => v.Attribute.Key == attributeCache.Key && v.EntityId == person.Id ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The length of the statement  "            ReportProgress( 0' $"Verifying check number import ({totalRows:N0} found' {importedBankAccounts.Count:N0} already exist)." ); " is 125.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The length of the statement  "                        if ( !importedBankAccounts.Any( a => a.PersonAliasId == personKeys.PersonAliasId && a.AccountNumberSecured == encodedNumber ) ) " is 127.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var transactionTypeContributionId = DefinedValueCache.Read( Rock.SystemGuid.DefinedValue.TRANSACTION_TYPE_CONTRIBUTION.AsGuid()' lookupContext ).Id; " is 148.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeACH = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_ACH ) ) ).Id; " is 154.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCash = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH ) ) ).Id; " is 156.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCheck = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK ) ) ).Id; " is 158.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeCreditCard = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CREDIT_CARD ) ) ).Id; " is 169.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var currencyTypeNonCash = currencyTypes.DefinedValues.Where( dv => dv.Value.Equals( "Non-Cash" ) ).Select( dv => (int?)dv.Id ).FirstOrDefault(); " is 144.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var creditCardTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE ) ).DefinedValues; " is 128.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            var refundReasons = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON )' lookupContext ).DefinedValues; " is 150.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "            ReportProgress( 0' $"Verifying contribution import ({totalRows:N0} found' {importedContributions.Count:N0} already exist)." ); " is 126.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                    var contributionType = contributionFields.Contains( "Contribution_Type_Name" ) ? row["Contribution_Type_Name"] as string : string.Empty; " is 136.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                    var subFundGLAccount = contributionFields.Contains( "Sub_Fund_GL_Account" ) ? row["Sub_Fund_GL_Account"] as string : string.Empty; " is 130.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                        var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 163.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' fundGLAccount' null' null' isFundActive.AsBooleanOrNull()' receivedDate' fundName.RemoveSpecialCharacters() ); " is 213.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            var campusFund = CampusList.FirstOrDefault( c => subFund.StartsWith( c.Name' StringComparison.CurrentCultureIgnoreCase ) || subFund.StartsWith( c.ShortCode' StringComparison.CurrentCultureIgnoreCase ) ); " is 203.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 178.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                                childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' subFundGLAccount' campusFundId' parentAccount.Id' isFundActive.AsBooleanOrNull()' receivedDate' subFund.RemoveSpecialCharacters() ); " is 232.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The length of the statement  "                            transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) ) " is 124.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "            var pledgeFrequencies = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_FREQUENCY )' lookupContext ).DefinedValues; " is 138.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "            var oneTimePledgeFrequencyId = pledgeFrequencies.FirstOrDefault( f => f.Guid == new Guid( Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_ONE_TIME ) ).Id; " is 157.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                            if ( frequency.Equals( "one time"' StringComparison.CurrentCultureIgnoreCase ) || frequency.Equals( "as can"' StringComparison.CurrentCultureIgnoreCase ) ) " is 155.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                    .Where( f => f.Value.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) || f.Description.StartsWith( frequency' StringComparison.CurrentCultureIgnoreCase ) ) " is 173.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                            var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 163.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                parentAccount = AddFinancialAccount( lookupContext' fundName' $"{fundName} imported {ImportDateTime}"' string.Empty' null' null' null' startDate' fundName.RemoveSpecialCharacters() ); " is 183.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) ); " is 178.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The length of the statement  "                                    childAccount = AddFinancialAccount( lookupContext' subFund' $"{subFund} imported {ImportDateTime}"' string.Empty' campusFundId' parentAccount.Id' null' startDate' subFund.RemoveSpecialCharacters() ); " is 199.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "            var customLocationTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.GROUP_LOCATION_TYPE )' lookupContext ).DefinedValues; " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                var otherGroupLocationType = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.GROUP_LOCATION_TYPE' otherGroupLocationName ); " is 135.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                        var familyAddress = locationService.Get( street1' street2' city' state' zip.Left( 5 )' country' verifyLocation: false ); " is 120.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                            else if ( addressType.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) || addressType.StartsWith( "Org"' StringComparison.CurrentCultureIgnoreCase ) ) " is 165.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The length of the statement  "                                var customTypeId = customLocationTypes.Where( dv => dv.Value.Equals( addressType' StringComparison.CurrentCultureIgnoreCase ) ) " is 127.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The length of the statement  "            var staffGroupId = new GroupService( lookupContext ).GetByGuid( new Guid( Rock.SystemGuid.Group.GROUP_STAFF_MEMBERS ) ).Id;" is 123.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The length of the statement  "                        var user = AddUserLogin( lookupContext' rockAuthenticatedTypeId' personKeys.PersonId' userName.Trim()' null' isEnabled' false' createdDate' userId.ToString()' ImportPersonAliasId );" is 181.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The length of the statement  "            var importedCompanyCount = new PersonService( lookupContext ).Queryable().Count( p => p.ForeignId != null && p.RecordTypeValueId == BusinessRecordTypeId ); " is 155.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The length of the statement  "                        ReportProgress( percentComplete' $"{completedItems - importedCompanyCount:N0} companies imported ({percentComplete}% complete)." ); " is 131.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCompanies,The length of the statement  "                            var existingValue = rockContext.AttributeValues.FirstOrDefault( v => v.Attribute.Key == attributeCache.Key && v.EntityId == groupMember.Person.Id ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SaveCompanies,The length of the statement  "                            groupMember.Person.Aliases.Add( new PersonAlias { AliasPersonId = groupMember.Person.Id' AliasPersonGuid = groupMember.Person.Guid } ); " is 135.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var maritalStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS )' lookupContext ).DefinedValues; " is 141.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var connectionStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS )' lookupContext ).DefinedValues; " is 147.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var titleTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_TITLE )' lookupContext ).DefinedValues; " is 124.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var suffixTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_SUFFIX )' lookupContext ).DefinedValues; " is 126.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var personAttributes = new AttributeService( lookupContext ).GetByEntityTypeId( PersonEntityTypeId ).AsNoTracking().ToList(); " is 125.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var previousChurchAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "PreviousChurch"' StringComparison.InvariantCultureIgnoreCase ) ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var membershipDateAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "MembershipDate"' StringComparison.InvariantCultureIgnoreCase ) ); " is 148.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var firstVisitAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "FirstVisit"' StringComparison.InvariantCultureIgnoreCase ) ); " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var allergyNoteAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Allergy"' StringComparison.InvariantCultureIgnoreCase ) ); " is 138.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var employerAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Employer"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var positionAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "Position"' StringComparison.InvariantCultureIgnoreCase ) ); " is 136.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "            var schoolAttribute = personAttributes.FirstOrDefault( a => a.Key.Equals( "School"' StringComparison.InvariantCultureIgnoreCase ) ); " is 132.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 140.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 142.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 163.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus ); " is 122.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) ) " is 135.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            else if ( memberStatus.Equals( "Dropped"' StringComparison.CurrentCultureIgnoreCase ) || memberStatus.StartsWith( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) ) " is 171.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( memberStatus' StringComparison.CurrentCultureIgnoreCase ) ) " is 144.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                                    var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' memberStatus ); " is 127.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                            AddEntityAttributeValue( lookupContext' membershipDateAttribute' person' membershipDate.Value.ToString( "yyyy-MM-dd" ) ); " is 121.
Long Statement,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The length of the statement  "                        ReportProgress( percentComplete' $"{completedItems - importedPeopleCount:N0} people imported ({percentComplete}% complete)." ); " is 127.
Complex Conditional,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The conditional expression  "personKeys != null && !string.IsNullOrWhiteSpace( text ) && noteTypeActive == true && !noteExcluded"  is complex.
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,TransformData,The following statement contains a magic number: ReportProgress( 100' "Import completed.  " );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,TransformData,The following statement contains a magic number: return 100;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: var emailSubject = !string.IsNullOrWhiteSpace( itemCaption ) ? itemCaption.Left( 100 ) : itemText.Left( 100 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: var emailSubject = !string.IsNullOrWhiteSpace( itemCaption ) ? itemCaption.Left( 100 ) : itemText.Left( 100 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContactFormData,The following statement contains a magic number: ReportProgress( 100' $"Finished contact item import: {completedItems:N0} items imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapIndividualContactNotes,The following statement contains a magic number: ReportProgress( 100' $"Finished contact note import: {completedItems:N0} notes imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapNotes,The following statement contains a magic number: ReportProgress( 100' $"Finished note import: {completedItems:N0} notes imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: countryCode = value.Substring( countryIndex' countryIndex + 3 ).AsNumeric();
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: normalizedNumber = value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric();
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: newNumber.Extension = extension.Left( 20 ) ?? string.Empty;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: newNumber.Number = normalizedNumber.Left( 20 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCommunication,The following statement contains a magic number: ReportProgress( 100' $"Finished communications import: {completed:N0} items imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBankAccount,The following statement contains a magic number: ReportProgress( 100' $"Finished check number import: {completedItems:N0} numbers imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: batch.Name = name.Truncate( 50 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapBatch,The following statement contains a magic number: ReportProgress( 100' $"Finished batch import: {completedItems:N0} batches imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapContribution,The following statement contains a magic number: ReportProgress( 100' $"Finished contribution import: {completedItems:N0} contributions imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: var parentAccount = accountList.FirstOrDefault( a => !a.CampusId.HasValue && a.Name.Equals( fundName.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: var childAccount = accountList.FirstOrDefault( c => c.ParentAccountId == parentAccount.Id && c.Name.Equals( subFund.Truncate( 50 )' StringComparison.CurrentCultureIgnoreCase ) );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPledge,The following statement contains a magic number: ReportProgress( 100' $"Finished pledge import: {completedItems:N0} pledges imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: var familyAddress = locationService.Get( street1' street2' city' state' zip.Left( 5 )' country' verifyLocation: false );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapFamilyAddress,The following statement contains a magic number: ReportProgress( 100' $"Finished address import: {completed:N0} addresses imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: person.Email = userEmail.Left( 75 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapUsers,The following statement contains a magic number: ReportProgress( 100' $"Finished user import: {completedItems:N0} users imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: businessPerson.LastName = businessName.Left( 50 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: businessGroup.Name = businessName.Left( 50 );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapCompany,The following statement contains a magic number: ReportProgress( 100' $"Finished company import: {completedItems - importedCompanyCount:N0} companies imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: var percentage = ( totalRows - 1 ) / 100 + 1;
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: completedItems % percentage < 2
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,MapPerson,The following statement contains a magic number: ReportProgress( 100' $"Finished person import: {completedItems - importedPeopleCount:N0} people imported." );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
Magic Number,Excavator.F1,F1Component,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.FellowshipOne\F1Component.cs,SavePeople,The following statement contains a magic number: rockContext.WrapTransaction( () =>              {                  rockContext.Configuration.AutoDetectChangesEnabled = false;                  rockContext.Groups.AddRange( familyList );                  rockContext.SaveChanges( DisableAuditing );                    foreach ( var familyGroups in familyList.GroupBy( g => g.ForeignId ) )                  {                      var visitorsExist = familyGroups.Count() > 1;                      foreach ( var newFamilyGroup in familyGroups )                      {                          foreach ( var groupMember in newFamilyGroup.Members )                          {                              // don't call LoadAttributes' it only rewrites existing cache objects                              // groupMember.Person.LoadAttributes( rockContext );                                var memberPersonAttributeValues = groupMember.Person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = groupMember.Person.Id'                                      Value = groupMember.Person.AttributeValues[a.Key].Value                                  } ).ToList();                                rockContext.AttributeValues.AddRange( memberPersonAttributeValues );                                // add a default person alias                              if ( !groupMember.Person.Aliases.Any( a => a.AliasPersonId == groupMember.Person.Id ) )                              {                                  groupMember.Person.Aliases.Add( new PersonAlias                                  {                                      AliasPersonId = groupMember.Person.Id'                                      AliasPersonGuid = groupMember.Person.Guid'                                      ForeignId = groupMember.Person.ForeignId'                                      ForeignKey = groupMember.Person.ForeignKey                                  } );                              }                                // assign the previous name                              if ( previousNamesList.Any( l => l.Key.Equals( groupMember.Person.Guid ) ) )                              {                                  var newPreviousName = new PersonPreviousName                                  {                                      LastName = previousNamesList[groupMember.Person.Guid]'                                      PersonAlias = groupMember.Person.Aliases.FirstOrDefault()                                  };                                    rockContext.PersonPreviousNames.Add( newPreviousName );                              }                                // assign the giving group                              if ( groupMember.GroupRoleId != FamilyChildRoleId )                              {                                  groupMember.Person.GivingGroupId = newFamilyGroup.Id;                              }                                // Add known relationship group                              var knownGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = KnownRelationshipOwnerRoleId                              };                                var knownRelationshipGroup = new Group                              {                                  Name = KnownRelationshipGroupType.Name'                                  GroupTypeId = KnownRelationshipGroupType.Id'                                  IsPublic = true                              };                                knownRelationshipGroup.Members.Add( knownGroupMember );                              rockContext.Groups.Add( knownRelationshipGroup );                                // Add implied relationship group                              var impliedGroupMember = new GroupMember                              {                                  PersonId = groupMember.Person.Id'                                  GroupRoleId = ImpliedRelationshipOwnerRoleId                              };                                var impliedGroup = new Group                              {                                  Name = ImpliedRelationshipGroupType.Name'                                  GroupTypeId = ImpliedRelationshipGroupType.Id'                                  IsPublic = true                              };                                impliedGroup.Members.Add( impliedGroupMember );                              rockContext.Groups.Add( impliedGroup );                                if ( visitorsExist )                              {                                  // if this is a visitor' then add relationships to the family member(s)                                  if ( visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .Any( v => v.Members.Any( m => m.Person.ForeignId.Equals( groupMember.Person.ForeignId ) ) ) )                                  {                                      var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                      foreach ( var familyMember in familyMembers.Select( m => m.Person ) )                                      {                                          var invitedByMember = new GroupMember                                          {                                              PersonId = familyMember.Id'                                              GroupRoleId = InvitedByKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( invitedByMember );                                            if ( groupMember.Person.Age < 18 && familyMember.Age > 18 )                                          {                                              var allowCheckinMember = new GroupMember                                              {                                                  PersonId = familyMember.Id'                                                  GroupRoleId = AllowCheckInByKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( allowCheckinMember );                                          }                                      }                                  }                                  else                                  {   // not a visitor' add the visitors to the family member's known relationship                                      var visitors = visitorList.Where( v => v.ForeignId == newFamilyGroup.ForeignId )                                          .SelectMany( g => g.Members ).ToList();                                      foreach ( var visitor in visitors.Select( g => g.Person ) )                                      {                                          var inviteeMember = new GroupMember                                          {                                              PersonId = visitor.Id'                                              GroupRoleId = InviteeKnownRelationshipId                                          };                                            knownRelationshipGroup.Members.Add( inviteeMember );                                            // if visitor can be checked in and this person is considered an adult                                          if ( visitor.Age < 18 && groupMember.Person.Age > 18 )                                          {                                              var canCheckInMember = new GroupMember                                              {                                                  PersonId = visitor.Id'                                                  GroupRoleId = CanCheckInKnownRelationshipId                                              };                                                knownRelationshipGroup.Members.Add( canCheckInMember );                                          }                                      }                                  }                              }                          }                      }                  }                    rockContext.ChangeTracker.DetectChanges();                  rockContext.SaveChanges( DisableAuditing );              } );
