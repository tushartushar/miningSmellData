Implementation smell,Namespace,Class,File,Method,Description
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The method has 107 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The method has 280 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The method has 136 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The method has 220 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The method has 149 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The method has 601 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The method has 160 lines of code.
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,TransformData,Cyclomatic complexity of the method is 11
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,Cyclomatic complexity of the method is 13
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,Cyclomatic complexity of the method is 28
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,Cyclomatic complexity of the method is 14
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,Cyclomatic complexity of the method is 17
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,Cyclomatic complexity of the method is 12
Complex Method,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,Cyclomatic complexity of the method is 68
Long Parameter List,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The method has 13 parameters. Parameters: lookupContext' fundName' accountGL' fundCampusId' parentAccountId' isActive' startDate' endDate' order' foreignId' fundDescription' fundPublicName' isTaxDeductible
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadSchema,The length of the statement  "                CsvDataToImport.Add( new CSVInstance( fileName ) { TableNodes = tableNodes' RecordType = GetRecordTypeFromFilename( fileName ) } );" is 131.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,TransformData,The length of the statement  "                selectedCsvData = selectedCsvData.OrderByDescending( d => d.RecordType == CSVInstance.RockDataType.INDIVIDUAL ).ToList();" is 121.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "            var importPerson = personService.GetByFullName( importUser' includeDeceased: false' allowFirstNameOnly: true ).FirstOrDefault();" is 128.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "            var anonymousGiver = personService.GetByFullName( "Anonymous' Giver"' includeDeceased: false' allowFirstNameOnly: true ).FirstOrDefault();" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "                anonymousGiver = personService.Queryable().FirstOrDefault( p => p.Guid.ToString().ToUpper() == "802235DC-3CA5-94B0-4326-AACE71180F48" );" is 136.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,GetPersonKeys,The length of the statement  "                return !string.IsNullOrWhiteSpace( individualKey ) ? ImportedPeopleKeys.FirstOrDefault( p => p.PersonForeignKey == individualKey ) : null;" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The length of the statement  "                                LogException( "Duplicate Batch"' string.Format( "Batch #{0} is a duplicate and will be skipped. Please check the source data."' b.ForeignId ) );" is 144.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeACH = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_ACH ) ) ).Id;" is 154.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCash = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH ) ) ).Id;" is 156.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCheck = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK ) ) ).Id;" is 158.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCreditCard = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CREDIT_CARD ) ) ).Id;" is 169.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeNonCash = currencyTypes.DefinedValues.Where( dv => dv.Value.Equals( "Non-Cash" ) ).Select( dv => (int?)dv.Id ).FirstOrDefault();" is 144.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var creditCardTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE ) ).DefinedValues;" is 128.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeOnsite = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_ONSITE_COLLECTION )' lookupContext ).Id;" is 148.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeWebsite = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_WEBSITE )' lookupContext ).Id;" is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeKiosk = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_KIOSK )' lookupContext ).Id;" is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var refundReasons = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON )' lookupContext ).DefinedValues;" is 150.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var allFields = csvData.TableNodes.FirstOrDefault().Children.Select( ( node' index ) => new { node = node' index = index } ).ToList();" is 134.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                                creditCardTypeId = creditCardTypes.Where( c => c.Value.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase )" is 126.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            parentAccount = AddAccount( lookupContext' fundName' fundGLAccount' null' null' isFundActive' null' null' null' null' ""' ""' null );" is 133.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );" is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                                childAccount = AddAccount( lookupContext' subFund' subFundGLAccount' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );" is 157.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )" is 124.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "            var pledgeFrequencies = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_FREQUENCY )' lookupContext ).DefinedValues;" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "            var oneTimePledgeFrequencyId = pledgeFrequencies.FirstOrDefault( f => f.Guid == new Guid( Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_ONE_TIME ) ).Id;" is 157.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );" is 132.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );" is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                    childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );" is 153.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "            var metricSourceTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.METRIC_SOURCE_TYPE ) ).DefinedValues;" is 122.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "            var metricManualSource = metricSourceTypes.FirstOrDefault( m => m.Guid == new Guid( Rock.SystemGuid.DefinedValue.METRIC_SOURCE_VALUE_TYPE_MANUAL ) );" is 149.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                    currentMetric = allMetrics.FirstOrDefault( m => m.Title == metricName && m.MetricCategories.Any( c => c.CategoryId == metricCategoryId ) );" is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Campus"' EntityTypeId = campusEntityTypeId' Metric = currentMetric } );" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Service"' EntityTypeId = scheduleEntityTypeId' Metric = currentMetric } );" is 141.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        if ( currentMetric.MetricCategories == null || !currentMetric.MetricCategories.Any( a => a.CategoryId == metricCategoryId ) )" is 125.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                            scheduleName = scheduleName + string.Format( " {0}"' date.ToString( "hh:mm" ) ) + string.Format( "{0}"' date.ToString( "tt" ).ToLower() );" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionScheduleId' EntityId = scheduleId } );" is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                            metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionCampusId' EntityId = campus.Id } );" is 136.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                    else if ( !lookupContext.ChangeTracker.Entries<Group>().Any( g => g.Entity.ForeignId == rowFamilyId || g.Entity.ForeignKey == rowFamilyKey ) )" is 142.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                        var familyCampus = CampusList.FirstOrDefault( c => c.Name.Equals( campusName' StringComparison.InvariantCultureIgnoreCase )" is 123.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                    var primaryAddress = locationService.Get( famAddress' famAddress2' famCity' famState' famZip' famCountry' verifyLocation: false );" is 130.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                    var secondaryAddress = locationService.Get( famSecondAddress' famSecondAddress2' famSecondCity' famSecondState' famSecondZip' famSecondCountry' verifyLocation: false );" is 168.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveFamilies,The length of the statement  "                    var familyGroupId = ImportedFamilies.Where( g => g.ForeignKey == locationPair.Value ).Select( g => (int?)g.Id ).FirstOrDefault();" is 129.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var maritalStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS )' lookupContext ).DefinedValues;" is 141.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var connectionStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS )' lookupContext ).DefinedValues;" is 147.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var suffixTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_SUFFIX )' lookupContext ).DefinedValues;" is 126.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var titleTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_TITLE )' lookupContext ).DefinedValues;" is 124.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var numberTypeValues = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE )' lookupContext ).DefinedValues;" is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var allFields = csvData.TableNodes.FirstOrDefault().Children.Select( ( node' index ) => new { node = node' index = index } ).ToList();" is 134.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                foreach ( var avp in customAttributes.Where( ca => !personAttributes.Any( a => a.Name.Equals( ca.Value' StringComparison.InvariantCultureIgnoreCase ) ) ) )" is 155.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )" is 140.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )" is 142.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )" is 163.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );" is 122.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )" is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )" is 120.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )" is 148.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                                var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );" is 131.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                    foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )" is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;" is 125.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );" is 130.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )" is 140.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            ReportProgress( 0' string.Format( "Finished individual import: {0:N0} families and {1:N0} people added."' newFamilies' completed ) );" is 133.
Long Statement,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The length of the statement  "                                        var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();" is 127.
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,TransformData,The following statement contains a magic number: ReportProgress( 100' $"Completed import: {completed:N0} rows processed." );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: batch.Name = name.Left( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: ReportProgress( 100' $"Finished batch import: {completed:N0} batches imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: ReportProgress( 100' $"Finished contribution import: {completed:N0} contributions imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: ReportProgress( 100' $"Finished pledge import: {completed:N0} pledges imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: var account = new FinancialAccount             {                 Name = fundName.Truncate( 50 )'                 Description = fundDescription'                 GlCode = accountGL.Truncate( 50 )'                 IsTaxDeductible = isTaxDeductible ?? true'                 IsActive = isActive ?? true'                 IsPublic = false'                 CampusId = fundCampusId'                 ParentAccountId = parentAccountId'                 CreatedByPersonAliasId = ImportPersonAliasId'                 StartDate = startDate'                 EndDate = endDate'                 ForeignId = foreignId'                 ForeignKey = foreignId.ToString()             };
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: var account = new FinancialAccount             {                 Name = fundName.Truncate( 50 )'                 Description = fundDescription'                 GlCode = accountGL.Truncate( 50 )'                 IsTaxDeductible = isTaxDeductible ?? true'                 IsActive = isActive ?? true'                 IsPublic = false'                 CampusId = fundCampusId'                 ParentAccountId = parentAccountId'                 CreatedByPersonAliasId = ImportPersonAliasId'                 StartDate = startDate'                 EndDate = endDate'                 ForeignId = foreignId'                 ForeignKey = foreignId.ToString()             };
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: account.PublicName = fundPublicName.Truncate( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The following statement contains a magic number: secondaryAddress != null && currentFamilyGroup.GroupLocations.Count < 2
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: var firstName = row[FirstName].Left( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: var nickName = row[NickName].Left( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: person.MiddleName = row[MiddleName].Left( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: person.LastName = row[LastName].Left( 50 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: currentNumber.Extension = extension.Left( 20 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: var primaryEmail = row[Email].Trim().Left( 75 );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: completed % ( ReportingNumber * 10 ) < 1
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: rockContext.WrapTransaction( () =>                 {                     rockContext.Groups.AddRange( newFamilyList );                     rockContext.SaveChanges( DisableAuditing );                      // #TODO find out how to track family groups without context locks                     ImportedFamilies.AddRange( newFamilyList );                      foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                     {                         var visitorsExist = visitorList.Any() && familyGroups.Any();                         foreach ( var newFamilyGroup in familyGroups )                         {                             foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                             {                                 // Set notes on this person                                 var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                 if ( personNotes.Any() )                                 {                                     personNotes.ForEach( n => n.EntityId = person.Id );                                 }                                  // Set attributes on this person                                 var personAttributeValues = person.Attributes.Select( a => a.Value )                                 .Select( a => new AttributeValue                                 {                                     AttributeId = a.Id'                                     EntityId = person.Id'                                     Value = person.AttributeValues[a.Key].Value                                 } ).ToList();                                  rockContext.AttributeValues.AddRange( personAttributeValues );                                  // Set aliases on this person                                 if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                 {                                     person.Aliases.Add( new PersonAlias                                     {                                         AliasPersonId = person.Id'                                         AliasPersonGuid = person.Guid'                                         ForeignKey = person.ForeignKey'                                         ForeignId = person.ForeignId'                                         PersonId = person.Id                                     } );                                 }                                  person.GivingGroupId = newFamilyGroup.Id;                                  if ( visitorsExist )                                 {                                     // Retrieve or create the group this person is an owner of                                     var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                         .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                         .Select( m => m.Group ).FirstOrDefault();                                     if ( ownerGroup == null )                                     {                                         var ownerGroupMember = new GroupMember                                         {                                             PersonId = person.Id'                                             GroupRoleId = KnownRelationshipOwnerRoleId                                         };                                          ownerGroup = new Group                                         {                                             Name = KnownRelationshipGroupType.Name'                                             GroupTypeId = KnownRelationshipGroupType.Id                                         };                                         ownerGroup.Members.Add( ownerGroupMember );                                         rockContext.Groups.Add( ownerGroup );                                     }                                      // Visitor' add relationships to the family members                                     if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                             .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                     {                                         var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                         foreach ( var familyMember in familyMembers )                                         {                                             // Add visitor invitedBy relationship                                             var invitedByMember = new GroupMember                                             {                                                 PersonId = familyMember.Person.Id'                                                 GroupRoleId = InvitedByKnownRelationshipId                                             };                                              ownerGroup.Members.Add( invitedByMember );                                              if ( person.Age < 18 && familyMember.Person.Age > 15 )                                             {                                                 // Add visitor allowCheckInBy relationship                                                 var allowCheckinMember = new GroupMember                                                 {                                                     PersonId = familyMember.Person.Id'                                                     GroupRoleId = AllowCheckInByKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( allowCheckinMember );                                             }                                         }                                     }                                     else                                     {   // Family member' add relationships to the visitor(s)                                         var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                         foreach ( var visitor in familyVisitors )                                         {                                             // Add invited visitor relationship                                             var inviteeMember = new GroupMember                                             {                                                 PersonId = visitor.Person.Id'                                                 GroupRoleId = InviteeKnownRelationshipId                                             };                                              ownerGroup.Members.Add( inviteeMember );                                              if ( visitor.Person.Age < 18 && person.Age > 15 )                                             {                                                 // Add canCheckIn visitor relationship                                                 var canCheckInMember = new GroupMember                                                 {                                                     PersonId = visitor.Person.Id'                                                     GroupRoleId = CanCheckInKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( canCheckInMember );                                             }                                         }                                     }                                 }                             }                         }                     }                      // Save notes and all changes                     rockContext.Notes.AddRange( newNoteList );                     rockContext.SaveChanges( DisableAuditing );                      if ( refreshIndividualListEachCycle )                     {                         // add reference to imported people now that we have ID's                         ImportedPeopleKeys.AddRange(                             newFamilyList.Where( m => m.ForeignKey != null )                             .SelectMany( m => m.Members )                             .Select( p => new PersonKeys                             {                                 PersonAliasId = (int)p.Person.PrimaryAliasId'                                 GroupForeignId = p.Group.ForeignId'                                 PersonId = p.Person.Id'                                 PersonForeignId = p.Person.ForeignId'                                 PersonForeignKey = p.Person.ForeignKey                             } )                         );                         ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                     }                 } );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: rockContext.WrapTransaction( () =>                 {                     rockContext.Groups.AddRange( newFamilyList );                     rockContext.SaveChanges( DisableAuditing );                      // #TODO find out how to track family groups without context locks                     ImportedFamilies.AddRange( newFamilyList );                      foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                     {                         var visitorsExist = visitorList.Any() && familyGroups.Any();                         foreach ( var newFamilyGroup in familyGroups )                         {                             foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                             {                                 // Set notes on this person                                 var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                 if ( personNotes.Any() )                                 {                                     personNotes.ForEach( n => n.EntityId = person.Id );                                 }                                  // Set attributes on this person                                 var personAttributeValues = person.Attributes.Select( a => a.Value )                                 .Select( a => new AttributeValue                                 {                                     AttributeId = a.Id'                                     EntityId = person.Id'                                     Value = person.AttributeValues[a.Key].Value                                 } ).ToList();                                  rockContext.AttributeValues.AddRange( personAttributeValues );                                  // Set aliases on this person                                 if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                 {                                     person.Aliases.Add( new PersonAlias                                     {                                         AliasPersonId = person.Id'                                         AliasPersonGuid = person.Guid'                                         ForeignKey = person.ForeignKey'                                         ForeignId = person.ForeignId'                                         PersonId = person.Id                                     } );                                 }                                  person.GivingGroupId = newFamilyGroup.Id;                                  if ( visitorsExist )                                 {                                     // Retrieve or create the group this person is an owner of                                     var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                         .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                         .Select( m => m.Group ).FirstOrDefault();                                     if ( ownerGroup == null )                                     {                                         var ownerGroupMember = new GroupMember                                         {                                             PersonId = person.Id'                                             GroupRoleId = KnownRelationshipOwnerRoleId                                         };                                          ownerGroup = new Group                                         {                                             Name = KnownRelationshipGroupType.Name'                                             GroupTypeId = KnownRelationshipGroupType.Id                                         };                                         ownerGroup.Members.Add( ownerGroupMember );                                         rockContext.Groups.Add( ownerGroup );                                     }                                      // Visitor' add relationships to the family members                                     if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                             .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                     {                                         var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                         foreach ( var familyMember in familyMembers )                                         {                                             // Add visitor invitedBy relationship                                             var invitedByMember = new GroupMember                                             {                                                 PersonId = familyMember.Person.Id'                                                 GroupRoleId = InvitedByKnownRelationshipId                                             };                                              ownerGroup.Members.Add( invitedByMember );                                              if ( person.Age < 18 && familyMember.Person.Age > 15 )                                             {                                                 // Add visitor allowCheckInBy relationship                                                 var allowCheckinMember = new GroupMember                                                 {                                                     PersonId = familyMember.Person.Id'                                                     GroupRoleId = AllowCheckInByKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( allowCheckinMember );                                             }                                         }                                     }                                     else                                     {   // Family member' add relationships to the visitor(s)                                         var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                         foreach ( var visitor in familyVisitors )                                         {                                             // Add invited visitor relationship                                             var inviteeMember = new GroupMember                                             {                                                 PersonId = visitor.Person.Id'                                                 GroupRoleId = InviteeKnownRelationshipId                                             };                                              ownerGroup.Members.Add( inviteeMember );                                              if ( visitor.Person.Age < 18 && person.Age > 15 )                                             {                                                 // Add canCheckIn visitor relationship                                                 var canCheckInMember = new GroupMember                                                 {                                                     PersonId = visitor.Person.Id'                                                     GroupRoleId = CanCheckInKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( canCheckInMember );                                             }                                         }                                     }                                 }                             }                         }                     }                      // Save notes and all changes                     rockContext.Notes.AddRange( newNoteList );                     rockContext.SaveChanges( DisableAuditing );                      if ( refreshIndividualListEachCycle )                     {                         // add reference to imported people now that we have ID's                         ImportedPeopleKeys.AddRange(                             newFamilyList.Where( m => m.ForeignKey != null )                             .SelectMany( m => m.Members )                             .Select( p => new PersonKeys                             {                                 PersonAliasId = (int)p.Person.PrimaryAliasId'                                 GroupForeignId = p.Group.ForeignId'                                 PersonId = p.Person.Id'                                 PersonForeignId = p.Person.ForeignId'                                 PersonForeignKey = p.Person.ForeignKey                             } )                         );                         ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                     }                 } );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: rockContext.WrapTransaction( () =>                 {                     rockContext.Groups.AddRange( newFamilyList );                     rockContext.SaveChanges( DisableAuditing );                      // #TODO find out how to track family groups without context locks                     ImportedFamilies.AddRange( newFamilyList );                      foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                     {                         var visitorsExist = visitorList.Any() && familyGroups.Any();                         foreach ( var newFamilyGroup in familyGroups )                         {                             foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                             {                                 // Set notes on this person                                 var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                 if ( personNotes.Any() )                                 {                                     personNotes.ForEach( n => n.EntityId = person.Id );                                 }                                  // Set attributes on this person                                 var personAttributeValues = person.Attributes.Select( a => a.Value )                                 .Select( a => new AttributeValue                                 {                                     AttributeId = a.Id'                                     EntityId = person.Id'                                     Value = person.AttributeValues[a.Key].Value                                 } ).ToList();                                  rockContext.AttributeValues.AddRange( personAttributeValues );                                  // Set aliases on this person                                 if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                 {                                     person.Aliases.Add( new PersonAlias                                     {                                         AliasPersonId = person.Id'                                         AliasPersonGuid = person.Guid'                                         ForeignKey = person.ForeignKey'                                         ForeignId = person.ForeignId'                                         PersonId = person.Id                                     } );                                 }                                  person.GivingGroupId = newFamilyGroup.Id;                                  if ( visitorsExist )                                 {                                     // Retrieve or create the group this person is an owner of                                     var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                         .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                         .Select( m => m.Group ).FirstOrDefault();                                     if ( ownerGroup == null )                                     {                                         var ownerGroupMember = new GroupMember                                         {                                             PersonId = person.Id'                                             GroupRoleId = KnownRelationshipOwnerRoleId                                         };                                          ownerGroup = new Group                                         {                                             Name = KnownRelationshipGroupType.Name'                                             GroupTypeId = KnownRelationshipGroupType.Id                                         };                                         ownerGroup.Members.Add( ownerGroupMember );                                         rockContext.Groups.Add( ownerGroup );                                     }                                      // Visitor' add relationships to the family members                                     if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                             .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                     {                                         var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                         foreach ( var familyMember in familyMembers )                                         {                                             // Add visitor invitedBy relationship                                             var invitedByMember = new GroupMember                                             {                                                 PersonId = familyMember.Person.Id'                                                 GroupRoleId = InvitedByKnownRelationshipId                                             };                                              ownerGroup.Members.Add( invitedByMember );                                              if ( person.Age < 18 && familyMember.Person.Age > 15 )                                             {                                                 // Add visitor allowCheckInBy relationship                                                 var allowCheckinMember = new GroupMember                                                 {                                                     PersonId = familyMember.Person.Id'                                                     GroupRoleId = AllowCheckInByKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( allowCheckinMember );                                             }                                         }                                     }                                     else                                     {   // Family member' add relationships to the visitor(s)                                         var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                         foreach ( var visitor in familyVisitors )                                         {                                             // Add invited visitor relationship                                             var inviteeMember = new GroupMember                                             {                                                 PersonId = visitor.Person.Id'                                                 GroupRoleId = InviteeKnownRelationshipId                                             };                                              ownerGroup.Members.Add( inviteeMember );                                              if ( visitor.Person.Age < 18 && person.Age > 15 )                                             {                                                 // Add canCheckIn visitor relationship                                                 var canCheckInMember = new GroupMember                                                 {                                                     PersonId = visitor.Person.Id'                                                     GroupRoleId = CanCheckInKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( canCheckInMember );                                             }                                         }                                     }                                 }                             }                         }                     }                      // Save notes and all changes                     rockContext.Notes.AddRange( newNoteList );                     rockContext.SaveChanges( DisableAuditing );                      if ( refreshIndividualListEachCycle )                     {                         // add reference to imported people now that we have ID's                         ImportedPeopleKeys.AddRange(                             newFamilyList.Where( m => m.ForeignKey != null )                             .SelectMany( m => m.Members )                             .Select( p => new PersonKeys                             {                                 PersonAliasId = (int)p.Person.PrimaryAliasId'                                 GroupForeignId = p.Group.ForeignId'                                 PersonId = p.Person.Id'                                 PersonForeignId = p.Person.ForeignId'                                 PersonForeignKey = p.Person.ForeignKey                             } )                         );                         ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                     }                 } );
Magic Number,Excavator.CSV,CSVComponent,C:\research\architectureSmells\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: rockContext.WrapTransaction( () =>                 {                     rockContext.Groups.AddRange( newFamilyList );                     rockContext.SaveChanges( DisableAuditing );                      // #TODO find out how to track family groups without context locks                     ImportedFamilies.AddRange( newFamilyList );                      foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                     {                         var visitorsExist = visitorList.Any() && familyGroups.Any();                         foreach ( var newFamilyGroup in familyGroups )                         {                             foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                             {                                 // Set notes on this person                                 var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                 if ( personNotes.Any() )                                 {                                     personNotes.ForEach( n => n.EntityId = person.Id );                                 }                                  // Set attributes on this person                                 var personAttributeValues = person.Attributes.Select( a => a.Value )                                 .Select( a => new AttributeValue                                 {                                     AttributeId = a.Id'                                     EntityId = person.Id'                                     Value = person.AttributeValues[a.Key].Value                                 } ).ToList();                                  rockContext.AttributeValues.AddRange( personAttributeValues );                                  // Set aliases on this person                                 if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                 {                                     person.Aliases.Add( new PersonAlias                                     {                                         AliasPersonId = person.Id'                                         AliasPersonGuid = person.Guid'                                         ForeignKey = person.ForeignKey'                                         ForeignId = person.ForeignId'                                         PersonId = person.Id                                     } );                                 }                                  person.GivingGroupId = newFamilyGroup.Id;                                  if ( visitorsExist )                                 {                                     // Retrieve or create the group this person is an owner of                                     var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                         .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                         .Select( m => m.Group ).FirstOrDefault();                                     if ( ownerGroup == null )                                     {                                         var ownerGroupMember = new GroupMember                                         {                                             PersonId = person.Id'                                             GroupRoleId = KnownRelationshipOwnerRoleId                                         };                                          ownerGroup = new Group                                         {                                             Name = KnownRelationshipGroupType.Name'                                             GroupTypeId = KnownRelationshipGroupType.Id                                         };                                         ownerGroup.Members.Add( ownerGroupMember );                                         rockContext.Groups.Add( ownerGroup );                                     }                                      // Visitor' add relationships to the family members                                     if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                             .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                     {                                         var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                         foreach ( var familyMember in familyMembers )                                         {                                             // Add visitor invitedBy relationship                                             var invitedByMember = new GroupMember                                             {                                                 PersonId = familyMember.Person.Id'                                                 GroupRoleId = InvitedByKnownRelationshipId                                             };                                              ownerGroup.Members.Add( invitedByMember );                                              if ( person.Age < 18 && familyMember.Person.Age > 15 )                                             {                                                 // Add visitor allowCheckInBy relationship                                                 var allowCheckinMember = new GroupMember                                                 {                                                     PersonId = familyMember.Person.Id'                                                     GroupRoleId = AllowCheckInByKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( allowCheckinMember );                                             }                                         }                                     }                                     else                                     {   // Family member' add relationships to the visitor(s)                                         var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                         foreach ( var visitor in familyVisitors )                                         {                                             // Add invited visitor relationship                                             var inviteeMember = new GroupMember                                             {                                                 PersonId = visitor.Person.Id'                                                 GroupRoleId = InviteeKnownRelationshipId                                             };                                              ownerGroup.Members.Add( inviteeMember );                                              if ( visitor.Person.Age < 18 && person.Age > 15 )                                             {                                                 // Add canCheckIn visitor relationship                                                 var canCheckInMember = new GroupMember                                                 {                                                     PersonId = visitor.Person.Id'                                                     GroupRoleId = CanCheckInKnownRelationshipId                                                 };                                                  ownerGroup.Members.Add( canCheckInMember );                                             }                                         }                                     }                                 }                             }                         }                     }                      // Save notes and all changes                     rockContext.Notes.AddRange( newNoteList );                     rockContext.SaveChanges( DisableAuditing );                      if ( refreshIndividualListEachCycle )                     {                         // add reference to imported people now that we have ID's                         ImportedPeopleKeys.AddRange(                             newFamilyList.Where( m => m.ForeignKey != null )                             .SelectMany( m => m.Members )                             .Select( p => new PersonKeys                             {                                 PersonAliasId = (int)p.Person.PrimaryAliasId'                                 GroupForeignId = p.Group.ForeignId'                                 PersonId = p.Person.Id'                                 PersonForeignId = p.Person.ForeignId'                                 PersonForeignKey = p.Person.ForeignKey                             } )                         );                         ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                     }                 } );
