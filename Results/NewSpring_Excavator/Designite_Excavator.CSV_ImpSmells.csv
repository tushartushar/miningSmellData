Implementation smell,Namespace,Class,File,Method,Description
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The method has 246 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The method has 120 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The method has 182 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The method has 128 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The method has 526 lines of code.
Long Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The method has 143 lines of code.
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,Cyclomatic complexity of the method is 10
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,Cyclomatic complexity of the method is 22
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,Cyclomatic complexity of the method is 13
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,Cyclomatic complexity of the method is 16
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,Cyclomatic complexity of the method is 10
Complex Method,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,Cyclomatic complexity of the method is 59
Long Parameter List,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The method has 13 parameters. Parameters: lookupContext' fundName' accountGL' fundCampusId' parentAccountId' isActive' startDate' endDate' order' foreignId' fundDescription' fundPublicName' isTaxDeductible
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadSchema,The length of the statement  "                CsvDataToImport.Add( new CSVInstance( fileName ) { TableNodes = tableNodes' RecordType = GetRecordTypeFromFilename( fileName ) } ); " is 131.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,TransformData,The length of the statement  "                selectedCsvData = selectedCsvData.OrderByDescending( d => d.RecordType == CSVInstance.RockDataType.INDIVIDUAL ).ToList(); " is 121.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "            var importPerson = personService.GetByFullName( importUser' includeDeceased: false' allowFirstNameOnly: true ).FirstOrDefault(); " is 128.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "            var anonymousGiver = personService.GetByFullName( "Anonymous' Giver"' includeDeceased: false' allowFirstNameOnly: true ).FirstOrDefault(); " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadExistingData,The length of the statement  "                anonymousGiver = personService.Queryable().FirstOrDefault( p => p.Guid.ToString().ToUpper() == "802235DC-3CA5-94B0-4326-AACE71180F48" ); " is 136.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,GetPersonKeys,The length of the statement  "                return !string.IsNullOrWhiteSpace( individualKey ) ? ImportedPeopleKeys.FirstOrDefault( p => p.PersonForeignKey == individualKey ) : null; " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The length of the statement  "                                LogException( "Duplicate Batch"' string.Format( "Batch #{0} is a duplicate and will be skipped. Please check the source data."' b.ForeignId ) ); " is 144.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeACH = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_ACH ) ) ).Id; " is 154.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCash = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CASH ) ) ).Id; " is 156.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCheck = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CHECK ) ) ).Id; " is 158.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeCreditCard = currencyTypes.DefinedValues.FirstOrDefault( dv => dv.Guid.Equals( new Guid( Rock.SystemGuid.DefinedValue.CURRENCY_TYPE_CREDIT_CARD ) ) ).Id; " is 169.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var currencyTypeNonCash = currencyTypes.DefinedValues.Where( dv => dv.Value.Equals( "Non-Cash" ) ).Select( dv => (int?)dv.Id ).FirstOrDefault(); " is 144.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var creditCardTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_CREDIT_CARD_TYPE ) ).DefinedValues; " is 128.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeOnsite = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_ONSITE_COLLECTION )' lookupContext ).Id; " is 148.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeWebsite = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_WEBSITE )' lookupContext ).Id; " is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var sourceTypeKiosk = DefinedValueCache.Read( new Guid( Rock.SystemGuid.DefinedValue.FINANCIAL_SOURCE_TYPE_KIOSK )' lookupContext ).Id; " is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var refundReasons = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_TRANSACTION_REFUND_REASON )' lookupContext ).DefinedValues; " is 150.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "            var allFields = csvData.TableNodes.FirstOrDefault().Children.Select( ( node' index ) => new { node = node' index = index } ).ToList(); " is 134.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                                creditCardTypeId = creditCardTypes.Where( c => c.Value.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase ) " is 126.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            parentAccount = AddAccount( lookupContext' fundName' fundGLAccount' null' null' isFundActive' null' null' null' null' ""' ""' null ); " is 133.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id ); " is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                                childAccount = AddAccount( lookupContext' subFund' subFundGLAccount' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null ); " is 157.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The length of the statement  "                            transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) ) " is 124.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "            var pledgeFrequencies = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.FINANCIAL_FREQUENCY )' lookupContext ).DefinedValues; " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "            var oneTimePledgeFrequencyId = pledgeFrequencies.FirstOrDefault( f => f.Guid == new Guid( Rock.SystemGuid.DefinedValue.TRANSACTION_FREQUENCY_ONE_TIME ) ).Id; " is 157.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null ); " is 132.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id ); " is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The length of the statement  "                                    childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null ); " is 153.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "            var metricSourceTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.METRIC_SOURCE_TYPE ) ).DefinedValues; " is 122.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "            var metricManualSource = metricSourceTypes.FirstOrDefault( m => m.Guid == new Guid( Rock.SystemGuid.DefinedValue.METRIC_SOURCE_VALUE_TYPE_MANUAL ) ); " is 149.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                    currentMetric = allMetrics.FirstOrDefault( m => m.Title == metricName && m.MetricCategories.Any( c => c.CategoryId == metricCategoryId ) ); " is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Campus"' EntityTypeId = campusEntityTypeId' Metric = currentMetric } ); " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Service"' EntityTypeId = scheduleEntityTypeId' Metric = currentMetric } ); " is 141.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        if ( currentMetric.MetricCategories == null || !currentMetric.MetricCategories.Any( a => a.CategoryId == metricCategoryId ) ) " is 125.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                            scheduleName = scheduleName + string.Format( " {0}"' date.ToString( "hh:mm" ) ) + string.Format( "{0}"' date.ToString( "tt" ).ToLower() ); " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                        metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionScheduleId' EntityId = scheduleId } ); " is 139.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The length of the statement  "                            metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionCampusId' EntityId = campus.Id } ); " is 136.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                        var familyCampus = CampusList.FirstOrDefault( c => c.Name.Equals( campusName' StringComparison.InvariantCultureIgnoreCase ) " is 123.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                    var primaryAddress = locationService.Get( famAddress' famAddress2' famCity' famState' famZip' famCountry' verifyLocation: false ); " is 130.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The length of the statement  "                    var secondaryAddress = locationService.Get( famSecondAddress' famSecondAddress2' famSecondCity' famSecondState' famSecondZip' famSecondCountry' verifyLocation: false ); " is 168.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveFamilies,The length of the statement  "                    var familyGroupId = ImportedFamilies.Where( g => g.ForeignKey == locationPair.Value ).Select( g => (int?)g.Id ).FirstOrDefault(); " is 129.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var maritalStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS )' lookupContext ).DefinedValues; " is 141.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var connectionStatusTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS )' lookupContext ).DefinedValues; " is 147.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var suffixTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_SUFFIX )' lookupContext ).DefinedValues; " is 126.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var titleTypes = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_TITLE )' lookupContext ).DefinedValues; " is 124.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var numberTypeValues = DefinedTypeCache.Read( new Guid( Rock.SystemGuid.DefinedType.PERSON_PHONE_TYPE )' lookupContext ).DefinedValues; " is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            var allFields = csvData.TableNodes.FirstOrDefault().Children.Select( ( node' index ) => new { node = node' index = index } ).ToList(); " is 134.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                foreach ( var avp in customAttributes.Where( ca => !personAttributes.Any( a => a.Name.Equals( ca.Value' StringComparison.InvariantCultureIgnoreCase ) ) ) ) " is 155.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 140.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 142.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) ) " is 163.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus ); " is 122.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) ) " is 135.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) ) " is 120.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) ) " is 148.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                                var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus ); " is 131.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                    foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) ) " is 138.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                        var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length; " is 125.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } ); " is 130.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "                            currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) ) " is 140.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The length of the statement  "            ReportProgress( 0' string.Format( "Finished individual import: {0:N0} families and {1:N0} people added."' newFamilies' completed ) ); " is 133.
Long Statement,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The length of the statement  "                                        var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList(); " is 127.
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,TransformData,The following statement contains a magic number: ReportProgress( 100' $"Completed import: {completed:N0} rows processed." );
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var batchIdKey = row[BatchID];                  var batchId = batchIdKey.AsType<int?>();                  if ( batchId != null && !ImportedBatches.ContainsKey( (int)batchId ) )                  {                      var batch = new FinancialBatch                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ForeignKey = batchId.ToString()'                          ForeignId = batchId'                          Note = string.Empty'                          Status = BatchStatus.Closed'                          AccountingSystemCode = string.Empty                      };                        var name = row[BatchName] as string;                      if ( !string.IsNullOrWhiteSpace( name ) )                      {                          name = name.Trim();                          batch.Name = name.Left( 50 );                          batch.CampusId = CampusList.Where( c => name.StartsWith( c.Name ) || name.StartsWith( c.ShortCode ) )                              .Select( c => (int?)c.Id ).FirstOrDefault();                      }                        var batchDate = ParseDateOrDefault( row[BatchDate]' null);                      if ( batchDate.HasValue )                      {                          batch.BatchStartDateTime = batchDate;                          batch.BatchEndDateTime = batchDate;                            if ( earliestBatchDate > batchDate )                          {                              earliestBatchDate = (DateTime)batchDate;                          }                      }                        var amountKey = row[BatchAmount];                      var amount = amountKey.AsType<decimal?>();                      if ( amount != null )                      {                          batch.ControlAmount = amount.HasValue ? amount.Value : new decimal();                      }                        newBatches.Add( batch );                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} batches imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveFinancialBatches( newBatches );                            foreach ( var b in newBatches )                          {                              if ( !ImportedBatches.ContainsKey( (int)b.ForeignId ) )                              {                                  ImportedBatches.Add( (int)b.ForeignId' b.Id );                              }                              else                              {                                  LogException( "Duplicate Batch"' string.Format( "Batch #{0} is a duplicate and will be skipped. Please check the source data."' b.ForeignId ) );                              }                          }                            newBatches.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var batchIdKey = row[BatchID];                  var batchId = batchIdKey.AsType<int?>();                  if ( batchId != null && !ImportedBatches.ContainsKey( (int)batchId ) )                  {                      var batch = new FinancialBatch                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ForeignKey = batchId.ToString()'                          ForeignId = batchId'                          Note = string.Empty'                          Status = BatchStatus.Closed'                          AccountingSystemCode = string.Empty                      };                        var name = row[BatchName] as string;                      if ( !string.IsNullOrWhiteSpace( name ) )                      {                          name = name.Trim();                          batch.Name = name.Left( 50 );                          batch.CampusId = CampusList.Where( c => name.StartsWith( c.Name ) || name.StartsWith( c.ShortCode ) )                              .Select( c => (int?)c.Id ).FirstOrDefault();                      }                        var batchDate = ParseDateOrDefault( row[BatchDate]' null);                      if ( batchDate.HasValue )                      {                          batch.BatchStartDateTime = batchDate;                          batch.BatchEndDateTime = batchDate;                            if ( earliestBatchDate > batchDate )                          {                              earliestBatchDate = (DateTime)batchDate;                          }                      }                        var amountKey = row[BatchAmount];                      var amount = amountKey.AsType<decimal?>();                      if ( amount != null )                      {                          batch.ControlAmount = amount.HasValue ? amount.Value : new decimal();                      }                        newBatches.Add( batch );                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} batches imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveFinancialBatches( newBatches );                            foreach ( var b in newBatches )                          {                              if ( !ImportedBatches.ContainsKey( (int)b.ForeignId ) )                              {                                  ImportedBatches.Add( (int)b.ForeignId' b.Id );                              }                              else                              {                                  LogException( "Duplicate Batch"' string.Format( "Batch #{0} is a duplicate and will be skipped. Please check the source data."' b.ForeignId ) );                              }                          }                            newBatches.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapBatch,The following statement contains a magic number: ReportProgress( 100' $"Finished batch import: {completed:N0} batches imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var individualIdKey = row[IndividualID];                  var contributionIdKey = row[ContributionID];                  var contributionId = contributionIdKey.AsType<int?>();                    if ( contributionId != null && !importedContributions.Contains( (int)contributionId ) )                  {                      var transaction = new FinancialTransaction                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ModifiedByPersonAliasId = ImportPersonAliasId'                          TransactionTypeValueId = TransactionTypeContributionId'                          ForeignKey = contributionId.ToString()'                          ForeignId = contributionId                      };                        int? giverAliasId = null;                      var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          giverAliasId = personKeys.PersonAliasId;                          transaction.CreatedByPersonAliasId = giverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                      else if ( AnonymousGiverAliasId != null && AnonymousGiverAliasId > 0 )                      {                          giverAliasId = AnonymousGiverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                        var summary = row[Memo] as string;                      if ( !string.IsNullOrWhiteSpace( summary ) )                      {                          transaction.Summary = summary;                      }                        var batchIdKey = row[ContributionBatchID];                      var batchId = batchIdKey.AsType<int?>();                      if ( batchId != null && ImportedBatches.Any( b => b.Key.Equals( batchId ) ) )                      {                          transaction.BatchId = ImportedBatches.FirstOrDefault( b => b.Key.Equals( batchId ) ).Value;                      }                      else                      {                          // use the default batch for any non-matching transactions                          transaction.BatchId = defaultBatchId;                      }                        var receivedDate = ParseDateOrDefault( row[ReceivedDate]' null );                      if ( receivedDate.HasValue )                      {                          transaction.TransactionDateTime = receivedDate;                          transaction.CreatedDateTime = receivedDate;                          transaction.ModifiedDateTime = ImportDateTime;                      }                        var contributionType = row[ContributionTypeName];                      var creditCardType = row[ContributionCreditCardType];                      if ( !string.IsNullOrWhiteSpace( contributionType ) )                      {                          // set default source to onsite' exceptions listed below                          transaction.SourceTypeValueId = sourceTypeOnsite;                            int? paymentCurrencyTypeId = null' creditCardTypeId = null;                            if ( contributionType.Equals( "cash"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCash;                          }                          else if ( contributionType.Equals( "check"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCheck;                          }                          else if ( contributionType.Equals( "ach"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeACH;                              transaction.SourceTypeValueId = sourceTypeWebsite;                          }                          else if ( contributionType.Equals( "credit card"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCreditCard;                              transaction.SourceTypeValueId = sourceTypeWebsite;                                // Determine CC Type                              if ( !string.IsNullOrWhiteSpace( creditCardType ) )                              {                                  creditCardTypeId = creditCardTypes.Where( c => c.Value.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase )                                          || c.Description.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( c => c.Id ).FirstOrDefault();                              }                          }                          else                          {                              paymentCurrencyTypeId = currencyTypeNonCash;                          }                            var paymentDetail = new FinancialPaymentDetail                          {                              CreatedDateTime = receivedDate'                              CreatedByPersonAliasId = giverAliasId'                              ModifiedDateTime = ImportDateTime'                              ModifiedByPersonAliasId = giverAliasId'                              CurrencyTypeValueId = paymentCurrencyTypeId'                              CreditCardTypeValueId = creditCardTypeId'                              ForeignKey = contributionId.ToString()'                              ForeignId = contributionId                          };                            transaction.FinancialPaymentDetail = paymentDetail;                      }                        var transactionCode = row[CheckNumber] as string;                      // if transaction code provided' put it in the transaction code                      if ( !string.IsNullOrEmpty( transactionCode ) )                      {                          transaction.TransactionCode = transactionCode;                            // check for SecureGive kiosk transactions                          if ( transactionCode.StartsWith( "SG" ) )                          {                              transaction.SourceTypeValueId = sourceTypeKiosk;                          }                      }                        var fundName = row[FundName] as string;                      var subFund = row[SubFundName] as string;                      var fundGLAccount = row[FundGLAccount] as string;                      var subFundGLAccount = row[SubFundGLAccount] as string;                      var isFundActiveKey = row[FundIsActive];                      var isFundActive = isFundActiveKey.AsType<bool?>();                      var isSubFundActiveKey = row[SubFundIsActive];                      var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                      var statedValueKey = row[StatedValue];                      var statedValue = statedValueKey.AsType<decimal?>();                      var amountKey = row[Amount];                      var amount = amountKey.AsType<decimal?>();                      if ( !string.IsNullOrWhiteSpace( fundName ) & amount != null )                      {                          int transactionAccountId;                          var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                          if ( parentAccount == null )                          {                              parentAccount = AddAccount( lookupContext' fundName' fundGLAccount' null' null' isFundActive' null' null' null' null' ""' ""' null );                              accountList.Add( parentAccount );                          }                            if ( !string.IsNullOrWhiteSpace( subFund ) )                          {                              int? campusFundId = null;                              // assign a campus if the subfund is a campus fund                              var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                              if ( campusFund != null )                              {                                  campusFundId = campusFund.Id;                              }                                // add info to easily find/assign this fund in the view                              subFund = $"{fundName} {subFund}";                                var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                              if ( childAccount == null )                              {                                  // create a child account with a campusId if it was set                                  childAccount = AddAccount( lookupContext' subFund' subFundGLAccount' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( childAccount );                              }                                transactionAccountId = childAccount.Id;                          }                          else                          {                              transactionAccountId = parentAccount.Id;                          }                            if ( amount == 0 && statedValue != null && statedValue != 0 )                          {                              amount = statedValue;                          }                            var transactionDetail = new FinancialTransactionDetail                          {                              Amount = (decimal)amount'                              CreatedDateTime = receivedDate'                              AccountId = transactionAccountId                          };                          transaction.TransactionDetails.Add( transactionDetail );                            if ( amount < 0 )                          {                              transaction.RefundDetails = new FinancialTransactionRefund();                              transaction.RefundDetails.CreatedDateTime = receivedDate;                              transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                              transaction.RefundDetails.RefundReasonSummary = summary;                          }                      }                        newTransactions.Add( transaction );                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} contributions imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveContributions( newTransactions );                          newTransactions.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var individualIdKey = row[IndividualID];                  var contributionIdKey = row[ContributionID];                  var contributionId = contributionIdKey.AsType<int?>();                    if ( contributionId != null && !importedContributions.Contains( (int)contributionId ) )                  {                      var transaction = new FinancialTransaction                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ModifiedByPersonAliasId = ImportPersonAliasId'                          TransactionTypeValueId = TransactionTypeContributionId'                          ForeignKey = contributionId.ToString()'                          ForeignId = contributionId                      };                        int? giverAliasId = null;                      var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          giverAliasId = personKeys.PersonAliasId;                          transaction.CreatedByPersonAliasId = giverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                      else if ( AnonymousGiverAliasId != null && AnonymousGiverAliasId > 0 )                      {                          giverAliasId = AnonymousGiverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                        var summary = row[Memo] as string;                      if ( !string.IsNullOrWhiteSpace( summary ) )                      {                          transaction.Summary = summary;                      }                        var batchIdKey = row[ContributionBatchID];                      var batchId = batchIdKey.AsType<int?>();                      if ( batchId != null && ImportedBatches.Any( b => b.Key.Equals( batchId ) ) )                      {                          transaction.BatchId = ImportedBatches.FirstOrDefault( b => b.Key.Equals( batchId ) ).Value;                      }                      else                      {                          // use the default batch for any non-matching transactions                          transaction.BatchId = defaultBatchId;                      }                        var receivedDate = ParseDateOrDefault( row[ReceivedDate]' null );                      if ( receivedDate.HasValue )                      {                          transaction.TransactionDateTime = receivedDate;                          transaction.CreatedDateTime = receivedDate;                          transaction.ModifiedDateTime = ImportDateTime;                      }                        var contributionType = row[ContributionTypeName];                      var creditCardType = row[ContributionCreditCardType];                      if ( !string.IsNullOrWhiteSpace( contributionType ) )                      {                          // set default source to onsite' exceptions listed below                          transaction.SourceTypeValueId = sourceTypeOnsite;                            int? paymentCurrencyTypeId = null' creditCardTypeId = null;                            if ( contributionType.Equals( "cash"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCash;                          }                          else if ( contributionType.Equals( "check"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCheck;                          }                          else if ( contributionType.Equals( "ach"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeACH;                              transaction.SourceTypeValueId = sourceTypeWebsite;                          }                          else if ( contributionType.Equals( "credit card"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCreditCard;                              transaction.SourceTypeValueId = sourceTypeWebsite;                                // Determine CC Type                              if ( !string.IsNullOrWhiteSpace( creditCardType ) )                              {                                  creditCardTypeId = creditCardTypes.Where( c => c.Value.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase )                                          || c.Description.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( c => c.Id ).FirstOrDefault();                              }                          }                          else                          {                              paymentCurrencyTypeId = currencyTypeNonCash;                          }                            var paymentDetail = new FinancialPaymentDetail                          {                              CreatedDateTime = receivedDate'                              CreatedByPersonAliasId = giverAliasId'                              ModifiedDateTime = ImportDateTime'                              ModifiedByPersonAliasId = giverAliasId'                              CurrencyTypeValueId = paymentCurrencyTypeId'                              CreditCardTypeValueId = creditCardTypeId'                              ForeignKey = contributionId.ToString()'                              ForeignId = contributionId                          };                            transaction.FinancialPaymentDetail = paymentDetail;                      }                        var transactionCode = row[CheckNumber] as string;                      // if transaction code provided' put it in the transaction code                      if ( !string.IsNullOrEmpty( transactionCode ) )                      {                          transaction.TransactionCode = transactionCode;                            // check for SecureGive kiosk transactions                          if ( transactionCode.StartsWith( "SG" ) )                          {                              transaction.SourceTypeValueId = sourceTypeKiosk;                          }                      }                        var fundName = row[FundName] as string;                      var subFund = row[SubFundName] as string;                      var fundGLAccount = row[FundGLAccount] as string;                      var subFundGLAccount = row[SubFundGLAccount] as string;                      var isFundActiveKey = row[FundIsActive];                      var isFundActive = isFundActiveKey.AsType<bool?>();                      var isSubFundActiveKey = row[SubFundIsActive];                      var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                      var statedValueKey = row[StatedValue];                      var statedValue = statedValueKey.AsType<decimal?>();                      var amountKey = row[Amount];                      var amount = amountKey.AsType<decimal?>();                      if ( !string.IsNullOrWhiteSpace( fundName ) & amount != null )                      {                          int transactionAccountId;                          var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                          if ( parentAccount == null )                          {                              parentAccount = AddAccount( lookupContext' fundName' fundGLAccount' null' null' isFundActive' null' null' null' null' ""' ""' null );                              accountList.Add( parentAccount );                          }                            if ( !string.IsNullOrWhiteSpace( subFund ) )                          {                              int? campusFundId = null;                              // assign a campus if the subfund is a campus fund                              var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                              if ( campusFund != null )                              {                                  campusFundId = campusFund.Id;                              }                                // add info to easily find/assign this fund in the view                              subFund = $"{fundName} {subFund}";                                var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                              if ( childAccount == null )                              {                                  // create a child account with a campusId if it was set                                  childAccount = AddAccount( lookupContext' subFund' subFundGLAccount' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( childAccount );                              }                                transactionAccountId = childAccount.Id;                          }                          else                          {                              transactionAccountId = parentAccount.Id;                          }                            if ( amount == 0 && statedValue != null && statedValue != 0 )                          {                              amount = statedValue;                          }                            var transactionDetail = new FinancialTransactionDetail                          {                              Amount = (decimal)amount'                              CreatedDateTime = receivedDate'                              AccountId = transactionAccountId                          };                          transaction.TransactionDetails.Add( transactionDetail );                            if ( amount < 0 )                          {                              transaction.RefundDetails = new FinancialTransactionRefund();                              transaction.RefundDetails.CreatedDateTime = receivedDate;                              transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                              transaction.RefundDetails.RefundReasonSummary = summary;                          }                      }                        newTransactions.Add( transaction );                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} contributions imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveContributions( newTransactions );                          newTransactions.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var individualIdKey = row[IndividualID];                  var contributionIdKey = row[ContributionID];                  var contributionId = contributionIdKey.AsType<int?>();                    if ( contributionId != null && !importedContributions.Contains( (int)contributionId ) )                  {                      var transaction = new FinancialTransaction                      {                          CreatedByPersonAliasId = ImportPersonAliasId'                          ModifiedByPersonAliasId = ImportPersonAliasId'                          TransactionTypeValueId = TransactionTypeContributionId'                          ForeignKey = contributionId.ToString()'                          ForeignId = contributionId                      };                        int? giverAliasId = null;                      var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          giverAliasId = personKeys.PersonAliasId;                          transaction.CreatedByPersonAliasId = giverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                      else if ( AnonymousGiverAliasId != null && AnonymousGiverAliasId > 0 )                      {                          giverAliasId = AnonymousGiverAliasId;                          transaction.AuthorizedPersonAliasId = giverAliasId;                          transaction.ProcessedByPersonAliasId = giverAliasId;                      }                        var summary = row[Memo] as string;                      if ( !string.IsNullOrWhiteSpace( summary ) )                      {                          transaction.Summary = summary;                      }                        var batchIdKey = row[ContributionBatchID];                      var batchId = batchIdKey.AsType<int?>();                      if ( batchId != null && ImportedBatches.Any( b => b.Key.Equals( batchId ) ) )                      {                          transaction.BatchId = ImportedBatches.FirstOrDefault( b => b.Key.Equals( batchId ) ).Value;                      }                      else                      {                          // use the default batch for any non-matching transactions                          transaction.BatchId = defaultBatchId;                      }                        var receivedDate = ParseDateOrDefault( row[ReceivedDate]' null );                      if ( receivedDate.HasValue )                      {                          transaction.TransactionDateTime = receivedDate;                          transaction.CreatedDateTime = receivedDate;                          transaction.ModifiedDateTime = ImportDateTime;                      }                        var contributionType = row[ContributionTypeName];                      var creditCardType = row[ContributionCreditCardType];                      if ( !string.IsNullOrWhiteSpace( contributionType ) )                      {                          // set default source to onsite' exceptions listed below                          transaction.SourceTypeValueId = sourceTypeOnsite;                            int? paymentCurrencyTypeId = null' creditCardTypeId = null;                            if ( contributionType.Equals( "cash"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCash;                          }                          else if ( contributionType.Equals( "check"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCheck;                          }                          else if ( contributionType.Equals( "ach"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeACH;                              transaction.SourceTypeValueId = sourceTypeWebsite;                          }                          else if ( contributionType.Equals( "credit card"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              paymentCurrencyTypeId = currencyTypeCreditCard;                              transaction.SourceTypeValueId = sourceTypeWebsite;                                // Determine CC Type                              if ( !string.IsNullOrWhiteSpace( creditCardType ) )                              {                                  creditCardTypeId = creditCardTypes.Where( c => c.Value.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase )                                          || c.Description.StartsWith( creditCardType' StringComparison.CurrentCultureIgnoreCase ) )                                      .Select( c => c.Id ).FirstOrDefault();                              }                          }                          else                          {                              paymentCurrencyTypeId = currencyTypeNonCash;                          }                            var paymentDetail = new FinancialPaymentDetail                          {                              CreatedDateTime = receivedDate'                              CreatedByPersonAliasId = giverAliasId'                              ModifiedDateTime = ImportDateTime'                              ModifiedByPersonAliasId = giverAliasId'                              CurrencyTypeValueId = paymentCurrencyTypeId'                              CreditCardTypeValueId = creditCardTypeId'                              ForeignKey = contributionId.ToString()'                              ForeignId = contributionId                          };                            transaction.FinancialPaymentDetail = paymentDetail;                      }                        var transactionCode = row[CheckNumber] as string;                      // if transaction code provided' put it in the transaction code                      if ( !string.IsNullOrEmpty( transactionCode ) )                      {                          transaction.TransactionCode = transactionCode;                            // check for SecureGive kiosk transactions                          if ( transactionCode.StartsWith( "SG" ) )                          {                              transaction.SourceTypeValueId = sourceTypeKiosk;                          }                      }                        var fundName = row[FundName] as string;                      var subFund = row[SubFundName] as string;                      var fundGLAccount = row[FundGLAccount] as string;                      var subFundGLAccount = row[SubFundGLAccount] as string;                      var isFundActiveKey = row[FundIsActive];                      var isFundActive = isFundActiveKey.AsType<bool?>();                      var isSubFundActiveKey = row[SubFundIsActive];                      var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                      var statedValueKey = row[StatedValue];                      var statedValue = statedValueKey.AsType<decimal?>();                      var amountKey = row[Amount];                      var amount = amountKey.AsType<decimal?>();                      if ( !string.IsNullOrWhiteSpace( fundName ) & amount != null )                      {                          int transactionAccountId;                          var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                          if ( parentAccount == null )                          {                              parentAccount = AddAccount( lookupContext' fundName' fundGLAccount' null' null' isFundActive' null' null' null' null' ""' ""' null );                              accountList.Add( parentAccount );                          }                            if ( !string.IsNullOrWhiteSpace( subFund ) )                          {                              int? campusFundId = null;                              // assign a campus if the subfund is a campus fund                              var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                              if ( campusFund != null )                              {                                  campusFundId = campusFund.Id;                              }                                // add info to easily find/assign this fund in the view                              subFund = $"{fundName} {subFund}";                                var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                              if ( childAccount == null )                              {                                  // create a child account with a campusId if it was set                                  childAccount = AddAccount( lookupContext' subFund' subFundGLAccount' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( childAccount );                              }                                transactionAccountId = childAccount.Id;                          }                          else                          {                              transactionAccountId = parentAccount.Id;                          }                            if ( amount == 0 && statedValue != null && statedValue != 0 )                          {                              amount = statedValue;                          }                            var transactionDetail = new FinancialTransactionDetail                          {                              Amount = (decimal)amount'                              CreatedDateTime = receivedDate'                              AccountId = transactionAccountId                          };                          transaction.TransactionDetails.Add( transactionDetail );                            if ( amount < 0 )                          {                              transaction.RefundDetails = new FinancialTransactionRefund();                              transaction.RefundDetails.CreatedDateTime = receivedDate;                              transaction.RefundDetails.RefundReasonValueId = refundReasons.Where( dv => summary != null && dv.Value.Contains( summary ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                              transaction.RefundDetails.RefundReasonSummary = summary;                          }                      }                        newTransactions.Add( transaction );                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} contributions imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveContributions( newTransactions );                          newTransactions.Clear();                          ReportPartialProgress();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapContribution,The following statement contains a magic number: ReportProgress( 100' $"Finished contribution import: {completed:N0} contributions imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var amountKey = row[TotalPledge];                  var amount = amountKey.AsType<decimal?>();                  var startDate = ParseDateOrDefault( row[StartDate]' new DateTime( 1' 1' 1 ) );                  var endDate = ParseDateOrDefault( row[EndDate]' new DateTime( 9999' 12' 31 ) );                  var createdDate = ParseDateOrDefault( row[PledgeCreatedDate]' ImportDateTime );                  var modifiedDate = ParseDateOrDefault( row[PledgeModifiedDate]' ImportDateTime );                    var pledgeIdKey = row[PledgeId];                  var pledgeId = pledgeIdKey.AsType<int?>();                  if ( amount != null && !importedPledges.ContainsKey( (int)pledgeId ) )                  {                      var individualIdKey = row[IndividualID];                        var personKeys = GetPersonKeys( individualIdKey );                      if ( personKeys != null && personKeys.PersonAliasId > 0 )                      {                          var pledge = new FinancialPledge                          {                              PersonAliasId = personKeys.PersonAliasId'                              CreatedByPersonAliasId = ImportPersonAliasId'                              StartDate = (DateTime)startDate'                              EndDate = (DateTime)endDate'                              TotalAmount = (decimal)amount'                              CreatedDateTime = createdDate'                              ModifiedDateTime = modifiedDate'                              ModifiedByPersonAliasId = ImportPersonAliasId'                              ForeignKey = pledgeIdKey'                              ForeignId = pledgeId                          };                            var frequency = row[PledgeFrequencyName].ToString().ToLower();                          if ( !string.IsNullOrWhiteSpace( frequency ) )                          {                              frequency = frequency.ToLower();                              if ( frequency.Equals( "one time" ) || frequency.Equals( "one-time" ) || frequency.Equals( "as can" ) )                              {                                  pledge.PledgeFrequencyValueId = oneTimePledgeFrequencyId;                              }                              else                              {                                  pledge.PledgeFrequencyValueId = pledgeFrequencies                                      .Where( f => f.Value.ToLower().StartsWith( frequency ) || f.Description.ToLower().StartsWith( frequency ) )                                      .Select( f => f.Id ).FirstOrDefault();                              }                          }                            var fundName = row[FundName] as string;                          var subFund = row[SubFundName] as string;                          var fundGLAccount = row[FundGLAccount] as string;                          var subFundGLAccount = row[SubFundGLAccount] as string;                          var isFundActiveKey = row[FundIsActive];                          var isFundActive = isFundActiveKey.AsType<bool?>();                          var isSubFundActiveKey = row[SubFundIsActive];                          var isSubFundActive = isSubFundActiveKey.AsType<bool?>();                            if ( !string.IsNullOrWhiteSpace( fundName ) )                          {                              var parentAccount = accountList.FirstOrDefault( a => a.Name.Equals( fundName.Truncate( 50 ) ) );                              if ( parentAccount == null )                              {                                  parentAccount = AddAccount( lookupContext' fundName' string.Empty' null' null' isFundActive' null' null' null' null' ""' ""' null );                                  accountList.Add( parentAccount );                              }                                if ( !string.IsNullOrWhiteSpace( subFund ) )                              {                                  int? campusFundId = null;                                  // assign a campus if the subfund is a campus fund                                  var campusFund = CampusList.FirstOrDefault( c => subFund.Contains( c.Name ) || subFund.Contains( c.ShortCode ) );                                  if ( campusFund != null )                                  {                                      campusFundId = campusFund.Id;                                  }                                    // add info to easily find/assign this fund in the view                                  subFund = $"{fundName} {subFund}";                                    var childAccount = accountList.FirstOrDefault( c => c.Name.Equals( subFund.Truncate( 50 ) ) && c.ParentAccountId == parentAccount.Id );                                  if ( childAccount == null )                                  {                                      // create a child account with a campusId if it was set                                      childAccount = AddAccount( lookupContext' subFund' string.Empty' campusFundId' parentAccount.Id' isSubFundActive' null' null' null' null' ""' ""' null );                                      accountList.Add( childAccount );                                  }                                    pledge.AccountId = childAccount.Id;                              }                              else                              {                                  pledge.AccountId = parentAccount.Id;                              }                          }                            newPledges.Add( pledge );                          completed++;                          if ( completed % ( ReportingNumber * 10 ) < 1 )                          {                              ReportProgress( 0' $"{completed:N0} pledges imported." );                          }                          else if ( completed % ReportingNumber < 1 )                          {                              SavePledges( newPledges );                              ReportPartialProgress();                              newPledges.Clear();                          }                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,MapPledge,The following statement contains a magic number: ReportProgress( 100' $"Finished pledge import: {completed:N0} pledges imported." );
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: var account = new FinancialAccount              {                  Name = fundName.Truncate( 50 )'                  Description = fundDescription'                  GlCode = accountGL.Truncate( 50 )'                  IsTaxDeductible = isTaxDeductible ?? true'                  IsActive = isActive ?? true'                  IsPublic = false'                  CampusId = fundCampusId'                  ParentAccountId = parentAccountId'                  CreatedByPersonAliasId = ImportPersonAliasId'                  StartDate = startDate'                  EndDate = endDate'                  ForeignId = foreignId'                  ForeignKey = foreignId.ToString()              };
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: var account = new FinancialAccount              {                  Name = fundName.Truncate( 50 )'                  Description = fundDescription'                  GlCode = accountGL.Truncate( 50 )'                  IsTaxDeductible = isTaxDeductible ?? true'                  IsActive = isActive ?? true'                  IsPublic = false'                  CampusId = fundCampusId'                  ParentAccountId = parentAccountId'                  CreatedByPersonAliasId = ImportPersonAliasId'                  StartDate = startDate'                  EndDate = endDate'                  ForeignId = foreignId'                  ForeignKey = foreignId.ToString()              };
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: if ( !string.IsNullOrWhiteSpace( fundPublicName ) )              {                  account.PublicName = fundPublicName.Truncate( 50 );              }              else              {                  account.PublicName = fundName.Truncate( 50 );              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,AddAccount,The following statement contains a magic number: if ( !string.IsNullOrWhiteSpace( fundPublicName ) )              {                  account.PublicName = fundPublicName.Truncate( 50 );              }              else              {                  account.PublicName = fundName.Truncate( 50 );              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadMetrics,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  string metricCampus = row[MetricCampus];                  string metricName = row[MetricName];                  string metricCategoryString = row[MetricCategory];                  string metricNote = row[MetricNote];                    if ( !string.IsNullOrEmpty( metricName ) )                  {                      decimal? value = row[MetricValue].AsDecimalOrNull();                      DateTime? valueDate = row[MetricService].AsDateTime();                      var metricCategoryId = defaultMetricCategory.Id;                        // create the category if it doesn't exist                      Category newMetricCategory = null;                      if ( !string.IsNullOrEmpty( metricCategoryString ) )                      {                          newMetricCategory = metricCategories.FirstOrDefault( c => c.Name == metricCategoryString );                          if ( newMetricCategory == null )                          {                              newMetricCategory = new Category();                              newMetricCategory.Name = metricCategoryString;                              newMetricCategory.IsSystem = false;                              newMetricCategory.EntityTypeId = metricEntityTypeId;                              newMetricCategory.EntityTypeQualifierColumn = string.Empty;                              newMetricCategory.EntityTypeQualifierValue = string.Empty;                              newMetricCategory.IconCssClass = string.Empty;                              newMetricCategory.Description = string.Empty;                                lookupContext.Categories.Add( newMetricCategory );                              lookupContext.SaveChanges();                                metricCategories.Add( newMetricCategory );                          }                            metricCategoryId = newMetricCategory.Id;                      }                        // create metric if it doesn't exist                      currentMetric = allMetrics.FirstOrDefault( m => m.Title == metricName && m.MetricCategories.Any( c => c.CategoryId == metricCategoryId ) );                      if ( currentMetric == null )                      {                          currentMetric = new Metric();                          currentMetric.Title = metricName;                          currentMetric.IsSystem = false;                          currentMetric.IsCumulative = false;                          currentMetric.SourceSql = string.Empty;                          currentMetric.Subtitle = string.Empty;                          currentMetric.Description = string.Empty;                          currentMetric.IconCssClass = string.Empty;                          currentMetric.SourceValueTypeId = metricManualSource.Id;                          currentMetric.CreatedByPersonAliasId = ImportPersonAliasId;                          currentMetric.CreatedDateTime = ImportDateTime;                          currentMetric.ForeignKey = string.Format( "Metric imported {0}"' ImportDateTime );                            currentMetric.MetricPartitions = new List<MetricPartition>();                          currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Campus"' EntityTypeId = campusEntityTypeId' Metric = currentMetric } );                          currentMetric.MetricPartitions.Add( new MetricPartition { Label = "Service"' EntityTypeId = scheduleEntityTypeId' Metric = currentMetric } );                            metricService.Add( currentMetric );                          lookupContext.SaveChanges();                            if ( currentMetric.MetricCategories == null || !currentMetric.MetricCategories.Any( a => a.CategoryId == metricCategoryId ) )                          {                              metricCategoryService.Add( new MetricCategory { CategoryId = metricCategoryId' MetricId = currentMetric.Id } );                              lookupContext.SaveChanges();                          }                            allMetrics.Add( currentMetric );                      }                        // create values for this metric                      var metricValue = new MetricValue();                      metricValue.MetricValueType = MetricValueType.Measure;                      metricValue.CreatedByPersonAliasId = ImportPersonAliasId;                      metricValue.CreatedDateTime = ImportDateTime;                      metricValue.MetricValueDateTime = valueDate;                      metricValue.MetricId = currentMetric.Id;                      metricValue.Note = string.Empty;                      metricValue.XValue = string.Empty;                      metricValue.YValue = value;                      metricValue.ForeignKey = string.Format( "Metric Value imported {0}"' ImportDateTime );                      metricValue.Note = metricNote;                        if ( valueDate.HasValue )                      {                          var metricPartitionScheduleId = currentMetric.MetricPartitions.FirstOrDefault( p => p.Label == "Service" ).Id;                            var date = (DateTime)valueDate;                          var scheduleName = date.DayOfWeek.ToString();                            if ( date.TimeOfDay.TotalSeconds > 0 )                          {                              scheduleName = scheduleName + string.Format( " {0}"' date.ToString( "hh:mm" ) ) + string.Format( "{0}"' date.ToString( "tt" ).ToLower() );                          }                            if ( !scheduleMetrics.Any( s => s.Name == scheduleName ) )                          {                              Schedule newSchedule = new Schedule();                              newSchedule.Name = scheduleName;                              newSchedule.CategoryId = scheduleCategoryId;                              newSchedule.CreatedByPersonAliasId = ImportPersonAliasId;                              newSchedule.CreatedDateTime = ImportDateTime;                              newSchedule.ForeignKey = string.Format( "Metric Schedule imported {0}"' ImportDateTime );                                scheduleMetrics.Add( newSchedule );                              lookupContext.Schedules.Add( newSchedule );                              lookupContext.SaveChanges();                          }                            var scheduleId = scheduleMetrics.FirstOrDefault( s => s.Name == scheduleName ).Id;                            metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionScheduleId' EntityId = scheduleId } );                      }                        if ( !string.IsNullOrWhiteSpace( metricCampus ) )                      {                          var campus = CampusList.Where( c => c.Name.Equals( metricCampus' StringComparison.InvariantCultureIgnoreCase )                                  || c.ShortCode.Equals( metricCampus' StringComparison.InvariantCultureIgnoreCase ) ).FirstOrDefault();                            if ( campus == null )                          {                              var newCampus = new Campus();                              newCampus.IsSystem = false;                              newCampus.Name = metricCampus;                              newCampus.ShortCode = metricCampus.RemoveWhitespace();                              newCampus.IsActive = true;                              lookupContext.Campuses.Add( newCampus );                              lookupContext.SaveChanges( DisableAuditing );                              CampusList.Add( newCampus );                              campus = newCampus;                          }                            if ( campus != null )                          {                              var metricPartitionCampusId = currentMetric.MetricPartitions.FirstOrDefault( p => p.Label == "Campus" ).Id;                                metricValue.MetricValuePartitions.Add( new MetricValuePartition { MetricPartitionId = metricPartitionCampusId' EntityId = campus.Id } );                          }                      }                        metricValues.Add( metricValue );                        completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} metrics imported."' completed ) );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveMetrics( metricValues );                          ReportPartialProgress();                            // Reset lookup context                          lookupContext = new RockContext();                          metricValues.Clear();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var rowFamilyKey = row[FamilyId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowFamilyName = row[FamilyName];                    if ( rowFamilyKey != null && rowFamilyKey != currentFamilyGroup.ForeignKey )                  {                      currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                      if ( currentFamilyGroup == null )                      {                          currentFamilyGroup = new Group                          {                              ForeignKey = rowFamilyKey'                              ForeignId = rowFamilyId'                              Name = row[FamilyName]'                              CreatedByPersonAliasId = ImportPersonAliasId'                              GroupTypeId = FamilyGroupTypeId                          };                          newFamilyList.Add( currentFamilyGroup );                      }                      else                      {                          currentFamilyGroup.Name = row[FamilyName];                          lookupContext.Groups.Attach( currentFamilyGroup );                      }                        // Set the family campus                      var campusName = row[Campus];                      if ( !string.IsNullOrWhiteSpace( campusName ) )                      {                          var familyCampus = CampusList.FirstOrDefault( c => c.Name.Equals( campusName' StringComparison.InvariantCultureIgnoreCase )                              || c.ShortCode.Equals( campusName' StringComparison.InvariantCultureIgnoreCase ) );                          if ( familyCampus == null )                          {                              familyCampus = new Campus                              {                                  IsSystem = false'                                  Name = campusName'                                  ShortCode = campusName.RemoveWhitespace()'                                  IsActive = true                              };                              lookupContext.Campuses.Add( familyCampus );                              lookupContext.SaveChanges( DisableAuditing );                              CampusList.Add( familyCampus );                          }                            currentFamilyGroup.CampusId = familyCampus.Id;                      }                        // Add the family addresses since they exist in this file                      var famAddress = row[Address];                      var famAddress2 = row[Address2];                      var famCity = row[City];                      var famState = row[State];                      var famZip = row[Zip];                      var famCountry = row[Country];                        var primaryAddress = locationService.Get( famAddress' famAddress2' famCity' famState' famZip' famCountry' verifyLocation: false );                        if ( primaryAddress != null && currentFamilyGroup.GroupLocations.Count == 0 )                      {                          var primaryLocation = new GroupLocation                          {                              LocationId = primaryAddress.Id'                              IsMailingLocation = true'                              IsMappedLocation = true'                              GroupLocationTypeValueId = HomeLocationTypeId                          };                          newGroupLocations.Add( primaryLocation' rowFamilyKey );                      }                        var famSecondAddress = row[SecondaryAddress];                      var famSecondAddress2 = row[SecondaryAddress2];                      var famSecondCity = row[SecondaryCity];                      var famSecondState = row[SecondaryState];                      var famSecondZip = row[SecondaryZip];                      var famSecondCountry = row[SecondaryCountry];                        var secondaryAddress = locationService.Get( famSecondAddress' famSecondAddress2' famSecondCity' famSecondState' famSecondZip' famSecondCountry' verifyLocation: false );                        if ( secondaryAddress != null && currentFamilyGroup.GroupLocations.Count < 2 )                      {                          var secondaryLocation = new GroupLocation                          {                              LocationId = secondaryAddress.Id'                              IsMailingLocation = true'                              IsMappedLocation = false'                              GroupLocationTypeValueId = PreviousLocationTypeId                          };                          newGroupLocations.Add( secondaryLocation' rowFamilyKey );                      }                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' ImportDateTime );                      currentFamilyGroup.CreatedDateTime = createdDateValue;                      currentFamilyGroup.ModifiedDateTime = ImportDateTime;                        completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} families imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveFamilies( newFamilyList' newGroupLocations );                          ReportPartialProgress();                            // Reset lookup context                          lookupContext.SaveChanges();                          lookupContext = new RockContext();                          locationService = new LocationService( lookupContext );                          newFamilyList.Clear();                          newGroupLocations.Clear();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadFamily,The following statement contains a magic number: while ( ( row = csvData.Database.FirstOrDefault() ) != null )              {                  var rowFamilyKey = row[FamilyId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowFamilyName = row[FamilyName];                    if ( rowFamilyKey != null && rowFamilyKey != currentFamilyGroup.ForeignKey )                  {                      currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                      if ( currentFamilyGroup == null )                      {                          currentFamilyGroup = new Group                          {                              ForeignKey = rowFamilyKey'                              ForeignId = rowFamilyId'                              Name = row[FamilyName]'                              CreatedByPersonAliasId = ImportPersonAliasId'                              GroupTypeId = FamilyGroupTypeId                          };                          newFamilyList.Add( currentFamilyGroup );                      }                      else                      {                          currentFamilyGroup.Name = row[FamilyName];                          lookupContext.Groups.Attach( currentFamilyGroup );                      }                        // Set the family campus                      var campusName = row[Campus];                      if ( !string.IsNullOrWhiteSpace( campusName ) )                      {                          var familyCampus = CampusList.FirstOrDefault( c => c.Name.Equals( campusName' StringComparison.InvariantCultureIgnoreCase )                              || c.ShortCode.Equals( campusName' StringComparison.InvariantCultureIgnoreCase ) );                          if ( familyCampus == null )                          {                              familyCampus = new Campus                              {                                  IsSystem = false'                                  Name = campusName'                                  ShortCode = campusName.RemoveWhitespace()'                                  IsActive = true                              };                              lookupContext.Campuses.Add( familyCampus );                              lookupContext.SaveChanges( DisableAuditing );                              CampusList.Add( familyCampus );                          }                            currentFamilyGroup.CampusId = familyCampus.Id;                      }                        // Add the family addresses since they exist in this file                      var famAddress = row[Address];                      var famAddress2 = row[Address2];                      var famCity = row[City];                      var famState = row[State];                      var famZip = row[Zip];                      var famCountry = row[Country];                        var primaryAddress = locationService.Get( famAddress' famAddress2' famCity' famState' famZip' famCountry' verifyLocation: false );                        if ( primaryAddress != null && currentFamilyGroup.GroupLocations.Count == 0 )                      {                          var primaryLocation = new GroupLocation                          {                              LocationId = primaryAddress.Id'                              IsMailingLocation = true'                              IsMappedLocation = true'                              GroupLocationTypeValueId = HomeLocationTypeId                          };                          newGroupLocations.Add( primaryLocation' rowFamilyKey );                      }                        var famSecondAddress = row[SecondaryAddress];                      var famSecondAddress2 = row[SecondaryAddress2];                      var famSecondCity = row[SecondaryCity];                      var famSecondState = row[SecondaryState];                      var famSecondZip = row[SecondaryZip];                      var famSecondCountry = row[SecondaryCountry];                        var secondaryAddress = locationService.Get( famSecondAddress' famSecondAddress2' famSecondCity' famSecondState' famSecondZip' famSecondCountry' verifyLocation: false );                        if ( secondaryAddress != null && currentFamilyGroup.GroupLocations.Count < 2 )                      {                          var secondaryLocation = new GroupLocation                          {                              LocationId = secondaryAddress.Id'                              IsMailingLocation = true'                              IsMappedLocation = false'                              GroupLocationTypeValueId = PreviousLocationTypeId                          };                          newGroupLocations.Add( secondaryLocation' rowFamilyKey );                      }                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' ImportDateTime );                      currentFamilyGroup.CreatedDateTime = createdDateValue;                      currentFamilyGroup.ModifiedDateTime = ImportDateTime;                        completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' $"{completed:N0} families imported." );                      }                      else if ( completed % ReportingNumber < 1 )                      {                          SaveFamilies( newFamilyList' newGroupLocations );                          ReportPartialProgress();                            // Reset lookup context                          lookupContext.SaveChanges();                          lookupContext = new RockContext();                          locationService = new LocationService( lookupContext );                          newFamilyList.Clear();                          newGroupLocations.Clear();                      }                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,LoadIndividuals,The following statement contains a magic number: while ( row != null )              {                  int? groupRoleId = null;                  var isFamilyRelationship = true;                    var rowFamilyName = row[FamilyName];                  var rowFamilyKey = row[FamilyId];                  var rowPersonKey = row[PersonId];                  var rowFamilyId = rowFamilyKey.AsType<int?>();                  var rowPersonId = rowPersonKey.AsType<int?>();                    // Check that this person isn't already in our data                  var newPerson = true;                  if ( ImportedPeopleKeys.Count() > 0 )                  {                      var personKeys = GetPersonKeys( rowPersonKey );                      if ( personKeys != null )                      {                          newPerson = false;                      }                  }                    if ( newPerson )                  {                      #region person create                        var person = new Person                      {                          ForeignKey = rowPersonKey'                          ForeignId = rowPersonId'                          SystemNote = string.Format( "Imported via Excavator on {0}"' ImportDateTime )'                          RecordTypeValueId = PersonRecordTypeId'                          CreatedByPersonAliasId = ImportPersonAliasId                      };                      var firstName = row[FirstName].Left( 50 );                      var nickName = row[NickName].Left( 50 );                      person.FirstName = firstName;                      person.NickName = string.IsNullOrWhiteSpace( nickName ) ? firstName : nickName;                      person.MiddleName = row[MiddleName].Left( 50 );                      person.LastName = row[LastName].Left( 50 );                        var createdDateValue = ParseDateOrDefault( row[CreatedDate]' null );                      if ( createdDateValue.HasValue )                      {                          person.CreatedDateTime = createdDateValue;                          person.ModifiedDateTime = ImportDateTime;                      }                      else                      {                          person.CreatedDateTime = ImportDateTime;                          person.ModifiedDateTime = ImportDateTime;                      }                        var birthDate = ParseDateOrDefault( row[DateOfBirth]' null );                      if ( birthDate.HasValue )                      {                          person.BirthDay = ( (DateTime)birthDate ).Day;                          person.BirthMonth = ( (DateTime)birthDate ).Month;                          person.BirthYear = ( (DateTime)birthDate ).Year;                      }                        var graduationDate = ParseDateOrDefault( row[GraduationDate]' null );                      if ( graduationDate.HasValue )                      {                          person.GraduationYear = ( (DateTime)graduationDate ).Year;                      }                        var anniversary = ParseDateOrDefault( row[Anniversary]' null );                      if ( anniversary.HasValue )                      {                          person.AnniversaryDate = anniversary;                      }                        var gender = row[Gender];                      if ( gender != null )                      {                          switch ( gender.Trim().ToLower() )                          {                              case "m":                              case "male":                                  person.Gender = Rock.Model.Gender.Male;                                  break;                                case "f":                              case "female":                                  person.Gender = Rock.Model.Gender.Female;                                  break;                                default:                                  person.Gender = Rock.Model.Gender.Unknown;                                  break;                          }                      }                        var prefix = row[Prefix];                      if ( !string.IsNullOrWhiteSpace( prefix ) )                      {                          prefix = prefix.RemoveSpecialCharacters();                          person.TitleValueId = titleTypes.Where( s => prefix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.TitleValueId.HasValue )                          {                              var newTitle = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_TITLE' prefix );                              if ( newTitle != null )                              {                                  titleTypes.Add( newTitle );                                  person.TitleValueId = newTitle.Id;                              }                          }                      }                        var suffix = row[Suffix];                      if ( !string.IsNullOrWhiteSpace( suffix ) )                      {                          suffix = suffix.RemoveSpecialCharacters();                          person.SuffixValueId = suffixTypes.Where( s => suffix.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( s => (int?)s.Id ).FirstOrDefault();                            if ( !person.SuffixValueId.HasValue )                          {                              var newSuffix = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_SUFFIX' suffix );                              if ( newSuffix != null )                              {                                  suffixTypes.Add( newSuffix );                                  person.SuffixValueId = newSuffix.Id;                              }                          }                      }                        var maritalStatus = row[MaritalStatus];                      if ( !string.IsNullOrWhiteSpace( maritalStatus ) )                      {                          maritalStatus = maritalStatus.RemoveSpecialCharacters();                          person.MaritalStatusValueId = maritalStatusTypes.Where( s => maritalStatus.Equals( s.Value.RemoveSpecialCharacters()' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !person.MaritalStatusValueId.HasValue )                          {                              var newMaritalStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_MARITAL_STATUS' maritalStatus );                              if ( newMaritalStatus != null )                              {                                  maritalStatusTypes.Add( newMaritalStatus );                                  person.MaritalStatusValueId = newMaritalStatus.Id;                              }                          }                      }                        if ( person.MaritalStatusValueId == null )                      {                          person.MaritalStatusValueId = maritalStatusTypes.Where( dv => dv.Value.Equals( "Unknown"' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                      }                        var familyRole = row[FamilyRole];                      if ( !string.IsNullOrWhiteSpace( familyRole ) )                      {                          familyRole = familyRole.RemoveSpecialCharacters().Trim();                          groupRoleId = familyRoles.Where( dv => string.Equals( dv.Name' familyRole' StringComparison.CurrentCultureIgnoreCase ) )                              .Select( dv => (int?)dv.Id ).FirstOrDefault();                            if ( !groupRoleId.HasValue )                          {                              AddGroupRole( lookupContext' Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY' familyRole );                              familyRoles = GroupTypeCache.Read( Rock.SystemGuid.GroupType.GROUPTYPE_FAMILY ).Roles;                              groupRoleId = familyRoles.Where( dv => dv.Name == familyRole )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                          }                            if ( familyRole.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              isFamilyRelationship = false;                          }                      }                        if ( groupRoleId == null )                      {                          groupRoleId = FamilyAdultRoleId;                      }                        var recordStatus = row[RecordStatus];                      if ( !string.IsNullOrWhiteSpace( recordStatus ) )                      {                          switch ( recordStatus.Trim().ToLower() )                          {                              case "active":                                  person.RecordStatusValueId = ActivePersonRecordStatusId;                                  break;                                case "inactive":                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.RecordStatusValueId = PendingPersonRecordStatusId;                                  break;                          }                      }                      else                      {                          person.RecordStatusValueId = ActivePersonRecordStatusId;                      }                        var connectionStatus = row[ConnectionStatus];                      if ( !string.IsNullOrWhiteSpace( connectionStatus ) )                      {                          if ( connectionStatus.Equals( "Member"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = MemberConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Visitor"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.ConnectionStatusValueId = VisitorConnectionStatusId;                          }                          else if ( connectionStatus.Equals( "Business"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordTypeValueId = BusinessRecordTypeId;                          }                          else if ( connectionStatus.Equals( "Inactive"' StringComparison.CurrentCultureIgnoreCase ) )                          {                              person.RecordStatusValueId = InactivePersonRecordStatusId;                          }                          else                          {                              // create user-defined connection type if it doesn't exist                              person.ConnectionStatusValueId = connectionStatusTypes.Where( dv => dv.Value.Equals( connectionStatus' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( dv => (int?)dv.Id ).FirstOrDefault();                                if ( !person.ConnectionStatusValueId.HasValue )                              {                                  var newConnectionStatus = AddDefinedValue( lookupContext' Rock.SystemGuid.DefinedType.PERSON_CONNECTION_STATUS' connectionStatus );                                  if ( newConnectionStatus != null )                                  {                                      connectionStatusTypes.Add( newConnectionStatus );                                      person.ConnectionStatusValueId = newConnectionStatus.Id;                                  }                              }                          }                      }                      else                      {                          person.ConnectionStatusValueId = VisitorConnectionStatusId;                      }                        var isDeceasedValue = row[IsDeceased];                      if ( !string.IsNullOrWhiteSpace( isDeceasedValue ) )                      {                          switch ( isDeceasedValue.Trim().ToLower() )                          {                              case "y":                              case "yes":                              case "true":                                  person.IsDeceased = true;                                  person.RecordStatusReasonValueId = DeceasedPersonRecordReasonId;                                  person.RecordStatusValueId = InactivePersonRecordStatusId;                                  break;                                default:                                  person.IsDeceased = false;                                  break;                          }                      }                        var personNumbers = new Dictionary<string' string>();                      personNumbers.Add( "Home"' row[HomePhone] );                      personNumbers.Add( "Mobile"' row[MobilePhone] );                      personNumbers.Add( "Work"' row[WorkPhone] );                      var smsAllowed = row[AllowSMS];                        foreach ( var numberPair in personNumbers.Where( n => !string.IsNullOrWhiteSpace( n.Value ) && n.Value.AsNumeric().AsType<Int64>() > 0 ) )                      {                          var extension = string.Empty;                          var countryCode = PhoneNumber.DefaultCountryCode();                          var normalizedNumber = string.Empty;                          var countryIndex = numberPair.Value.IndexOf( '+' );                          var extensionIndex = numberPair.Value.LastIndexOf( 'x' ) > 0 ? numberPair.Value.LastIndexOf( 'x' ) : numberPair.Value.Length;                          if ( countryIndex >= 0 )                          {                              countryCode = numberPair.Value.Substring( countryIndex' countryIndex + 3 );                              normalizedNumber = numberPair.Value.Substring( countryIndex + 3' extensionIndex - 3 ).AsNumeric().TrimStart( new Char[] { '0' } );                              extension = numberPair.Value.Substring( extensionIndex );                          }                          else if ( extensionIndex > 0 )                          {                              normalizedNumber = numberPair.Value.Substring( 0' extensionIndex ).AsNumeric();                              extension = numberPair.Value.Substring( extensionIndex ).AsNumeric();                          }                          else                          {                              normalizedNumber = numberPair.Value.AsNumeric();                          }                            if ( !string.IsNullOrWhiteSpace( normalizedNumber ) )                          {                              var currentNumber = new PhoneNumber();                              currentNumber.CountryCode = countryCode;                              currentNumber.CreatedByPersonAliasId = ImportPersonAliasId;                              currentNumber.Extension = extension.Left( 20 );                              currentNumber.Number = normalizedNumber.TrimStart( new char[] { '0' } ).Left( 20 );                              currentNumber.NumberFormatted = PhoneNumber.FormattedNumber( currentNumber.CountryCode' currentNumber.Number );                              currentNumber.NumberTypeValueId = numberTypeValues.Where( v => v.Value.Equals( numberPair.Key' StringComparison.CurrentCultureIgnoreCase ) )                                  .Select( v => (int?)v.Id ).FirstOrDefault();                              if ( numberPair.Key == "Mobile" )                              {                                  switch ( smsAllowed.Trim().ToLower() )                                  {                                      case "y":                                      case "yes":                                      case "active":                                      case "true":                                          currentNumber.IsMessagingEnabled = true;                                          break;                                        default:                                          currentNumber.IsMessagingEnabled = false;                                          break;                                  }                              }                                person.PhoneNumbers.Add( currentNumber );                          }                      }                        // Map Person attributes                      person.Attributes = new Dictionary<string' AttributeCache>();                      person.AttributeValues = new Dictionary<string' AttributeValueCache>();                        bool isEmailActive;                      switch ( row[IsEmailActive].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              isEmailActive = false;                              break;                            default:                              isEmailActive = true;                              break;                      }                        EmailPreference emailPreference;                      switch ( row[AllowBulkEmail].Trim().ToLower() )                      {                          case "n":                          case "no":                          case "inactive":                              emailPreference = EmailPreference.NoMassEmails;                              break;                            default:                              emailPreference = EmailPreference.EmailAllowed;                              break;                      }                        person.EmailPreference = emailPreference;                      var primaryEmail = row[Email].Trim().Left( 75 );                      if ( !string.IsNullOrWhiteSpace( primaryEmail ) )                      {                          if ( primaryEmail.IsEmail() )                          {                              person.Email = primaryEmail;                              person.IsEmailActive = isEmailActive;                          }                          else                          {                              LogException( "InvalidPrimaryEmail"' string.Format( "PersonId: {0} - Email: {1}"' rowPersonKey' primaryEmail ) );                          }                      }                        var schoolName = row[School];                      if ( !string.IsNullOrWhiteSpace( schoolName ) )                      {                          AddEntityAttributeValue( lookupContext' schoolAttribute' person' schoolName' null' true );                      }                        foreach ( var attributePair in customAttributes )                      {                          string newAttributeValue = row[attributePair.Key];                          if ( !string.IsNullOrWhiteSpace( newAttributeValue ) )                          {                              // check if this attribute value is a date                              var valueAsDateTime = ParseDateOrDefault( newAttributeValue' null );                              if ( valueAsDateTime.HasValue )                              {                                  newAttributeValue = ((DateTime)valueAsDateTime).ToString( "yyyy-MM-dd" );                              }                                var newAttribute = personAttributes.Where( a => a.Key == attributePair.Value.RemoveWhitespace() )                                  .FirstOrDefault();                              if ( newAttribute != null )                              {                                  AddEntityAttributeValue( lookupContext' newAttribute' person' newAttributeValue' null' false );                              }                          }                      }                        // Add notes to timeline                      var notePairs = new Dictionary<string' string>                      {                          { "General"' row[GeneralNote] }'                          { "Medical"' row[MedicalNote] }'                          { "Security"' row[SecurityNote] }                      };                        foreach ( var notePair in notePairs.Where( n => !string.IsNullOrWhiteSpace( n.Value ) ) )                      {                          var splitNotePair = notePair.Value.Split( '^' );                          foreach ( string noteValue in splitNotePair )                          {                              var newNote = new Note                              {                                  NoteTypeId = PersonalNoteTypeId'                                  CreatedByPersonAliasId = ImportPersonAliasId'                                  CreatedDateTime = ImportDateTime'                                  Text = noteValue'                                  ForeignKey = rowPersonKey'                                  ForeignId = rowPersonId'                                  Caption = string.Format( "{0} Note"' notePair.Key )                              };                                if ( noteValue.StartsWith( "[ALERT]"' StringComparison.CurrentCultureIgnoreCase ) )                              {                                  newNote.IsAlert = true;                              }                                if ( notePair.Key.Equals( "Security" ) )                              {                                  // Pastoral note type id                                  var securityNoteType = new NoteTypeService( lookupContext ).Get( PersonEntityTypeId' "Secure Note"' true );                                  if ( securityNoteType != null )                                  {                                      newNote.NoteTypeId = securityNoteType.Id;                                  }                              }                                if ( notePair.Key.Equals( "Medical" ) )                              {                                  newNote.IsAlert = true;                              }                                newNoteList.Add( newNote );                          }                      }                        #endregion person create                        var groupMember = new GroupMember                      {                          Person = person'                          GroupRoleId = (int)groupRoleId'                          CreatedDateTime = ImportDateTime'                          ModifiedDateTime = ImportDateTime'                          CreatedByPersonAliasId = ImportPersonAliasId'                          GroupMemberStatus = GroupMemberStatus.Active                      };                        if ( rowFamilyKey != currentFamilyGroup.ForeignKey )                      {                          // person not part of the previous family' see if that family exists or create a new one                          currentFamilyGroup = ImportedFamilies.FirstOrDefault( g => g.ForeignKey == rowFamilyKey );                          if ( currentFamilyGroup == null )                          {                              currentFamilyGroup = CreateFamilyGroup( row[FamilyName]' rowFamilyKey );                              newFamilyList.Add( currentFamilyGroup );                              newFamilies++;                          }                          else                          {                              lookupContext.Groups.Attach( currentFamilyGroup );                              lookupContext.Entry( currentFamilyGroup ).State = EntityState.Modified;                          }                            currentFamilyGroup.Members.Add( groupMember );                      }                      else                      {                          // person is part of this family group' check if they're a visitor                          if ( isFamilyRelationship || currentFamilyGroup.Members.Count() < 1 )                          {                              currentFamilyGroup.Members.Add( groupMember );                          }                          else                          {                              var visitorFamily = CreateFamilyGroup( person.LastName + " Family"' rowFamilyKey );                              visitorFamily.Members.Add( groupMember );                              newFamilyList.Add( visitorFamily );                              newVisitorList.Add( visitorFamily );                              newFamilies++;                          }                      }                        // look ahead 1 row                      var rowNextFamilyKey = "-1";                      if ( ( row = csvData.Database.FirstOrDefault() ) != null )                      {                          rowNextFamilyKey = row[FamilyId];                      }                        newPeople++;                      completed++;                      if ( completed % ( ReportingNumber * 10 ) < 1 )                      {                          ReportProgress( 0' string.Format( "{0:N0} people processed."' completed ) );                      }                        if ( newPeople >= ReportingNumber && rowNextFamilyKey != currentFamilyGroup.ForeignKey )                      {                          SaveIndividuals( newFamilyList' newVisitorList' newNoteList );                          lookupContext.SaveChanges();                          ReportPartialProgress();                            // Clear out variables                          currentFamilyGroup = new Group();                          newFamilyList.Clear();                          newVisitorList.Clear();                          newNoteList.Clear();                          newPeople = 0;                      }                  }                  else                  {                      row = csvData.Database.FirstOrDefault();                  }              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: if ( newFamilyList.Any() )              {                  var rockContext = new RockContext();                  rockContext.WrapTransaction( () =>                  {                      rockContext.Groups.AddRange( newFamilyList );                      rockContext.SaveChanges( DisableAuditing );                        // #TODO find out how to track family groups without context locks                      ImportedFamilies.AddRange( newFamilyList );                        foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                      {                          var visitorsExist = visitorList.Any() && familyGroups.Any();                          foreach ( var newFamilyGroup in familyGroups )                          {                              foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                              {                                  // Set notes on this person                                  var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                  if ( personNotes.Any() )                                  {                                      personNotes.ForEach( n => n.EntityId = person.Id );                                  }                                    // Set attributes on this person                                  var personAttributeValues = person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = person.Id'                                      Value = person.AttributeValues[a.Key].Value                                  } ).ToList();                                    rockContext.AttributeValues.AddRange( personAttributeValues );                                    // Set aliases on this person                                  if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                  {                                      person.Aliases.Add( new PersonAlias                                      {                                          AliasPersonId = person.Id'                                          AliasPersonGuid = person.Guid'                                          ForeignKey = person.ForeignKey'                                          ForeignId = person.ForeignId'                                          PersonId = person.Id                                      } );                                  }                                    person.GivingGroupId = newFamilyGroup.Id;                                    if ( visitorsExist )                                  {                                      // Retrieve or create the group this person is an owner of                                      var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                          .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                          .Select( m => m.Group ).FirstOrDefault();                                      if ( ownerGroup == null )                                      {                                          var ownerGroupMember = new GroupMember                                          {                                              PersonId = person.Id'                                              GroupRoleId = KnownRelationshipOwnerRoleId                                          };                                            ownerGroup = new Group                                          {                                              Name = KnownRelationshipGroupType.Name'                                              GroupTypeId = KnownRelationshipGroupType.Id                                          };                                          ownerGroup.Members.Add( ownerGroupMember );                                          rockContext.Groups.Add( ownerGroup );                                      }                                        // Visitor' add relationships to the family members                                      if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                              .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                      {                                          var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                          foreach ( var familyMember in familyMembers )                                          {                                              // Add visitor invitedBy relationship                                              var invitedByMember = new GroupMember                                              {                                                  PersonId = familyMember.Person.Id'                                                  GroupRoleId = InvitedByKnownRelationshipId                                              };                                                ownerGroup.Members.Add( invitedByMember );                                                if ( person.Age < 18 && familyMember.Person.Age > 15 )                                              {                                                  // Add visitor allowCheckInBy relationship                                                  var allowCheckinMember = new GroupMember                                                  {                                                      PersonId = familyMember.Person.Id'                                                      GroupRoleId = AllowCheckInByKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( allowCheckinMember );                                              }                                          }                                      }                                      else                                      {   // Family member' add relationships to the visitor(s)                                          var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                          foreach ( var visitor in familyVisitors )                                          {                                              // Add invited visitor relationship                                              var inviteeMember = new GroupMember                                              {                                                  PersonId = visitor.Person.Id'                                                  GroupRoleId = InviteeKnownRelationshipId                                              };                                                ownerGroup.Members.Add( inviteeMember );                                                if ( visitor.Person.Age < 18 && person.Age > 15 )                                              {                                                  // Add canCheckIn visitor relationship                                                  var canCheckInMember = new GroupMember                                                  {                                                      PersonId = visitor.Person.Id'                                                      GroupRoleId = CanCheckInKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( canCheckInMember );                                              }                                          }                                      }                                  }                              }                          }                      }                        // Save notes and all changes                      rockContext.Notes.AddRange( newNoteList );                      rockContext.SaveChanges( DisableAuditing );                        if ( refreshIndividualListEachCycle )                      {                          // add reference to imported people now that we have ID's                          ImportedPeopleKeys.AddRange(                              newFamilyList.Where( m => m.ForeignKey != null )                              .SelectMany( m => m.Members )                              .Select( p => new PersonKeys                              {                                  PersonAliasId = (int)p.Person.PrimaryAliasId'                                  GroupForeignId = p.Group.ForeignId'                                  PersonId = p.Person.Id'                                  PersonForeignId = p.Person.ForeignId'                                  PersonForeignKey = p.Person.ForeignKey                              } )                          );                          ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                      }                  } );              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: if ( newFamilyList.Any() )              {                  var rockContext = new RockContext();                  rockContext.WrapTransaction( () =>                  {                      rockContext.Groups.AddRange( newFamilyList );                      rockContext.SaveChanges( DisableAuditing );                        // #TODO find out how to track family groups without context locks                      ImportedFamilies.AddRange( newFamilyList );                        foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                      {                          var visitorsExist = visitorList.Any() && familyGroups.Any();                          foreach ( var newFamilyGroup in familyGroups )                          {                              foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                              {                                  // Set notes on this person                                  var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                  if ( personNotes.Any() )                                  {                                      personNotes.ForEach( n => n.EntityId = person.Id );                                  }                                    // Set attributes on this person                                  var personAttributeValues = person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = person.Id'                                      Value = person.AttributeValues[a.Key].Value                                  } ).ToList();                                    rockContext.AttributeValues.AddRange( personAttributeValues );                                    // Set aliases on this person                                  if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                  {                                      person.Aliases.Add( new PersonAlias                                      {                                          AliasPersonId = person.Id'                                          AliasPersonGuid = person.Guid'                                          ForeignKey = person.ForeignKey'                                          ForeignId = person.ForeignId'                                          PersonId = person.Id                                      } );                                  }                                    person.GivingGroupId = newFamilyGroup.Id;                                    if ( visitorsExist )                                  {                                      // Retrieve or create the group this person is an owner of                                      var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                          .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                          .Select( m => m.Group ).FirstOrDefault();                                      if ( ownerGroup == null )                                      {                                          var ownerGroupMember = new GroupMember                                          {                                              PersonId = person.Id'                                              GroupRoleId = KnownRelationshipOwnerRoleId                                          };                                            ownerGroup = new Group                                          {                                              Name = KnownRelationshipGroupType.Name'                                              GroupTypeId = KnownRelationshipGroupType.Id                                          };                                          ownerGroup.Members.Add( ownerGroupMember );                                          rockContext.Groups.Add( ownerGroup );                                      }                                        // Visitor' add relationships to the family members                                      if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                              .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                      {                                          var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                          foreach ( var familyMember in familyMembers )                                          {                                              // Add visitor invitedBy relationship                                              var invitedByMember = new GroupMember                                              {                                                  PersonId = familyMember.Person.Id'                                                  GroupRoleId = InvitedByKnownRelationshipId                                              };                                                ownerGroup.Members.Add( invitedByMember );                                                if ( person.Age < 18 && familyMember.Person.Age > 15 )                                              {                                                  // Add visitor allowCheckInBy relationship                                                  var allowCheckinMember = new GroupMember                                                  {                                                      PersonId = familyMember.Person.Id'                                                      GroupRoleId = AllowCheckInByKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( allowCheckinMember );                                              }                                          }                                      }                                      else                                      {   // Family member' add relationships to the visitor(s)                                          var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                          foreach ( var visitor in familyVisitors )                                          {                                              // Add invited visitor relationship                                              var inviteeMember = new GroupMember                                              {                                                  PersonId = visitor.Person.Id'                                                  GroupRoleId = InviteeKnownRelationshipId                                              };                                                ownerGroup.Members.Add( inviteeMember );                                                if ( visitor.Person.Age < 18 && person.Age > 15 )                                              {                                                  // Add canCheckIn visitor relationship                                                  var canCheckInMember = new GroupMember                                                  {                                                      PersonId = visitor.Person.Id'                                                      GroupRoleId = CanCheckInKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( canCheckInMember );                                              }                                          }                                      }                                  }                              }                          }                      }                        // Save notes and all changes                      rockContext.Notes.AddRange( newNoteList );                      rockContext.SaveChanges( DisableAuditing );                        if ( refreshIndividualListEachCycle )                      {                          // add reference to imported people now that we have ID's                          ImportedPeopleKeys.AddRange(                              newFamilyList.Where( m => m.ForeignKey != null )                              .SelectMany( m => m.Members )                              .Select( p => new PersonKeys                              {                                  PersonAliasId = (int)p.Person.PrimaryAliasId'                                  GroupForeignId = p.Group.ForeignId'                                  PersonId = p.Person.Id'                                  PersonForeignId = p.Person.ForeignId'                                  PersonForeignKey = p.Person.ForeignKey                              } )                          );                          ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                      }                  } );              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: if ( newFamilyList.Any() )              {                  var rockContext = new RockContext();                  rockContext.WrapTransaction( () =>                  {                      rockContext.Groups.AddRange( newFamilyList );                      rockContext.SaveChanges( DisableAuditing );                        // #TODO find out how to track family groups without context locks                      ImportedFamilies.AddRange( newFamilyList );                        foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                      {                          var visitorsExist = visitorList.Any() && familyGroups.Any();                          foreach ( var newFamilyGroup in familyGroups )                          {                              foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                              {                                  // Set notes on this person                                  var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                  if ( personNotes.Any() )                                  {                                      personNotes.ForEach( n => n.EntityId = person.Id );                                  }                                    // Set attributes on this person                                  var personAttributeValues = person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = person.Id'                                      Value = person.AttributeValues[a.Key].Value                                  } ).ToList();                                    rockContext.AttributeValues.AddRange( personAttributeValues );                                    // Set aliases on this person                                  if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                  {                                      person.Aliases.Add( new PersonAlias                                      {                                          AliasPersonId = person.Id'                                          AliasPersonGuid = person.Guid'                                          ForeignKey = person.ForeignKey'                                          ForeignId = person.ForeignId'                                          PersonId = person.Id                                      } );                                  }                                    person.GivingGroupId = newFamilyGroup.Id;                                    if ( visitorsExist )                                  {                                      // Retrieve or create the group this person is an owner of                                      var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                          .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                          .Select( m => m.Group ).FirstOrDefault();                                      if ( ownerGroup == null )                                      {                                          var ownerGroupMember = new GroupMember                                          {                                              PersonId = person.Id'                                              GroupRoleId = KnownRelationshipOwnerRoleId                                          };                                            ownerGroup = new Group                                          {                                              Name = KnownRelationshipGroupType.Name'                                              GroupTypeId = KnownRelationshipGroupType.Id                                          };                                          ownerGroup.Members.Add( ownerGroupMember );                                          rockContext.Groups.Add( ownerGroup );                                      }                                        // Visitor' add relationships to the family members                                      if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                              .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                      {                                          var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                          foreach ( var familyMember in familyMembers )                                          {                                              // Add visitor invitedBy relationship                                              var invitedByMember = new GroupMember                                              {                                                  PersonId = familyMember.Person.Id'                                                  GroupRoleId = InvitedByKnownRelationshipId                                              };                                                ownerGroup.Members.Add( invitedByMember );                                                if ( person.Age < 18 && familyMember.Person.Age > 15 )                                              {                                                  // Add visitor allowCheckInBy relationship                                                  var allowCheckinMember = new GroupMember                                                  {                                                      PersonId = familyMember.Person.Id'                                                      GroupRoleId = AllowCheckInByKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( allowCheckinMember );                                              }                                          }                                      }                                      else                                      {   // Family member' add relationships to the visitor(s)                                          var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                          foreach ( var visitor in familyVisitors )                                          {                                              // Add invited visitor relationship                                              var inviteeMember = new GroupMember                                              {                                                  PersonId = visitor.Person.Id'                                                  GroupRoleId = InviteeKnownRelationshipId                                              };                                                ownerGroup.Members.Add( inviteeMember );                                                if ( visitor.Person.Age < 18 && person.Age > 15 )                                              {                                                  // Add canCheckIn visitor relationship                                                  var canCheckInMember = new GroupMember                                                  {                                                      PersonId = visitor.Person.Id'                                                      GroupRoleId = CanCheckInKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( canCheckInMember );                                              }                                          }                                      }                                  }                              }                          }                      }                        // Save notes and all changes                      rockContext.Notes.AddRange( newNoteList );                      rockContext.SaveChanges( DisableAuditing );                        if ( refreshIndividualListEachCycle )                      {                          // add reference to imported people now that we have ID's                          ImportedPeopleKeys.AddRange(                              newFamilyList.Where( m => m.ForeignKey != null )                              .SelectMany( m => m.Members )                              .Select( p => new PersonKeys                              {                                  PersonAliasId = (int)p.Person.PrimaryAliasId'                                  GroupForeignId = p.Group.ForeignId'                                  PersonId = p.Person.Id'                                  PersonForeignId = p.Person.ForeignId'                                  PersonForeignKey = p.Person.ForeignKey                              } )                          );                          ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                      }                  } );              }
Magic Number,Excavator.CSV,CSVComponent,C:\repos\NewSpring_Excavator\Excavator.CSV\CSVComponent.cs,SaveIndividuals,The following statement contains a magic number: if ( newFamilyList.Any() )              {                  var rockContext = new RockContext();                  rockContext.WrapTransaction( () =>                  {                      rockContext.Groups.AddRange( newFamilyList );                      rockContext.SaveChanges( DisableAuditing );                        // #TODO find out how to track family groups without context locks                      ImportedFamilies.AddRange( newFamilyList );                        foreach ( var familyGroups in newFamilyList.GroupBy( g => g.ForeignKey ) )                      {                          var visitorsExist = visitorList.Any() && familyGroups.Any();                          foreach ( var newFamilyGroup in familyGroups )                          {                              foreach ( var person in newFamilyGroup.Members.Select( m => m.Person ) )                              {                                  // Set notes on this person                                  var personNotes = newNoteList.Where( n => n.ForeignKey == person.ForeignKey ).ToList();                                  if ( personNotes.Any() )                                  {                                      personNotes.ForEach( n => n.EntityId = person.Id );                                  }                                    // Set attributes on this person                                  var personAttributeValues = person.Attributes.Select( a => a.Value )                                  .Select( a => new AttributeValue                                  {                                      AttributeId = a.Id'                                      EntityId = person.Id'                                      Value = person.AttributeValues[a.Key].Value                                  } ).ToList();                                    rockContext.AttributeValues.AddRange( personAttributeValues );                                    // Set aliases on this person                                  if ( !person.Aliases.Any( a => a.PersonId == person.Id ) )                                  {                                      person.Aliases.Add( new PersonAlias                                      {                                          AliasPersonId = person.Id'                                          AliasPersonGuid = person.Guid'                                          ForeignKey = person.ForeignKey'                                          ForeignId = person.ForeignId'                                          PersonId = person.Id                                      } );                                  }                                    person.GivingGroupId = newFamilyGroup.Id;                                    if ( visitorsExist )                                  {                                      // Retrieve or create the group this person is an owner of                                      var ownerGroup = new GroupMemberService( rockContext ).Queryable()                                          .Where( m => m.PersonId == person.Id && m.GroupRoleId == KnownRelationshipOwnerRoleId )                                          .Select( m => m.Group ).FirstOrDefault();                                      if ( ownerGroup == null )                                      {                                          var ownerGroupMember = new GroupMember                                          {                                              PersonId = person.Id'                                              GroupRoleId = KnownRelationshipOwnerRoleId                                          };                                            ownerGroup = new Group                                          {                                              Name = KnownRelationshipGroupType.Name'                                              GroupTypeId = KnownRelationshipGroupType.Id                                          };                                          ownerGroup.Members.Add( ownerGroupMember );                                          rockContext.Groups.Add( ownerGroup );                                      }                                        // Visitor' add relationships to the family members                                      if ( visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey )                                              .Any( v => v.Members.Any( m => m.Person.ForeignKey.Equals( person.ForeignKey ) ) ) )                                      {                                          var familyMembers = familyGroups.Except( visitorList ).SelectMany( g => g.Members );                                          foreach ( var familyMember in familyMembers )                                          {                                              // Add visitor invitedBy relationship                                              var invitedByMember = new GroupMember                                              {                                                  PersonId = familyMember.Person.Id'                                                  GroupRoleId = InvitedByKnownRelationshipId                                              };                                                ownerGroup.Members.Add( invitedByMember );                                                if ( person.Age < 18 && familyMember.Person.Age > 15 )                                              {                                                  // Add visitor allowCheckInBy relationship                                                  var allowCheckinMember = new GroupMember                                                  {                                                      PersonId = familyMember.Person.Id'                                                      GroupRoleId = AllowCheckInByKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( allowCheckinMember );                                              }                                          }                                      }                                      else                                      {   // Family member' add relationships to the visitor(s)                                          var familyVisitors = visitorList.Where( v => v.ForeignKey == newFamilyGroup.ForeignKey ).SelectMany( g => g.Members ).ToList();                                          foreach ( var visitor in familyVisitors )                                          {                                              // Add invited visitor relationship                                              var inviteeMember = new GroupMember                                              {                                                  PersonId = visitor.Person.Id'                                                  GroupRoleId = InviteeKnownRelationshipId                                              };                                                ownerGroup.Members.Add( inviteeMember );                                                if ( visitor.Person.Age < 18 && person.Age > 15 )                                              {                                                  // Add canCheckIn visitor relationship                                                  var canCheckInMember = new GroupMember                                                  {                                                      PersonId = visitor.Person.Id'                                                      GroupRoleId = CanCheckInKnownRelationshipId                                                  };                                                    ownerGroup.Members.Add( canCheckInMember );                                              }                                          }                                      }                                  }                              }                          }                      }                        // Save notes and all changes                      rockContext.Notes.AddRange( newNoteList );                      rockContext.SaveChanges( DisableAuditing );                        if ( refreshIndividualListEachCycle )                      {                          // add reference to imported people now that we have ID's                          ImportedPeopleKeys.AddRange(                              newFamilyList.Where( m => m.ForeignKey != null )                              .SelectMany( m => m.Members )                              .Select( p => new PersonKeys                              {                                  PersonAliasId = (int)p.Person.PrimaryAliasId'                                  GroupForeignId = p.Group.ForeignId'                                  PersonId = p.Person.Id'                                  PersonForeignId = p.Person.ForeignId'                                  PersonForeignKey = p.Person.ForeignKey                              } )                          );                          ImportedPeopleKeys = ImportedPeopleKeys.OrderBy( k => k.PersonForeignId ).ThenBy( k => k.PersonForeignKey ).ToList();                      }                  } );              }
