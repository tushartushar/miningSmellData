Implementation smell,Namespace,Class,File,Method,Description
Long Method,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The method has 145 lines of code.
Complex Method,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,Cyclomatic complexity of the method is 61
Complex Method,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,SizeSettingToDouble,Cyclomatic complexity of the method is 8
Complex Method,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,Cyclomatic complexity of the method is 9
Long Parameter List,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,ProcessPhotos,The method has 8 parameters.
Long Parameter List,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The method has 7 parameters.
Long Parameter List,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,FitCaption,The method has 7 parameters.
Long Parameter List,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,GetMaxTextSize,The method has 5 parameters.
Long Statement,PhotoCaptioner,frmMain,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Form1.cs,bwWallPaper_DoWork,The length of the statement  "		PhotoProcessor.ProcessPhotos (Settings.Default.PhotoPath' Settings.Default.OutputPath' new System.Windows.Media.FontFamily (Settings.Default.Font.FontFamily.Name)' System.Windows.Media.Color.FromRgb (Settings.Default.FontColor.R' Settings.Default.FontColor.G' Settings.Default.FontColor.B)' System.Windows.Media.Color.FromRgb (Settings.Default.BackgroundColor.R' Settings.Default.BackgroundColor.G' Settings.Default.BackgroundColor.B)' Settings.Default.Size' Settings.Default.Position' Settings.Default.Wrapping); " is 513.
Long Statement,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The length of the statement  "	string appGuid = ((GuidAttribute)Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(GuidAttribute)' false).GetValue (0)).Value.ToString (); " is 149.
Long Statement,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The length of the statement  "		var allowEveryoneRule = new MutexAccessRule (new SecurityIdentifier (WellKnownSidType.WorldSid' null)' MutexRights.FullControl' AccessControlType.Allow); " is 153.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,ProcessPhotos,The length of the statement  "				result = CaptionImage (fileName' captionFont' fontColor' backgroundColor' SizeSettingToDouble (size)' PositionSettingToPosition (position)' WrappingSettingToPosition (wrapping)); " is 178.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The length of the statement  "	FormattedText text = PhotoProcessor.FitCaption (caption' captionFont' fontColor' width' captionLineHeight' maxLines' out captionHeight); " is 136.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The length of the statement  "		dc.DrawRectangle (new SolidColorBrush (backgroundColor)' new Pen (new SolidColorBrush (backgroundColor)' 0)' new Rect (0' textTop' width' captionHeight)); " is 154.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The length of the statement  "		dc.DrawText (text' new Point ((width / 2d - (text.TextAlignment == TextAlignment.Center ? width : text.Width) / 2d)' textTop + (captionHeight - text.FullHeight ()) / 2d)); " is 171.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The length of the statement  "	RenderTargetBitmap rtb = new RenderTargetBitmap (pixelWidth' pixelHeight + UnitsToPixels (extraHeight' dpiY)' dpiX' dpiY' PixelFormats.Default); " is 144.
Long Statement,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,FitCaption,The length of the statement  "	FormattedText text = new FormattedText (caption' CultureInfo.InvariantCulture' FlowDirection.LeftToRight' new Typeface (captionFont' FontStyles.Normal' FontWeights.Normal' FontStretches.Normal)' 1d' new SolidColorBrush (fontColor)); " is 232.
Empty Catch Block,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,DebugMessage,The method has an empty catch block.
Magic Number,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The following statement contains a magic number: using (var mutex = new Mutex (false' mutexId)) {  	// edited by Jeremy Wiebe to add example of setting up security for multi-user usage  	// edited by 'Marc' to work also on localized systems (don't use just "Everyone")   	var allowEveryoneRule = new MutexAccessRule (new SecurityIdentifier (WellKnownSidType.WorldSid' null)' MutexRights.FullControl' AccessControlType.Allow);  	var securitySettings = new MutexSecurity ();  	securitySettings.AddAccessRule (allowEveryoneRule);  	mutex.SetAccessControl (securitySettings);  	// edited by acidzombie24  	var hasHandle = false;  	try {  		try {  			// note' you may want to time out here instead of waiting forever  			// edited by acidzombie24  			// mutex.WaitOne(Timeout.Infinite' false);  			hasHandle = mutex.WaitOne (5000' false);  			if (hasHandle == false) {  				throw new TimeoutException ("Timeout waiting for exclusive access");  			}  		}  		catch (AbandonedMutexException) {  			// Log the fact the mutex was abandoned in another process' it will still get acquired  			hasHandle = true;  		}  		#region Perform Your Work Here  		frmMain mainForm = null;  		try {  			Application.EnableVisualStyles ();  			Application.SetCompatibleTextRenderingDefault (false);  			mainForm = new frmMain ();  			Application.Run (mainForm);  		}  		catch (Exception ex) {  			try {  				DebugMessage ("Exception Message: {0}\n\nStack Trace:\n\n{1}"' ex.Message' ex.StackTrace);  			}  			catch {  			}  			throw;  		}  		finally {  			if (mainForm != null) {  				//mainForm.CleanEvents();  			}  		}  		#endregion  	}  	finally {  		// edited by acidzombie24' added if statement  		if (hasHandle) {  			mutex.ReleaseMutex ();  		}  	}  }  
Magic Number,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The following statement contains a magic number: try {  	try {  		// note' you may want to time out here instead of waiting forever  		// edited by acidzombie24  		// mutex.WaitOne(Timeout.Infinite' false);  		hasHandle = mutex.WaitOne (5000' false);  		if (hasHandle == false) {  			throw new TimeoutException ("Timeout waiting for exclusive access");  		}  	}  	catch (AbandonedMutexException) {  		// Log the fact the mutex was abandoned in another process' it will still get acquired  		hasHandle = true;  	}  	#region Perform Your Work Here  	frmMain mainForm = null;  	try {  		Application.EnableVisualStyles ();  		Application.SetCompatibleTextRenderingDefault (false);  		mainForm = new frmMain ();  		Application.Run (mainForm);  	}  	catch (Exception ex) {  		try {  			DebugMessage ("Exception Message: {0}\n\nStack Trace:\n\n{1}"' ex.Message' ex.StackTrace);  		}  		catch {  		}  		throw;  	}  	finally {  		if (mainForm != null) {  			//mainForm.CleanEvents();  		}  	}  	#endregion  }  finally {  	// edited by acidzombie24' added if statement  	if (hasHandle) {  		mutex.ReleaseMutex ();  	}  }  
Magic Number,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The following statement contains a magic number: try {  	// note' you may want to time out here instead of waiting forever  	// edited by acidzombie24  	// mutex.WaitOne(Timeout.Infinite' false);  	hasHandle = mutex.WaitOne (5000' false);  	if (hasHandle == false) {  		throw new TimeoutException ("Timeout waiting for exclusive access");  	}  }  catch (AbandonedMutexException) {  	// Log the fact the mutex was abandoned in another process' it will still get acquired  	hasHandle = true;  }  
Magic Number,PhotoCaptioner,Program,C:\repos\gyphie_photocaptioner\PhotoCaptioner\Program.cs,Main,The following statement contains a magic number: hasHandle = mutex.WaitOne (5000' false);  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,ProcessPhotos,The following statement contains a magic number: percentComplete = 100;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: switch (WPFMetaData.GetOrientation (img)) {  case System.Drawing.RotateFlipType.Rotate90FlipNone:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipNone:  	rotation = 180;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipNone:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	break;  case System.Drawing.RotateFlipType.RotateNoneFlipX:  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate90FlipX:  	rotation = 90;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate180FlipX:  	rotation = 180;  	flipX = true;  	break;  case System.Drawing.RotateFlipType.Rotate270FlipX:  	rotation = 270;  	width = img.Height;  	height = img.Width;  	pixelWidth = img.PixelHeight;  	pixelHeight = img.PixelWidth;  	dpiX = img.DpiY;  	dpiY = img.DpiX;  	flipX = true;  	break;  default:  	break;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 90;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 180;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 270;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 90;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 180;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,CaptionImage,The following statement contains a magic number: rotation = 270;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,GetMaxTextSize,The following statement contains a magic number: do {  	halfFontSize = Math.Round ((upperFontSize - lowerFontSize) / 2.0 + lowerFontSize);  	text.SetFontSize (halfFontSize);  	if (text.FullHeight () > lineHeight) {  		upperFontSize = halfFontSize;  	}  	else if (text.FullHeight () < lineHeight) {  		lowerFontSize = halfFontSize;  	}  	else {  		break;  		// exact size  	}  }  while (upperFontSize - lowerFontSize > 1);  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,GetMaxTextSize,The following statement contains a magic number: halfFontSize = Math.Round ((upperFontSize - lowerFontSize) / 2.0 + lowerFontSize);  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: switch (wrapping) {  case "Allow 1 line":  	return 1;  case "Allow 2 lines":  	return 2;  case "Allow 3 lines":  	return 3;  case "Allow 4 lines":  	return 4;  case "Unlimited wrapping":  	return int.MaxValue;  default:  	return 1;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: switch (wrapping) {  case "Allow 1 line":  	return 1;  case "Allow 2 lines":  	return 2;  case "Allow 3 lines":  	return 3;  case "Allow 4 lines":  	return 4;  case "Unlimited wrapping":  	return int.MaxValue;  default:  	return 1;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: switch (wrapping) {  case "Allow 1 line":  	return 1;  case "Allow 2 lines":  	return 2;  case "Allow 3 lines":  	return 3;  case "Allow 4 lines":  	return 4;  case "Unlimited wrapping":  	return int.MaxValue;  default:  	return 1;  }  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: return 2;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: return 3;  
Magic Number,PhotoCaptioner,PhotoProcessor,C:\repos\gyphie_photocaptioner\PhotoCaptioner\PhotoProcessor.cs,WrappingSettingToPosition,The following statement contains a magic number: return 4;  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,PhotoCaptioner,WPFMetaData,C:\repos\gyphie_photocaptioner\PhotoCaptioner\WPFMetaData.cs,OrientationToFlipType,The following statement contains a magic number: switch (o) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
