Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSDataEventHandler,Cyclomatic complexity of the method is 29
Complex Method,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,Cyclomatic complexity of the method is 16
Long Parameter List,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDM,The method has 6 parameters.
Long Parameter List,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The method has 8 parameters.
Long Statement,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,Start,The length of the statement  "		this._clThreadStart = new ThreadStart (new GPSHandler.NMEAEmulator (new SharpGPS.SerialPort.NewGPSDataHandler (this.GPSDataEventHandler)).Emulator); " is 148.
Empty Catch Block,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,Open,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The method has an empty catch block.
Empty Catch Block,SharpGPS.NMEA,GPRME,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\PGRME.cs,GPRME,The method has an empty catch block.
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDM,The following statement contains a magic number: latMin = (a - latDeg) * 60;  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDM,The following statement contains a magic number: lonMin = (b - lonDeg) * 60;  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: latMin = (int)Math.Floor (a * 60.0);  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: latSec = (a * 60.0 - latMin) * 60.0;  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: latSec = (a * 60.0 - latMin) * 60.0;  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: lonMin = (int)Math.Floor (b * 60.0);  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: lonSec = (b * 60.0 - lonMin) * 60.0;  
Magic Number,SharpGPS,Coordinate,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\Coordinate.cs,GetDMS,The following statement contains a magic number: lonSec = (b * 60.0 - lonMin) * 60.0;  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: try {  	if (DM == "" || Dir == "") {  		return 0.0;  	}  	//Get the fractional part of minutes  	//DM = '5512.45''  Dir='N'  	//DM = '12311.12'' Dir='E'  	string t = DM.Substring (DM.IndexOf ("."));  	double FM = double.Parse (DM.Substring (DM.IndexOf ("."))' GPSHandler.NumberFormatEnUs);  	//Get the minutes.  	t = DM.Substring (DM.IndexOf (".") - 2' 2);  	double Min = double.Parse (DM.Substring (DM.IndexOf (".") - 2' 2)' GPSHandler.NumberFormatEnUs);  	//Degrees  	t = DM.Substring (0' DM.IndexOf (".") - 2);  	double Deg = double.Parse (DM.Substring (0' DM.IndexOf (".") - 2)' GPSHandler.NumberFormatEnUs);  	if (Dir == "S" || Dir == "W")  		Deg = -(Deg + (Min + FM) / 60);  	else  		Deg = Deg + (Min + FM) / 60;  	return Deg;  }  catch {  	return 0.0;  }  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: t = DM.Substring (DM.IndexOf (".") - 2' 2);  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: t = DM.Substring (DM.IndexOf (".") - 2' 2);  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: t = DM.Substring (0' DM.IndexOf (".") - 2);  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: if (Dir == "S" || Dir == "W")  	Deg = -(Deg + (Min + FM) / 60);  else  	Deg = Deg + (Min + FM) / 60;  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: if (Dir == "S" || Dir == "W")  	Deg = -(Deg + (Min + FM) / 60);  else  	Deg = Deg + (Min + FM) / 60;  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: Deg = -(Deg + (Min + FM) / 60);  
Magic Number,SharpGPS,GPSHandler,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\GPSHandler.cs,GPSToDecimalDegrees,The following statement contains a magic number: Deg = Deg + (Min + FM) / 60;  
Magic Number,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,Read,The following statement contains a magic number: while (com.IsOpen) {  	int nBytes = com.BytesToRead;  	byte[] BufBytes;  	BufBytes = new byte[nBytes];  	com.Read (BufBytes' 0' nBytes);  	strData += Encoding.GetEncoding ("ASCII").GetString (BufBytes' 0' nBytes);  	string temp = "";  	while (strData != temp) {  		temp = strData;  		strData = GetNmeaString (strData);  	}  	Thread.Sleep (MilliSecondsWait);  	if (DateTime.Now.Ticks - TimeSinceLastEvent > 10000000 * _TimeOut && !HasTimedOut) {  		HasTimedOut = true;  		FireEvent (GPSEventType.TimeOut' "");  	}  }  
Magic Number,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,Read,The following statement contains a magic number: if (DateTime.Now.Ticks - TimeSinceLastEvent > 10000000 * _TimeOut && !HasTimedOut) {  	HasTimedOut = true;  	FireEvent (GPSEventType.TimeOut' "");  }  
Magic Number,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,GetNmeaString,The following statement contains a magic number: if (nStart < 0 || nStart == strNMEA.Length - 2)  	return strNMEA;  
Magic Number,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,CheckSentence,The following statement contains a magic number: if (iStart >= iEnd || iEnd + 3 > strSentence.Length)  	return true;  
Magic Number,SharpGPS,SerialPort,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\SerialPort.cs,CheckSentence,The following statement contains a magic number: return (result.ToString ("X") == strSentence.Substring (iEnd + 1' 2));  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length >= 6) {  		TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  		DateTime nowutc = DateTime.UtcNow;  		nowutc = nowutc.Add (-nowutc.TimeOfDay);  		_timeOfFix = nowutc.Add (t);  	}  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  	if (split [6] == "1")  		_fixQuality = FixQualityEnum.GPS;  	else if (split [6] == "2")  		_fixQuality = FixQualityEnum.DGPS;  	else  		_fixQuality = FixQualityEnum.Invalid;  	_noOfSats = Convert.ToByte (split [7]);  	GPSHandler.dblTryParse (split [8]' out _dilution);  	GPSHandler.dblTryParse (split [9]' out _altitude);  	_altitudeUnits = split [10] [0];  	GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  	GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  	_dGPSStationID = split [14];  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [1].Length >= 6) {  	TimeSpan t = new TimeSpan (GPSHandler.intTryParse (split [1].Substring (0' 2))' GPSHandler.intTryParse (split [1].Substring (2' 2))' GPSHandler.intTryParse (split [1].Substring (4' 2)));  	DateTime nowutc = DateTime.UtcNow;  	nowutc = nowutc.Add (-nowutc.TimeOfDay);  	_timeOfFix = nowutc.Add (t);  }  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [4]' split [5])' GPSHandler.GPSToDecimalDegrees (split [2]' split [3]));  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [6] == "1")  	_fixQuality = FixQualityEnum.GPS;  else if (split [6] == "2")  	_fixQuality = FixQualityEnum.DGPS;  else  	_fixQuality = FixQualityEnum.Invalid;  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [6] == "1")  	_fixQuality = FixQualityEnum.GPS;  else if (split [6] == "2")  	_fixQuality = FixQualityEnum.DGPS;  else  	_fixQuality = FixQualityEnum.Invalid;  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: if (split [6] == "2")  	_fixQuality = FixQualityEnum.DGPS;  else  	_fixQuality = FixQualityEnum.Invalid;  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _noOfSats = Convert.ToByte (split [7]);  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: GPSHandler.dblTryParse (split [8]' out _dilution);  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: GPSHandler.dblTryParse (split [9]' out _altitude);  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _altitudeUnits = split [10] [0];  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: GPSHandler.dblTryParse (split [11]' out _heightOfGeoid);  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: GPSHandler.intTryParse (split [13]' out _dGPSUpdate);  
Magic Number,SharpGPS.NMEA,GPGGA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGGA.cs,GPGGA,The following statement contains a magic number: _dGPSStationID = split [14];  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	try {  		_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  	}  	catch {  		_position = null;  	}  	try {  		_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  	}  	catch {  		_timeOfSolution = null;  		// TimeSpan.Zero;  	}  	_dataValid = (split [6] == "A");  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  }  catch {  	_position = null;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  }  catch {  	_position = null;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  }  catch {  	_position = null;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [3]' split [4])' GPSHandler.GPSToDecimalDegrees (split [1]' split [2]));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: try {  	_timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  }  catch {  	_timeOfSolution = null;  	// TimeSpan.Zero;  }  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _timeOfSolution = new TimeSpan (int.Parse (split [5].Substring (0' 2))' int.Parse (split [5].Substring (2' 2))' int.Parse (split [5].Substring (4)));  
Magic Number,SharpGPS.NMEA,GPGLL,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGLL.cs,GPGLL,The following statement contains a magic number: _dataValid = (split [6] == "A");  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: try {  	if (NMEAsentence.IndexOf ('*') > 0)  		NMEAsentence = NMEAsentence.Substring (0' NMEAsentence.IndexOf ('*'));  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	if (split [1].Length > 0)  		_mode = split [1] [0];  	else  		_mode = ' ';  	if (split [2].Length > 0) {  		switch (split [2]) {  		case "2":  			_fixMode = GSAFixModeEnum._2D;  			break;  		case "3":  			_fixMode = GSAFixModeEnum._3D;  			break;  		default:  			_fixMode = GSAFixModeEnum.FixNotAvailable;  			break;  		}  	}  	_pRNInSolution.Clear ();  	for (int i = 0; i <= 11; i++)  		if (split [i + 3] != "")  			_pRNInSolution.Add (split [i + 3]);  	GPSHandler.dblTryParse (split [15]' out _pdop);  	GPSHandler.dblTryParse (split [16]' out _hdop);  	GPSHandler.dblTryParse (split [17]' out _vdop);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: if (split [2].Length > 0) {  	switch (split [2]) {  	case "2":  		_fixMode = GSAFixModeEnum._2D;  		break;  	case "3":  		_fixMode = GSAFixModeEnum._3D;  		break;  	default:  		_fixMode = GSAFixModeEnum.FixNotAvailable;  		break;  	}  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: if (split [2].Length > 0) {  	switch (split [2]) {  	case "2":  		_fixMode = GSAFixModeEnum._2D;  		break;  	case "3":  		_fixMode = GSAFixModeEnum._3D;  		break;  	default:  		_fixMode = GSAFixModeEnum.FixNotAvailable;  		break;  	}  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: switch (split [2]) {  case "2":  	_fixMode = GSAFixModeEnum._2D;  	break;  case "3":  	_fixMode = GSAFixModeEnum._3D;  	break;  default:  	_fixMode = GSAFixModeEnum.FixNotAvailable;  	break;  }  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: for (int i = 0; i <= 11; i++)  	if (split [i + 3] != "")  		_pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: for (int i = 0; i <= 11; i++)  	if (split [i + 3] != "")  		_pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: for (int i = 0; i <= 11; i++)  	if (split [i + 3] != "")  		_pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: if (split [i + 3] != "")  	_pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: if (split [i + 3] != "")  	_pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: _pRNInSolution.Add (split [i + 3]);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: GPSHandler.dblTryParse (split [15]' out _pdop);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: GPSHandler.dblTryParse (split [16]' out _hdop);  
Magic Number,SharpGPS.NMEA,GPGSA,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSA.cs,GPGSA,The following statement contains a magic number: GPSHandler.dblTryParse (split [17]' out _vdop);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	int satsInView = GPSHandler.intTryParse (split [3]);  	int msgCount = GPSHandler.intTryParse (split [1]);  	//Number of GPGSV messages  	int msgno = GPSHandler.intTryParse (split [2]);  	//Current messagenumber  	if (msgCount < msgno || msgno < 1)  		//check for invalid data (could be zero if parse failed)  		return false;  	if (msgno == 1) {  		_satellites.Clear ();  		//First message. Let's clear the satellite list  		firstMessageParsed = true;  	}  	else if (!firstMessageParsed)  		//If we haven't received the first GSV message' return  		return false;  	lastmsg = (msgCount == msgno);  	//Is this the last GSV message in the GSV messages?  	int satsInMsg;  	if (!lastmsg)  		satsInMsg = 4;  	//If this isn't the last message' the message will hold info for 4 satellites  	else  		satsInMsg = satsInView - 4 * (msgno - 1);  	//calculate number of satellites in last message  	for (int i = 0; i < satsInMsg; i++) {  		Satellite sat = new Satellite ();  		sat.PRN = split [i * 4 + 4];  		sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  		sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  		sat.SNR = Convert.ToByte (split [i * 4 + 7]);  		_satellites.Add (sat);  	}  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: if (!lastmsg)  	satsInMsg = 4;  //If this isn't the last message' the message will hold info for 4 satellites  else  	satsInMsg = satsInView - 4 * (msgno - 1);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: if (!lastmsg)  	satsInMsg = 4;  //If this isn't the last message' the message will hold info for 4 satellites  else  	satsInMsg = satsInView - 4 * (msgno - 1);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: satsInMsg = 4;  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: satsInMsg = satsInView - 4 * (msgno - 1);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: for (int i = 0; i < satsInMsg; i++) {  	Satellite sat = new Satellite ();  	sat.PRN = split [i * 4 + 4];  	sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  	sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  	sat.SNR = Convert.ToByte (split [i * 4 + 7]);  	_satellites.Add (sat);  }  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.PRN = split [i * 4 + 4];  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.PRN = split [i * 4 + 4];  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.Elevation = Convert.ToByte (split [i * 4 + 5]);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.Azimuth = Convert.ToInt16 (split [i * 4 + 6]);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.SNR = Convert.ToByte (split [i * 4 + 7]);  
Magic Number,SharpGPS.NMEA,GPGSV,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPGSV.cs,AddSentence,The following statement contains a magic number: sat.SNR = Convert.ToByte (split [i * 4 + 7]);  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	//Extract date/time  	try {  		string[] DateTimeFormats =  {  			"ddMMyyHHmmss"'  			"ddMMyy"'  			"ddMMyyHHmmss.FFFFFF"  		};  		if (split [9].Length >= 6) {  			//Require at least the date to be present   			string time = split [9] + split [1];  			// +" 0";  			_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  		}  		else  			_timeOfFix = new DateTime ();  	}  	catch {  		_timeOfFix = new DateTime ();  	}  	if (split [2] == "A")  		_status = StatusEnum.OK;  	else  		_status = StatusEnum.Warning;  	_position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  	GPSHandler.dblTryParse (split [7]' out _speed);  	GPSHandler.dblTryParse (split [8]' out _course);  	GPSHandler.dblTryParse (split [10]' out _magneticVariation);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	string[] DateTimeFormats =  {  		"ddMMyyHHmmss"'  		"ddMMyy"'  		"ddMMyyHHmmss.FFFFFF"  	};  	if (split [9].Length >= 6) {  		//Require at least the date to be present   		string time = split [9] + split [1];  		// +" 0";  		_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  	}  	else  		_timeOfFix = new DateTime ();  }  catch {  	_timeOfFix = new DateTime ();  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	string[] DateTimeFormats =  {  		"ddMMyyHHmmss"'  		"ddMMyy"'  		"ddMMyyHHmmss.FFFFFF"  	};  	if (split [9].Length >= 6) {  		//Require at least the date to be present   		string time = split [9] + split [1];  		// +" 0";  		_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  	}  	else  		_timeOfFix = new DateTime ();  }  catch {  	_timeOfFix = new DateTime ();  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: try {  	string[] DateTimeFormats =  {  		"ddMMyyHHmmss"'  		"ddMMyy"'  		"ddMMyyHHmmss.FFFFFF"  	};  	if (split [9].Length >= 6) {  		//Require at least the date to be present   		string time = split [9] + split [1];  		// +" 0";  		_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  	}  	else  		_timeOfFix = new DateTime ();  }  catch {  	_timeOfFix = new DateTime ();  }  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: if (split [9].Length >= 6) {  	//Require at least the date to be present   	string time = split [9] + split [1];  	// +" 0";  	_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  }  else  	_timeOfFix = new DateTime ();  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: if (split [9].Length >= 6) {  	//Require at least the date to be present   	string time = split [9] + split [1];  	// +" 0";  	_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  }  else  	_timeOfFix = new DateTime ();  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: if (split [9].Length >= 6) {  	//Require at least the date to be present   	string time = split [9] + split [1];  	// +" 0";  	_timeOfFix = DateTime.ParseExact (time' DateTimeFormats' GPSHandler.NumberFormatEnUs' System.Globalization.DateTimeStyles.AssumeUniversal);  }  else  	_timeOfFix = new DateTime ();  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: if (split [2] == "A")  	_status = StatusEnum.OK;  else  	_status = StatusEnum.Warning;  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: _position = new Coordinate (GPSHandler.GPSToDecimalDegrees (split [5]' split [6])' GPSHandler.GPSToDecimalDegrees (split [3]' split [4]));  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: GPSHandler.dblTryParse (split [7]' out _speed);  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: GPSHandler.dblTryParse (split [8]' out _course);  
Magic Number,SharpGPS.NMEA,GPRMC,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\GPRMC.cs,GPRMC,The following statement contains a magic number: GPSHandler.dblTryParse (split [10]' out _magneticVariation);  
Magic Number,SharpGPS.NMEA,GPRME,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\PGRME.cs,GPRME,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	GPSHandler.dblTryParse (split [1]' out _estHorisontalError);  	GPSHandler.dblTryParse (split [3]' out _estVerticalError);  	GPSHandler.dblTryParse (split [5]' out _estSphericalError);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRME,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\PGRME.cs,GPRME,The following statement contains a magic number: try {  	//Split into an array of strings.  	string[] split = NMEAsentence.Split (new Char[] {  		'''  	});  	GPSHandler.dblTryParse (split [1]' out _estHorisontalError);  	GPSHandler.dblTryParse (split [3]' out _estVerticalError);  	GPSHandler.dblTryParse (split [5]' out _estSphericalError);  }  catch {  }  
Magic Number,SharpGPS.NMEA,GPRME,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\PGRME.cs,GPRME,The following statement contains a magic number: GPSHandler.dblTryParse (split [3]' out _estVerticalError);  
Magic Number,SharpGPS.NMEA,GPRME,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NMEA\PGRME.cs,GPRME,The following statement contains a magic number: GPSHandler.dblTryParse (split [5]' out _estSphericalError);  
Magic Number,SharpGPS.NTRIP,NTRIPClient,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NTRIP\NTRIP.cs,GetSourceTable,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SharpGPS.NTRIP,NTRIPClient,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NTRIP\NTRIP.cs,GetSourceTable,The following statement contains a magic number: while (sckt.Available > 0) {  	byte[] returndata = new byte[sckt.Available];  	sckt.Receive (returndata);  	//Get response  	responseData += System.Text.Encoding.ASCII.GetString (returndata' 0' returndata.Length);  	System.Threading.Thread.Sleep (100);  	//Wait for response  }  
Magic Number,SharpGPS.NTRIP,NTRIPClient,C:\repos\fivepmtechnology_SharpGPS\src\SharpGps\NTRIP\NTRIP.cs,GetSourceTable,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
