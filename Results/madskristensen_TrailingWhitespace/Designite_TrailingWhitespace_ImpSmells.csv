Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TrailingWhitespace,FileHelpers,C:\repos\madskristensen_TrailingWhitespace\src\Helpers\FileHelpers.cs,IsFileSupported,Cyclomatic complexity of the method is 10
Long Parameter List,TrailingWhitespace,RemoveWhitespaceOnSave,C:\repos\madskristensen_TrailingWhitespace\src\Commands\RemoveWhitespaceOnSave.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,TrailingWhitespace,WhitespaceRemoverCommand,C:\repos\madskristensen_TrailingWhitespace\src\Commands\RemoveWhitespaceCommand.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,TrailingWhitespace,WhitespaceBase,C:\repos\madskristensen_TrailingWhitespace\src\Commands\WhitespaceBase.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Statement,TrailingWhitespace,TextviewCreationListener,C:\repos\madskristensen_TrailingWhitespace\src\Commands\TextviewCreationListener.cs,VsTextViewCreated,The length of the statement  "                textView.Properties.GetOrCreateSingletonProperty(() => new RemoveWhitespaceOnSave(textViewAdapter' textView' dte' doc)); " is 120.
Magic Number,TrailingWhitespace,TrailingWhitespaceFormatDefinition,C:\repos\madskristensen_TrailingWhitespace\src\Classifier\ClassificationTypes.cs,TrailingWhitespaceFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 145' 145);
Magic Number,TrailingWhitespace,TrailingWhitespaceFormatDefinition,C:\repos\madskristensen_TrailingWhitespace\src\Classifier\ClassificationTypes.cs,TrailingWhitespaceFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 145' 145);
Magic Number,TrailingWhitespace,TrailingWhitespaceFormatDefinition,C:\repos\madskristensen_TrailingWhitespace\src\Classifier\ClassificationTypes.cs,TrailingWhitespaceFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 145' 145);
Magic Number,TrailingWhitespace,TrailingClassifier,C:\repos\madskristensen_TrailingWhitespace\src\Classifier\Classifier.cs,SetTextView,The following statement contains a magic number: await Task.Delay(100);
Magic Number,TrailingWhitespace,WhitespaceRemoverCommand,C:\repos\madskristensen_TrailingWhitespace\src\Commands\RemoveWhitespaceCommand.cs,Exec,The following statement contains a magic number: if (pguidCmdGroup == new Guid("1496A755-94DE-11D0-8C3F-00C04FC2AAE2") && nCmdID == 64)              {                  ITextBuffer buffer = _view.TextBuffer;                    if (buffer.CheckEditAccess())                  {                      RemoveTrailingWhitespace(buffer);                      return VSConstants.S_OK;                  }              }
Magic Number,TrailingWhitespace,FileHelpers,C:\repos\madskristensen_TrailingWhitespace\src\Helpers\FileHelpers.cs,IsFileSupported,The following statement contains a magic number: try              {                  if (buffer == null || buffer.Properties == null)                      return false;                    // For some reason' the IClassifierProvider gets called twice.                  // Here we check if the value has been stored alewSY so we don't run twice.                  bool isEnabled;                  if (buffer.Properties.TryGetProperty(_propKey' out isEnabled))                      return isEnabled;                    string fileName = buffer.GetFilePath();                    // Check if filename is absolute because when debugging' script files are sometimes dynamically created.                  if (string.IsNullOrWhiteSpace(fileName) || !Path.IsPathRooted(fileName))                      return PersistantReturnValue(buffer' false);                    var patterns = VSPackage.Options.GetIgnorePatterns();                    if (patterns.Any(p => fileName.IndexOf(p' StringComparison.OrdinalIgnoreCase) > -1))                      return PersistantReturnValue(buffer' false);                    if (VSPackage.Options.IgnoreMiscFiles)                  {                      var dte = (DTE2)Package.GetGlobalService(typeof(EnvDTE.DTE));                      if (dte != null && dte.Solution.FindProjectItem(fileName) == null)                          return PersistantReturnValue(buffer' false);                  }                    // Ignore files containing the string <auto-generated> in the first 10 lines                  foreach (var line in buffer.CurrentSnapshot.Lines.Take(10))                  {                      if (line.Length < 200)                      {                          string content = line.GetText();                          if (content.IndexOf("<auto-generated>"' StringComparison.OrdinalIgnoreCase) > -1)                              return PersistantReturnValue(buffer' false);                      }                  }                    return PersistantReturnValue(buffer' true);              }              catch (Exception)              {                  return false;              }
Magic Number,TrailingWhitespace,FileHelpers,C:\repos\madskristensen_TrailingWhitespace\src\Helpers\FileHelpers.cs,IsFileSupported,The following statement contains a magic number: try              {                  if (buffer == null || buffer.Properties == null)                      return false;                    // For some reason' the IClassifierProvider gets called twice.                  // Here we check if the value has been stored alewSY so we don't run twice.                  bool isEnabled;                  if (buffer.Properties.TryGetProperty(_propKey' out isEnabled))                      return isEnabled;                    string fileName = buffer.GetFilePath();                    // Check if filename is absolute because when debugging' script files are sometimes dynamically created.                  if (string.IsNullOrWhiteSpace(fileName) || !Path.IsPathRooted(fileName))                      return PersistantReturnValue(buffer' false);                    var patterns = VSPackage.Options.GetIgnorePatterns();                    if (patterns.Any(p => fileName.IndexOf(p' StringComparison.OrdinalIgnoreCase) > -1))                      return PersistantReturnValue(buffer' false);                    if (VSPackage.Options.IgnoreMiscFiles)                  {                      var dte = (DTE2)Package.GetGlobalService(typeof(EnvDTE.DTE));                      if (dte != null && dte.Solution.FindProjectItem(fileName) == null)                          return PersistantReturnValue(buffer' false);                  }                    // Ignore files containing the string <auto-generated> in the first 10 lines                  foreach (var line in buffer.CurrentSnapshot.Lines.Take(10))                  {                      if (line.Length < 200)                      {                          string content = line.GetText();                          if (content.IndexOf("<auto-generated>"' StringComparison.OrdinalIgnoreCase) > -1)                              return PersistantReturnValue(buffer' false);                      }                  }                    return PersistantReturnValue(buffer' true);              }              catch (Exception)              {                  return false;              }
