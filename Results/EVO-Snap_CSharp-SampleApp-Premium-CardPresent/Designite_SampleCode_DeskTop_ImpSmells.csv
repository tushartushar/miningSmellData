Implementation smell,Namespace,Class,File,Method,Description
Long Method,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has 480 lines of code.
Long Method,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The method has 107 lines of code.
Long Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The method has 125 lines of code.
Long Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The method has 131 lines of code.
Long Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The method has 102 lines of code.
Long Method,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The method has 104 lines of code.
Long Method,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,GetMerchantProfile,The method has 106 lines of code.
Long Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The method has 126 lines of code.
Long Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The method has 116 lines of code.
Long Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The method has 238 lines of code.
Long Method,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has 148 lines of code.
Long Method,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has 194 lines of code.
Complex Method,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,Cyclomatic complexity of the method is 50
Complex Method,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,LoadPersistedConfig,Cyclomatic complexity of the method is 11
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,Cyclomatic complexity of the method is 33
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,Cyclomatic complexity of the method is 35
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,Cyclomatic complexity of the method is 15
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,Cyclomatic complexity of the method is 16
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,Cyclomatic complexity of the method is 18
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKCaptureAll,Cyclomatic complexity of the method is 12
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,Cyclomatic complexity of the method is 16
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,Cyclomatic complexity of the method is 29
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingTransactionResponse,Cyclomatic complexity of the method is 30
Complex Method,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingCaptureResponse,Cyclomatic complexity of the method is 15
Complex Method,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,Cyclomatic complexity of the method is 11
Complex Method,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,GetApplicationData,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,GetMerchantProfile,Cyclomatic complexity of the method is 12
Complex Method,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CmdPerformWebRequest_Click,Cyclomatic complexity of the method is 10
Complex Method,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,Cyclomatic complexity of the method is 12
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorizeAndCapture_Click,Cyclomatic complexity of the method is 11
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorize_Click,Cyclomatic complexity of the method is 17
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,Cyclomatic complexity of the method is 17
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,Cyclomatic complexity of the method is 16
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,Cyclomatic complexity of the method is 14
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,Cyclomatic complexity of the method is 21
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturn_Click,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAdjust_Click,Cyclomatic complexity of the method is 12
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdUndo_Click,Cyclomatic complexity of the method is 16
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdQueryAccount_Click,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,Cyclomatic complexity of the method is 9
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdManageAccountById_Click,Cyclomatic complexity of the method is 9
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,Cyclomatic complexity of the method is 14
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,Cyclomatic complexity of the method is 12
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdForcePost_Click,Cyclomatic complexity of the method is 8
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdMagensa_Click,Cyclomatic complexity of the method is 9
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,processResponse,Cyclomatic complexity of the method is 13
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,AvailableTxnTypes,Cyclomatic complexity of the method is 18
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,Cyclomatic complexity of the method is 9
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetMerchantProfileIds,Cyclomatic complexity of the method is 13
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,Cyclomatic complexity of the method is 22
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,Cyclomatic complexity of the method is 29
Complex Method,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,Cyclomatic complexity of the method is 9
Complex Method,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QBP,Cyclomatic complexity of the method is 10
Complex Method,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,Cyclomatic complexity of the method is 23
Complex Method,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,Cyclomatic complexity of the method is 11
Complex Method,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,Cyclomatic complexity of the method is 29
Complex Method,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,Cyclomatic complexity of the method is 32
Complex Method,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,Cyclomatic complexity of the method is 15
Long Parameter List,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The method has 12 parameters.
Long Parameter List,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The method has 12 parameters.
Long Parameter List,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The method has 7 parameters.
Long Parameter List,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The method has 7 parameters.
Long Parameter List,SampleCode,ResponseDetails,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ResponseDetails,The method has 8 parameters.
Long Parameter List,SampleCode,PersistAndCacheSettings,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,PersistAndCacheSettings,The method has 6 parameters.
Long Parameter List,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CallingForm,The method has 7 parameters.
Long Parameter List,SampleCode.CWSDataServices,ITMSOperations,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSDataServices\Reference.cs,QueryTransactionsDetail,The method has 5 parameters.
Long Parameter List,SampleCode.CWSDataServices,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSDataServices\Reference.cs,QueryTransactionsDetail,The method has 5 parameters.
Long Parameter List,SampleCode.CWSTransactionManagement,ITMSOperations,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSTransactionManagement\Reference.cs,QueryTransactionsDetail,The method has 5 parameters.
Long Parameter List,SampleCode.CWSTransactionManagement,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSTransactionManagement\Reference.cs,QueryTransactionsDetail,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,QueryAccount,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Verify,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Authorize,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,AuthorizeAndCapture,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,ReturnUnlinked,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAll,The method has 7 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAllAsync,The method has 7 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureSelective,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureSelectiveAsync,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,ManageAccount,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,ICwsTransactionProcessing,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Disburse,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,QueryAccount,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Verify,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Authorize,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,AuthorizeAndCapture,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,ReturnUnlinked,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAll,The method has 7 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAllAsync,The method has 7 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureSelective,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureSelectiveAsync,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,ManageAccount,The method has 5 parameters.
Long Parameter List,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Disburse,The method has 5 parameters.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	//MerchantData : http://www.evosnap.com/support/knowledgebase/service-information-data-elements/#merchantprofilemerchantdata " is 124.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	//BankcardMerchantData : http://www.evosnap.com/support/knowledgebase/service-information-data-elements/#bankcardmerchantdata " is 125.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	//ElectronicCheckingMerchantData : http://www.evosnap.com/support/knowledgebase/service-information-data-elements/#electroniccheckingmerchantdata " is 145.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	//StoredValueMerchantData : http://www.evosnap.com/support/knowledgebase/service-information-data-elements/#storedvaluemerchantdata " is 131.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	merchData.TransactionData.BankcardTransactionDataDefaults.CurrencyCode = SampleCode.CWSServiceInformation.TypeISOCurrencyCodeA3.USD; " is 132.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateMerchantProfile,The length of the statement  "	merchData.TransactionData.BankcardTransactionDataDefaults.RequestAdvice = SampleCode.CWSServiceInformation.RequestAdvice.Capable; " is 129.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		//MasterCard : %B5454545454545454^IPCOMMERCE/TESTCARD^1312101013490000000001000880000?;5454545454545454=13121010134988000010? " is 125.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		//MasterCardPurchase : %B5480020605154711^IPCOMMERCE/TESTCARD^1312101100000001000000218000000?;5480020605154711=13121011000017026218? " is 133.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		//MasterCardSigDebit : %B9999989900007723^IPCOMMERCE/TESTCARD^13121015432112345678?;9999989900007723=13121015432112345678? " is 122.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		//The following track includes a track 3 which is possible in Costco American Express cards %B371449635398456^IPCOMMERCE/TESTCARD^1312060523319?;371449635398456=1312060523319?+823156444000? " is 189.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			if (blnIntAVSOverride && cardType != TypeCardType.Maestro)//To be able to override AVS results the merchant will have to get permission from EVO payments " is 153.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "				//BCtransaction.TenderData.CardSecurityData.InternationalAVSOverride.AVSRejectCodes = "NI"; //EVO payments and merchant will agree on what is populated here " is 156.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		BCtransaction.CustomerData.BillingData.InternationalAddress.CountryCode = CwsTransactionProcessing.TypeISOCountryCodeA3.USA; " is 124.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "		BCtransaction.CustomerData.ShippingData.InternationalAddress.CountryCode = CwsTransactionProcessing.TypeISOCountryCodeA3.USA; " is 125.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "	//    if (BCtransaction.TenderData.CardSecurityData == null) { BCtransaction.TenderData.CardSecurityData = new CardSecurityData(); } " is 132.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "	//    BCtransaction.TenderData.CardSecurityData.IdentificationInformation = "A52AFB9FB5B283A6C8C38377A6CB1D2C63CC59D3B0B29D2A0DF1C9A54F123D37536756C77B4A9B75E51BF028B51971E81C8B221533A3AFF4"; " is 191.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "	//    BCtransaction.TenderData.SecurePaymentAccountData = "13A7783BD91D0A05712606644778CF8F34397EAC2AB26676A52A380350CAA07E"; " is 125.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "	if (Convert.ToBoolean (ConfigurationSettings.AppSettings ["ProcessAsBankcardTransaction_Pro"]) | _BCPPO != null)//Determines if additional Pro objects should be used. " is 166.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			PCL = (PurchaseCardLevel)Enum.Parse (typeof(PurchaseCardLevel)' ConfigurationSettings.AppSettings ["Pro_PurchaseCardLevel"]); " is 125.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                        The schema requires BaseAmt and OrderNum for level 2.  Amt' Quantity' SeqNum' TaxIncludedInd' and UnitPrice are all required for level 3." is 137.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                        Set TxnData.CmrclCardReq to “Enable” since some providers get that value and will return the card type in the response in CmrclCardResp.  Not all providers do this but they should always set it.  " is 194.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "					BCtransaction.CustomerData.ShippingData.Address.CountryCode = SampleCode.CwsTransactionProcessing.TypeISOCountryCodeA3.USA; " is 123.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "				//Level 3 data includes Level 2 data plus line items details. in this case your application should handle calling the following " is 127.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			//Note: Any time recurring payments are used for any BCP service MultiClearSeqNum should be 1 for the first payment and any number  " is 130.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			//They can always send 2 for the additional transactions if they want. Sending the 1 sends a code to the service provider that this  " is 131.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			//is the first payment and CVData and AVSData are expected.  Sending greater than 1 means that the lack of CVData and AVSData is OK  " is 131.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			//Any time BillPayInd is set to either “Deferred_Billing”' “Installment” or “Recurring”' CustPresentFlag should be set to “Bill_Payment" " is 136.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "			if (BCtransaction.InterchangeData.BillPayment == BillPayment.DeferredBilling | BCtransaction.InterchangeData.BillPayment == BillPayment.Installment | BCtransaction.InterchangeData.BillPayment == BillPayment.Recurring) " is 217.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                    TenderData/EcommerceSecurityData/TokenInd is required and must be set to VPAS_3D_Secure_V100 or VPAS_3D_Secure_V102.  Even if the merchant has a newer version' either setting will work for any version." is 201.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                    TenderData/EcommerceSecurityData/TokenInd is required and must be set to Attempted_Card_Unsupported or Attempted_Service_Unavailable." is 133.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                    TxnData/EcommerceData/PayTypeInd is required and must be set to Non_authenticated_Security_Without_SSL or Non_authenticated_Security_With_SSL." is 142.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                    TenderData/EcommerceSecurityData/TokenInd is required and must be set to Attempted_Card_Unsupported' Attempted_Service_Unavailable' or UCAF_Without_Data." is 153.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The length of the statement  "                    TxnData/EcommerceData/PayTypeInd is required and must be set to either Non_authenticated_Security_Without_SSL or Non_authenticated_Security_With_SSL." is 149.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetLevel2Data,The length of the statement  "	//L2.DestinationCountryCode = TypeISOCountryCodeA3.USA; //Optional : Specifies the destination country code of the goods being shipped.  " is 135.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetLevel2Data,The length of the statement  "	//Conditional : Indicates tax exempt number for the transaction. Conditional' required if TaxExemptInd = 'Exempt' or 'Not_Exempt_Tax_Info_Provided'. " is 148.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetLevel2Data,The length of the statement  "		//The software can do itemized taxes with Level 2' but is optional. This would be needed for Canadian taxes if you want to have separate totals for the various taxes. " is 166.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetLevel3Data,The length of the statement  "	//Required : Line item total cost. See DiscountInd and TaxInd to determine whether this amount is inclusive of DiscountAmt and Tax.  " is 131.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetElectronicCheckTxnData,The length of the statement  "	//Supported SEC Codes are PPD' CCD' TEL' WEB and BOC.  CCD and PPD transactions can be either credit or debit.  TEL' WEB and BOC are debit transactions only. " is 157.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._ApplicationLocation = (SampleCode.CWSServiceInformation.ApplicationLocation)Enum.Parse (typeof(SampleCode.CWSServiceInformation.ApplicationLocation)' ConfigurationSettings.AppSettings ["ApplicationLocation"]); " is 212.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._PINCapability = (SampleCode.CWSServiceInformation.PINCapability)Enum.Parse (typeof(SampleCode.CWSServiceInformation.PINCapability)' ConfigurationSettings.AppSettings ["PINCapability"]); " is 188.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._ReadCapability = (SampleCode.CWSServiceInformation.ReadCapability)Enum.Parse (typeof(SampleCode.CWSServiceInformation.ReadCapability)' ConfigurationSettings.AppSettings ["ReadCapability"]); " is 192.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._EncryptionType = (EncryptionType)Enum.Parse (typeof(EncryptionType)' ConfigurationSettings.AppSettings ["EncryptionType"]); " is 126.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._IndustryType = (SampleCode.CWSServiceInformation.IndustryType)Enum.Parse (typeof(SampleCode.CWSServiceInformation.IndustryType)' ConfigurationSettings.AppSettings ["IndustryType"]); " is 184.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._CustomerPresent = (SampleCode.CWSServiceInformation.CustomerPresent)Enum.Parse (typeof(SampleCode.CWSServiceInformation.CustomerPresent)' ConfigurationSettings.AppSettings ["CustomerPresent"]); " is 196.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._RequestACI = (SampleCode.CWSServiceInformation.RequestACI)Enum.Parse (typeof(SampleCode.CWSServiceInformation.RequestACI)' ConfigurationSettings.AppSettings ["RequestACI"]); " is 176.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,getIndustryType,The length of the statement  "		i._EntryMode = (SampleCode.CWSServiceInformation.EntryMode)Enum.Parse (typeof(SampleCode.CWSServiceInformation.EntryMode)' ConfigurationSettings.AppSettings ["EntryMode"]); " is 172.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,LoadPersistedConfig,The length of the statement  "				persistedAndCached = "ApplicationProfileId : " + helper.ApplicationProfileId + "\r\nServiceId : " + helper.ServiceID + "\r\nWorkflowId : " + helper.WorkflowID + "\r\nMerchantProfileId : " + helper.MerchantProfileId + strEncryptedIdentityToken; " is 243.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,LoadPersistedConfig,The length of the statement  "			persistedAndCached = "ApplicationProfileId : " + helper.ApplicationProfileId + "\r\nServiceId : " + helper.ServiceID + "\r\nWorkflowId : " + helper.WorkflowID + "\r\nMerchantProfileId : " + helper.MerchantProfileId; " is 215.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,LoadPersistedConfig,The length of the statement  "		//_message += "No persisted values found in '[SK]_TransactionProcessing.config'. Initializing application for the first time"; " is 126.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,LoadPersistedConfig,The length of the statement  "		persistedAndCached = "ApplicationProfileId : " + helper.ApplicationProfileId + "\r\nServiceId : " + helper.ServiceID + "\r\nWorkflowId : " + helper.WorkflowID + "\r\nMerchantProfileId : " + helper.MerchantProfileId; " is 215.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SandboxTestCardData,The length of the statement  "		TrackDataFromMSRVal = "%B4111111111111111^EVOSNAP/TESTCARD^15121010454500415000010?;4111111111111111=15121010454541500010?"; " is 124.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SandboxTestCardData,The length of the statement  "		TrackDataFromMSRVal = "%B5454545454545454^EVOSNAP/TESTCARD^1512101013490000000001000880000?;5454545454545454=15121010134988000010?"; " is 132.
Long Statement,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SandboxTestCardData,The length of the statement  "		TrackDataFromMSRVal = "%B6011000995504101^EVOSNAP/TESTCARD^15121011000627210201?;6011000995504101=10121011000627210201?"; " is 121.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CheckTokenExpire,The length of the statement  "			Exception e = new Exception ("Unable to Refresh a new Token\r\nError Message : " + ex.Message + "\r\n\r\nUnable to Refresh a new Token\r\nError Message : " + strErrorId + " : " + strErrorMessage); " is 196.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,Encrypt,The length of the statement  "	// Now we need to turn the resulting byte array into a string. A common mistake would be to use an Encoding class for that. " is 123.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,Decrypt,The length of the statement  "	// Now we need to turn the resulting byte array into a string. A common mistake would be to use an Encoding class for that. " is 123.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,Decrypt,The length of the statement  "	// Create a CryptoStream through which we are going to be pumping our data. CryptoStreamMode.Write means that we are going to be writing data to the stream  " is 155.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,Decrypt,The length of the statement  "	// and there is no more data coming in' and it is now a good time to remove the padding and finalize the decryption process.  " is 124.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.AuthorizeAndCapture (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceIdOrWorkflowId)); " is 141.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "				_message += "The transaction was approved for " + BCR.Amount + " which is an amount not equal to the requested amount of " + _BCtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 226.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.Authorize (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceIdOrWorkflowId)); " is 131.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "				_message += "The transaction was approved for " + BCR.Amount + " which is an amount not equal to than the requested amount of " + _BCtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 231.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response = Cwsbc.CaptureAll (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose); " is 148.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.CaptureAllAsync (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose)); " is 157.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response = Cwsbc.CaptureSelective (_sessionToken' _TransactionIds' _CaptureDifferenceData' _applicationProfileId' _serviceId); " is 127.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.CaptureSelectiveAsync (_sessionToken' _TransactionIds' _CaptureDifferenceData' _applicationProfileId' _serviceId)); " is 136.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.ReturnUnlinked (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 124.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_Response.Add (Cwsbc.QueryAccount (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 122.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "				ResponseDetails RDN = new ResponseDetails (0.00M' r' _TT.ToString ()' _serviceIdOrWorkflowId' _merchantProfileId' true' TypeCardType.NotSet' ""); " is 145.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransaction,The length of the statement  "			_message += "A timeout has occured. A call to 'RequestTransaction' was made to obtain the transactions that should have been returned. Your code will need to reconcile transactions."; " is 183.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.AuthorizeAndCapture (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceIdOrWorkflowId)); " is 141.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "				_message += "The transaction was approved for " + BCR.Amount + " which is an amount not equal to the requested amount of " + _BCtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 226.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.Authorize (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceIdOrWorkflowId)); " is 131.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "				_message += "The transaction was approved for " + BCR.Amount + " which is an amount not equal to than the requested amount of " + _BCtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 231.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response = Cwsbc.CaptureAll (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose); " is 148.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.CaptureAllAsync (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose)); " is 157.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response = Cwsbc.CaptureSelective (_sessionToken' _TransactionIds' _CaptureDifferenceData' _applicationProfileId' _serviceId); " is 127.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.CaptureSelectiveAsync (_sessionToken' _TransactionIds' _CaptureDifferenceData' _applicationProfileId' _serviceId)); " is 136.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.ReturnUnlinked (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 124.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_Response.Add (Cwsbc.QueryAccount (_sessionToken' _BCtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 122.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "				ResponseDetails RDN = new ResponseDetails (0.00M' r' _TT.ToString ()' _serviceIdOrWorkflowId' _merchantProfileId' true' TypeCardType.NotSet' ""); " is 145.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBCPTransactionPro,The length of the statement  "			_message += "A timeout has occured. A call to 'RequestTransaction' was made to obtain the transactions that should have been returned. Your code will need to reconcile transactions."; " is 183.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The length of the statement  "	//             * NOTE : "NotSet" TypeCardType is not a valid card type to transmit in the BankcardTransaction Object. If returned the  " is 133.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The length of the statement  "	//             * match as the CardTypeLookup may need additional validation logic added to it. Never log the PAN as this would  " is 126.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "			_Response.Add (Cwsbc.Authorize (_sessionToken' _ECKtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 120.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "				_message += "The transaction was approved for " + ECKR.Amount + " which is an amount not equal to than the requested amount of " + _ECKtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 233.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "			_Response = Cwsbc.CaptureAll (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose); " is 148.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "			_Response.Add (Cwsbc.CaptureAllAsync (_sessionToken' _CaptureDifferenceData' _BatchIds' _applicationProfileId' _merchantProfileId' _serviceId' _ForceClose)); " is 157.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "			_Response.Add (Cwsbc.QueryAccount (_sessionToken' _ECKtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 123.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "				ResponseDetails RDN = new ResponseDetails (0.00M' r' _TT.ToString ()' _serviceId' _merchantProfileId' true' TypeCardType.NotSet' ""); " is 133.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKTransaction,The length of the statement  "			_message += "A timeout has occured. A call to 'RequestTransaction' was made to obtain the transactions that should have been returned. Your code will need to reconcile transactions."; " is 183.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKCaptureAll,The length of the statement  "			_Response = Cwsbc.CaptureAll (_sessionToken' _CaptureDifferenceData' null' _applicationProfileId' _merchantProfileId' _serviceId' false); " is 137.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKCaptureAll,The length of the statement  "			_Response.Add (Cwsbc.CaptureAllAsync (_sessionToken' _CaptureDifferenceData' null' _applicationProfileId' _merchantProfileId' _serviceId' false)); " is 146.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessECKCaptureAll,The length of the statement  "				ResponseDetails RDN = new ResponseDetails (0.00M' r' _TT.ToString ()' _serviceIdOrWorkflowId' _merchantProfileId' true' TypeCardType.NotSet' ""); " is 145.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "			_Response.Add (Cwsbc.Authorize (_sessionToken' _SVAtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 120.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "				_message += "The transaction was approved for " + SVR.Amount + " which is an amount not equal to than the requested amount of " + _SVAtransaction.TransactionData.Amount + ". Please provide alternate payment to complete transaction"; " is 232.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "			_Response.Add (Cwsbc.ManageAccount (_sessionToken' _SVAtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 124.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "			_Response.Add (Cwsbc.ReturnUnlinked (_sessionToken' _SVAtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 125.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "			_Response.Add (Cwsbc.QueryAccount (_sessionToken' _SVAtransaction' _applicationProfileId' _merchantProfileId' _serviceId)); " is 123.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "				ResponseDetails RDN = new ResponseDetails (0.00M' r' _TT.ToString ()' _serviceId' _merchantProfileId' true' TypeCardType.NotSet' ""); " is 133.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessSVATransaction,The length of the statement  "			_message += "A timeout has occured. A call to 'RequestTransaction' was made to obtain the transactions that should have been returned. Your code will need to reconcile transactions."; " is 183.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,RequestTransaction,The length of the statement  "	//The RequestTransaction() operation allows for the retrieval of any transaction matching the supplied tender data. This is useful in situations  " is 144.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "	//Note : IMPORTANT Always verify the approved amount was the same as the requested approval amount for "AuthorizeAndCapture" as well as "Authorize"  " is 147.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nTransactionId : " + _BCResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 173.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nStatus Code : " + _BCResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nStatus Message : " + _BCResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 204.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nApprovalCode : " + _BCResponse.ApprovalCode //A value returned when a transaction is approved. This value should be printed on the receipt' and also recorded for every off-line transaction' such as a voice authorization. This same data element and value must be provided during settlement. Required. " is 306.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nAmount : " + _BCResponse.Amount//Specifies the authorization amount of the transaction. This is the actual amount authorized. " is 132.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nTransactionId : " + _BCResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 173.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nStatus Code : " + _BCResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "				+ "\r\nStatus Message : " + _BCResponse.StatusMessage//Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 203.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nTransactionId : " + _BCResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 173.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		//+ "\r\nPaymentAccountDataToken : " + _BCResponse.PaymentAccountDataToken //If tokenization purchased this field represents the actual token returned in the transaction for future use. " is 185.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nStatus Code : " + _BCResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nStatus Message : " + _BCResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 204.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nApprovalCode : " + _BCResponse.ApprovalCode //A value returned when a transaction is approved. This value should be printed on the receipt' and also recorded for every off-line transaction' such as a voice authorization. This same data element and value must be provided during settlement. Required. " is 306.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nAmount : " + _BCResponse.Amount //Specifies the authorization amount of the transaction. This is the actual amount authorized. " is 133.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		//+ "\r\nAVSResult ActualResult : " + _BCResponse.AVSResult.ActualResult //Specifies the actual result of AVS from the Service Provider. " is 136.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		//+ "\r\nAVSResult AddressResult : " + _BCResponse.AVSResult.AddressResult //Specifies the result of AVS as it pertains to Address matching " is 139.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		//+ "\r\nAVSResult PostalCodeResult : " + _BCResponse.AVSResult.PostalCodeResult //Specifies the result of AVS as it pertains to Postal Code matching " is 149.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nCVResult : " + _BCResponse.CVResult //Response code returned by the card issuer indicating the result of Card Verification (CVV2/CVC2/CID). " is 146.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nPrepaidCard : " + _BCResponse.PrepaidCard // Enumeration of NotSet' Yes' No.  Indicates if this is a pre-paid card " is 121.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nServiceTransactionId : " + _BCResponse.ServiceTransactionId//+ "\r\nSettlementDate : " + _BCResponse.SettlementDate //Settlement date. Conditional' if present in the authorization response' this same data element and value must be provided during settlement " is 264.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nTransactionId : " + _BCResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 173.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nStatus Code : " + _BCResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nStatus Message : " + _BCResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 204.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardTransactionResponsePro,The length of the statement  "		+ "\r\nCVResult : " + _BCResponse.CVResult //Response code returned by the card issuer indicating the result of Card Verification (CVV2/CVC2/CID). " is 146.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nCash Back Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.CashBackTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.CashBackTotals.NetAmount; " is 224.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nNet Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.NetTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.NetTotals.NetAmount; " is 208.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nPINDebit Return Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.PINDebitReturnTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.PINDebitReturnTotals.NetAmount; " is 242.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nPINDebit Sale Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.PINDebitSaleTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.PINDebitSaleTotals.NetAmount; " is 236.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nReturn Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.ReturnTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.ReturnTotals.NetAmount; " is 217.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nSale Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.SaleTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.SaleTotals.NetAmount; " is 211.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessBankcardCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nVoid Totals \r\n  Count : " + _BCResponse.TransactionSummaryData.VoidTotals.Count + "\r\n  Net Amount : " + _BCResponse.TransactionSummaryData.VoidTotals.NetAmount; " is 211.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nCredit Totals \r\n  Count : " + _ECKResponse.SummaryData.CreditTotals.Count + "\r\n  Net Amount : " + _ECKResponse.SummaryData.CreditTotals.NetAmount; " is 197.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nDebit Totals \r\n  Count : " + _ECKResponse.SummaryData.DebitTotals.Count + "\r\n  Net Amount : " + _ECKResponse.SummaryData.DebitTotals.NetAmount; " is 194.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nNet Totals \r\n  Count : " + _ECKResponse.SummaryData.NetTotals.Count + "\r\n  Net Amount : " + _ECKResponse.SummaryData.NetTotals.NetAmount; " is 188.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingCaptureResponse,The length of the statement  "				strResponseMessage = strResponseMessage + "\r\nVoid Totals \r\n  Count : " + _ECKResponse.SummaryData.VoidTotals.Count + "\r\n  Net Amount : " + _ECKResponse.SummaryData.VoidTotals.NetAmount; " is 191.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "	//Note : IMPORTANT Always verify the approved amount was the same as the requested approval amount for "AuthorizeAndCapture" as well as "Authorize"  " is 147.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nTransactionId : " + _SVAResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nStatus Code : " + _SVAResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 175.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nStatus Message : " + _SVAResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 205.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nApprovalCode : " + _SVAResponse.ApprovalCode //A value returned when a transaction is approved. This value should be printed on the receipt' and also recorded for every off-line transaction' such as a voice authorization. This same data element and value must be provided during settlement. Required. " is 307.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nAmount : " + _SVAResponse.Amount//Specifies the authorization amount of the transaction. This is the actual amount authorized. " is 133.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nTransactionId : " + _SVAResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nStatus Code : " + _SVAResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 175.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "				+ "\r\nStatus Message : " + _SVAResponse.StatusMessage//Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 204.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nTransactionId : " + _SVAResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		//+ "\r\nPaymentAccountDataToken : " + _BCResponse.PaymentAccountDataToken //If tokenization purchased this field represents the actual token returned in the transaction for future use. " is 185.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nStatus Code : " + _SVAResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 175.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nStatus Message : " + _SVAResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 205.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nApprovalCode : " + _SVAResponse.ApprovalCode //A value returned when a transaction is approved. This value should be printed on the receipt' and also recorded for every off-line transaction' such as a voice authorization. This same data element and value must be provided during settlement. Required. " is 307.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nAmount : " + _SVAResponse.Amount //Specifies the authorization amount of the transaction. This is the actual amount authorized. " is 134.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		//+ "\r\nAVSResult ActualResult : " + _BCResponse.AVSResult.ActualResult //Specifies the actual result of AVS from the Service Provider. " is 136.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		//+ "\r\nAVSResult AddressResult : " + _BCResponse.AVSResult.AddressResult //Specifies the result of AVS as it pertains to Address matching " is 139.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		//+ "\r\nAVSResult PostalCodeResult : " + _BCResponse.AVSResult.PostalCodeResult //Specifies the result of AVS as it pertains to Postal Code matching " is 149.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nCVResult : " + _SVAResponse.CVResult //Response code returned by the card issuer indicating the result of Card Verification (CVV2/CVC2/CID). " is 147.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nServiceTransactionId : " + _SVAResponse.ServiceTransactionId//+ "\r\nSettlementDate : " + _BCResponse.SettlementDate //Settlement date. Conditional' if present in the authorization response' this same data element and value must be provided during settlement " is 265.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nTransactionId : " + _SVAResponse.TransactionId //The unique id of the transaction. TransactionId is required for all subsequent transactions such as Return' Undo' etc. " is 174.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nWorkflowId : " + _Response.WorkflowId + "\r\nMerchantProfileId : " + _Response.MerchantProfileId //Must be stored with the TransactionId in order to identify which merchant sent which transaction. Required to support multi-merchant. " is 239.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nStatus Code : " + _SVAResponse.StatusCode //Status code generated by the Service Provider. This code should be displayed to the user as verification of the transaction. " is 175.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nStatus Message : " + _SVAResponse.StatusMessage //Explains the StatusCode which is generated by the Service Provider. This message should be displayed to the user as verification of the transaction. " is 205.
Long Statement,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessStoredValueTransactionResponse,The length of the statement  "		+ "\r\nCVResult : " + _SVAResponse.CVResult //Response code returned by the card issuer indicating the result of Card Verification (CVV2/CVC2/CID). " is 147.
Long Statement,SampleCode,ResponseDetails,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ToString,The length of the statement  "	return "<Orig Type:" + TransactionType + ">" + TxnAmount + " " + Response.TransactionId + " [Status : " + Response.Status + "]" //+ " [Status Code : " + Response.StatusCode + "]" " is 178.
Long Statement,SampleCode,ResponseDetails,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ToString,The length of the statement  "	+ " [Capture State : " + Response.CaptureState + "]" + " [Transaction State : " + Response.TransactionState + "] " + DateTime.Now; " is 130.
Long Statement,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdUseValues_Click,The length of the statement  "	if (TxtMagnePrintData.Text.Length < 1 | TxtDukptKeySerialNumber.Text.Length < 1 | TxtTrack2EncryptedData.Text.Length < 1 | TxtMagnePrintStatus.Text.Length < 1) { " is 161.
Long Statement,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdPopulateWithTestValues_Click,The length of the statement  "		TxtTrackInformation.Text = "%B5499990001006781^TESTCARD/MC/NDCECOMMERCE^15120000000000000000?;5499990001006781=15120000000000000000?|0600|AE9F6AE3EBD5A16B0369884F57EAC1C5DA7C4BD34004BA81421E9BF7CA3C0F0494264E258128C078DF377F6E453A70E31B29DD624A02D41D9B04A5D575F2BE9FC927F06D85FADAE8|C126841EDE220A5FA3A1E147A6A83F813D53644E6082195DBDD29203AAD8B38447180B9E4902CE1B||61403000|914CEA90C623ED14B9DE35CDB3F05F74AC5ECD8F90A8C1A8AA6945C0895E05A718437CEBDCD8C1AA020FD4F1E4EE99E3D74A5850AB9034B7|B1CBB65090413AA|D956BFF98750C117|9011880B1CBB6500006B|1422||1000"; " is 553.
Long Statement,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdPopulateWithTestValues_Click,The length of the statement  "		TxtTrackInformation.Text = "Card Encode Type = ISO\r\n\r\nDUKPT Key Serial Number = 9010010B0C247200001F\r\n\r\nTrack 1 Encrypted = CF BD 82 96 5A 66 FF C8 8D 51 2C 8D 1C 4B 1D B6 7C 45 5B 6C 1E 36 17 6A 20 26 BF 27 94 2F C5 71 7D 89 B1 BE A7 9B 88 14 26 47 9C 51 FA 30 1C 2D 99 F6 83 78 A0 66 4C 0D 79 6A 08 36 95 F6 1F 30 \r\n\r\nTrack 2 Encrypted = EA D1 C2 F9 6D DE 13 1B 35 6B 2C 6C 98 25 D3 68 C9 C6 F7 26 84 75 72 FC BC 78 81 18 C4 9F 46 F7 87 6E A8 7A 71 75 E4 7A \r\n\r\nTrack 3 Encrypted = \r\n\r\nMagnePrint Status (hex) = 00304061\r\n\r\nMagnePrint Data (hex) = A3 63 34 A6 4D C8 A5 35 67 EE 0F 28 AD B6 5E EB F1 5D 2B 22 AB 39 2F C2 DC 79 E3 4A A4 90 C3 6E 6E C1 90 A1 F3 E5 19 63 8F CC AA F0 37 23 CA CA 05 84 43 1C AE 3E 1B B1 \r\n\r\nDevice Serial Number = B0C2472071812AA\r\n\r\nTrack 1 Masked = %B4111000010001111^IPCOMMERCE/TESTCARD^13120000000000000000000?\r\n\r\nTrack 2 Masked = ;4111000010001111=13120000000000000000?\r\n\r\nEncrypted Session ID (Hex) = 14 1B 21 95 AB 89 D8 C9\r\n"; " is 1006.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,GetApplicationData,The length of the statement  "		MessageBox.Show ("Unable to pull application data for persisted ApplicationProfileId in the file '[SK]_applicationProfileId.config'"); " is 134.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,SaveApplicationData,The length of the statement  "		Result = MessageBox.Show ("The following will attempt to overwrite an existing ApplicationProfileId. Do you want to continue?"' "Overwrite"' MessageBoxButtons.OKCancel); " is 169.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,SaveApplicationData,The length of the statement  "		string strApplicationProfileId = ((SampleCode_DeskTop)(Owner)).Helper.Cwssic.SaveApplicationData (_strSessionToken' AD); " is 120.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,SaveApplicationData,The length of the statement  "		MessageBox.Show ("ApplicationData successfully saved. Your application should persist and cache the ApplicationProfileId returned. " + "This ApplicationProfileID will be used for all subsequent transaction processing and does not require a re-saving of application data in the future. " + "\r\n\r\nFor now' the values have been saved in a text file' which is located" + " in the same folder as the executing application '[SK]_applicationProfileId.config'"); " is 457.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,cmdPopulateTestValues_Click,The length of the statement  "	MessageBox.Show ("Please note that the following values are generic. Depending on the scope of your integration the following values may " + "change. Please contact your solution consultant with any questions."); " is 212.
Long Statement,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,lnkManageApplicationData_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/"); " is 123.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CallingForm,The length of the statement  "		if (_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001") " is 199.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,SaveMerchantInformation,The length of the statement  "		MerP.MerchantData.Address.StateProvince = (TypeStateProvince)Enum.Parse (typeof(TypeStateProvince)' txtStateProvince.Text); " is 123.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,SaveMerchantInformation,The length of the statement  "	((SampleCode_DeskTop)(Owner)).Helper.Cwssic.SaveMerchantProfiles (_strSessionToken' _strServiceID' TenderType.Credit' MPList); " is 126.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,DeleteMerchProfile,The length of the statement  "	Result = MessageBox.Show ("The action will attempt to delete the profile \r\n\r\n     '" + profileId + "' \r\n\r\nDo you want to continue?"' "Overwrite"' MessageBoxButtons.OKCancel); " is 182.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,DeleteMerchProfile,The length of the statement  "	((SampleCode_DeskTop)(Owner)).Helper.Cwssic.DeleteMerchantProfile (_strSessionToken' cboAvailableProfiles.Text' _strServiceID' TenderType.Credit); " is 146.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,IsMerchantProfileInitialized,The length of the statement  "	if (((SampleCode_DeskTop)(Owner)).Helper.Cwssic.IsMerchantProfileInitialized (_strSessionToken' _strServiceID' cboAvailableProfiles.Text' TenderType.Credit)) { " is 159.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,GetMerchantProfile,The length of the statement  "	MerchantProfile merchantProfile = ((SampleCode_DeskTop)(Owner)).Helper.Cwssic.GetMerchantProfile (_strSessionToken' cboAvailableProfiles.Text' _strServiceID' TenderType.Credit); " is 177.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,GetMerchantProfileIds,The length of the statement  "	List<string> merchantProfileIds = ((SampleCode_DeskTop)(Owner)).Helper.Cwssic.GetMerchantProfileIds (_strSessionToken' _strServiceID' TenderType.Credit); " is 153.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CmdPerformWebRequest_Click,The length of the statement  "			MessageBox.Show ("In general it's better to use the 'GetMerchantProfileIds' first and then to use 'GetMerchantProfile' to manage a merchant account."); " is 151.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CmdPerformWebRequest_Click,The length of the statement  "			MessageBox.Show ("The GetMerchantProfilesByProfileId returns a list of profiles which this page cannot currently disply. Please use GetMerchantProfile instead."); " is 162.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The length of the statement  "	MessageBox.Show ("Please note that the following values are generic. Depending on the scope of your integration the following values may change. Please contact your solution consultant with any questions."); " is 207.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The length of the statement  "	if (_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001") { " is 201.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The length of the statement  "		if (_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001") " is 199.
Long Statement,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,lnkManageMerchantData_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/TransactionProcessing/CWS/Developer_Guide/2.0.18/Implementation/PreparingTheAppToTransact/ManagingMerchantProfiles/index.aspx"); " is 187.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdSignOnWithToken_Click,The length of the statement  "	//The SignOn() operation facilitates the authentication of identity tokens and the exchange of session tokens during application  " is 128.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdRetrieveServiceInformation_Click,The length of the statement  "			MessageBox.Show ("Unable to RetrieveServiceInformation\r\nError Message : " + ex.Message' "RetrieveServiceInformation Failed"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 173.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdSaveApplicationConfiguration_Click,The length of the statement  "	/*The second step in preparing the application to transact is to retrieve' update (if necessary)' and save the appropriate " is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdSaveApplicationConfiguration_Click,The length of the statement  "              * characteristics and configuration information associated with your payment-enabled application. This is a one-time event " is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorizeAndCapture_Click,The length of the statement  "			processResponse (Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked)); " is 221.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorizeAndCapture_Click,The length of the statement  "			processResponse (Helper.ProcessECKTransaction (TransactionType.Authorize' ECKTransaction' null' null' null' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 161.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorize_Click,The length of the statement  "			processResponse (Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked)); " is 211.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorize_Click,The length of the statement  "			if (((ResponseDetails)(itemChecked)).TransactionType != TransactionType.QueryAccount.ToString () | ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.QueryAccount.ToString ()) { " is 194.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorize_Click,The length of the statement  "				processResponse (Helper.ProcessECKTransaction (TransactionType.Authorize' ECKTransaction' null' null' null' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 161.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAuthorize_Click,The length of the statement  "			processResponse (Helper.ProcessSVATransaction (TransactionType.Authorize' SVATransaction' null' null' null' null' ChkAcknowledge.Checked)); " is 139.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,The length of the statement  "					//Let's demonstrate capturing two multipartialCaptures. Note that multipartialCapture requries the BankcarCapturePro() object " is 125.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCDifferenceData' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 192.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCDifferenceData' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 192.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCDifferenceData' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 192.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCapture_Click,The length of the statement  "				processResponse (Helper.ProcessSVATransaction (TransactionType.Capture' null' null' SVDifferenceData' null' null' ChkAcknowledge.Checked)); " is 139.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "				if (((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Authorize.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.ReturnById.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Return.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Adjust.ToString ()) { " is 370.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "				//The following would only be set if a different amount than what was originally authorized needs to be captured. So for example a tip. " is 135.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "					processResponse (Helper.ProcessECKCaptureAll (TransactionType.CaptureAllAsync' captures' ChkAcknowledge.Checked' false)); " is 121.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.CaptureAllAsync' null' null' null' null' null' null' null' captures' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 192.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.CaptureAll' null' null' null' null' null' null' null' captures' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 187.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "				processResponse (Helper.ProcessECKTransaction (TransactionType.CaptureAllAsync' null' null' null' null' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 157.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The length of the statement  "				processResponse (Helper.ProcessECKTransaction (TransactionType.CaptureAll' null' null' null' null' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 152.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The length of the statement  "	//The CaptureSelective() operation is used to capture a specific list of transactions that have been successfully authorized. " is 125.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The length of the statement  "				if (((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Authorize.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.ReturnById.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Return.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Adjust.ToString ()) { " is 370.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The length of the statement  "				//The following would only be set if a different amount than what was originally authorized needs to be captured. So for example a tip. " is 135.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The length of the statement  "				processResponse (Helper.ProcessBCPTransaction (TransactionType.CaptureSelectiveAsync' null' null' null' null' null' null' transactionIDs' captures' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 208.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The length of the statement  "				processResponse (Helper.ProcessBCPTransaction (TransactionType.CaptureSelective' null' null' null' null' null' null' transactionIDs' captures' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 203.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				//NOTE : Please note that in the case of some Service Providers AuthorizeAndCapture is not supported for ReturnById. Use Authorize Instead " is 138.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				Result = MessageBox.Show ("Would you like to return the amount originally captured?"' "Amount to Return"' MessageBoxButtons.YesNo); " is 131.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.ReturnById' null' null' null' BCRDifferenceData' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 196.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "					if (((ResponseDetails)(itemChecked)).TransactionType != TransactionType.AuthorizeAndCapture.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Capture.ToString ()) { " is 197.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				Result = MessageBox.Show ("Would you like to return the amount originally captured?"' "Amount to Return"' MessageBoxButtons.YesNo); " is 131.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.ReturnById' null' null' null' BCRDifferenceData' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 196.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				response = Helper.ProcessSVATransaction (TransactionType.AuthorizeAndCapture' SVtransaction' null' null' null' null' ChkAcknowledge.Checked); " is 141.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				//Now in ordert to process a ReturnById we must first Capture the transaction. This can be done with CaptureAll or CaptureSelective. " is 132.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				response = Helper.ProcessBCPTransaction (TransactionType.CaptureAll' null' null' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked); " is 176.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturnById_Click,The length of the statement  "				response = Helper.ProcessSVATransaction (TransactionType.ReturnById' null' null' null' SVRDifferenceData' null' ChkAcknowledge.Checked); " is 136.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturn_Click,The length of the statement  "	//The Return() operation is used to return funds to a payment account without associating the return with a specific transaction that has been previously captured. " is 163.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturn_Click,The length of the statement  "			processResponse (Helper.ProcessBCPTransaction (TransactionType.Return' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 188.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdReturn_Click,The length of the statement  "			processResponse (Helper.ProcessSVATransaction (TransactionType.Return' SVtransaction' null' null' null' null' ChkAcknowledge.Checked)); " is 135.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAdjust_Click,The length of the statement  "		if (((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Authorize.ToString () & ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.AuthorizeAndCapture.ToString ()) { " is 198.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdAdjust_Click,The length of the statement  "				processResponse (Helper.ProcessBCPTransaction (TransactionType.Adjust' null' null' null' null' aTransaction' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 187.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdUndo_Click,The length of the statement  "	//The Undo() operation is used to void (Credit Card) or reverse (PIN Debit) a transaction that has been previously authorized. " is 126.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdUndo_Click,The length of the statement  "				processResponse (Helper.ProcessBCPTransaction (TransactionType.Undo' null' null' null' null' null' uTransaction' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 185.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdUndo_Click,The length of the statement  "				processResponse (Helper.ProcessSVATransaction (TransactionType.Undo' null' null' null' null' uTransaction' ChkAcknowledge.Checked)); " is 132.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdUndo_Click,The length of the statement  "				processResponse (Helper.ProcessECKTransaction (TransactionType.Undo' null' null' null' uECKCheck' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 151.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdQueryAccount_Click,The length of the statement  "	//The QueryAccount() operation is used to perform a balance inquiry on a cardholder's account to determine the current account balance. " is 135.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdQueryAccount_Click,The length of the statement  "			processResponse (Helper.ProcessSVATransaction (TransactionType.QueryAccount' SVtransaction' null' null' null' null' ChkAcknowledge.Checked)); " is 141.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdQueryAccount_Click,The length of the statement  "			processResponse (Helper.ProcessECKTransaction (TransactionType.QueryAccount' ECKTransaction' null' null' null' ChkAcknowledge.Checked' ChkForceCloseBatch.Checked)); " is 164.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdVerify_Click,The length of the statement  "			processResponse (Helper.ProcessBCPTransaction (TransactionType.Verify' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked)); " is 188.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,The length of the statement  "	//The RequestTransaction() operation allows for the retrieval of any transaction matching the supplied tender data. This is useful in situations  " is 144.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,The length of the statement  "			Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 193.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,The length of the statement  "			response = Helper.ProcessSVATransaction (TransactionType.Authorize' SVtransaction' null' null' null' null' ChkAcknowledge.Checked); " is 131.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,The length of the statement  "			Helper.ProcessSVATransaction (TransactionType.RequestTransaction' SVtransaction' null' null' null' null' ChkAcknowledge.Checked); " is 129.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdRequestTransaction_Click,The length of the statement  "			// bcpClient.Acknowledge(serviceKey' responses[0].TransactionId' applicationId' merchantProfile' serviceId' addendumData); " is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,The length of the statement  "	//NOTE: The first step with tokenization is to obtain a token. This can be done with either a AuthorizeAndCapture or an Authorize. " is 130.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,The length of the statement  "			response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,The length of the statement  "			//Since we used a generic method to set the bankcard data let's clear out the card data and use the token' card type and masked pan returned from " is 145.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,The length of the statement  "			//NOTE : For tokenization you'll need to store at a minimum the token' cardtype and MaskedPAN. It's also recommended to store the expiration date " is 145.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCardTokenization_Click,The length of the statement  "			response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdManageAccount_Click,The length of the statement  "			processResponse (Helper.ProcessSVATransaction (TransactionType.ManageAccount' SVtransaction' null' null' null' null' ChkAcknowledge.Checked)); " is 142.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdManageAccountById_Click,The length of the statement  "			response = Helper.ProcessSVATransaction (TransactionType.ManageAccount' SVtransaction' null' null' null' null' ChkAcknowledge.Checked); " is 135.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdManageAccountById_Click,The length of the statement  "			response = Helper.ProcessSVATransaction (TransactionType.ManageAccountById' null' SVManage' null' null' null' ChkAcknowledge.Checked); " is 134.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "		//NOTE: The first step with purchase card level 2 is to submit a Authorize to verify that the card is a valid purchase card " is 123.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "		//Check to see if this the service is a host capture or terminal capture solution. This will drive logice in terms of useing an AuthorizeAndCapture Versus Authorize to Capture " is 175.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "			else//In this case its a terminal capture service which requires an Authorize followed by a captureall or capture selective " is 123.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "				response = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 214.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "				response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "				if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) { " is 209.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "					response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked); " is 172.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL2_Click,The length of the statement  "				MessageBox.Show ("Unable to process purchase Card as the transaction types requested are not supported. Specifically AuthorizeAndCapture"); " is 139.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The length of the statement  "	//NOTE: The first step with purchase card level 2 is to submit a Authorize to verify that the card is a valid purchase card " is 123.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The length of the statement  "				response = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 214.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The length of the statement  "				response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The length of the statement  "				if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) { " is 209.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The length of the statement  "					response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked); " is 172.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdForcePost_Click,The length of the statement  "			if (_bcs.Tenders.CreditAuthorizeSupport == CreditAuthorizeSupportType.AuthorizeOnly)//Verify if this is a Terminal Capture solution that supports PINDebit. " is 155.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdForcePost_Click,The length of the statement  "					processResponse (Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked)); " is 211.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdForcePost_Click,The length of the statement  "				processResponse (Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked)); " is 221.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdMagensa_Click,The length of the statement  "				List<ResponseDetails> RD = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 230.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,CmdMagensa_Click,The length of the statement  "				List<ResponseDetails> RD = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked); " is 220.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,processResponse,The length of the statement  "				if (rd.Response.Status == Status.Successful && (rd.TransactionType == "Authorize" | rd.TransactionType == "AuthorizeAndCapture")) { " is 131.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,processResponse,The length of the statement  "							CboTokenizedCard.Items.Add (new TokenizedTransaction (BTR.PaymentAccountDataToken' TxtExpirationDate.Text' BTR.MaskedPAN' BTR.CardType)); " is 137.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,AvailableTxnTypes,The length of the statement  "	if (Convert.ToBoolean (ConfigurationSettings.AppSettings ["TxnData_ProcessMagensaTxn"]) & (supportedTxnTypes.Authorize | supportedTxnTypes.AuthAndCapture)) " is 155.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,The length of the statement  "	//The GetServiceInformation() operation provides information about the services that are available to a specific Service Key.  " is 125.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,The length of the statement  "	//This operation should be automatically invoked during initial application configuration' and manually by an application  " is 121.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,The length of the statement  "			cboAvailableServices.Items.Add (new Item (ECKS.ServiceId + "-ECK-" + Helper.TranslateServiceIdToFriendlyName (ECKS)' ECKS.ServiceId' "")); " is 138.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,The length of the statement  "			cboAvailableServices.Items.Add (new Item (SVAS.ServiceId + "-SVAS-" + Helper.TranslateServiceIdToFriendlyName (SVAS)' SVAS.ServiceId' "")); " is 139.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetServiceInformation,The length of the statement  "	txtPersistedAndCached.Text = "ApplicationProfileId : " + Helper.ApplicationProfileId + "\r\nServiceId : " + Helper.ServiceID + "\r\nWorkflowId : " + Helper.WorkflowID + "\r\nMerchantProfileId : " + Helper.MerchantProfileId; " is 223.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetMerchantProfileIds,The length of the statement  "             * service available that supports both Credit and PIN Debit' a Merchant Profile is needed for both Credit and PIN Debit." is 120.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetMerchantProfileIds,The length of the statement  "		List<string> MerchantProfileIds = Helper.Cwssic.GetMerchantProfileIds (Helper.SessionToken' Helper.ServiceID' TenderType.Credit); " is 129.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,GetMerchantProfileIds,The length of the statement  "	txtPersistedAndCached.Text = "ApplicationProfileId : " + Helper.ApplicationProfileId + "\r\nServiceId : " + Helper.ServiceID + "\r\nWorkflowId : " + Helper.WorkflowID + "\r\nMerchantProfileId : " + Helper.MerchantProfileId; " is 223.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The length of the statement  "				Result = MessageBox.Show ("Since you've previously persisted ApplicationProfileId' MerchantProfileId and ServiceId would you like to go directly to 'Transaction Processing'?"' "Continue to Transaction Processing"' MessageBoxButtons.YesNo); " is 239.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The length of the statement  "			txtPersistedAndCached.Text = "ApplicationProfileId : " + Helper.ApplicationProfileId + "\r\nServiceId : " + Helper.ServiceID + "\r\nWorkflowId : " + Helper.WorkflowID + "\r\nMerchantProfileId : " + Helper.MerchantProfileId + strEncryptedIdentityToken; " is 251.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPopulateWithMyTestValues_Click,The length of the statement  "	MessageBox.Show ("The Identity token and PTLS SocketId are values provided by your solution consultant for both Sandbox testing as well as Production deployment." + " For convenience these values are filled out automaticaly in the Sample Code for Sandbox testing. In production you'll need to update each value." + " Please also note that the Identity Token expires at 3 years or if a security breach is detected."); " is 416.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPopulateWithMyTestValues_Click,The length of the statement  "	//NOTE : The following values changes from Sandbox to Production.  These values are provided by your Solution Consultant " is 120.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPopulateWithMyTestValues_Click,The length of the statement  "	PtlsSocketId = "MIIFCzCCA/OgAwIBAgICAoAwDQYJKoZIhvcNAQEFBQAwgbExNDAyBgNVBAMTK0lQIFBheW1lbnRzIEZyYW1ld29yayBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhDb2xvcmFkbzEPMA0GA1UEBxMGRGVudmVyMRowGAYDVQQKExFJUCBDb21tZXJjZSwgSW5jLjEsMCoGCSqGSIb3DQEJARYdYWRtaW5AaXBwYXltZW50c2ZyYW1ld29yay5jb20wHhcNMTMwODIzMTg1NjA5WhcNMjMwODIxMTg1NjA5WjCBjDELMAkGA1UEBhMCVVMxETAPBgNVBAgTCENvbG9yYWRvMQ8wDQYDVQQHEwZEZW52ZXIxGjAYBgNVBAoTEUlQIENvbW1lcmNlLCBJbmMuMT0wOwYDVQQDEzRxYmtXM25TZ0FJQUFBUDhBSCtDY0FBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx68dD32BLjiDC9RdkIFY2P8N/bzvV75qWWemh0hO3zswggMY6BtKM7xVAoeVbEUP/HxOSlBasKE4tY/Y9hfDoqaszojt5BfqGYqAnUZ/7yjlfROdDu5q1p7AJ8DsEg9o5rpp0/88tj1+XK43JpE0PHtRecCdpsiKGclAdvaGRiXVMR0U6/nNjoNdptSo3Kd8DXSU4xWfiwrVWYUMu9otetiwutJNB3jUfsW5incr1OZ7vkFa58Eltb57UygQ5i31FSrVuBfS4UMQKVBP1V7wsVQlcC+QBNjlsGiATzdqtJBgcaI+BkPEJkF7kpDae3fNbQ77AhVFsoGV30bZCSoSNwIDAQABo4IBTjCCAUowCQYDVR0TBAIwADAdBgNVHQ4EFgQU2t+wf1VVGvks5M1zZlNa92YYUAEwgeYGA1UdIwSB3jCB24AU3+ASnJQimuunAZqQDgNcnO2HuHShgbekgbQwgbExNDAyBgNVBAMTK0lQIFBheW1lbnRzIEZyYW1ld29yayBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhDb2xvcmFkbzEPMA0GA1UEBxMGRGVudmVyMRowGAYDVQQKExFJUCBDb21tZXJjZSwgSW5jLjEsMCoGCSqGSIb3DQEJARYdYWRtaW5AaXBwYXltZW50c2ZyYW1ld29yay5jb22CCQD/yDY5hYVsVzA1BgNVHR8ELjAsMCqgKKAmhiRodHRwOi8vY3JsLmlwY29tbWVyY2UuY29tL2NhLWNybC5jcmwwDQYJKoZIhvcNAQEFBQADggEBAIGOvmbUPdUs3FMbQ95rpT7hShEkAbRnQjp8yY1ql48obQM0mTjQ4CfAXPELZ1xe8KyC4jaurW9KMuCkApwC8b8cgdKWg1ujtKkrNGhhDQRLcclNB6q5JTXrP0gQgrr43yHxh4vaAA8GTvkg7j2hrTUkksmc7JNIto0XsHlfvrUv8XCQIeQsFyy/nLHpQIkXwvAS6fcml6KMRTgQJm2yLZCfYVs6n18VDd9LCYWO9Y6majWoqgyHZ5Gy2qT7V+YxgDMUrZa7Fd66xHTWskO8wc7kuW5ZKaB29ewbAXIY31AHi4dAuGS6znPxnRg1kE01aDQ1FFCcajKtovg3di8PICU="; " is 1746.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPopulateWithMyTestValues_Click,The length of the statement  "	//Value provided by solution consultant. You'll have one idenityToken for Sandbox and a different one for production. The value needs  " is 133.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				txtAboutTheService.Text = "ServiceId : " + BCS.ServiceId //Unique identifier for available services. These values change from sandbox to production. " is 148.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\nService Name : " + BCS.ServiceName + "\r\nAlternative Merchant Data : " + BCS.AlternativeMerchantData //Indicates whether the service supports the display of AlternativeMerchantData on accountholder statements. Subject to issuer discretion. " is 247.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\nAutoSettle Supported : " + BCS.AutoBatch + "\r\nEncryptionKey : " + BCS.EncryptionKey //Indicates whether AutoBatch is supported. " is 136.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n\r\nAVSData Fields Required: " + "\r\n - CardHolderName: " + BCS.AVSData.CardholderName + "\r\n - Street: " + BCS.AVSData.Street + "\r\n - City: " + BCS.AVSData.City + "\r\n - State: " + BCS.AVSData.StateProvince + "\r\n - PostalCode: " + BCS.AVSData.PostalCode + "\r\n - Phone: " + BCS.AVSData.Phone + "\r\n - Country: " + BCS.AVSData.Country + "\r\nCutoffTime : " + BCS.CutoffTime //If the service supports AutoBatch' this is the cutoff time for new transactions to be included in the daily automated batch.  " is 516.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\nManagedBilling : " + BCS.ManagedBilling //Indicates whether the service supports Service Provider managed billing. " is 121.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\nMaximumLineItems : " + BCS.MaximumLineItems //Maximum number of line items that may be provided when providing Level 3 line item data. " is 141.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\nMultiplePartialCapture : " + BCS.MultiplePartialCapture //Indicates whether the service supports multiple partial captures of a single authorization. " is 156.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - Adjust : " + BCS.Operations.Adjust + "\r\n - AuthAndCapture : " + BCS.Operations.AuthAndCapture + "\r\n - Authorize : " + BCS.Operations.Authorize + "\r\n - Capture : " + BCS.Operations.Capture + "\r\n - CaptureAll : " + BCS.Operations.CaptureAll + "\r\n - CaptureSelective : " + BCS.Operations.CaptureSelective + "\r\n - CloseBatch : " + BCS.Operations.CloseBatch + "\r\n - Disburse : " + BCS.Operations.Disburse + "\r\n - ManageAccount : " + BCS.Operations.ManageAccount + "\r\n - ManageAccountById : " + BCS.Operations.ManageAccountById + "\r\n - QueryAccount : " + BCS.Operations.QueryAccount + "\r\n - QueryRejected : " + BCS.Operations.QueryRejected + "\r\n - ReturnById : " + BCS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + BCS.Operations.ReturnUnlinked + "\r\n - Undo : " + BCS.Operations.Undo + "\r\n - Verify : " + BCS.Operations.Verify + "\r\nPurchaseCardLevel : " + BCS.PurchaseCardLevel //Specifies highest level of purchase card support. Level 3 support implies support for Level 2 as well. " is 1023.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - BatchAssignmentSupport : " + BCS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required. " is 146.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - CredentialsRequired : " + BCS.Tenders.CredentialsRequired + "\r\n - Credit : " + BCS.Tenders.Credit //Indicates support for the Credit Card tender. Required. " is 167.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - CreditAuthorizeSupport : " + BCS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration. " is 203.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - CreditReturnSupportType : " + BCS.Tenders.CreditReturnSupportType + "\r\n - CreditReversalSupportType : " + BCS.Tenders.CreditReversalSupportType + "\r\n - PINDebit : " + BCS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required. " is 257.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitReturnSupportType : " + BCS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'. " is 244.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PinDebitUndoSupport : " + BCS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration. " is 202.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitUndoTenderDataRequired : " + BCS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required. " is 193.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PartialApprovalSupportType : " + BCS.Tenders.PartialApprovalSupportType + "\r\n - QueryRejectedSupport : " + BCS.Tenders.QueryRejectedSupport + "\r\n - TrackDataSupport : " + BCS.Tenders.TrackDataSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration. " is 345.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				ChkMagensaAuthorizeAndCapture.Enabled = (BCS.Tenders.CreditAuthorizeSupport == CreditAuthorizeSupportType.Both ? true : false); " is 127.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				txtAboutTheService.Text = "ServiceId : " + ECKS.ServiceId //Unique identifier for available services. These values change from sandbox to production. " is 149.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - Adjust : " + ECKS.Operations.Adjust + "\r\n - AuthAndCapture : " + ECKS.Operations.AuthAndCapture + "\r\n - Authorize : " + ECKS.Operations.Authorize + "\r\n - Capture : " + ECKS.Operations.Capture + "\r\n - CaptureAll : " + ECKS.Operations.CaptureAll + "\r\n - CaptureSelective : " + ECKS.Operations.CaptureSelective + "\r\n - CloseBatch : " + ECKS.Operations.CloseBatch + "\r\n - QueryAccount : " + ECKS.Operations.QueryAccount + "\r\n - ReturnById : " + ECKS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + ECKS.Operations.ReturnUnlinked + "\r\n - Undo : " + ECKS.Operations.Undo + "\r\n - Verify : " + ECKS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders. " is 744.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - BatchAssignmentSupport : " + ECKS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required. " is 147.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - CreditAuthorizeSupport : " + ECKS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration. " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitReturnSupportType : " + ECKS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'. " is 245.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PinDebitUndoSupport : " + ECKS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration. " is 203.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitUndoTenderDataRequired : " + ECKS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required. " is 194.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - QueryRejectedSupport : " + ECKS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration. " is 202.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "					lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (ECKS) + @" - " + ECKS.ServiceId; " is 128.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				txtAboutTheService.Text = "ServiceId : " + SVAS.ServiceId //Unique identifier for available services. These values change from sandbox to production. " is 149.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - Adjust : " + SVAS.Operations.Adjust + "\r\n - AuthAndCapture : " + SVAS.Operations.AuthAndCapture + "\r\n - Authorize : " + SVAS.Operations.Authorize + "\r\n - Capture : " + SVAS.Operations.Capture + "\r\n - CaptureAll : " + SVAS.Operations.CaptureAll + "\r\n - CaptureSelective : " + SVAS.Operations.CaptureSelective + "\r\n - CloseBatch : " + SVAS.Operations.CloseBatch + "\r\n - QueryAccount : " + SVAS.Operations.QueryAccount + "\r\n - ReturnById : " + SVAS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + SVAS.Operations.ReturnUnlinked + "\r\n - Undo : " + SVAS.Operations.Undo + "\r\n - Verify : " + SVAS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders. " is 744.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - BatchAssignmentSupport : " + SVAS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required. " is 147.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - CreditAuthorizeSupport : " + SVAS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration. " is 204.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitReturnSupportType : " + SVAS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'. " is 245.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PinDebitUndoSupport : " + SVAS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration. " is 203.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - PINDebitUndoTenderDataRequired : " + SVAS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required. " is 194.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "				+ "\r\n - QueryRejectedSupport : " + SVAS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration. " is 202.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "					lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (SVAS) + @" - " + SVAS.ServiceId; " is 128.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The length of the statement  "			//CboWorkFlowIds.Items.Add(new item("[" + node["WorkflowId"].InnerText + "] " + node["Name"].InnerXml' node["WorkflowId"].InnerText)); " is 134.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableProfiles_SelectedIndexChanged,The length of the statement  "	txtPersistedAndCached.Text = "*** Updated Value Ready for Persistence ***\r\nApplicationProfileId : " + Helper.ApplicationProfileId + "\r\nServiceId : " + Helper.ServiceID + "\r\nWorkflowId : " + Helper.WorkflowID + "\r\nMerchantProfileId : " + Helper.MerchantProfileId; " is 270.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "             * Special consideration is necessary for protecting the identity token. You are required to be familure with the following" is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "             * http://docs.evosnap.com/TransactionProcessing/CWS/Implementation_Guidelines/2.0.17/ServiceInformationGuidelines/AuthenticationProcess/IdentityTokens.aspx" is 155.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "			MessageBox.Show ("Since the identity token is not going to be encrypted' the " + "appilcation must securly protect the identity token with administrator file based securty"); " is 174.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "		MessageBox.Show ("The following values will be persisted\r\n\r\n\tApplicationProfielId : " + Helper.ApplicationProfileId + "\r\n\tServiceId : " + Helper.ServiceID + "\r\n\tWorkflowId : " + Helper.WorkflowID + "\r\n\tProfileId : " + Helper.MerchantProfileId + strIdentityTokenMessage); " is 284.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "		PersistAndCacheSettings PACS = new PersistAndCacheSettings (Helper.ApplicationProfileId' Helper.ServiceID' Helper.WorkflowID' Helper.MerchantProfileId' blnEncryptedIdentityToken' strIdentityToken); " is 197.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPersistConfig_Click,The length of the statement  "		Result = MessageBox.Show ("Configuration values successfully persisted. Continue to Transaction Processing"' "Continue to Transaction Processing"' MessageBoxButtons.YesNo); " is 172.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdDeletePersistCached_Click,The length of the statement  "			Result = MessageBox.Show ("Are you sure you want to delete " + Helper.ServiceKey + "_TransactionProcessing.config?"' "Delete File?"' MessageBoxButtons.YesNo); " is 158.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,chkCaptureAllAndSelectiveAsync_CheckedChanged,The length of the statement  "		MessageBox.Show ("By selecting CaptureAll Async or CaptureSelective Async' your application will need to use TMS to query for the results of the batch."); " is 154.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,ChkAcknowledge_Click,The length of the statement  "	MessageBox.Show ("The Acknowledge() operation is used to mark a transaction as “acknowledged” after receiving " + "a successful transaction response. This acknowledgement is useful when performing transaction management " + "functions' such as those provided by the Transaction Management Service (TMS) API.\r\n\r\n" + "Once a successful transaction processing response has been received' the Acknowledge() operation can be " + "called to set an IsAcknowledged flag to “true” in the transaction database for a specific transactionId. " + "In the event that a transaction response is not received' specific Transaction Management operations can be " + "called to query the transaction database for transactions that have the IsAcknowledged flag set to “false”. " + "This is helpful when troubleshooting the reason for a failed transaction."); " is 841.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,ChkTrackDataFromMSR_Click,The length of the statement  "		MessageBox.Show ("Please note that your current industry type is " + dg._ITV._IndustryType + " which typically does not support card present."); " is 144.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,linkPreparingAppToTransact_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/"); " is 123.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkSignOnWithToken_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/#signonwithtoken-soap"); " is 144.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkLblDelegatedSignOn_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/TransactionProcessing/CWS/Developer_Guide/2.0.18/Implementation/PreparingTheAppToTransact/SignOnAuthentication/DelegatedSignOn.aspx"); " is 193.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkManageApplicationData_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/#getapplicationdata-soap"); " is 147.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkRetrieveServiceInformation_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/#getserviceinformation-soap"); " is 150.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkManageMerchantProfiles_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/#getmerchantprofile-soap"); " is 147.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkAuthorizeAndCapture_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#authorizeandcapture-soap"); " is 131.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkAuthorize_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#authorize-soap"); " is 121.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkCaptureAll_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#captureall-soap"); " is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkCaptureSelective_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#captureselective-soap"); " is 128.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkReturnById_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#returnbyid-soap"); " is 122.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkReturnUnlinked_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#returnunlinked-soap"); " is 126.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkQueryAccount_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#queryaccount-soap"); " is 124.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkServiceKey_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/cwsdevelopersguide/#service-information-endpoints"); " is 132.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkIdentityToken_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/preparing-the-application-to-transact-2/#signonwithtoken-soap"); " is 144.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkAcknowledge_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#acknowledge-soap"); " is 123.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,LnkRequestTransaction_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#requesttransaction-soap"); " is 130.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkManageAccount_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#manageaccount-soap"); " is 125.
Long Statement,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,lnkManageAccountById_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://www.evosnap.com/support/knowledgebase/transaction-processing/#manageaccount-soap"); " is 125.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryBatch,The length of the statement  "		ProcessQueryBatchResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryBatch (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QBP ()' PP ())); " is 149.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryBatch,The length of the statement  "			ProcessQueryBatchResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryBatch (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QBP ()' PP ())); " is 149.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryBatch,The length of the statement  "			MessageBox.Show ("Unable to QueryBatch\r\nError Message : " + ex.Message' "QueryBatch Failed"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 141.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsSummary,The length of the statement  "		ProcessQueryTransactionSummaryResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionsSummary (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' BlnIncludeRelated' PP ())); " is 195.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsSummary,The length of the statement  "			ProcessQueryTransactionSummaryResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionsSummary (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' BlnIncludeRelated' PP ())); " is 195.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsSummary,The length of the statement  "			MessageBox.Show ("Unable to Query Transactions Summary\r\nError Message : " + ex.Message' "Query Transactions Summary Failed"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 173.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionFamilies,The length of the statement  "		ProcessQueryTransactionFamiliesResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionFamilies (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' PP ())); " is 177.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionFamilies,The length of the statement  "			ProcessQueryTransactionFamiliesResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionFamilies (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' PP ())); " is 177.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionFamilies,The length of the statement  "			MessageBox.Show ("Unable to Query Transaction Families\r\nError Message : " + ex.Message' "Query Transaction Families Failed"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 173.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsDetail,The length of the statement  "		ProcessQueryTransactionsDetailResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionsDetail (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' TDF' BlnIncludeRelated' PP ())); " is 199.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsDetail,The length of the statement  "			ProcessQueryTransactionsDetailResponse (((SampleCode_DeskTop)(Owner)).Helper.Tmsoc.QueryTransactionsDetail (((SampleCode_DeskTop)(Owner)).Helper.SessionToken' QTP ()' TDF' BlnIncludeRelated' PP ())); " is 199.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QueryTransactionsDetail,The length of the statement  "			MessageBox.Show ("Unable to Query Transaction Families\r\nError Message : " + ex.Message' "Query Transaction Families Failed"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 173.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QBP,The length of the statement  "		QBP.MerchantProfileIds = new List<string> (CboQBP_MercProfileIds.Text.Split (splitter' StringSplitOptions.RemoveEmptyEntries)); " is 127.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QBP,The length of the statement  "				txtQBP_TransactionIds.Text = txtQBP_TransactionIds.Text + ((SummaryDetailVal)(itemChecked)).SD.TransactionInformation.TransactionId + "' "; " is 139.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QBP,The length of the statement  "				txtQBP_TransactionIds.Text = txtQBP_TransactionIds.Text + ((TransactionDetailVal)(itemChecked)).TD.TransactionInformation.TransactionId + "' "; " is 143.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The length of the statement  "		QTP.ApprovalCodes = new List<string> (txtQTP_ApprovalCodes.Text.Split (splitter' StringSplitOptions.RemoveEmptyEntries)); " is 121.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The length of the statement  "		QTP.MerchantProfileIds = new List<string> (CboQTP_MerchantProfileIds.Text.Split (splitter' StringSplitOptions.RemoveEmptyEntries)); " is 131.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The length of the statement  "		txnIds = new List<string> (txtQTP_TransactionIds.Text.Replace (" "' "").Split (splitter' StringSplitOptions.RemoveEmptyEntries)); " is 129.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The length of the statement  "				txtQTP_TransactionIds.Text = txtQTP_TransactionIds.Text + ((SummaryDetailVal)(itemChecked)).SD.TransactionInformation.TransactionId + "' "; " is 139.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The length of the statement  "				txtQTP_TransactionIds.Text = txtQTP_TransactionIds.Text + ((TransactionDetailVal)(itemChecked)).TD.TransactionInformation.TransactionId + "' "; " is 143.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,PP,The length of the statement  "	if (_lastSearch == LastSearchType.QueryTransactionFamilies | _lastSearch == LastSearchType.QueryTransactionsDetail | _lastSearch == LastSearchType.QueryBatch) { " is 160.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nCash Back Totals \r\n  Count : " + b.SummaryData.CashBackTotals.Count + "\r\n  Net Amount : " + b.SummaryData.CashBackTotals.NetAmount); " is 168.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nCredit Return Totals \r\n  Count : " + b.SummaryData.CreditReturnTotals.Count + "\r\n  Net Amount : " + b.SummaryData.CreditReturnTotals.NetAmount); " is 180.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nCredit Totals \r\n  Count : " + b.SummaryData.CreditTotals.Count + "\r\n  Net Amount : " + b.SummaryData.CreditTotals.NetAmount); " is 161.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nDebit Return Totals \r\n  Count : " + b.SummaryData.DebitReturnTotals.Count + "\r\n  Net Amount : " + b.SummaryData.DebitReturnTotals.NetAmount); " is 177.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nDebit Totals \r\n  Count : " + b.SummaryData.DebitTotals.Count + "\r\n  Net Amount : " + b.SummaryData.DebitTotals.NetAmount); " is 158.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nNet Totals \r\n  Count : " + b.SummaryData.NetTotals.Count + "\r\n  Net Amount : " + b.SummaryData.NetTotals.NetAmount); " is 152.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,BatchDetailDataString,The length of the statement  "			RtxtTMSResults.AppendText ("\r\nVoid Totals \r\n  Count : " + b.SummaryData.VoidTotals.Count + "\r\n  Net Amount : " + b.SummaryData.VoidTotals.NetAmount); " is 155.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "	ColorText ("TransactionState : " + s.TransactionInformation.TransactionState + "\r\n"' s.TransactionInformation.TransactionState); " is 130.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "	ColorText ("TransactionStatusCode : " + s.TransactionInformation.TransactionStatusCode + "\r\n"' s.TransactionInformation.TransactionState); " is 140.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - ActualResult : " + s.TransactionInformation.BankcardData.AVSResult.ActualResult + "\r\n"); " is 121.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - AddressResult : " + s.TransactionInformation.BankcardData.AVSResult.AddressResult + "\r\n"); " is 123.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - CardholderNameResult : " + s.TransactionInformation.BankcardData.AVSResult.CardholderNameResult + "\r\n"); " is 137.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - CountryResult : " + s.TransactionInformation.BankcardData.AVSResult.CountryResult + "\r\n"); " is 123.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - PostalCodeResult : " + s.TransactionInformation.BankcardData.AVSResult.PostalCodeResult + "\r\n"); " is 129.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "		//Response code returned by the card issuer indicating the result of Card Verification (CVV2/CVC2/CID) returned by the service provider. Optional. " is 146.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "		RtxtTMSResults.AppendText ("- MaskedAccountNumber : " + s.TransactionInformation.ElectronicCheckData.MaskedAccountNumber + "\r\n"); " is 131.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "		RtxtTMSResults.AppendText ("- TransactionType : " + s.TransactionInformation.ElectronicCheckData.TransactionType + "\r\n"); " is 123.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "		RtxtTMSResults.AppendText ("- CardRestrictionValue : " + s.TransactionInformation.StoredValueData.CardRestrictionValue + "\r\n"); " is 129.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "	RtxtTMSResults.AppendText ("TransactionClass : " + s.TransactionInformation.TransactionClassTypePair.TransactionClass + "    "); " is 128.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,SummaryDetailString,The length of the statement  "	RtxtTMSResults.AppendText ("TransactionType : " + s.TransactionInformation.TransactionClassTypePair.TransactionType + "\r\n"); " is 126.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "	ColorText ("TransactionState : " + t.TransactionInformation.TransactionState + "\r\n"' t.TransactionInformation.TransactionState); " is 130.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "	ColorText ("TransactionStatusCode : " + t.TransactionInformation.TransactionStatusCode + "\r\n"' t.TransactionInformation.TransactionState); " is 140.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "	//RtxtTMSResults.AppendText((t.CompleteTransaction.SerializedTransaction == null ? "CompleteTransaction Serialized : NOT AVAILABLE\r\n" : "CompleteTransaction Serialized : " + t.CompleteTransaction.SerializedTransaction + "\r\n")); " is 231.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - ActualResult : " + t.TransactionInformation.BankcardData.AVSResult.ActualResult + "\r\n"); " is 121.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - AddressResult : " + t.TransactionInformation.BankcardData.AVSResult.AddressResult + "\r\n"); " is 123.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - CardholderNameResult : " + t.TransactionInformation.BankcardData.AVSResult.CardholderNameResult + "\r\n"); " is 137.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - CountryResult : " + t.TransactionInformation.BankcardData.AVSResult.CountryResult + "\r\n"); " is 123.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "			RtxtTMSResults.AppendText (" - PostalCodeResult : " + t.TransactionInformation.BankcardData.AVSResult.PostalCodeResult + "\r\n"); " is 129.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "		RtxtTMSResults.AppendText (" - MaskedAccountNumber : " + t.TransactionInformation.ElectronicCheckData.MaskedAccountNumber + "\r\n"); " is 132.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "		RtxtTMSResults.AppendText (" - TransactionType : " + t.TransactionInformation.ElectronicCheckData.TransactionType + "\r\n"); " is 124.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "	RtxtTMSResults.AppendText ("TransactionClass : " + t.TransactionInformation.TransactionClassTypePair.TransactionClass + "    "); " is 128.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionDetailString,The length of the statement  "	RtxtTMSResults.AppendText ("TransactionType : " + t.TransactionInformation.TransactionClassTypePair.TransactionType + "\r\n"); " is 126.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,ColorText,The length of the statement  "	if (_ts == TransactionState.ErrorConnecting | _ts == TransactionState.ErrorUnknown | _ts == TransactionState.ErrorValidation) " is 125.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,lnkQueryBatch_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/DataServices/TMS_Developer_Guide/2.0.17/Implementation/SOAP/QueryBatch.aspx"); " is 137.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,lnkQueryTransactions_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/DataServices/TMS_Developer_Guide/2.0.17/Implementation/SOAP/QueryTransactionsSummary.aspx"); " is 151.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,lnkQueryTransactionFamilies_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/DataServices/TMS_Developer_Guide/2.0.17/Implementation/SOAP/QueryTransactionFamilies.aspx"); " is 151.
Long Statement,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,lnkQueryTransactionDetails_Click,The length of the statement  "	System.Diagnostics.Process.Start ("http://docs.evosnap.com/DataServices/TMS_Developer_Guide/2.0.17/Implementation/SOAP/QueryTransactionsDetail.aspx"); " is 150.
Long Statement,SampleCode,SummaryDetailVal,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,ToString,The length of the statement  "	return SD.TransactionInformation.Amount + " | " + SD.TransactionInformation.TransactionId + " (" + SD.TransactionInformation.TransactionTimestamp + ") UTC"; " is 156.
Long Statement,SampleCode,TransactionDetailVal,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,ToString,The length of the statement  "	return TD.TransactionInformation.Amount + " | " + TD.TransactionInformation.TransactionId + " (" + TD.TransactionInformation.TransactionTimestamp + ") UTC"; " is 156.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "	//        _strErrorID = ((FaultException<SampleCode.CWSServiceInformation.ClaimNotFoundFault>)(_ex)).Detail.ErrorID.ToString(); " is 127.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "	//        _strErrorMessage = ((FaultException<SampleCode.CWSServiceInformation.ClaimNotFoundFault>)(_ex)).Detail.ProblemType; " is 125.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "			foreach (SampleCode.CWSServiceInformation.CWSValidationErrorFault error in ((FaultException<SampleCode.CWSServiceInformation.CWSValidationResultFault>)(_ex)).Detail.Errors) { " is 174.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSServiceInformation.CWSServiceInformationUnavailableFault>)(_ex)).Detail.ErrorID.ToString (); " is 137.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CWSServiceInformation.CWSServiceInformationUnavailableFault>)(_ex)).Detail.ProblemType; " is 134.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CWSServiceInformation.CWSValidationErrorFault>)(_ex)).Detail.RuleMessage; " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSConnectionFault>)(_ex)).Detail.ErrorID.ToString (); " is 121.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSExtendedDataNotSupportedFault>)(_ex)).Detail.ErrorID.ToString (); " is 135.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSExtendedDataNotSupportedFault>)(_ex)).Detail.ProblemType; " is 132.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidOperationFault>)(_ex)).Detail.ErrorID.ToString (); " is 127.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidOperationFault>)(_ex)).Detail.ProblemType; " is 124.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSOperationNotSupportedFault>)(_ex)).Detail.ErrorID.ToString (); " is 132.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSOperationNotSupportedFault>)(_ex)).Detail.ProblemType; " is 129.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			foreach (SampleCode.CwsTransactionProcessing.CWSValidationErrorFault error in ((FaultException<SampleCode.CwsTransactionProcessing.CWSValidationResultFault>)(_ex)).Detail.Errors) { " is 180.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.AuthenticationFault>)(_ex)).Detail.ErrorID.ToString (); " is 122.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.ExpiredTokenFault>)(_ex)).Detail.ErrorID.ToString (); " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.InvalidTokenFault>)(_ex)).Detail.ErrorID.ToString (); " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "		if (((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionServiceUnavailableFault>)(_ex)).Detail != null) { " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionServiceUnavailableFault>)(_ex)).Detail.ErrorID.ToString (); " is 140.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionServiceUnavailableFault>)(_ex)).Detail.ProblemType; " is 137.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidMessageFormatFault>)(_ex)).Detail.ErrorID.ToString (); " is 131.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidMessageFormatFault>)(_ex)).Detail.ProblemType; " is 128.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidServiceInformationFault>)(_ex)).Detail.ErrorID.ToString (); " is 136.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSInvalidServiceInformationFault>)(_ex)).Detail.ProblemType; " is 133.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionAlreadySettledFault>)(_ex)).Detail.ErrorID.ToString (); " is 136.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionAlreadySettledFault>)(_ex)).Detail.ProblemType; " is 133.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionFailedFault>)(_ex)).Detail.ErrorID.ToString (); " is 128.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSTransactionFailedFault>)(_ex)).Detail.ProblemType; " is 125.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSValidationErrorFault>)(_ex)).Detail.RuleMessage; " is 123.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CwsTransactionProcessing.CWSDeserializationFault>)(_ex)).Detail.ErrorID.ToString (); " is 126.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CwsTransactionProcessing.CWSDeserializationFault>)(_ex)).Detail.ProblemType; " is 123.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.AuthenticationFault>)(_ex)).Detail.ErrorID.ToString (); " is 122.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.TMSOperationNotSupportedFault>)(_ex)).Detail.ErrorID.ToString (); " is 132.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CWSTransactionManagement.TMSOperationNotSupportedFault>)(_ex)).Detail.ProblemType; " is 129.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.TMSTransactionFailedFault>)(_ex)).Detail.ErrorID.ToString (); " is 128.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CWSTransactionManagement.TMSTransactionFailedFault>)(_ex)).Detail.ProblemType; " is 125.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.TMSUnknownServiceKeyFault>)(_ex)).Detail.ErrorID.ToString (); " is 128.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorMessage = ((FaultException<SampleCode.CWSTransactionManagement.TMSUnknownServiceKeyFault>)(_ex)).Detail.ProblemType; " is 125.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.ExpiredTokenFault>)(_ex)).Detail.ErrorID.ToString (); " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.InvalidTokenFault>)(_ex)).Detail.ErrorID.ToString (); " is 120.
Long Statement,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The length of the statement  "			_strErrorID = ((FaultException<SampleCode.CWSTransactionManagement.TMSUnavailableFault>)(_ex)).Detail.ErrorID.ToString (); " is 122.
Long Statement,SampleCode.CWSDataServices,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSDataServices\Reference.cs,QueryTransactionsDetail,The length of the statement  "	return base.Channel.QueryTransactionsDetail (sessionToken' queryTransactionsParameters' transactionDetailFormat' includeRelated' pagingParameters); " is 147.
Long Statement,SampleCode.CWSDataServices,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSDataServices\Reference.cs,QueryTransactionsSummary,The length of the statement  "	return base.Channel.QueryTransactionsSummary (sessionToken' queryTransactionsParameters' includeRelated' pagingParameters); " is 123.
Long Statement,SampleCode.CWSServiceInformation,CWSServiceInformationClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSServiceInformation\Reference.cs,Ping,The length of the statement  "	SampleCode.CWSServiceInformation.PingResponse1 retVal = ((SampleCode.CWSServiceInformation.ICWSServiceInformation)(this)).Ping (inValue); " is 137.
Long Statement,SampleCode.CWSTransactionManagement,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSTransactionManagement\Reference.cs,Ping,The length of the statement  "	SampleCode.CWSTransactionManagement.PingResponse1 retVal = ((SampleCode.CWSTransactionManagement.ITMSOperations)(this)).Ping (inValue); " is 135.
Long Statement,SampleCode.CWSTransactionManagement,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSTransactionManagement\Reference.cs,QueryTransactionsDetail,The length of the statement  "	return base.Channel.QueryTransactionsDetail (sessionToken' queryTransactionsParameters' transactionDetailFormat' includeRelated' pagingParameters); " is 147.
Long Statement,SampleCode.CWSTransactionManagement,TMSOperationsClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CWSTransactionManagement\Reference.cs,QueryTransactionsSummary,The length of the statement  "	return base.Channel.QueryTransactionsSummary (sessionToken' queryTransactionsParameters' includeRelated' pagingParameters); " is 123.
Long Statement,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,Ping,The length of the statement  "	SampleCode.CwsTransactionProcessing.PingResponse1 retVal = ((SampleCode.CwsTransactionProcessing.ICwsTransactionProcessing)(this)).Ping (inValue); " is 146.
Long Statement,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,AuthorizeAndCapture,The length of the statement  "	return base.Channel.AuthorizeAndCapture (sessionToken' transaction' applicationProfileId' merchantProfileId' workflowId); " is 121.
Long Statement,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAll,The length of the statement  "	return base.Channel.CaptureAll (sessionToken' differenceData' batchIds' applicationProfileId' merchantProfileId' workflowId' forceClose); " is 137.
Long Statement,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureAllAsync,The length of the statement  "	return base.Channel.CaptureAllAsync (sessionToken' differenceData' batchIds' applicationProfileId' merchantProfileId' workflowId' forceClose); " is 142.
Long Statement,SampleCode.CwsTransactionProcessing,CwsTransactionProcessingClient,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Service References\CwsTransactionProcessing\Reference.cs,CaptureSelectiveAsync,The length of the statement  "	return base.Channel.CaptureSelectiveAsync (sessionToken' transactionIds' differenceData' applicationProfileId' workflowId); " is 123.
Complex Conditional,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,CallingForm,The conditional expression  "_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001""  is complex.
Complex Conditional,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The conditional expression  "_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001""  is complex.
Complex Conditional,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The conditional expression  "_strServiceID == "C82ED00001" || _strServiceID == "71C8700001" || _strServiceID == "88D9300001" || _strServiceID == "B447F00001" || _strServiceID == "D806000001" || _strServiceID == "E88FD00001""  is complex.
Complex Conditional,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureAll_Click,The conditional expression  "((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Authorize.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.ReturnById.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Return.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Adjust.ToString ()"  is complex.
Complex Conditional,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdCaptureSelective_Click,The conditional expression  "((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Authorize.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.ReturnById.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Return.ToString () && ((ResponseDetails)(itemChecked)).TransactionType != TransactionType.Adjust.ToString ()"  is complex.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SetBankCardTxnData,The method has an empty catch block.
Empty Catch Block,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageApplicationData,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageApplicationData.cs,CmdPerformWebRequest_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,SaveMerchantInformation,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,ManageMerchantProfile,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\ManageMerchantProfile.cs,cmdPopulateTestValues_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,SampleCode_DeskTop,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,SampleCode_DeskTop,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,processResponse,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdGo_Click,The method has an empty catch block.
Empty Catch Block,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,QTP,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleSvcInfoFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTxnFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,handleTMSFault,The method has an empty catch block.
Empty Catch Block,FaultHandler,FaultHandler,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\FaultHandler.cs,GeneralFaults,The method has an empty catch block.
Magic Number,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateApplicationData,The following statement contains a magic number: appData.SoftwareVersionDate = new DateTime (2012' 10' 27);  
Magic Number,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateApplicationData,The following statement contains a magic number: appData.SoftwareVersionDate = new DateTime (2012' 10' 27);  
Magic Number,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,CreateApplicationData,The following statement contains a magic number: appData.SoftwareVersionDate = new DateTime (2012' 10' 27);  
Magic Number,SampleCode,DataGenerator,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\DataGenerator.cs,SavePersistedConfig,The following statement contains a magic number: multipleMerchants.Value = (merchantProfileIds.Count > 2 ? "True" : "False");  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CheckTokenExpire,The following statement contains a magic number: if (DateTime.UtcNow.Subtract (DtSessionToken).TotalMinutes > 25)//Use 25 as the baseline for renewing session tokens   {  	try {  		//if (_delegatedServiceKey != "")  		//{  		//    _delegatedSessionToken = Cwssic.DelegatedSignOn(_identityToken' _delegatedServiceKey' null);  		//    _sessionToken = _delegatedSessionToken;  		//}  		//else  		{  			_sessionToken = Cwssic.SignOnWithToken (_identityToken);  		}  		DtSessionToken = DateTime.UtcNow;  	}  	catch (Exception ex) {  		string strErrorId;  		string strErrorMessage;  		_FaultHandler.handleSvcInfoFault (ex' out strErrorId' out strErrorMessage);  		Exception e = new Exception ("Unable to Refresh a new Token\r\nError Message : " + ex.Message + "\r\n\r\nUnable to Refresh a new Token\r\nError Message : " + strErrorId + " : " + strErrorMessage);  		throw e;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 1)) == 4) {  	return TypeCardType.Visa;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 1)) == 5) {  	return TypeCardType.MasterCard;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 34 | Convert.ToInt16 (strPAN.Substring (0' 2)) == 37) {  	return TypeCardType.AmericanExpress;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 34 | Convert.ToInt16 (strPAN.Substring (0' 2)) == 37) {  	return TypeCardType.AmericanExpress;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 34 | Convert.ToInt16 (strPAN.Substring (0' 2)) == 37) {  	return TypeCardType.AmericanExpress;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 34 | Convert.ToInt16 (strPAN.Substring (0' 2)) == 37) {  	return TypeCardType.AmericanExpress;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 36) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 36) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 3095) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 3095) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 67) {  	return TypeCardType.Maestro;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 67) {  	return TypeCardType.Maestro;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) > 2999 & Convert.ToInt16 (strPAN.Substring (0' 4)) < 3096) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) > 2999 & Convert.ToInt16 (strPAN.Substring (0' 4)) < 3096) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) > 2999 & Convert.ToInt16 (strPAN.Substring (0' 4)) < 3096) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) > 2999 & Convert.ToInt16 (strPAN.Substring (0' 4)) < 3096) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 37 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 40) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 37 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 40) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 37 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 40) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 37 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 40) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 6011) {  	if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 6011) {  	if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 6011) {  	if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 6011) {  	if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 4)) == 6011) {  	if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (4' 2)) == 4) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) > 63 & Convert.ToInt16 (strPAN.Substring (0' 2)) < 66) {  	if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  		//Paypal to be added to schema  		//Return TypeCardType.Paypal  		return TypeCardType.Discover;  	}  	else {  		return TypeCardType.Discover;  	}  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (3' 3)) > 599 & Convert.ToInt16 (strPAN.Substring (3' 3)) < 611) {  	//Paypal to be added to schema  	//Return TypeCardType.Paypal  	return TypeCardType.Discover;  }  else {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt32 (strPAN.Substring (0' 6)) == 352800 & Convert.ToInt32 (strPAN.Substring (0' 6)) < 358999) {  	return TypeCardType.JCB;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt32 (strPAN.Substring (0' 6)) == 352800 & Convert.ToInt32 (strPAN.Substring (0' 6)) < 358999) {  	return TypeCardType.JCB;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt32 (strPAN.Substring (0' 6)) == 352800 & Convert.ToInt32 (strPAN.Substring (0' 6)) < 358999) {  	return TypeCardType.JCB;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt32 (strPAN.Substring (0' 6)) == 352800 & Convert.ToInt32 (strPAN.Substring (0' 6)) < 358999) {  	return TypeCardType.JCB;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 62) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,CardTypeLookup,The following statement contains a magic number: if (Convert.ToInt16 (strPAN.Substring (0' 2)) == 62) {  	return TypeCardType.Discover;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: try {  	// Array to contain individual numbers  	ArrayList CheckNumbers = new ArrayList ();  	// Get length of card  	int CardLength = creditCardNumber.Length;  	// Double the value of alternate digits' starting with the second digit  	// from the right' i.e. back to front.  	// Loop through starting at the end  	for (int i = CardLength - 2; i >= 0; i = i - 2) {  		// Now read the contents at each index' this  		// can then be stored as an array of integers  		// Double the number returned  		CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  	}  	int CheckSum = 0;  	// Will hold the total sum of all checksum digits  	// Second stage' add separate digits of all products  	for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  		int _count = 0;  		// will hold the sum of the digits  		// determine if current number has more than one digit  		if ((int)CheckNumbers [iCount] > 9) {  			int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  			// add count to each digit  			for (int x = 0; x < _numLength; x++) {  				_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  			}  		}  		else {  			_count = (int)CheckNumbers [iCount];  			// single digit' just add it by itself  		}  		CheckSum = CheckSum + _count;  		// add sum to the total sum  	}  	// Stage 3' add the unaffected digits  	// Add all the digits that we didn't double still starting from the right  	// but this time we'll start from the rightmost number with alternating digits  	int OriginalSum = 0;  	for (int y = CardLength - 1; y >= 0; y = y - 2) {  		OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  	}  	// Perform the final calculation' if the sum Mod 10 results in 0 then  	// it's valid' otherwise its false.  	bool isValid = (((OriginalSum + CheckSum) % 10) == 0);  	//Now that the number checks out' make sure it has the correct number of digits  	//for the card type  	if (isValid) {  		// AMEX -- 34 or 37 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  			return (15 == creditCardNumber.Length);  		}  		// MasterCard -- 51 through 55 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  			return (16 == creditCardNumber.Length);  		}  		// VISA -- 4 -- 13 and 16 length  		if (Regex.IsMatch (creditCardNumber' "^(4)")) {  			return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  		}  		// Diners Club -- 300-305' 36 or 38 -- 14 length  		if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  			return (14 == creditCardNumber.Length);  		}  		// enRoute -- 2014'2149 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  			return (15 == creditCardNumber.Length);  		}  		// Discover -- 6011 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 3 -- 16 length  		if (Regex.IsMatch (creditCardNumber' "^(3)")) {  			return (16 == creditCardNumber.Length);  		}  		// JCB -- 2131' 1800 -- 15 length  		if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  			return (15 == creditCardNumber.Length);  		}  		//Card type wasn't recognised but could be a private label.  		//Since it isn't breaking any rules of known cards' it's OK to return true.  		return true;  	}  	return false;  }  catch {  	return false;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: for (int i = CardLength - 2; i >= 0; i = i - 2) {  	// Now read the contents at each index' this  	// can then be stored as an array of integers  	// Double the number returned  	CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: for (int i = CardLength - 2; i >= 0; i = i - 2) {  	// Now read the contents at each index' this  	// can then be stored as an array of integers  	// Double the number returned  	CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: for (int i = CardLength - 2; i >= 0; i = i - 2) {  	// Now read the contents at each index' this  	// can then be stored as an array of integers  	// Double the number returned  	CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: i = i - 2
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: CheckNumbers.Add (Int32.Parse (creditCardNumber [i].ToString ()) * 2);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: for (int iCount = 0; iCount <= CheckNumbers.Count - 1; iCount++) {  	int _count = 0;  	// will hold the sum of the digits  	// determine if current number has more than one digit  	if ((int)CheckNumbers [iCount] > 9) {  		int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  		// add count to each digit  		for (int x = 0; x < _numLength; x++) {  			_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  		}  	}  	else {  		_count = (int)CheckNumbers [iCount];  		// single digit' just add it by itself  	}  	CheckSum = CheckSum + _count;  	// add sum to the total sum  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if ((int)CheckNumbers [iCount] > 9) {  	int _numLength = ((int)CheckNumbers [iCount]).ToString ().Length;  	// add count to each digit  	for (int x = 0; x < _numLength; x++) {  		_count = _count + Int32.Parse (((int)CheckNumbers [iCount]).ToString () [x].ToString ());  	}  }  else {  	_count = (int)CheckNumbers [iCount];  	// single digit' just add it by itself  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: for (int y = CardLength - 1; y >= 0; y = y - 2) {  	OriginalSum = OriginalSum + Int32.Parse (creditCardNumber [y].ToString ());  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: y = y - 2
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (isValid) {  	// AMEX -- 34 or 37 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  		return (15 == creditCardNumber.Length);  	}  	// MasterCard -- 51 through 55 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  		return (16 == creditCardNumber.Length);  	}  	// VISA -- 4 -- 13 and 16 length  	if (Regex.IsMatch (creditCardNumber' "^(4)")) {  		return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  	}  	// Diners Club -- 300-305' 36 or 38 -- 14 length  	if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  		return (14 == creditCardNumber.Length);  	}  	// enRoute -- 2014'2149 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  		return (15 == creditCardNumber.Length);  	}  	// Discover -- 6011 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 3 -- 16 length  	if (Regex.IsMatch (creditCardNumber' "^(3)")) {  		return (16 == creditCardNumber.Length);  	}  	// JCB -- 2131' 1800 -- 15 length  	if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  		return (15 == creditCardNumber.Length);  	}  	//Card type wasn't recognised but could be a private label.  	//Since it isn't breaking any rules of known cards' it's OK to return true.  	return true;  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(34|37)")) {  	return (15 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (15 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(51|52|53|54|55)")) {  	return (16 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (16 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(4)")) {  	return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(4)")) {  	return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (13 == creditCardNumber.Length || 16 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(300|301|302|303|304|305|36|38)")) {  	return (14 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (14 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(2014|2149)")) {  	return (15 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (15 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(6011)")) {  	return (16 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (16 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(3)")) {  	return (16 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (16 == creditCardNumber.Length);  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: if (Regex.IsMatch (creditCardNumber' "^(2131|1800)")) {  	return (15 == creditCardNumber.Length);  }  
Magic Number,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ValidateCreditCardNumber,The following statement contains a magic number: return (15 == creditCardNumber.Length);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: try {  	if (ChkPipeDelimited.Checked) {  		string[] lines = TxtTrackInformation.Text.Split ('|');  		if (lines.Length < 13)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [3];  			string encryptedMagnePrintData = lines [6];  			string DUKPTserialNo = lines [9];  			string magenPrintStatus = lines [5];  			string deviceSerialNum = lines [7];  			string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			//string pan = txtTrack2Masked.Substring(0' 16);  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 10;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 6);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  	else {  		//StringReader strReader = new StringReader(TxtTrackData.Text);  		string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  		if (lines.Length < 21)  			MessageBox.Show ("No Magensa Swipes to use");  		else {  			string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  			string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  			string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  			string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  			string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  			string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  			string[] track2 = txtTrack2Masked.Split ('=');  			string panTrack2 = track2 [0];  			string discTrack2 = track2 [1];  			//Get Masked Pan and CardType  			TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  			HelperMethods h = new HelperMethods ();  			int masklength = panTrack2.Length - 8;  			int count = 0;  			string maskingCount = panTrack2.Substring (0' 4);  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  			masklength = discTrack2.Length - 4;  			maskingCount = discTrack2.Substring (0' 4);  			count = 0;  			do {  				maskingCount += "X";  				count++;  			}  			while (count < masklength);  			TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  			try {  				CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  			}  			catch {  			}  			TxtMagnePrintData.Text = encryptedMagnePrintData;  			TxtDukptKeySerialNumber.Text = DUKPTserialNo;  			TxtTrack2EncryptedData.Text = encryptedTrack2;  			TxtMagnePrintStatus.Text = magenPrintStatus;  			TxtDeviceSerialNumber.Text = deviceSerialNum;  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (ChkPipeDelimited.Checked) {  	string[] lines = TxtTrackInformation.Text.Split ('|');  	if (lines.Length < 13)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [3];  		string encryptedMagnePrintData = lines [6];  		string DUKPTserialNo = lines [9];  		string magenPrintStatus = lines [5];  		string deviceSerialNum = lines [7];  		string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		//string pan = txtTrack2Masked.Substring(0' 16);  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 10;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 6);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  else {  	//StringReader strReader = new StringReader(TxtTrackData.Text);  	string[] lines = TxtTrackInformation.Text.Replace ("\r"' "").Split ('\n');  	if (lines.Length < 21)  		MessageBox.Show ("No Magensa Swipes to use");  	else {  		string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  		string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  		string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  		string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  		string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  		string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  		string[] track2 = txtTrack2Masked.Split ('=');  		string panTrack2 = track2 [0];  		string discTrack2 = track2 [1];  		//Get Masked Pan and CardType  		TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  		HelperMethods h = new HelperMethods ();  		int masklength = panTrack2.Length - 8;  		int count = 0;  		string maskingCount = panTrack2.Substring (0' 4);  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  		masklength = discTrack2.Length - 4;  		maskingCount = discTrack2.Substring (0' 4);  		count = 0;  		do {  			maskingCount += "X";  			count++;  		}  		while (count < masklength);  		TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  		try {  			CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  		}  		catch {  		}  		TxtMagnePrintData.Text = encryptedMagnePrintData;  		TxtDukptKeySerialNumber.Text = DUKPTserialNo;  		TxtTrack2EncryptedData.Text = encryptedTrack2;  		TxtMagnePrintStatus.Text = magenPrintStatus;  		TxtDeviceSerialNumber.Text = deviceSerialNum;  	}  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 13)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [3];  	string encryptedMagnePrintData = lines [6];  	string DUKPTserialNo = lines [9];  	string magenPrintStatus = lines [5];  	string deviceSerialNum = lines [7];  	string txtTrack2Masked = lines [0].Substring (lines [0].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	//string pan = txtTrack2Masked.Substring(0' 16);  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 10;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 6);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: masklength = discTrack2.Length - 4;  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: maskingCount = discTrack2.Substring (0' 4);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: if (lines.Length < 21)  	MessageBox.Show ("No Magensa Swipes to use");  else {  	string encryptedTrack2 = lines [6].Substring (lines [6].IndexOf ("=") + 1).Replace (" "' "");  	string encryptedMagnePrintData = lines [12].Substring (lines [12].IndexOf ("=") + 1).Replace (" "' "");  	string DUKPTserialNo = lines [2].Substring (lines [2].IndexOf ("=") + 1).Replace (" "' "");  	string magenPrintStatus = lines [10].Substring (lines [10].IndexOf ("=") + 1).Replace (" "' "");  	string deviceSerialNum = lines [14].Substring (lines [14].IndexOf ("=") + 2);  	string txtTrack2Masked = lines [18].Substring (lines [18].IndexOf (";") + 1).Replace ("?"' "").Trim ();  	string[] track2 = txtTrack2Masked.Split ('=');  	string panTrack2 = track2 [0];  	string discTrack2 = track2 [1];  	//Get Masked Pan and CardType  	TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  	HelperMethods h = new HelperMethods ();  	int masklength = panTrack2.Length - 8;  	int count = 0;  	string maskingCount = panTrack2.Substring (0' 4);  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  	masklength = discTrack2.Length - 4;  	maskingCount = discTrack2.Substring (0' 4);  	count = 0;  	do {  		maskingCount += "X";  		count++;  	}  	while (count < masklength);  	TxtTrack2Masked.Text = TxtMaskedPAN.Text + "=" + maskingCount;  	try {  		CboMagensaCardType.SelectedItem = h.CardTypeLookup (panTrack2);  	}  	catch {  	}  	TxtMagnePrintData.Text = encryptedMagnePrintData;  	TxtDukptKeySerialNumber.Text = DUKPTserialNo;  	TxtTrack2EncryptedData.Text = encryptedTrack2;  	TxtMagnePrintStatus.Text = magenPrintStatus;  	TxtDeviceSerialNumber.Text = deviceSerialNum;  }  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtTrack2Masked.Text = lines [18].Substring (lines [18].IndexOf ("=") + 1).Replace (" "' "").Trim ();  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: TxtMaskedPAN.Text = maskingCount + panTrack2.Substring (panTrack2.Length - 4' 4);  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: masklength = discTrack2.Length - 4;  
Magic Number,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The following statement contains a magic number: maskingCount = discTrack2.Substring (0' 4);  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The following statement contains a magic number: if (_bcs != null)//Process a BankCard Transaction   {  	try {  		BankcardTransactionPro BCtransaction = new BankcardTransactionPro ();  		//First Check to see if this work flow is an "AuthorizeAndCapture" or an "Authorize" followed by a "Capture".  		if (chkL3AuthAndCapture.Checked) {  			//In this case the work flow is a "AuthorizeAndCapture"  			BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' true);  			BCtransaction = dg.SetBankCardTxnData (BCPO);  			response = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  			if (response.Count < 1) {  				return;  			}  			ChkLstTransactionsProcessed.Items.Add (response [0]);  		}  		else {  			//In this case the work flow is an "Authorize" followed by a "Capture"  			BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' false);  			BCtransaction = dg.SetBankCardTxnData (BCPO);  			response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  			if (response.Count < 1) {  				return;  			}  			ChkLstTransactionsProcessed.Items.Add (response [0]);  			BankcardTransactionResponsePro BCR = (BankcardTransactionResponsePro)response [0].Response;  			//Note : Now let's send the capture for the level 3 transaction.   			//First verify that the card is a valid Purchase Card.   			if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) {  				BankcardCapturePro BCP = new BankcardCapturePro ();  				BCP.Level2Data = dg.SetLevel2Data ();  				//Level 3 purchase card is always inclusive of Level 1 and Level 2 data.  				List<LineItemDetail> LIDS = new List<LineItemDetail> ();  				//For each line on the receipt the following needs to be called.   				for (int i = 0; i < 3; i++)//Add three line items  				 {  					LIDS.Add (dg.SetLevel3Data ());  				}  				BCP.LineItemDetails = LIDS;  				BCP.TransactionId = BCR.TransactionId;  				//Set the transactionId to the original Authorize  				response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked);  				if (response.Count < 1) {  					return;  				}  				ChkLstTransactionsProcessed.Items.Add (response [0]);  			}  			else {  				MessageBox.Show ("Capture failed as Card PAN was not a valid Level 2 or Level 3 purchase Card");  			}  		}  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  	finally {  		Cursor = Cursors.Default;  	}  }  else if (_ecks != null)//Process as a Check transaction   {  	try {  		MessageBox.Show (@"Placeholder for ECK code. Please ask your solution consultant for an example");  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  	finally {  		Cursor = Cursors.Default;  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The following statement contains a magic number: try {  	BankcardTransactionPro BCtransaction = new BankcardTransactionPro ();  	//First Check to see if this work flow is an "AuthorizeAndCapture" or an "Authorize" followed by a "Capture".  	if (chkL3AuthAndCapture.Checked) {  		//In this case the work flow is a "AuthorizeAndCapture"  		BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' true);  		BCtransaction = dg.SetBankCardTxnData (BCPO);  		response = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  		if (response.Count < 1) {  			return;  		}  		ChkLstTransactionsProcessed.Items.Add (response [0]);  	}  	else {  		//In this case the work flow is an "Authorize" followed by a "Capture"  		BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' false);  		BCtransaction = dg.SetBankCardTxnData (BCPO);  		response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  		if (response.Count < 1) {  			return;  		}  		ChkLstTransactionsProcessed.Items.Add (response [0]);  		BankcardTransactionResponsePro BCR = (BankcardTransactionResponsePro)response [0].Response;  		//Note : Now let's send the capture for the level 3 transaction.   		//First verify that the card is a valid Purchase Card.   		if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) {  			BankcardCapturePro BCP = new BankcardCapturePro ();  			BCP.Level2Data = dg.SetLevel2Data ();  			//Level 3 purchase card is always inclusive of Level 1 and Level 2 data.  			List<LineItemDetail> LIDS = new List<LineItemDetail> ();  			//For each line on the receipt the following needs to be called.   			for (int i = 0; i < 3; i++)//Add three line items  			 {  				LIDS.Add (dg.SetLevel3Data ());  			}  			BCP.LineItemDetails = LIDS;  			BCP.TransactionId = BCR.TransactionId;  			//Set the transactionId to the original Authorize  			response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked);  			if (response.Count < 1) {  				return;  			}  			ChkLstTransactionsProcessed.Items.Add (response [0]);  		}  		else {  			MessageBox.Show ("Capture failed as Card PAN was not a valid Level 2 or Level 3 purchase Card");  		}  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  finally {  	Cursor = Cursors.Default;  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The following statement contains a magic number: if (chkL3AuthAndCapture.Checked) {  	//In this case the work flow is a "AuthorizeAndCapture"  	BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' true);  	BCtransaction = dg.SetBankCardTxnData (BCPO);  	response = Helper.ProcessBCPTransaction (TransactionType.AuthorizeAndCapture' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  	if (response.Count < 1) {  		return;  	}  	ChkLstTransactionsProcessed.Items.Add (response [0]);  }  else {  	//In this case the work flow is an "Authorize" followed by a "Capture"  	BankCardProProcessingOptions BCPO = new BankCardProProcessingOptions (PurchaseCardLevel.Level3' false' false);  	BCtransaction = dg.SetBankCardTxnData (BCPO);  	response = Helper.ProcessBCPTransaction (TransactionType.Authorize' BCtransaction' null' null' null' null' null' null' null' ChkAcknowledge.Checked' ChkUserWorkflowId.Checked' ChkForceCloseBatch.Checked);  	if (response.Count < 1) {  		return;  	}  	ChkLstTransactionsProcessed.Items.Add (response [0]);  	BankcardTransactionResponsePro BCR = (BankcardTransactionResponsePro)response [0].Response;  	//Note : Now let's send the capture for the level 3 transaction.   	//First verify that the card is a valid Purchase Card.   	if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) {  		BankcardCapturePro BCP = new BankcardCapturePro ();  		BCP.Level2Data = dg.SetLevel2Data ();  		//Level 3 purchase card is always inclusive of Level 1 and Level 2 data.  		List<LineItemDetail> LIDS = new List<LineItemDetail> ();  		//For each line on the receipt the following needs to be called.   		for (int i = 0; i < 3; i++)//Add three line items  		 {  			LIDS.Add (dg.SetLevel3Data ());  		}  		BCP.LineItemDetails = LIDS;  		BCP.TransactionId = BCR.TransactionId;  		//Set the transactionId to the original Authorize  		response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked);  		if (response.Count < 1) {  			return;  		}  		ChkLstTransactionsProcessed.Items.Add (response [0]);  	}  	else {  		MessageBox.Show ("Capture failed as Card PAN was not a valid Level 2 or Level 3 purchase Card");  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The following statement contains a magic number: if (BCR.CommercialCardResponse == CommercialCardResponse.BusinessCard | BCR.CommercialCardResponse == CommercialCardResponse.CorporateCard | BCR.CommercialCardResponse == CommercialCardResponse.PurchaseCard) {  	BankcardCapturePro BCP = new BankcardCapturePro ();  	BCP.Level2Data = dg.SetLevel2Data ();  	//Level 3 purchase card is always inclusive of Level 1 and Level 2 data.  	List<LineItemDetail> LIDS = new List<LineItemDetail> ();  	//For each line on the receipt the following needs to be called.   	for (int i = 0; i < 3; i++)//Add three line items  	 {  		LIDS.Add (dg.SetLevel3Data ());  	}  	BCP.LineItemDetails = LIDS;  	BCP.TransactionId = BCR.TransactionId;  	//Set the transactionId to the original Authorize  	response = Helper.ProcessBCPTransaction (TransactionType.Capture' null' BCP' null' null' null' null' null' null' ChkAcknowledge.Checked' false' ChkForceCloseBatch.Checked);  	if (response.Count < 1) {  		return;  	}  	ChkLstTransactionsProcessed.Items.Add (response [0]);  }  else {  	MessageBox.Show ("Capture failed as Card PAN was not a valid Level 2 or Level 3 purchase Card");  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cmdPurchaseCardL3_Click,The following statement contains a magic number: for (int i = 0; i < 3; i++)//Add three line items   {  	LIDS.Add (dg.SetLevel3Data ());  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (_si.BankcardServices != null) {  	foreach (BankcardService BCS in _si.BankcardServices) {  		if (BCS.ServiceId == Helper.ServiceID) {  			_bcs = BCS;  			//Set the BankCard Service to be used  			if (BCS.ServiceId == "39C6700001" || BCS.ServiceId == "FC85600001") {  				dg.IntService = false;  				RdoAVSIntl.Checked = false;  				RdoAVSUS.Checked = true;  			}  			else {  				dg.IntService = true;  				RdoAVSIntl.Checked = true;  				RdoAVSUS.Checked = false;  			}  			SupportedTxnTypes = BCS.Operations;  			//Toggle the buttons to match supported transaction types.  			if (!AvailableTxnTypes (SupportedTxnTypes)) {  				MessageBox.Show ("This Service is not supported with CWS");  				return;  			}  			blnMatch = true;  			// Determine if it's possible to send more than one capture               			if (BCS.MultiplePartialCapture)  				ChkMultiplePartialCapture.Enabled = true;  			txtAboutTheService.Text = "ServiceId : " + BCS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  			+ "\r\nService Name : " + BCS.ServiceName + "\r\nAlternative Merchant Data : " + BCS.AlternativeMerchantData //Indicates whether the service supports the display of AlternativeMerchantData on accountholder statements. Subject to issuer discretion.  			+ "\r\nAutoSettle Supported : " + BCS.AutoBatch + "\r\nEncryptionKey : " + BCS.EncryptionKey //Indicates whether AutoBatch is supported.  			+ "\r\n\r\nAVSData Fields Required: " + "\r\n - CardHolderName: " + BCS.AVSData.CardholderName + "\r\n - Street: " + BCS.AVSData.Street + "\r\n - City: " + BCS.AVSData.City + "\r\n - State: " + BCS.AVSData.StateProvince + "\r\n - PostalCode: " + BCS.AVSData.PostalCode + "\r\n - Phone: " + BCS.AVSData.Phone + "\r\n - Country: " + BCS.AVSData.Country + "\r\nCutoffTime : " + BCS.CutoffTime //If the service supports AutoBatch' this is the cutoff time for new transactions to be included in the daily automated batch.   			//+ "\r\nEncryptionKey : " + BCS.EncryptionKey //Public key used for encrypting payment account data.  			+ "\r\nManagedBilling : " + BCS.ManagedBilling //Indicates whether the service supports Service Provider managed billing.  			+ "\r\nMaximumBatchItems : " + BCS.MaximumBatchItems //Maximum number of items included in a single batch.  			+ "\r\nMaximumLineItems : " + BCS.MaximumLineItems //Maximum number of line items that may be provided when providing Level 3 line item data.  			+ "\r\nMultiplePartialCapture : " + BCS.MultiplePartialCapture //Indicates whether the service supports multiple partial captures of a single authorization.  			+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  			+ "\r\n - Adjust : " + BCS.Operations.Adjust + "\r\n - AuthAndCapture : " + BCS.Operations.AuthAndCapture + "\r\n - Authorize : " + BCS.Operations.Authorize + "\r\n - Capture : " + BCS.Operations.Capture + "\r\n - CaptureAll : " + BCS.Operations.CaptureAll + "\r\n - CaptureSelective : " + BCS.Operations.CaptureSelective + "\r\n - CloseBatch : " + BCS.Operations.CloseBatch + "\r\n - Disburse : " + BCS.Operations.Disburse + "\r\n - ManageAccount : " + BCS.Operations.ManageAccount + "\r\n - ManageAccountById : " + BCS.Operations.ManageAccountById + "\r\n - QueryAccount : " + BCS.Operations.QueryAccount + "\r\n - QueryRejected : " + BCS.Operations.QueryRejected + "\r\n - ReturnById : " + BCS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + BCS.Operations.ReturnUnlinked + "\r\n - Undo : " + BCS.Operations.Undo + "\r\n - Verify : " + BCS.Operations.Verify + "\r\nPurchaseCardLevel : " + BCS.PurchaseCardLevel //Specifies highest level of purchase card support. Level 3 support implies support for Level 2 as well.  			+ "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  			+ "\r\n - BatchAssignmentSupport : " + BCS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  			+ "\r\n - CredentialsRequired : " + BCS.Tenders.CredentialsRequired + "\r\n - Credit : " + BCS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  			+ "\r\n - CreditAuthorizeSupport : " + BCS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  			+ "\r\n - CreditReturnSupportType : " + BCS.Tenders.CreditReturnSupportType + "\r\n - CreditReversalSupportType : " + BCS.Tenders.CreditReversalSupportType + "\r\n - PINDebit : " + BCS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  			+ "\r\n - PINDebitReturnSupportType : " + BCS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  			+ "\r\n - PinDebitUndoSupport : " + BCS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  			+ "\r\n - PINDebitUndoTenderDataRequired : " + BCS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  			+ "\r\n - PINlessDebit : " + BCS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  			+ "\r\n - PartialApprovalSupportType : " + BCS.Tenders.PartialApprovalSupportType + "\r\n - QueryRejectedSupport : " + BCS.Tenders.QueryRejectedSupport + "\r\n - TrackDataSupport : " + BCS.Tenders.TrackDataSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  			;  			//show the arrow to indicate service information  			picArrow.Visible = true;  			tmrServiceArrow.Interval = 2000;  			tmrServiceArrow.Start ();  			tmrServiceArrow.Enabled = true;  			tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  			//Enable Purchase Card buttons depending on the Servie returned  			if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level2) {  				cmdPurchaseCardL2.Enabled = true;  				chkL2AuthAndCapture.Enabled = true;  				cmdPurchaseCardL3.Enabled = false;  				chkL3AuthAndCapture.Enabled = false;  			}  			if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level3) {  				cmdPurchaseCardL2.Enabled = true;  				chkL2AuthAndCapture.Enabled = true;  				cmdPurchaseCardL3.Enabled = true;  				chkL3AuthAndCapture.Enabled = true;  			}  			//Check to see if AuthorizeAndCapture supported  			ChkMagensaAuthorizeAndCapture.Enabled = (BCS.Tenders.CreditAuthorizeSupport == CreditAuthorizeSupportType.Both ? true : false);  			//Check to see if PINDebit supported  			chkProcessAsPINDebitTxn.Enabled = (BCS.Tenders.PINDebit ? true : false);  			//Check to see if PINLess Debit supported  			ChkProcessAsPINLessDebit.Enabled = (BCS.Tenders.PINlessDebit ? true : false);  			//Some service providers support partial approvals as well as forced void.   			ChkAllowPartialApprovals.Enabled = true;  			ChkForceVoid.Enabled = true;  			//Some service providers require Username and Password.  			if (Helper.CredentialRequired ()) {  				txtCredUserName.Enabled = true;  				txtCredPassword.Enabled = true;  			}  			else {  				txtCredUserName.Enabled = false;  				txtCredPassword.Enabled = false;  			}  			//We now have something to persiste  			cmdPersistConfig.Enabled = true;  			cmdDeletePersistCached.Enabled = true;  			//List the current service selected  			if (Helper.ServiceID.Length > 0) {  				lblCurrentService.Text = @"Processing as Service : " + BCS.ServiceName + @" - " + BCS.ServiceId;  				lblCurrentServiceClass.Text = @"Service Class : BCP - Bank Card Processing";  			}  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: foreach (BankcardService BCS in _si.BankcardServices) {  	if (BCS.ServiceId == Helper.ServiceID) {  		_bcs = BCS;  		//Set the BankCard Service to be used  		if (BCS.ServiceId == "39C6700001" || BCS.ServiceId == "FC85600001") {  			dg.IntService = false;  			RdoAVSIntl.Checked = false;  			RdoAVSUS.Checked = true;  		}  		else {  			dg.IntService = true;  			RdoAVSIntl.Checked = true;  			RdoAVSUS.Checked = false;  		}  		SupportedTxnTypes = BCS.Operations;  		//Toggle the buttons to match supported transaction types.  		if (!AvailableTxnTypes (SupportedTxnTypes)) {  			MessageBox.Show ("This Service is not supported with CWS");  			return;  		}  		blnMatch = true;  		// Determine if it's possible to send more than one capture               		if (BCS.MultiplePartialCapture)  			ChkMultiplePartialCapture.Enabled = true;  		txtAboutTheService.Text = "ServiceId : " + BCS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  		+ "\r\nService Name : " + BCS.ServiceName + "\r\nAlternative Merchant Data : " + BCS.AlternativeMerchantData //Indicates whether the service supports the display of AlternativeMerchantData on accountholder statements. Subject to issuer discretion.  		+ "\r\nAutoSettle Supported : " + BCS.AutoBatch + "\r\nEncryptionKey : " + BCS.EncryptionKey //Indicates whether AutoBatch is supported.  		+ "\r\n\r\nAVSData Fields Required: " + "\r\n - CardHolderName: " + BCS.AVSData.CardholderName + "\r\n - Street: " + BCS.AVSData.Street + "\r\n - City: " + BCS.AVSData.City + "\r\n - State: " + BCS.AVSData.StateProvince + "\r\n - PostalCode: " + BCS.AVSData.PostalCode + "\r\n - Phone: " + BCS.AVSData.Phone + "\r\n - Country: " + BCS.AVSData.Country + "\r\nCutoffTime : " + BCS.CutoffTime //If the service supports AutoBatch' this is the cutoff time for new transactions to be included in the daily automated batch.   		//+ "\r\nEncryptionKey : " + BCS.EncryptionKey //Public key used for encrypting payment account data.  		+ "\r\nManagedBilling : " + BCS.ManagedBilling //Indicates whether the service supports Service Provider managed billing.  		+ "\r\nMaximumBatchItems : " + BCS.MaximumBatchItems //Maximum number of items included in a single batch.  		+ "\r\nMaximumLineItems : " + BCS.MaximumLineItems //Maximum number of line items that may be provided when providing Level 3 line item data.  		+ "\r\nMultiplePartialCapture : " + BCS.MultiplePartialCapture //Indicates whether the service supports multiple partial captures of a single authorization.  		+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  		+ "\r\n - Adjust : " + BCS.Operations.Adjust + "\r\n - AuthAndCapture : " + BCS.Operations.AuthAndCapture + "\r\n - Authorize : " + BCS.Operations.Authorize + "\r\n - Capture : " + BCS.Operations.Capture + "\r\n - CaptureAll : " + BCS.Operations.CaptureAll + "\r\n - CaptureSelective : " + BCS.Operations.CaptureSelective + "\r\n - CloseBatch : " + BCS.Operations.CloseBatch + "\r\n - Disburse : " + BCS.Operations.Disburse + "\r\n - ManageAccount : " + BCS.Operations.ManageAccount + "\r\n - ManageAccountById : " + BCS.Operations.ManageAccountById + "\r\n - QueryAccount : " + BCS.Operations.QueryAccount + "\r\n - QueryRejected : " + BCS.Operations.QueryRejected + "\r\n - ReturnById : " + BCS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + BCS.Operations.ReturnUnlinked + "\r\n - Undo : " + BCS.Operations.Undo + "\r\n - Verify : " + BCS.Operations.Verify + "\r\nPurchaseCardLevel : " + BCS.PurchaseCardLevel //Specifies highest level of purchase card support. Level 3 support implies support for Level 2 as well.  		+ "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  		+ "\r\n - BatchAssignmentSupport : " + BCS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  		+ "\r\n - CredentialsRequired : " + BCS.Tenders.CredentialsRequired + "\r\n - Credit : " + BCS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  		+ "\r\n - CreditAuthorizeSupport : " + BCS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  		+ "\r\n - CreditReturnSupportType : " + BCS.Tenders.CreditReturnSupportType + "\r\n - CreditReversalSupportType : " + BCS.Tenders.CreditReversalSupportType + "\r\n - PINDebit : " + BCS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  		+ "\r\n - PINDebitReturnSupportType : " + BCS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  		+ "\r\n - PinDebitUndoSupport : " + BCS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  		+ "\r\n - PINDebitUndoTenderDataRequired : " + BCS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  		+ "\r\n - PINlessDebit : " + BCS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  		+ "\r\n - PartialApprovalSupportType : " + BCS.Tenders.PartialApprovalSupportType + "\r\n - QueryRejectedSupport : " + BCS.Tenders.QueryRejectedSupport + "\r\n - TrackDataSupport : " + BCS.Tenders.TrackDataSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  		;  		//show the arrow to indicate service information  		picArrow.Visible = true;  		tmrServiceArrow.Interval = 2000;  		tmrServiceArrow.Start ();  		tmrServiceArrow.Enabled = true;  		tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  		//Enable Purchase Card buttons depending on the Servie returned  		if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level2) {  			cmdPurchaseCardL2.Enabled = true;  			chkL2AuthAndCapture.Enabled = true;  			cmdPurchaseCardL3.Enabled = false;  			chkL3AuthAndCapture.Enabled = false;  		}  		if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level3) {  			cmdPurchaseCardL2.Enabled = true;  			chkL2AuthAndCapture.Enabled = true;  			cmdPurchaseCardL3.Enabled = true;  			chkL3AuthAndCapture.Enabled = true;  		}  		//Check to see if AuthorizeAndCapture supported  		ChkMagensaAuthorizeAndCapture.Enabled = (BCS.Tenders.CreditAuthorizeSupport == CreditAuthorizeSupportType.Both ? true : false);  		//Check to see if PINDebit supported  		chkProcessAsPINDebitTxn.Enabled = (BCS.Tenders.PINDebit ? true : false);  		//Check to see if PINLess Debit supported  		ChkProcessAsPINLessDebit.Enabled = (BCS.Tenders.PINlessDebit ? true : false);  		//Some service providers support partial approvals as well as forced void.   		ChkAllowPartialApprovals.Enabled = true;  		ChkForceVoid.Enabled = true;  		//Some service providers require Username and Password.  		if (Helper.CredentialRequired ()) {  			txtCredUserName.Enabled = true;  			txtCredPassword.Enabled = true;  		}  		else {  			txtCredUserName.Enabled = false;  			txtCredPassword.Enabled = false;  		}  		//We now have something to persiste  		cmdPersistConfig.Enabled = true;  		cmdDeletePersistCached.Enabled = true;  		//List the current service selected  		if (Helper.ServiceID.Length > 0) {  			lblCurrentService.Text = @"Processing as Service : " + BCS.ServiceName + @" - " + BCS.ServiceId;  			lblCurrentServiceClass.Text = @"Service Class : BCP - Bank Card Processing";  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (BCS.ServiceId == Helper.ServiceID) {  	_bcs = BCS;  	//Set the BankCard Service to be used  	if (BCS.ServiceId == "39C6700001" || BCS.ServiceId == "FC85600001") {  		dg.IntService = false;  		RdoAVSIntl.Checked = false;  		RdoAVSUS.Checked = true;  	}  	else {  		dg.IntService = true;  		RdoAVSIntl.Checked = true;  		RdoAVSUS.Checked = false;  	}  	SupportedTxnTypes = BCS.Operations;  	//Toggle the buttons to match supported transaction types.  	if (!AvailableTxnTypes (SupportedTxnTypes)) {  		MessageBox.Show ("This Service is not supported with CWS");  		return;  	}  	blnMatch = true;  	// Determine if it's possible to send more than one capture               	if (BCS.MultiplePartialCapture)  		ChkMultiplePartialCapture.Enabled = true;  	txtAboutTheService.Text = "ServiceId : " + BCS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  	+ "\r\nService Name : " + BCS.ServiceName + "\r\nAlternative Merchant Data : " + BCS.AlternativeMerchantData //Indicates whether the service supports the display of AlternativeMerchantData on accountholder statements. Subject to issuer discretion.  	+ "\r\nAutoSettle Supported : " + BCS.AutoBatch + "\r\nEncryptionKey : " + BCS.EncryptionKey //Indicates whether AutoBatch is supported.  	+ "\r\n\r\nAVSData Fields Required: " + "\r\n - CardHolderName: " + BCS.AVSData.CardholderName + "\r\n - Street: " + BCS.AVSData.Street + "\r\n - City: " + BCS.AVSData.City + "\r\n - State: " + BCS.AVSData.StateProvince + "\r\n - PostalCode: " + BCS.AVSData.PostalCode + "\r\n - Phone: " + BCS.AVSData.Phone + "\r\n - Country: " + BCS.AVSData.Country + "\r\nCutoffTime : " + BCS.CutoffTime //If the service supports AutoBatch' this is the cutoff time for new transactions to be included in the daily automated batch.   	//+ "\r\nEncryptionKey : " + BCS.EncryptionKey //Public key used for encrypting payment account data.  	+ "\r\nManagedBilling : " + BCS.ManagedBilling //Indicates whether the service supports Service Provider managed billing.  	+ "\r\nMaximumBatchItems : " + BCS.MaximumBatchItems //Maximum number of items included in a single batch.  	+ "\r\nMaximumLineItems : " + BCS.MaximumLineItems //Maximum number of line items that may be provided when providing Level 3 line item data.  	+ "\r\nMultiplePartialCapture : " + BCS.MultiplePartialCapture //Indicates whether the service supports multiple partial captures of a single authorization.  	+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  	+ "\r\n - Adjust : " + BCS.Operations.Adjust + "\r\n - AuthAndCapture : " + BCS.Operations.AuthAndCapture + "\r\n - Authorize : " + BCS.Operations.Authorize + "\r\n - Capture : " + BCS.Operations.Capture + "\r\n - CaptureAll : " + BCS.Operations.CaptureAll + "\r\n - CaptureSelective : " + BCS.Operations.CaptureSelective + "\r\n - CloseBatch : " + BCS.Operations.CloseBatch + "\r\n - Disburse : " + BCS.Operations.Disburse + "\r\n - ManageAccount : " + BCS.Operations.ManageAccount + "\r\n - ManageAccountById : " + BCS.Operations.ManageAccountById + "\r\n - QueryAccount : " + BCS.Operations.QueryAccount + "\r\n - QueryRejected : " + BCS.Operations.QueryRejected + "\r\n - ReturnById : " + BCS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + BCS.Operations.ReturnUnlinked + "\r\n - Undo : " + BCS.Operations.Undo + "\r\n - Verify : " + BCS.Operations.Verify + "\r\nPurchaseCardLevel : " + BCS.PurchaseCardLevel //Specifies highest level of purchase card support. Level 3 support implies support for Level 2 as well.  	+ "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  	+ "\r\n - BatchAssignmentSupport : " + BCS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  	+ "\r\n - CredentialsRequired : " + BCS.Tenders.CredentialsRequired + "\r\n - Credit : " + BCS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  	+ "\r\n - CreditAuthorizeSupport : " + BCS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  	+ "\r\n - CreditReturnSupportType : " + BCS.Tenders.CreditReturnSupportType + "\r\n - CreditReversalSupportType : " + BCS.Tenders.CreditReversalSupportType + "\r\n - PINDebit : " + BCS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  	+ "\r\n - PINDebitReturnSupportType : " + BCS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  	+ "\r\n - PinDebitUndoSupport : " + BCS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  	+ "\r\n - PINDebitUndoTenderDataRequired : " + BCS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  	+ "\r\n - PINlessDebit : " + BCS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  	+ "\r\n - PartialApprovalSupportType : " + BCS.Tenders.PartialApprovalSupportType + "\r\n - QueryRejectedSupport : " + BCS.Tenders.QueryRejectedSupport + "\r\n - TrackDataSupport : " + BCS.Tenders.TrackDataSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  	;  	//show the arrow to indicate service information  	picArrow.Visible = true;  	tmrServiceArrow.Interval = 2000;  	tmrServiceArrow.Start ();  	tmrServiceArrow.Enabled = true;  	tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  	//Enable Purchase Card buttons depending on the Servie returned  	if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level2) {  		cmdPurchaseCardL2.Enabled = true;  		chkL2AuthAndCapture.Enabled = true;  		cmdPurchaseCardL3.Enabled = false;  		chkL3AuthAndCapture.Enabled = false;  	}  	if (BCS.PurchaseCardLevel == PurchaseCardLevel.Level3) {  		cmdPurchaseCardL2.Enabled = true;  		chkL2AuthAndCapture.Enabled = true;  		cmdPurchaseCardL3.Enabled = true;  		chkL3AuthAndCapture.Enabled = true;  	}  	//Check to see if AuthorizeAndCapture supported  	ChkMagensaAuthorizeAndCapture.Enabled = (BCS.Tenders.CreditAuthorizeSupport == CreditAuthorizeSupportType.Both ? true : false);  	//Check to see if PINDebit supported  	chkProcessAsPINDebitTxn.Enabled = (BCS.Tenders.PINDebit ? true : false);  	//Check to see if PINLess Debit supported  	ChkProcessAsPINLessDebit.Enabled = (BCS.Tenders.PINlessDebit ? true : false);  	//Some service providers support partial approvals as well as forced void.   	ChkAllowPartialApprovals.Enabled = true;  	ChkForceVoid.Enabled = true;  	//Some service providers require Username and Password.  	if (Helper.CredentialRequired ()) {  		txtCredUserName.Enabled = true;  		txtCredPassword.Enabled = true;  	}  	else {  		txtCredUserName.Enabled = false;  		txtCredPassword.Enabled = false;  	}  	//We now have something to persiste  	cmdPersistConfig.Enabled = true;  	cmdDeletePersistCached.Enabled = true;  	//List the current service selected  	if (Helper.ServiceID.Length > 0) {  		lblCurrentService.Text = @"Processing as Service : " + BCS.ServiceName + @" - " + BCS.ServiceId;  		lblCurrentServiceClass.Text = @"Service Class : BCP - Bank Card Processing";  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: tmrServiceArrow.Interval = 2000;  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (_si.ElectronicCheckingServices != null) {  	foreach (ElectronicCheckingService ECKS in _si.ElectronicCheckingServices) {  		if (ECKS.ServiceId == Helper.ServiceID) {  			_ecks = ECKS;  			//Set the BankCard Service to be used  			SupportedTxnTypes = ECKS.Operations;  			//Toggle the buttons to match supported transaction types.  			if (!AvailableTxnTypes (SupportedTxnTypes)) {  				MessageBox.Show ("This Service is not supported with CWS");  				return;  			}  			blnMatch = true;  			txtAboutTheService.Text = "ServiceId : " + ECKS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  			+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (ECKS) //Operations Supported  			+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  			+ "\r\n - Adjust : " + ECKS.Operations.Adjust + "\r\n - AuthAndCapture : " + ECKS.Operations.AuthAndCapture + "\r\n - Authorize : " + ECKS.Operations.Authorize + "\r\n - Capture : " + ECKS.Operations.Capture + "\r\n - CaptureAll : " + ECKS.Operations.CaptureAll + "\r\n - CaptureSelective : " + ECKS.Operations.CaptureSelective + "\r\n - CloseBatch : " + ECKS.Operations.CloseBatch + "\r\n - QueryAccount : " + ECKS.Operations.QueryAccount + "\r\n - ReturnById : " + ECKS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + ECKS.Operations.ReturnUnlinked + "\r\n - Undo : " + ECKS.Operations.Undo + "\r\n - Verify : " + ECKS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  			+ "\r\n - BatchAssignmentSupport : " + ECKS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  			+ "\r\n - Credit : " + ECKS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  			+ "\r\n - CreditAuthorizeSupport : " + ECKS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  			+ "\r\n - PINDebit : " + ECKS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  			+ "\r\n - PINDebitReturnSupportType : " + ECKS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  			+ "\r\n - PinDebitUndoSupport : " + ECKS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  			+ "\r\n - PINDebitUndoTenderDataRequired : " + ECKS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  			+ "\r\n - PINlessDebit : " + ECKS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  			+ "\r\n - QueryRejectedSupport : " + ECKS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  			;  			//show the arrow to indicate service information  			picArrow.Visible = true;  			tmrServiceArrow.Interval = 2000;  			tmrServiceArrow.Start ();  			tmrServiceArrow.Enabled = true;  			tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  			//Some service providers require Username and Password.  			if (Helper.CredentialRequired ()) {  				txtCredUserName.Enabled = true;  				txtCredPassword.Enabled = true;  			}  			else {  				txtCredUserName.Enabled = false;  				txtCredPassword.Enabled = false;  			}  			//We now have something to persiste  			cmdPersistConfig.Enabled = true;  			cmdDeletePersistCached.Enabled = true;  			//List the current service selected  			if (Helper.ServiceID.Length > 0) {  				lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (ECKS) + @" - " + ECKS.ServiceId;  				lblCurrentServiceClass.Text = @"Service Class : ECK - Electronic Check Processing";  			}  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: foreach (ElectronicCheckingService ECKS in _si.ElectronicCheckingServices) {  	if (ECKS.ServiceId == Helper.ServiceID) {  		_ecks = ECKS;  		//Set the BankCard Service to be used  		SupportedTxnTypes = ECKS.Operations;  		//Toggle the buttons to match supported transaction types.  		if (!AvailableTxnTypes (SupportedTxnTypes)) {  			MessageBox.Show ("This Service is not supported with CWS");  			return;  		}  		blnMatch = true;  		txtAboutTheService.Text = "ServiceId : " + ECKS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  		+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (ECKS) //Operations Supported  		+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  		+ "\r\n - Adjust : " + ECKS.Operations.Adjust + "\r\n - AuthAndCapture : " + ECKS.Operations.AuthAndCapture + "\r\n - Authorize : " + ECKS.Operations.Authorize + "\r\n - Capture : " + ECKS.Operations.Capture + "\r\n - CaptureAll : " + ECKS.Operations.CaptureAll + "\r\n - CaptureSelective : " + ECKS.Operations.CaptureSelective + "\r\n - CloseBatch : " + ECKS.Operations.CloseBatch + "\r\n - QueryAccount : " + ECKS.Operations.QueryAccount + "\r\n - ReturnById : " + ECKS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + ECKS.Operations.ReturnUnlinked + "\r\n - Undo : " + ECKS.Operations.Undo + "\r\n - Verify : " + ECKS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  		+ "\r\n - BatchAssignmentSupport : " + ECKS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  		+ "\r\n - Credit : " + ECKS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  		+ "\r\n - CreditAuthorizeSupport : " + ECKS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  		+ "\r\n - PINDebit : " + ECKS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  		+ "\r\n - PINDebitReturnSupportType : " + ECKS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  		+ "\r\n - PinDebitUndoSupport : " + ECKS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  		+ "\r\n - PINDebitUndoTenderDataRequired : " + ECKS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  		+ "\r\n - PINlessDebit : " + ECKS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  		+ "\r\n - QueryRejectedSupport : " + ECKS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  		;  		//show the arrow to indicate service information  		picArrow.Visible = true;  		tmrServiceArrow.Interval = 2000;  		tmrServiceArrow.Start ();  		tmrServiceArrow.Enabled = true;  		tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  		//Some service providers require Username and Password.  		if (Helper.CredentialRequired ()) {  			txtCredUserName.Enabled = true;  			txtCredPassword.Enabled = true;  		}  		else {  			txtCredUserName.Enabled = false;  			txtCredPassword.Enabled = false;  		}  		//We now have something to persiste  		cmdPersistConfig.Enabled = true;  		cmdDeletePersistCached.Enabled = true;  		//List the current service selected  		if (Helper.ServiceID.Length > 0) {  			lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (ECKS) + @" - " + ECKS.ServiceId;  			lblCurrentServiceClass.Text = @"Service Class : ECK - Electronic Check Processing";  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (ECKS.ServiceId == Helper.ServiceID) {  	_ecks = ECKS;  	//Set the BankCard Service to be used  	SupportedTxnTypes = ECKS.Operations;  	//Toggle the buttons to match supported transaction types.  	if (!AvailableTxnTypes (SupportedTxnTypes)) {  		MessageBox.Show ("This Service is not supported with CWS");  		return;  	}  	blnMatch = true;  	txtAboutTheService.Text = "ServiceId : " + ECKS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  	+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (ECKS) //Operations Supported  	+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  	+ "\r\n - Adjust : " + ECKS.Operations.Adjust + "\r\n - AuthAndCapture : " + ECKS.Operations.AuthAndCapture + "\r\n - Authorize : " + ECKS.Operations.Authorize + "\r\n - Capture : " + ECKS.Operations.Capture + "\r\n - CaptureAll : " + ECKS.Operations.CaptureAll + "\r\n - CaptureSelective : " + ECKS.Operations.CaptureSelective + "\r\n - CloseBatch : " + ECKS.Operations.CloseBatch + "\r\n - QueryAccount : " + ECKS.Operations.QueryAccount + "\r\n - ReturnById : " + ECKS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + ECKS.Operations.ReturnUnlinked + "\r\n - Undo : " + ECKS.Operations.Undo + "\r\n - Verify : " + ECKS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  	+ "\r\n - BatchAssignmentSupport : " + ECKS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  	+ "\r\n - Credit : " + ECKS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  	+ "\r\n - CreditAuthorizeSupport : " + ECKS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  	+ "\r\n - PINDebit : " + ECKS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  	+ "\r\n - PINDebitReturnSupportType : " + ECKS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  	+ "\r\n - PinDebitUndoSupport : " + ECKS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  	+ "\r\n - PINDebitUndoTenderDataRequired : " + ECKS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  	+ "\r\n - PINlessDebit : " + ECKS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  	+ "\r\n - QueryRejectedSupport : " + ECKS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  	;  	//show the arrow to indicate service information  	picArrow.Visible = true;  	tmrServiceArrow.Interval = 2000;  	tmrServiceArrow.Start ();  	tmrServiceArrow.Enabled = true;  	tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  	//Some service providers require Username and Password.  	if (Helper.CredentialRequired ()) {  		txtCredUserName.Enabled = true;  		txtCredPassword.Enabled = true;  	}  	else {  		txtCredUserName.Enabled = false;  		txtCredPassword.Enabled = false;  	}  	//We now have something to persiste  	cmdPersistConfig.Enabled = true;  	cmdDeletePersistCached.Enabled = true;  	//List the current service selected  	if (Helper.ServiceID.Length > 0) {  		lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (ECKS) + @" - " + ECKS.ServiceId;  		lblCurrentServiceClass.Text = @"Service Class : ECK - Electronic Check Processing";  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: tmrServiceArrow.Interval = 2000;  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (_si.StoredValueServices != null) {  	foreach (StoredValueService SVAS in _si.StoredValueServices) {  		if (SVAS.ServiceId == Helper.ServiceID) {  			_svas = SVAS;  			//Set the Stored Value Service to be used  			SupportedTxnTypes = SVAS.Operations;  			//Toggle the buttons to match supported transaction types.  			if (!AvailableTxnTypes (SupportedTxnTypes)) {  				MessageBox.Show ("This Service is not supported with CWS");  				return;  			}  			blnMatch = true;  			txtAboutTheService.Text = "ServiceId : " + SVAS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  			+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (SVAS) //Operations Supported  			+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  			+ "\r\n - Adjust : " + SVAS.Operations.Adjust + "\r\n - AuthAndCapture : " + SVAS.Operations.AuthAndCapture + "\r\n - Authorize : " + SVAS.Operations.Authorize + "\r\n - Capture : " + SVAS.Operations.Capture + "\r\n - CaptureAll : " + SVAS.Operations.CaptureAll + "\r\n - CaptureSelective : " + SVAS.Operations.CaptureSelective + "\r\n - CloseBatch : " + SVAS.Operations.CloseBatch + "\r\n - QueryAccount : " + SVAS.Operations.QueryAccount + "\r\n - ReturnById : " + SVAS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + SVAS.Operations.ReturnUnlinked + "\r\n - Undo : " + SVAS.Operations.Undo + "\r\n - Verify : " + SVAS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  			+ "\r\n - BatchAssignmentSupport : " + SVAS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  			+ "\r\n - Credit : " + SVAS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  			+ "\r\n - CreditAuthorizeSupport : " + SVAS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  			+ "\r\n - PINDebit : " + SVAS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  			+ "\r\n - PINDebitReturnSupportType : " + SVAS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  			+ "\r\n - PinDebitUndoSupport : " + SVAS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  			+ "\r\n - PINDebitUndoTenderDataRequired : " + SVAS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  			+ "\r\n - PINlessDebit : " + SVAS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  			+ "\r\n - QueryRejectedSupport : " + SVAS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  			;  			//show the arrow to indicate service information  			picArrow.Visible = true;  			tmrServiceArrow.Interval = 2000;  			tmrServiceArrow.Start ();  			tmrServiceArrow.Enabled = true;  			tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  			//Some service providers require Username and Password.  			if (Helper.CredentialRequired ()) {  				txtCredUserName.Enabled = true;  				txtCredPassword.Enabled = true;  			}  			else {  				txtCredUserName.Enabled = false;  				txtCredPassword.Enabled = false;  			}  			//We now have something to persiste  			cmdPersistConfig.Enabled = true;  			cmdDeletePersistCached.Enabled = true;  			//List the current service selected  			if (Helper.ServiceID.Length > 0) {  				lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (SVAS) + @" - " + SVAS.ServiceId;  				lblCurrentServiceClass.Text = @"Service Class : SVA - Stored Value Processing";  			}  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: foreach (StoredValueService SVAS in _si.StoredValueServices) {  	if (SVAS.ServiceId == Helper.ServiceID) {  		_svas = SVAS;  		//Set the Stored Value Service to be used  		SupportedTxnTypes = SVAS.Operations;  		//Toggle the buttons to match supported transaction types.  		if (!AvailableTxnTypes (SupportedTxnTypes)) {  			MessageBox.Show ("This Service is not supported with CWS");  			return;  		}  		blnMatch = true;  		txtAboutTheService.Text = "ServiceId : " + SVAS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  		+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (SVAS) //Operations Supported  		+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  		+ "\r\n - Adjust : " + SVAS.Operations.Adjust + "\r\n - AuthAndCapture : " + SVAS.Operations.AuthAndCapture + "\r\n - Authorize : " + SVAS.Operations.Authorize + "\r\n - Capture : " + SVAS.Operations.Capture + "\r\n - CaptureAll : " + SVAS.Operations.CaptureAll + "\r\n - CaptureSelective : " + SVAS.Operations.CaptureSelective + "\r\n - CloseBatch : " + SVAS.Operations.CloseBatch + "\r\n - QueryAccount : " + SVAS.Operations.QueryAccount + "\r\n - ReturnById : " + SVAS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + SVAS.Operations.ReturnUnlinked + "\r\n - Undo : " + SVAS.Operations.Undo + "\r\n - Verify : " + SVAS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  		+ "\r\n - BatchAssignmentSupport : " + SVAS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  		+ "\r\n - Credit : " + SVAS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  		+ "\r\n - CreditAuthorizeSupport : " + SVAS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  		+ "\r\n - PINDebit : " + SVAS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  		+ "\r\n - PINDebitReturnSupportType : " + SVAS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  		+ "\r\n - PinDebitUndoSupport : " + SVAS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  		+ "\r\n - PINDebitUndoTenderDataRequired : " + SVAS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  		+ "\r\n - PINlessDebit : " + SVAS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  		+ "\r\n - QueryRejectedSupport : " + SVAS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  		;  		//show the arrow to indicate service information  		picArrow.Visible = true;  		tmrServiceArrow.Interval = 2000;  		tmrServiceArrow.Start ();  		tmrServiceArrow.Enabled = true;  		tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  		//Some service providers require Username and Password.  		if (Helper.CredentialRequired ()) {  			txtCredUserName.Enabled = true;  			txtCredPassword.Enabled = true;  		}  		else {  			txtCredUserName.Enabled = false;  			txtCredPassword.Enabled = false;  		}  		//We now have something to persiste  		cmdPersistConfig.Enabled = true;  		cmdDeletePersistCached.Enabled = true;  		//List the current service selected  		if (Helper.ServiceID.Length > 0) {  			lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (SVAS) + @" - " + SVAS.ServiceId;  			lblCurrentServiceClass.Text = @"Service Class : SVA - Stored Value Processing";  		}  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: if (SVAS.ServiceId == Helper.ServiceID) {  	_svas = SVAS;  	//Set the Stored Value Service to be used  	SupportedTxnTypes = SVAS.Operations;  	//Toggle the buttons to match supported transaction types.  	if (!AvailableTxnTypes (SupportedTxnTypes)) {  		MessageBox.Show ("This Service is not supported with CWS");  		return;  	}  	blnMatch = true;  	txtAboutTheService.Text = "ServiceId : " + SVAS.ServiceId //Unique identifier for available services. These values change from sandbox to production.  	+ "\r\nService Name : " + Helper.TranslateServiceIdToFriendlyName (SVAS) //Operations Supported  	+ "\r\n\r\nOperations Supported:" //Specifies which operations are supported for the service.  	+ "\r\n - Adjust : " + SVAS.Operations.Adjust + "\r\n - AuthAndCapture : " + SVAS.Operations.AuthAndCapture + "\r\n - Authorize : " + SVAS.Operations.Authorize + "\r\n - Capture : " + SVAS.Operations.Capture + "\r\n - CaptureAll : " + SVAS.Operations.CaptureAll + "\r\n - CaptureSelective : " + SVAS.Operations.CaptureSelective + "\r\n - CloseBatch : " + SVAS.Operations.CloseBatch + "\r\n - QueryAccount : " + SVAS.Operations.QueryAccount + "\r\n - ReturnById : " + SVAS.Operations.ReturnById + "\r\n - ReturnUnlinked : " + SVAS.Operations.ReturnUnlinked + "\r\n - Undo : " + SVAS.Operations.Undo + "\r\n - Verify : " + SVAS.Operations.Verify + "\r\n\r\nTender Information:" //Contains specific information about the supported payment tenders.  	+ "\r\n - BatchAssignmentSupport : " + SVAS.Tenders.BatchAssignmentSupport //Indicates level of BatchAssignment supported by the service. Required.  	+ "\r\n - Credit : " + SVAS.Tenders.Credit //Indicates support for the Credit Card tender. Required.  	+ "\r\n - CreditAuthorizeSupport : " + SVAS.Tenders.CreditAuthorizeSupport //Indicates the level of credit authorization support on a service. Required. Maps to the CreditAuthorizeSupportType enumeration.  	+ "\r\n - PINDebit : " + SVAS.Tenders.PINDebit //Indicates support for the PIN Debit tender. Required.  	+ "\r\n - PINDebitReturnSupportType : " + SVAS.Tenders.PINDebitReturnSupportType //Indicates if Return is supported by the service for PIN Debit transactions. Required. Maps to the PinDebitReturnSupportType enumeration. Defaults to 'Standalone'.  	+ "\r\n - PinDebitUndoSupport : " + SVAS.Tenders.PinDebitUndoSupport //Indicates if Undo is supported by the service for PIN Debit transactions. Required. Maps to the PINDebitUndoSupportType enumeration.  	+ "\r\n - PINDebitUndoTenderDataRequired : " + SVAS.Tenders.PINDebitUndoTenderDataRequired //Specifies whether a new card swipe is required when performing an Undo on a PIN Debit card. Required.  	+ "\r\n - PINlessDebit : " + SVAS.Tenders.PINlessDebit //Indicates support for PINless Debit. Required.  	+ "\r\n - QueryRejectedSupport : " + SVAS.Tenders.QueryRejectedSupport//Indicates if date ranges are supported for QueryRejected on a service. Required. Maps to the QueryRejectedSupportType enumeration.  	;  	//show the arrow to indicate service information  	picArrow.Visible = true;  	tmrServiceArrow.Interval = 2000;  	tmrServiceArrow.Start ();  	tmrServiceArrow.Enabled = true;  	tmrServiceArrow.Tick += new EventHandler (OnTimedEvent);  	//Some service providers require Username and Password.  	if (Helper.CredentialRequired ()) {  		txtCredUserName.Enabled = true;  		txtCredPassword.Enabled = true;  	}  	else {  		txtCredUserName.Enabled = false;  		txtCredPassword.Enabled = false;  	}  	//We now have something to persiste  	cmdPersistConfig.Enabled = true;  	cmdDeletePersistCached.Enabled = true;  	//List the current service selected  	if (Helper.ServiceID.Length > 0) {  		lblCurrentService.Text = @"Processing as Service : " + Helper.TranslateServiceIdToFriendlyName (SVAS) + @" - " + SVAS.ServiceId;  		lblCurrentServiceClass.Text = @"Service Class : SVA - Stored Value Processing";  	}  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The following statement contains a magic number: tmrServiceArrow.Interval = 2000;  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,txtIdentityToken_TextChanged,The following statement contains a magic number: if (txtIdentityToken.Text.Length > 1) {  	TxtServiceKey.Text = "Service Key: " + Helper.RetrieveServiceKeyFromIdentityToken (txtIdentityToken.Text.Trim ());  	if (TxtServiceKey.Text.Length > 13)  		TxtServiceKey.Visible = true;  }  
Magic Number,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,txtIdentityToken_TextChanged,The following statement contains a magic number: if (TxtServiceKey.Text.Length > 13)  	TxtServiceKey.Visible = true;  
Magic Number,SampleCode,TransactionManagementServices,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\TransactionManagementServices.cs,TransactionManagementServices,The following statement contains a magic number: dtpStartTimeTMS.Value = DateTime.Now.AddHours (-2);  
Duplicate Code,SampleCode,HelperMethods,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\HelperMethods.cs,ProcessElectronicCheckingTransactionResponse,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 47)' (63' 90))
Duplicate Code,SampleCode,Magensa,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\Magensa.cs,CmdGenerateFields_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 51)' (73' 99))
Duplicate Code,SampleCode,SampleCode_DeskTop,C:\repos\EVO-Snap_CSharp-SampleApp-Premium-CardPresent\source\SampleCode_DeskTop\SampleCode_DeskTop.cs,cboAvailableServices_SelectedIndexChanged,The method contains a code clone-set at the following line numbers (starting from the method definition): ((137' 157)' (191' 211))
