Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,GetInnerAttribute,The method has 5 parameters.
Long Statement,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,GetInnerTextForTagName,The length of the statement  "	var element = xNode == null ? null : xNode.ChildNodes.FirstOrDefault (node => node.NodeName.Equals (tag' StringComparison.OrdinalIgnoreCase)); " is 142.
Long Statement,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,GetInnerAttribute,The length of the statement  "	var element = xNode == null ? null : xNode.ChildNodes.FirstOrDefault (node => node.NodeName.Equals (tag' StringComparison.OrdinalIgnoreCase)); " is 142.
Long Statement,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,InitializeWithXmlDocument,The length of the statement  "	LastUpdateTime = ChangeDateTimeType (GetInnerTextForTagName<string> (document' "lastBuildDate")) ?? ChangeDateTimeType (GetInnerTextForTagName<string> (document' "pubDate")); " is 174.
Long Statement,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,InitializeWithXmlDocument,The length of the statement  "	UpdateTimeSpan = ChangeTimeSpanType (GetInnerTextForTagName<string> (document' "sy:updatePeriod")' GetInnerTextForTagName<string> (document' "sy:updateFrequency")); " is 164.
Long Statement,RSSReader.Library.Common,RSSReaderFactory,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReaderFactory.cs,GetCaptureFileName,The length of the statement  "	var str = Convert.ToBase64String (SHA1.HashData (WindowsRuntimeBuffer.Create (bytes' 0' bytes.Length' bytes.Length)).ToArray ()); " is 129.
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: if (int.TryParse (frequency' out iFrequency) && iFrequency > 0) {  	switch (period.ToLower ()) {  	case "hourly":  		return TimeSpan.FromHours (iFrequency);  	case "daily":  		return TimeSpan.FromDays (iFrequency);  	case "weekly":  		return TimeSpan.FromDays (iFrequency * 7);  	case "monthly":  		return TimeSpan.FromDays (iFrequency * 30);  	case "yearly":  		return TimeSpan.FromDays (iFrequency * 365);  	}  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: if (int.TryParse (frequency' out iFrequency) && iFrequency > 0) {  	switch (period.ToLower ()) {  	case "hourly":  		return TimeSpan.FromHours (iFrequency);  	case "daily":  		return TimeSpan.FromDays (iFrequency);  	case "weekly":  		return TimeSpan.FromDays (iFrequency * 7);  	case "monthly":  		return TimeSpan.FromDays (iFrequency * 30);  	case "yearly":  		return TimeSpan.FromDays (iFrequency * 365);  	}  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: if (int.TryParse (frequency' out iFrequency) && iFrequency > 0) {  	switch (period.ToLower ()) {  	case "hourly":  		return TimeSpan.FromHours (iFrequency);  	case "daily":  		return TimeSpan.FromDays (iFrequency);  	case "weekly":  		return TimeSpan.FromDays (iFrequency * 7);  	case "monthly":  		return TimeSpan.FromDays (iFrequency * 30);  	case "yearly":  		return TimeSpan.FromDays (iFrequency * 365);  	}  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: switch (period.ToLower ()) {  case "hourly":  	return TimeSpan.FromHours (iFrequency);  case "daily":  	return TimeSpan.FromDays (iFrequency);  case "weekly":  	return TimeSpan.FromDays (iFrequency * 7);  case "monthly":  	return TimeSpan.FromDays (iFrequency * 30);  case "yearly":  	return TimeSpan.FromDays (iFrequency * 365);  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: switch (period.ToLower ()) {  case "hourly":  	return TimeSpan.FromHours (iFrequency);  case "daily":  	return TimeSpan.FromDays (iFrequency);  case "weekly":  	return TimeSpan.FromDays (iFrequency * 7);  case "monthly":  	return TimeSpan.FromDays (iFrequency * 30);  case "yearly":  	return TimeSpan.FromDays (iFrequency * 365);  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: switch (period.ToLower ()) {  case "hourly":  	return TimeSpan.FromHours (iFrequency);  case "daily":  	return TimeSpan.FromDays (iFrequency);  case "weekly":  	return TimeSpan.FromDays (iFrequency * 7);  case "monthly":  	return TimeSpan.FromDays (iFrequency * 30);  case "yearly":  	return TimeSpan.FromDays (iFrequency * 365);  }  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: return TimeSpan.FromDays (iFrequency * 7);  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: return TimeSpan.FromDays (iFrequency * 30);  
Magic Number,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following statement contains a magic number: return TimeSpan.FromDays (iFrequency * 365);  
Missing Default,RSSReader.Library.Common,RSSReader,C:\repos\cj1024_RSSReader\RSSReader.Library.Common\RSSReader.cs,ChangeTimeSpanType,The following switch statement is missing a default case: switch (period.ToLower ()) {  case "hourly":  	return TimeSpan.FromHours (iFrequency);  case "daily":  	return TimeSpan.FromDays (iFrequency);  case "weekly":  	return TimeSpan.FromDays (iFrequency * 7);  case "monthly":  	return TimeSpan.FromDays (iFrequency * 30);  case "yearly":  	return TimeSpan.FromDays (iFrequency * 365);  }  
