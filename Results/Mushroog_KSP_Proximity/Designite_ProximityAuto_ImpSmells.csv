Implementation smell,Namespace,Class,File,Method,Description
Long Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The method has 150 lines of code.
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,Cyclomatic complexity of the method is 32
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,Cyclomatic complexity of the method is 12
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,Cyclomatic complexity of the method is 8
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,Cyclomatic complexity of the method is 12
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,Cyclomatic complexity of the method is 22
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The length of the statement  "			if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) { " is 120.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The length of the statement  "	else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) { " is 159.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowGraphicalIndicator,The length of the statement  "		style.normal.textColor = style.focused.textColor = style.hover.textColor = style.active.textColor = GetColour (altitude); " is 121.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = Color.white; " is 124.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green; " is 132.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "                styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;" is 132.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "		styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green; " is 147.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "		styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white; " is 132.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "		styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red; " is 155.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,CheckChutes,The length of the statement  "			if (en.Current.deploymentState == ModuleParachute.deploymentStates.SEMIDEPLOYED || en.Current.deploymentState == ModuleParachute.deploymentStates.DEPLOYED) { " is 157.
Complex Conditional,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The conditional expression  "Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f"  is complex.
Complex Conditional,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The conditional expression  "visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))"  is complex.
Complex Conditional,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The conditional expression  "(!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)"  is complex.
Empty Catch Block,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The method has an empty catch block.
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.x = Screen.width / 2 - thisRect.width / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.x = Screen.width / 2 - thisRect.width / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.y = Screen.height / 2 - thisRect.height / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.y = Screen.height / 2 - thisRect.height / 2;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: try {  	//print("@@@Toolbar init");  	toolbarButton = new ToolbarButtonWrapper ("Proximity"' "toolbarButton");  	SetButtonTexture ();  	toolbarButton.ToolTip = "Proximity settings";  	toolbarButton.Visible = true;  	toolbarButton.AddButtonClickHandler (e =>  {  		//print("@@@ prox toolbar button clicked");  		ToolbarShowSettings = !ToolbarShowSettings;  		SetButtonTexture ();  		windowPos.yMax = windowPos.yMin + 20;  	});  	UseToolbar = true;  }  catch (Exception ex) {  	//print("@@@Exception on toolbar init' msg = " + ex.Message);  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: toolbarButton.AddButtonClickHandler (e =>  {  	//print("@@@ prox toolbar button clicked");  	ToolbarShowSettings = !ToolbarShowSettings;  	SetButtonTexture ();  	windowPos.yMax = windowPos.yMin + 20;  });  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: windowPos.yMax = windowPos.yMin + 20;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: if (state != StartState.Editor) {  	//print("@@@OnStart");  	RenderingManager.AddToPostDrawQueue (0' OnDraw);  	sampleRate = AudioSettings.outputSampleRate;  	obj = new GameObject ();  	obj.AddComponent ("AudioSource");  	MakeBeep ();  	obj.audio.ignoreListenerVolume = true;  	obj.audio.volume = volume;  	//DontDestroyOnLoad(obj);  	timeSinceLanding = vessel.missionTime;  	if (Sines == null) {  		Sines = new float[10000];  		for (int i = 0; i < 10000; i++) {  			Sines [i] = Mathf.Sin ((float)i);  		}  	}  	/*                 if (PingPongs == null)                 {                     PingPongs = new float[10000];                     for (int i = 0; i < 10000; i++)                     {                         PingPongs[i] = Mathf.PingPong((float)i' 0.5f);                     }                 }                  string s = "@@@";                 for (int i = 0; i < 10000; i += 100)                 {                     s += PingPongs[i].ToString() + "' ";                 }                 print(s); */}  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: if (state != StartState.Editor) {  	//print("@@@OnStart");  	RenderingManager.AddToPostDrawQueue (0' OnDraw);  	sampleRate = AudioSettings.outputSampleRate;  	obj = new GameObject ();  	obj.AddComponent ("AudioSource");  	MakeBeep ();  	obj.audio.ignoreListenerVolume = true;  	obj.audio.volume = volume;  	//DontDestroyOnLoad(obj);  	timeSinceLanding = vessel.missionTime;  	if (Sines == null) {  		Sines = new float[10000];  		for (int i = 0; i < 10000; i++) {  			Sines [i] = Mathf.Sin ((float)i);  		}  	}  	/*                 if (PingPongs == null)                 {                     PingPongs = new float[10000];                     for (int i = 0; i < 10000; i++)                     {                         PingPongs[i] = Mathf.PingPong((float)i' 0.5f);                     }                 }                  string s = "@@@";                 for (int i = 0; i < 10000; i += 100)                 {                     s += PingPongs[i].ToString() + "' ";                 }                 print(s); */}  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: if (Sines == null) {  	Sines = new float[10000];  	for (int i = 0; i < 10000; i++) {  		Sines [i] = Mathf.Sin ((float)i);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: if (Sines == null) {  	Sines = new float[10000];  	for (int i = 0; i < 10000; i++) {  		Sines [i] = Mathf.Sin ((float)i);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: Sines = new float[10000];  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnStart,The following statement contains a magic number: for (int i = 0; i < 10000; i++) {  	Sines [i] = Mathf.Sin ((float)i);  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	double absspeed = vessel.verticalSpeed;  	if (absspeed > 0) {  		absspeed = 0;  	}  	float velocity = Mathf.Min ((float)(-1.0 * absspeed)' 250f);  	actfrequency = frequency + (velocity * 15f);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 880;  	break;  case 3:  	actfrequency = 1760;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 440;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 880;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 1760;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 880;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: if (Mathf.Abs (oldActualFrequency - actfrequency) < 8 && oldBeepIndex == beepIndex) {  	// todo - does this need to be copied?  	obj.audio.clip.GetData (data' 0);  	return;  }  else {  	oldActualFrequency = actfrequency;  	oldBeepIndex = beepIndex;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Mathf.Sign (Sines [num]);  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  		data [count] = data [count++ - 1];  		position++;  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Sines [num];  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Mathf.Sign (Sines [num]);  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  		data [count] = data [count++ - 1];  		position++;  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Sines [num];  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnSave,The following statement contains a magic number: config.SetValue ("Volume"' (int)(volume * 100));  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (volume < 0.01f) {  	// no config file' set defaults  	ActivationHeight = 4000;  	DSThreshold = 500;  	beepLength = 3;  	beepIndex = 1;  	pitchIndex = 0;  	visualIndex = 1;  	volume = 0.5f;  	deactivateIfRover = true;  }  else {  	if (ActivationHeight < 500)  		ActivationHeight = 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  	if (DSThreshold < 200)  		DSThreshold = 200;  	if (DSThreshold > 2000)  		DSThreshold = 2000;  	if (beepLength < 1)  		beepLength = 1;  	if (beepLength > 10)  		beepLength = 10;  	if (beepIndex < 0 || beepIndex > 3)  		beepIndex = 1;  	if (pitchIndex < 0 || pitchIndex > 3)  		pitchIndex = 0;  	if (visualIndex < 0 || visualIndex > 3)  		visualIndex = 1;  	if (volume > 1.0f)  		volume = 1.0f;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: ActivationHeight = 4000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: DSThreshold = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: beepLength = 3;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight < 500)  	ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight < 500)  	ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight > 10000)  	ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight > 10000)  	ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold < 200)  	DSThreshold = 200;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold < 200)  	DSThreshold = 200;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: DSThreshold = 200;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold > 2000)  	DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold > 2000)  	DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (beepLength > 10)  	beepLength = 10;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (beepLength > 10)  	beepLength = 10;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: beepLength = 10;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (beepIndex < 0 || beepIndex > 3)  	beepIndex = 1;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (pitchIndex < 0 || pitchIndex > 3)  	pitchIndex = 0;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (visualIndex < 0 || visualIndex > 3)  	visualIndex = 1;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel != null) {  	altitude = GetAltitude ();  	isPowered = IsPowered ();  	#if PERSONAL_VERSION  	                PrepareToLand(); #endif  	if (RightConditionsToDraw ()) {  		// no window if no visuals && no settings  		if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  			return;  		}  		if (ConditionalShow != prevConditionalShow) {  			sizechange = true;  		}  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  			windowPos.xMax = 240;  		}  		windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  		if (windowPos.width < 220)  			windowPos.width = 220;  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel != null) {  	altitude = GetAltitude ();  	isPowered = IsPowered ();  	#if PERSONAL_VERSION  	                PrepareToLand(); #endif  	if (RightConditionsToDraw ()) {  		// no window if no visuals && no settings  		if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  			return;  		}  		if (ConditionalShow != prevConditionalShow) {  			sizechange = true;  		}  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  			windowPos.xMax = 240;  		}  		windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  		if (windowPos.width < 220)  			windowPos.width = 220;  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel != null) {  	altitude = GetAltitude ();  	isPowered = IsPowered ();  	#if PERSONAL_VERSION  	                PrepareToLand(); #endif  	if (RightConditionsToDraw ()) {  		// no window if no visuals && no settings  		if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  			return;  		}  		if (ConditionalShow != prevConditionalShow) {  			sizechange = true;  		}  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  			windowPos.xMax = 240;  		}  		windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  		if (windowPos.width < 220)  			windowPos.width = 220;  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel != null) {  	altitude = GetAltitude ();  	isPowered = IsPowered ();  	#if PERSONAL_VERSION  	                PrepareToLand(); #endif  	if (RightConditionsToDraw ()) {  		// no window if no visuals && no settings  		if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  			return;  		}  		if (ConditionalShow != prevConditionalShow) {  			sizechange = true;  		}  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  			windowPos.xMax = 240;  		}  		windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  		if (windowPos.width < 220)  			windowPos.width = 220;  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel != null) {  	altitude = GetAltitude ();  	isPowered = IsPowered ();  	#if PERSONAL_VERSION  	                PrepareToLand(); #endif  	if (RightConditionsToDraw ()) {  		// no window if no visuals && no settings  		if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  			return;  		}  		if (ConditionalShow != prevConditionalShow) {  			sizechange = true;  		}  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  			windowPos.xMax = 240;  		}  		windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  		if (windowPos.width < 220)  			windowPos.width = 220;  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw ()) {  	// no window if no visuals && no settings  	if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  		return;  	}  	if (ConditionalShow != prevConditionalShow) {  		sizechange = true;  	}  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  		windowPos.xMax = 240;  	}  	windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  	if (windowPos.width < 220)  		windowPos.width = 220;  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw ()) {  	// no window if no visuals && no settings  	if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  		return;  	}  	if (ConditionalShow != prevConditionalShow) {  		sizechange = true;  	}  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  		windowPos.xMax = 240;  	}  	windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  	if (windowPos.width < 220)  		windowPos.width = 220;  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw ()) {  	// no window if no visuals && no settings  	if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  		return;  	}  	if (ConditionalShow != prevConditionalShow) {  		sizechange = true;  	}  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  		windowPos.xMax = 240;  	}  	windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  	if (windowPos.width < 220)  		windowPos.width = 220;  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw ()) {  	// no window if no visuals && no settings  	if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  		return;  	}  	if (ConditionalShow != prevConditionalShow) {  		sizechange = true;  	}  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  		windowPos.xMax = 240;  	}  	windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  	if (windowPos.width < 220)  		windowPos.width = 220;  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw ()) {  	// no window if no visuals && no settings  	if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  		return;  	}  	if (ConditionalShow != prevConditionalShow) {  		sizechange = true;  	}  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  		windowPos.xMax = 240;  	}  	windowPos = GUILayout.Window (this.ClassID' windowPos' OnWindow' ConditionalShow ? "Proximity" : "Proximity settings");  	if (windowPos.width < 220)  		windowPos.width = 220;  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (visualIndex == 3 && !((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings))) {  	return;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (sizechange) {  	windowPos.yMax = windowPos.yMin + 20;  	sizechange = false;  	windowPos.xMax = 240;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (sizechange) {  	windowPos.yMax = windowPos.yMin + 20;  	sizechange = false;  	windowPos.xMax = 240;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: windowPos.yMax = windowPos.yMin + 20;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: windowPos.xMax = 240;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (windowPos.width < 220)  	windowPos.width = 220;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (windowPos.width < 220)  	windowPos.width = 220;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: windowPos.width = 220;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceLanding + 5.0 < vessel.missionTime && (Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) < 1)) {  	//print("@@@Not processing - Landed");  	retval = false;  }  // switch off if timewarp on  else if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceLanding + 5.0 < vessel.missionTime && (Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) < 1)) {  	//print("@@@Not processing - Landed");  	retval = false;  }  // switch off if timewarp on  else if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceLanding + 5.0 < vessel.missionTime && (Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) < 1)) {  	//print("@@@Not processing - Landed");  	retval = false;  }  // switch off if timewarp on  else if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceLanding + 5.0 < vessel.missionTime && (Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) < 1)) {  	//print("@@@Not processing - Landed");  	retval = false;  }  // switch off if timewarp on  else if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (TimeWarp.CurrentRateIndex != 0) {  	//print("@@@Not processing - Timewarp");  	retval = false;  }  // switch off if not SUB_ORBITAL or FLYING (5 second grace period)  else if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (!(timeSinceLanding + 5.0 > vessel.missionTime || vessel.situation == Vessel.Situations.FLYING || vessel.situation == Vessel.Situations.SUB_ORBITAL)) {  	//print("@@@Not processing - Not flying or suborbital");  	retval = false;  }  // because timeSinceLanding hasn't been set yet  else if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (vessel.situation == Vessel.Situations.PRELAUNCH) {  	//print("@@@Not processing - prelaunch");  	retval = false;  }  // ignore if not within (ActivationHeight) of surface  else if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (altitude > ActivationHeight || altitude < 1) {  	//print("@@@Not processing - Not in alt range");  	retval = false;  }  // don't display / beep if game paused  else if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (FlightDriver.Pause || PauseMenu.isOpen) {  	//print("@@@Not processing - paused");  	retval = false;  }  // don't display if parachutes open  else if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (parachutesOpen && deactivateOnParachute) {  	//print("@@@Not processing - parachute");  	retval = false;  }  // don't display if rover  else if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (deactivateIfRover && vessel.vesselType == VesselType.Rover) {  	retval = false;  }  else if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (timeSinceOnGround + 5.0 > vessel.missionTime && vessel.verticalSpeed >= 0) {  	//print("@@@Not processing - just launched");  	retval = false;  }  else if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: if (!(timeSinceDescending + 5.0 > vessel.missionTime) && vessel.verticalSpeed >= 0) {  	retval = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (ConditionalShow) {  	CheckChutes ();  	int count = GetBeepInterval ();  	skip--;  	if (skip <= 0) {  		skip = count;  		if (isPowered && SystemOn) {  			if (warnPos < 0) {  				warnPos = 0;  			}  			if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  			 {  				warn = GetWarnStringSpeed ();  			}  			else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  			 {  				warn = GetWarnStringDistance ();  			}  			warn = AddCrackle (warn);  			DoSound ();  		}  		else {  			warn = "---------------------unpowered----------------------";  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (ConditionalShow) {  	CheckChutes ();  	int count = GetBeepInterval ();  	skip--;  	if (skip <= 0) {  		skip = count;  		if (isPowered && SystemOn) {  			if (warnPos < 0) {  				warnPos = 0;  			}  			if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  			 {  				warn = GetWarnStringSpeed ();  			}  			else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  			 {  				warn = GetWarnStringDistance ();  			}  			warn = AddCrackle (warn);  			DoSound ();  		}  		else {  			warn = "---------------------unpowered----------------------";  		}  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (skip <= 0) {  	skip = count;  	if (isPowered && SystemOn) {  		if (warnPos < 0) {  			warnPos = 0;  		}  		if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  		 {  			warn = GetWarnStringSpeed ();  		}  		else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  		 {  			warn = GetWarnStringDistance ();  		}  		warn = AddCrackle (warn);  		DoSound ();  	}  	else {  		warn = "---------------------unpowered----------------------";  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (skip <= 0) {  	skip = count;  	if (isPowered && SystemOn) {  		if (warnPos < 0) {  			warnPos = 0;  		}  		if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  		 {  			warn = GetWarnStringSpeed ();  		}  		else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  		 {  			warn = GetWarnStringDistance ();  		}  		warn = AddCrackle (warn);  		DoSound ();  	}  	else {  		warn = "---------------------unpowered----------------------";  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (isPowered && SystemOn) {  	if (warnPos < 0) {  		warnPos = 0;  	}  	if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  	 {  		warn = GetWarnStringSpeed ();  	}  	else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  	 {  		warn = GetWarnStringDistance ();  	}  	warn = AddCrackle (warn);  	DoSound ();  }  else {  	warn = "---------------------unpowered----------------------";  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (isPowered && SystemOn) {  	if (warnPos < 0) {  		warnPos = 0;  	}  	if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed  	 {  		warn = GetWarnStringSpeed ();  	}  	else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance  	 {  		warn = GetWarnStringDistance ();  	}  	warn = AddCrackle (warn);  	DoSound ();  }  else {  	warn = "---------------------unpowered----------------------";  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed   {  	warn = GetWarnStringSpeed ();  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance   {  	warn = GetWarnStringDistance ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (visualIndex == 1 || (visualIndex == 2 && altitude <= DSThreshold))// visualType = speed   {  	warn = GetWarnStringSpeed ();  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance   {  	warn = GetWarnStringDistance ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold))// visualType = distance   {  	warn = GetWarnStringDistance ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowGraphicalIndicator,The following statement contains a magic number: if (SystemOn && ConditionalShow && visualIndex != 3) {  	GUIStyle style = new GUIStyle (GUI.skin.textArea);  	style.normal.textColor = style.focused.textColor = style.hover.textColor = style.active.textColor = GetColour (altitude);  	style.alignment = TextAnchor.MiddleCenter;  	style.wordWrap = false;  	style.stretchWidth = false;  	style.fixedWidth = fixedwidth;  	style.stretchHeight = false;  	style.fixedHeight = 25f;  	GUILayout.BeginHorizontal (GUILayout.Width (fixedwidth));  	GUILayout.Label (warn' style);  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetBeepInterval,The following statement contains a magic number: return altitude * ActivationHeight * 15 / (ActivationHeight * ActivationHeight);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (!isPowered) {  	colour = Color.grey;  }  else if (vessel.verticalSpeed >= 0) {  	// going up  	colour = Color.white;  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (!isPowered) {  	colour = Color.grey;  }  else if (vessel.verticalSpeed >= 0) {  	// going up  	colour = Color.white;  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed >= 0) {  	// going up  	colour = Color.white;  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed >= 0) {  	// going up  	colour = Color.white;  }  else if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (visualIndex == 0 || (visualIndex == 2 && altitude > DSThreshold)) {  	// distance mode  	colour = Color.cyan;  }  else {  	// speed mode - colour for danger  	float danger = (float)vessel.verticalSpeed * -2.5f / (altitude + 4);  	if (danger < 0.0) {  		danger = 0.0f;  	}  	else if (danger > 1.0) {  		danger = 1.0f;  	}  	if (danger <= 0.5f) {  		colour = Color.Lerp (Color.green' Color.yellow' danger * 2.0f);  	}  	else {  		colour = Color.Lerp (Color.yellow' Color.red' (danger - 0.5f) * 2.0f);  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if ((!UseToolbar && GUIShowSettings && ConditionalShow) || (UseToolbar && ToolbarShowSettings)) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Active below:");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500)  			ActivationHeight = 500;  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000)  			ActivationHeight = 10000;  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	#if ! PERSONAL_VERSION  	// Visual threshold subtype  	if (visualIndex == 2) {  		ThresholdHeight (styleValue);  	}  	#endif  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep volume   	float oldvol = volume;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Volume:"' GUILayout.ExpandWidth (false));  	volume = GUILayout.HorizontalSlider (volume' 0.01f' 1f' GUILayout.ExpandWidth (true));  	GUILayout.EndHorizontal ();  	if (volume != oldvol) {  		obj.audio.volume = volume;  	}  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length: ");  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 10) {  			beepLength = 10;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  	// parachutes  	GUIStyle styleToggle = new GUIStyle (GUI.skin.toggle);  	styleToggle.fixedWidth = fixedwidth;  	GUILayout.BeginHorizontal ();  	deactivateOnParachute = GUILayout.Toggle (deactivateOnParachute' "  Off if parachutes open"' styleToggle' null);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	deactivateIfRover = GUILayout.Toggle (deactivateIfRover' "  Off if vessel is rover"' styleToggle' null);  	GUILayout.EndHorizontal ();  	#if PERSONAL_VERSION  	                // Configure ship for landing                 styleToggle = new GUIStyle(GUI.skin.toggle);                 styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green;                 styleValue.alignment = TextAnchor.MiddleCenter;                  bool oldauto = autoExtendLandingLegs;                 GUILayout.BeginHorizontal();                 autoExtendLandingLegs = GUILayout.Toggle(autoExtendLandingLegs' "  Autodeploy landing legs"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoExtendLandingLegs != oldauto)                 {                     sizechange = true;                 }                  oldauto = autoParachute;                 GUILayout.BeginHorizontal();                 autoParachute = GUILayout.Toggle(autoParachute' "  Autodeploy parachute"' styleToggle' null);                 GUILayout.EndHorizontal();                 if (autoParachute != oldauto)                 {                     sizechange = true;                 }                  // Visual threshold subtype                 if (visualIndex == 2 || autoExtendLandingLegs || autoParachute)                 {                     ThresholdHeight(styleValue);                 } #endif  	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = SystemOn ? Color.red : Color.green;  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.white;  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Proximity "' styleValue);  	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = SystemOn ? Color.green : Color.red;  	GUILayout.Label (SystemOn ? "ON " : "OFF "' styleValue);  	if (GUILayout.Button (SystemOn ? "Switch off" : "Switch on"' styleBtn' GUILayout.ExpandWidth (true))) {  		SystemOn = !SystemOn;  		sizechange = true;  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500)  		ActivationHeight = 500;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500)  		ActivationHeight = 500;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500)  		ActivationHeight = 500;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight -= 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight < 500)  	ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight < 500)  	ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000)  		ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight += 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight > 10000)  	ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight > 10000)  	ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  	visualIndex++;  	if (visualIndex == visualType.Length) {  		visualIndex = 0;  	}  	if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  	 {  		sizechange = true;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  	visualIndex++;  	if (visualIndex == visualType.Length) {  		visualIndex = 0;  	}  	if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  	 {  		sizechange = true;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing   {  	sizechange = true;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing   {  	sizechange = true;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	ThresholdHeight (styleValue);  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	beepLength++;  	if (beepLength > 10) {  		beepLength = 10;  	}  	MakeBeep ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	beepLength++;  	if (beepLength > 10) {  		beepLength = 10;  	}  	MakeBeep ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (beepLength > 10) {  	beepLength = 10;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (beepLength > 10) {  	beepLength = 10;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: beepLength = 10;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: DSThreshold -= 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 50;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 50;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: DSThreshold = 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: DSThreshold += 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,ThresholdHeight,The following statement contains a magic number: DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,MakeBeep,The following statement contains a magic number: beep = AudioClip.Create ("beepx"' beepLength * 512' 1' 44100' false' true' OnAudioRead' OnAudioSetPosition);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,MakeBeep,The following statement contains a magic number: beep = AudioClip.Create ("beepx"' beepLength * 512' 1' 44100' false' true' OnAudioRead' OnAudioSetPosition);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (vessel.verticalSpeed <= 0)// falling   {  	if (++warnPos > warnstring.Length / 2) {  		warnPos = 0;  	}  }  else// rising   {  	if (--warnPos < 1) {  		warnPos = warnstring.Length / 2;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (vessel.verticalSpeed <= 0)// falling   {  	if (++warnPos > warnstring.Length / 2) {  		warnPos = 0;  	}  }  else// rising   {  	if (--warnPos < 1) {  		warnPos = warnstring.Length / 2;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (++warnPos > warnstring.Length / 2) {  	warnPos = 0;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (--warnPos < 1) {  	warnPos = warnstring.Length / 2;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: warnPos = warnstring.Length / 2;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringDistance,The following statement contains a magic number: warnPos = warnstring.Length / 2 - ((warnstring.Length / 2) * altitude / ActivationHeight);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,GetWarnStringDistance,The following statement contains a magic number: warnPos = warnstring.Length / 2 - ((warnstring.Length / 2) * altitude / ActivationHeight);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: if (audioskip <= 0 && beepIndex != 3) {  	audioskip = 8;  	obj.audio.Play ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: if (audioskip <= 0 && beepIndex != 3) {  	audioskip = 8;  	obj.audio.Play ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: audioskip = 8;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (OldSpeed < 0 && vessel.verticalSpeed > OldSpeed + 2) {  	for (int i = (int)(1 - OldSpeed); i > 0; i--) {  		int j = UnityEngine.Random.Range (0' warn.Length - 2);  		warn = warn.Remove (j' 1);  		int k = UnityEngine.Random.Range (0' 8);  		warn = warn.Insert (j' breakup [k]);  		if (i > 20) {  			i = 20;  			OldSpeed *= 0.5;  		}  	}  	OldSpeed += 0.6;  }  else {  	OldSpeed = vessel.verticalSpeed;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: for (int i = (int)(1 - OldSpeed); i > 0; i--) {  	int j = UnityEngine.Random.Range (0' warn.Length - 2);  	warn = warn.Remove (j' 1);  	int k = UnityEngine.Random.Range (0' 8);  	warn = warn.Insert (j' breakup [k]);  	if (i > 20) {  		i = 20;  		OldSpeed *= 0.5;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: for (int i = (int)(1 - OldSpeed); i > 0; i--) {  	int j = UnityEngine.Random.Range (0' warn.Length - 2);  	warn = warn.Remove (j' 1);  	int k = UnityEngine.Random.Range (0' 8);  	warn = warn.Insert (j' breakup [k]);  	if (i > 20) {  		i = 20;  		OldSpeed *= 0.5;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: for (int i = (int)(1 - OldSpeed); i > 0; i--) {  	int j = UnityEngine.Random.Range (0' warn.Length - 2);  	warn = warn.Remove (j' 1);  	int k = UnityEngine.Random.Range (0' 8);  	warn = warn.Insert (j' breakup [k]);  	if (i > 20) {  		i = 20;  		OldSpeed *= 0.5;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: for (int i = (int)(1 - OldSpeed); i > 0; i--) {  	int j = UnityEngine.Random.Range (0' warn.Length - 2);  	warn = warn.Remove (j' 1);  	int k = UnityEngine.Random.Range (0' 8);  	warn = warn.Insert (j' breakup [k]);  	if (i > 20) {  		i = 20;  		OldSpeed *= 0.5;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: for (int i = (int)(1 - OldSpeed); i > 0; i--) {  	int j = UnityEngine.Random.Range (0' warn.Length - 2);  	warn = warn.Remove (j' 1);  	int k = UnityEngine.Random.Range (0' 8);  	warn = warn.Insert (j' breakup [k]);  	if (i > 20) {  		i = 20;  		OldSpeed *= 0.5;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (i > 20) {  	i = 20;  	OldSpeed *= 0.5;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (i > 20) {  	i = 20;  	OldSpeed *= 0.5;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: if (i > 20) {  	i = 20;  	OldSpeed *= 0.5;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: i = 20;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: OldSpeed *= 0.5;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,AddCrackle,The following statement contains a magic number: OldSpeed += 0.6;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,IsPowered,The following statement contains a magic number: return electricCharge > 0.04;  
Missing Default,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 2.0\Proximity\Proximity.cs,OnAudioRead,The following switch statement is missing a default case: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Mathf.Sign (Sines [num]);  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  		data [count] = data [count++ - 1];  		position++;  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		num = (int)(6.3f * actfrequency * position++ / sampleRate);  		data [count++] = Sines [num];  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
