Implementation smell,Namespace,Class,File,Method,Description
Long Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The method has 117 lines of code.
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,Cyclomatic complexity of the method is 27
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoProximityContent,Cyclomatic complexity of the method is 9
Complex Method,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,Cyclomatic complexity of the method is 24
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,RightConditionsToDraw,The length of the statement  "                print("sit = " + vessel.situation.ToString() + "' height terrain = " + alt.ToString() + "' height surface = " + vessel.GetHeightFromSurface().ToString() + "altitude: " + vessel.altitude.ToString());" is 198.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,RightConditionsToDraw,The length of the statement  "*/return (this.vessel == FlightGlobals.ActiveVessel) && this.part.IsPrimary (this.vessel.parts' this.ClassID) && alt < ActivationHeight && alt >= 0 && (timeSinceLanding + 5.0 > vessel.missionTime || Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) > 1) && TimeWarp.CurrentRateIndex == 0 && vessel.situation != Vessel.Situations.ORBITING && vessel.situation != Vessel.Situations.PRELAUNCH; " is 390.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSituation,The length of the statement  "	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green; " is 132.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "	styleBtn.normal.textColor = styleBtn.focused.textColor = styleBtn.hover.textColor = styleBtn.active.textColor = Color.white; " is 124.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The length of the statement  "	styleValue.normal.textColor = styleValue.focused.textColor = styleValue.hover.textColor = styleValue.active.textColor = Color.green; " is 132.
Long Statement,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringDistance,The length of the statement  "	warnPos = warnstring.Length / 2 - ((warnstring.Length / 2) * Convert.ToInt32 (vessel.GetHeightFromTerrain ()) / ActivationHeight); " is 130.
Complex Conditional,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The conditional expression  "Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f"  is complex.
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: if (Screen.width > 0 && Screen.height > 0 && thisRect.width > 0f && thisRect.height > 0f) {  	thisRect.x = Screen.width / 2 - thisRect.width / 2;  	thisRect.y = Screen.height / 2 - thisRect.height / 2;  }  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.x = Screen.width / 2 - thisRect.width / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.x = Screen.width / 2 - thisRect.width / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.y = Screen.height / 2 - thisRect.height / 2;  
Magic Number,Proximity.Extensions,RectExtensions,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Extensions\RectExtensions.cs,CentreScreen,The following statement contains a magic number: thisRect.y = Screen.height / 2 - thisRect.height / 2;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (pitchIndex) {  case 0:  	actfrequency = frequency + (7f * count * count);  	break;  case 1:  	actfrequency = 440;  	break;  case 2:  	actfrequency = 1760;  	break;  case 3:  	actfrequency = 3520;  	break;  default:  	actfrequency = 880;  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 440;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 1760;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 3520;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: actfrequency = 880;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  		data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  		data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  		data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  		data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: while (count < data.Length) {  	//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  	data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: while (count < data.Length) {  	data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following statement contains a magic number: data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight < 500) {  	ActivationHeight = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight < 500) {  	ActivationHeight = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: ActivationHeight = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 200;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 200;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: DSThreshold = 200;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight > 10000) {  	ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (ActivationHeight > 10000) {  	ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnLoad,The following statement contains a magic number: DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel == null) {  }  else {  	eReasonNotDrawn reason;  	if (RightConditionsToDraw (GetAltitude ())) {  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  		}  		windowPos = GUILayout.Window (10' windowPos' OnWindow' "Proximity");  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  	/*                 else                 {                     print("Proximity inactive - " + reason.ToString());                 }  */}  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (vessel == null) {  }  else {  	eReasonNotDrawn reason;  	if (RightConditionsToDraw (GetAltitude ())) {  		if (sizechange) {  			windowPos.yMax = windowPos.yMin + 20;  			sizechange = false;  		}  		windowPos = GUILayout.Window (10' windowPos' OnWindow' "Proximity");  		if (windowPos.x == 0 && windowPos.y == 0) {  			windowPos = windowPos.CentreScreen ();  		}  	}  	/*                 else                 {                     print("Proximity inactive - " + reason.ToString());                 }  */}  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw (GetAltitude ())) {  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  	}  	windowPos = GUILayout.Window (10' windowPos' OnWindow' "Proximity");  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (RightConditionsToDraw (GetAltitude ())) {  	if (sizechange) {  		windowPos.yMax = windowPos.yMin + 20;  		sizechange = false;  	}  	windowPos = GUILayout.Window (10' windowPos' OnWindow' "Proximity");  	if (windowPos.x == 0 && windowPos.y == 0) {  		windowPos = windowPos.CentreScreen ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: if (sizechange) {  	windowPos.yMax = windowPos.yMin + 20;  	sizechange = false;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: windowPos.yMax = windowPos.yMin + 20;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnDraw,The following statement contains a magic number: windowPos = GUILayout.Window (10' windowPos' OnWindow' "Proximity");  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,RightConditionsToDraw,The following statement contains a magic number: return (this.vessel == FlightGlobals.ActiveVessel) && this.part.IsPrimary (this.vessel.parts' this.ClassID) && alt < ActivationHeight && alt >= 0 && (timeSinceLanding + 5.0 > vessel.missionTime || Mathf.Abs (Convert.ToInt32 (vessel.verticalSpeed)) > 1) && TimeWarp.CurrentRateIndex == 0 && vessel.situation != Vessel.Situations.ORBITING && vessel.situation != Vessel.Situations.PRELAUNCH;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (skip <= 0) {  	skip = count;  	if (warnPos < 0) {  		warnPos = 0;  	}  	if (visualIndex == 1 || (visualIndex == 2 && GetAltitude () < DSThreshold))// visualType = speed  	 {  		warn = GetWarnStringSpeed ();  	}  	else if (visualIndex == 0)// visualType = distance  	 {  		warn = GetWarnStringDistance ();  	}  	if (vessel.verticalSpeed <= 0 || beepAscent) {  		DoSound ();  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (visualIndex == 1 || (visualIndex == 2 && GetAltitude () < DSThreshold))// visualType = speed   {  	warn = GetWarnStringSpeed ();  }  else if (visualIndex == 0)// visualType = distance   {  	warn = GetWarnStringDistance ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoProximityContent,The following statement contains a magic number: if (visualIndex != 3) {  	GUIStyle style = new GUIStyle (GUI.skin.textArea);  	style.normal.textColor = style.focused.textColor = style.hover.textColor = style.active.textColor = colour;  	style.alignment = TextAnchor.MiddleCenter;  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	GUILayout.Label (warn' style);  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed * -2 > alt && vessel.verticalSpeed > 5) {  	colour = Color.magenta;  }  else if (vessel.verticalSpeed * -5 > alt) {  	colour = Color.yellow;  }  else {  	colour = Color.green;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed * -2 > alt && vessel.verticalSpeed > 5) {  	colour = Color.magenta;  }  else if (vessel.verticalSpeed * -5 > alt) {  	colour = Color.yellow;  }  else {  	colour = Color.green;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed * -2 > alt && vessel.verticalSpeed > 5) {  	colour = Color.magenta;  }  else if (vessel.verticalSpeed * -5 > alt) {  	colour = Color.yellow;  }  else {  	colour = Color.green;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetColour,The following statement contains a magic number: if (vessel.verticalSpeed * -5 > alt) {  	colour = Color.yellow;  }  else {  	colour = Color.green;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (showsettings) {  	// Activation height  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Activation height: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight -= 500;  		if (ActivationHeight < 500) {  			ActivationHeight = 500;  		}  	}  	GUILayout.Label (ActivationHeight.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		ActivationHeight += 500;  		if (ActivationHeight > 10000) {  			ActivationHeight = 10000;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual type  	GUILayout.BeginHorizontal ();  	string cap = "Visual: " + visualType [visualIndex];  	cap = cap.Replace ("%"' DSThreshold.ToString ());  	if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  		visualIndex++;  		if (visualIndex == visualType.Length) {  			visualIndex = 0;  		}  		if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  		 {  			sizechange = true;  		}  	}  	GUILayout.EndHorizontal ();  	// Visual threshold subtype  	if (visualIndex == 2) {  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Distance / speed threshold: ");  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal (GUILayout.Width (200f));  		if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold -= 50;  			if (DSThreshold < 50) {  				DSThreshold = 50;  			}  		}  		GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  		if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  			DSThreshold += 50;  			if (DSThreshold > 2000) {  				DSThreshold = 2000;  			}  		}  		GUILayout.EndHorizontal ();  	}  	// Sound type  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Sound: " + beepType [beepIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		beepIndex++;  		if (beepIndex == beepType.Length) {  			beepIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep pitch   	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Pitch: " + pitchType [pitchIndex]' styleBtn' GUILayout.ExpandWidth (true))) {  		pitchIndex++;  		if (pitchIndex == pitchType.Length) {  			pitchIndex = 0;  		}  	}  	GUILayout.EndHorizontal ();  	// beep ascending  	GUILayout.BeginHorizontal ();  	if (GUILayout.Button ("Beep on ascent: " + beepAscent.ToString ()' styleBtn' GUILayout.ExpandWidth (true))) {  		beepAscent = !beepAscent;  	}  	GUILayout.EndHorizontal ();  	// beep length  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Beep length (1-20): ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength--;  		if (beepLength < 1) {  			beepLength = 1;  		}  		MakeBeep ();  	}  	GUILayout.Label (beepLength.ToString ()' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		beepLength++;  		if (beepLength > 20) {  			beepLength = 20;  		}  		MakeBeep ();  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500) {  		ActivationHeight = 500;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500) {  		ActivationHeight = 500;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight -= 500;  	if (ActivationHeight < 500) {  		ActivationHeight = 500;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight -= 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight < 500) {  	ActivationHeight = 500;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight < 500) {  	ActivationHeight = 500;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight = 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000) {  		ActivationHeight = 10000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000) {  		ActivationHeight = 10000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	ActivationHeight += 500;  	if (ActivationHeight > 10000) {  		ActivationHeight = 10000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight += 500;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight > 10000) {  	ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (ActivationHeight > 10000) {  	ActivationHeight = 10000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: ActivationHeight = 10000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  	visualIndex++;  	if (visualIndex == visualType.Length) {  		visualIndex = 0;  	}  	if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  	 {  		sizechange = true;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button (cap' styleBtn' GUILayout.ExpandWidth (true))) {  	visualIndex++;  	if (visualIndex == visualType.Length) {  		visualIndex = 0;  	}  	if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing  	 {  		sizechange = true;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing   {  	sizechange = true;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2 || visualIndex == 3)// change size due to threshold field appearing / disappearing   {  	sizechange = true;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (visualIndex == 2) {  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Distance / speed threshold: ");  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal (GUILayout.Width (200f));  	if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold -= 50;  		if (DSThreshold < 50) {  			DSThreshold = 50;  		}  	}  	GUILayout.Label (DSThreshold.ToString () + " m"' styleValue);  	if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  		DSThreshold += 50;  		if (DSThreshold > 2000) {  			DSThreshold = 2000;  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("-"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold -= 50;  	if (DSThreshold < 50) {  		DSThreshold = 50;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: DSThreshold -= 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 50;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (DSThreshold < 50) {  	DSThreshold = 50;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: DSThreshold = 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	DSThreshold += 50;  	if (DSThreshold > 2000) {  		DSThreshold = 2000;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: DSThreshold += 50;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (DSThreshold > 2000) {  	DSThreshold = 2000;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: DSThreshold = 2000;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	beepLength++;  	if (beepLength > 20) {  		beepLength = 20;  	}  	MakeBeep ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (GUILayout.Button ("+"' styleBtn' GUILayout.ExpandWidth (true))) {  	beepLength++;  	if (beepLength > 20) {  		beepLength = 20;  	}  	MakeBeep ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (beepLength > 20) {  	beepLength = 20;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: if (beepLength > 20) {  	beepLength = 20;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,ShowSettings,The following statement contains a magic number: beepLength = 20;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,MakeBeep,The following statement contains a magic number: beep = AudioClip.Create ("beepx"' beepLength * 512' 1' 44100' false' true' OnAudioRead' OnAudioSetPosition);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,MakeBeep,The following statement contains a magic number: beep = AudioClip.Create ("beepx"' beepLength * 512' 1' 44100' false' true' OnAudioRead' OnAudioSetPosition);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (vessel.verticalSpeed <= 0)// falling   {  	if (++warnPos >= warnstring.Length / 2) {  		warnPos = 0;  	}  }  else// rising   {  	if (--warnPos < 1) {  		warnPos = warnstring.Length / 2;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (vessel.verticalSpeed <= 0)// falling   {  	if (++warnPos >= warnstring.Length / 2) {  		warnPos = 0;  	}  }  else// rising   {  	if (--warnPos < 1) {  		warnPos = warnstring.Length / 2;  	}  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (++warnPos >= warnstring.Length / 2) {  	warnPos = 0;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: if (--warnPos < 1) {  	warnPos = warnstring.Length / 2;  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringSpeed,The following statement contains a magic number: warnPos = warnstring.Length / 2;  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringDistance,The following statement contains a magic number: warnPos = warnstring.Length / 2 - ((warnstring.Length / 2) * Convert.ToInt32 (vessel.GetHeightFromTerrain ()) / ActivationHeight);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,GetWarnStringDistance,The following statement contains a magic number: warnPos = warnstring.Length / 2 - ((warnstring.Length / 2) * Convert.ToInt32 (vessel.GetHeightFromTerrain ()) / ActivationHeight);  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: if (audioskip <= 0 && beepIndex != 3) {  	audioskip = 10;  	if (obj.audio.isPlaying) {  		obj.audio.Stop ();  	}  	obj.audio.Play ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: if (audioskip <= 0 && beepIndex != 3) {  	audioskip = 10;  	if (obj.audio.isPlaying) {  		obj.audio.Stop ();  	}  	obj.audio.Play ();  }  
Magic Number,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,DoSound,The following statement contains a magic number: audioskip = 10;  
Missing Default,Proximity,Proximity,C:\repos\Mushroog_KSP_Proximity\Proximity - Release 1.0\Proximity\Proximity.cs,OnAudioRead,The following switch statement is missing a default case: switch (beepIndex) {  case 0:  	// square  	while (count < data.Length) {  		//data[count++] = Mathf.Sign(Mathf.Sin(2 * Mathf.PI * actfrequency * position++ / sampleRate));  		data [count++] = Mathf.Sign (Mathf.Sin (6 * actfrequency * position++ / sampleRate));  	}  	break;  case 1:  	// saw  	while (count < data.Length) {  		data [count++] = Mathf.PingPong (actfrequency * position++ / sampleRate' 0.5f);  	}  	break;  case 2:  	// sine  	while (count < data.Length) {  		data [count++] = Mathf.Sin (2 * Mathf.PI * actfrequency * position++ / sampleRate);  	}  	break;  case 3:  	// shouldn't happen  	while (count < data.Length) {  		data [count++] = 0;  	}  	break;  }  
